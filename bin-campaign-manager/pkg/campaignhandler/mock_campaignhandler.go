// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package campaignhandler is a generated GoMock package.
package campaignhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	campaign "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/campaign"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
)

// MockCampaignHandler is a mock of CampaignHandler interface.
type MockCampaignHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignHandlerMockRecorder
}

// MockCampaignHandlerMockRecorder is the mock recorder for MockCampaignHandler.
type MockCampaignHandlerMockRecorder struct {
	mock *MockCampaignHandler
}

// NewMockCampaignHandler creates a new mock instance.
func NewMockCampaignHandler(ctrl *gomock.Controller) *MockCampaignHandler {
	mock := &MockCampaignHandler{ctrl: ctrl}
	mock.recorder = &MockCampaignHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignHandler) EXPECT() *MockCampaignHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCampaignHandler) Create(ctx context.Context, id, customerID uuid.UUID, campaignType campaign.Type, name, detail string, actions []action.Action, serviceLevel int, endHandle campaign.EndHandle, outplanID, outdialID, queueID, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, customerID, campaignType, name, detail, actions, serviceLevel, endHandle, outplanID, outdialID, queueID, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCampaignHandlerMockRecorder) Create(ctx, id, customerID, campaignType, name, detail, actions, serviceLevel, endHandle, outplanID, outdialID, queueID, nextCampaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCampaignHandler)(nil).Create), ctx, id, customerID, campaignType, name, detail, actions, serviceLevel, endHandle, outplanID, outdialID, queueID, nextCampaignID)
}

// Delete mocks base method.
func (m *MockCampaignHandler) Delete(ctx context.Context, id uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCampaignHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCampaignHandler)(nil).Delete), ctx, id)
}

// EventHandleActiveflowDeleted mocks base method.
func (m *MockCampaignHandler) EventHandleActiveflowDeleted(ctx context.Context, campaignID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandleActiveflowDeleted", ctx, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandleActiveflowDeleted indicates an expected call of EventHandleActiveflowDeleted.
func (mr *MockCampaignHandlerMockRecorder) EventHandleActiveflowDeleted(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandleActiveflowDeleted", reflect.TypeOf((*MockCampaignHandler)(nil).EventHandleActiveflowDeleted), ctx, campaignID)
}

// EventHandleReferenceCallHungup mocks base method.
func (m *MockCampaignHandler) EventHandleReferenceCallHungup(ctx context.Context, campaignID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandleReferenceCallHungup", ctx, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandleReferenceCallHungup indicates an expected call of EventHandleReferenceCallHungup.
func (mr *MockCampaignHandlerMockRecorder) EventHandleReferenceCallHungup(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandleReferenceCallHungup", reflect.TypeOf((*MockCampaignHandler)(nil).EventHandleReferenceCallHungup), ctx, campaignID)
}

// Execute mocks base method.
func (m *MockCampaignHandler) Execute(ctx context.Context, id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", ctx, id)
}

// Execute indicates an expected call of Execute.
func (mr *MockCampaignHandlerMockRecorder) Execute(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCampaignHandler)(nil).Execute), ctx, id)
}

// Get mocks base method.
func (m *MockCampaignHandler) Get(ctx context.Context, id uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCampaignHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCampaignHandler)(nil).Get), ctx, id)
}

// GetsByCustomerID mocks base method.
func (m *MockCampaignHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockCampaignHandlerMockRecorder) GetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockCampaignHandler)(nil).GetsByCustomerID), ctx, customerID, token, limit)
}

// UpdateActions mocks base method.
func (m *MockCampaignHandler) UpdateActions(ctx context.Context, id uuid.UUID, actions []action.Action) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActions", ctx, id, actions)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActions indicates an expected call of UpdateActions.
func (mr *MockCampaignHandlerMockRecorder) UpdateActions(ctx, id, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActions", reflect.TypeOf((*MockCampaignHandler)(nil).UpdateActions), ctx, id, actions)
}

// UpdateBasicInfo mocks base method.
func (m *MockCampaignHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, campaignType campaign.Type, serviceLevel int, endHandle campaign.EndHandle) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail, campaignType, serviceLevel, endHandle)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockCampaignHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail, campaignType, serviceLevel, endHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockCampaignHandler)(nil).UpdateBasicInfo), ctx, id, name, detail, campaignType, serviceLevel, endHandle)
}

// UpdateNextCampaignID mocks base method.
func (m *MockCampaignHandler) UpdateNextCampaignID(ctx context.Context, id, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNextCampaignID", ctx, id, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNextCampaignID indicates an expected call of UpdateNextCampaignID.
func (mr *MockCampaignHandlerMockRecorder) UpdateNextCampaignID(ctx, id, nextCampaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNextCampaignID", reflect.TypeOf((*MockCampaignHandler)(nil).UpdateNextCampaignID), ctx, id, nextCampaignID)
}

// UpdateResourceInfo mocks base method.
func (m *MockCampaignHandler) UpdateResourceInfo(ctx context.Context, id, outplanID, outdialID, queueID, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceInfo", ctx, id, outplanID, outdialID, queueID, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceInfo indicates an expected call of UpdateResourceInfo.
func (mr *MockCampaignHandlerMockRecorder) UpdateResourceInfo(ctx, id, outplanID, outdialID, queueID, nextCampaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceInfo", reflect.TypeOf((*MockCampaignHandler)(nil).UpdateResourceInfo), ctx, id, outplanID, outdialID, queueID, nextCampaignID)
}

// UpdateServiceLevel mocks base method.
func (m *MockCampaignHandler) UpdateServiceLevel(ctx context.Context, id uuid.UUID, serviceLevel int) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceLevel", ctx, id, serviceLevel)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceLevel indicates an expected call of UpdateServiceLevel.
func (mr *MockCampaignHandlerMockRecorder) UpdateServiceLevel(ctx, id, serviceLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceLevel", reflect.TypeOf((*MockCampaignHandler)(nil).UpdateServiceLevel), ctx, id, serviceLevel)
}

// UpdateStatus mocks base method.
func (m *MockCampaignHandler) UpdateStatus(ctx context.Context, id uuid.UUID, status campaign.Status) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCampaignHandlerMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCampaignHandler)(nil).UpdateStatus), ctx, id, status)
}
