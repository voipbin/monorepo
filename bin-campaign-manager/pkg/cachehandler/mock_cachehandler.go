// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	campaign "monorepo/bin-campaign-manager/models/campaign"
	campaigncall "monorepo/bin-campaign-manager/models/campaigncall"
	outplan "monorepo/bin-campaign-manager/models/outplan"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// CampaignGet mocks base method.
func (m *MockCacheHandler) CampaignGet(ctx context.Context, id uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignGet", ctx, id)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignGet indicates an expected call of CampaignGet.
func (mr *MockCacheHandlerMockRecorder) CampaignGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignGet", reflect.TypeOf((*MockCacheHandler)(nil).CampaignGet), ctx, id)
}

// CampaignSet mocks base method.
func (m *MockCacheHandler) CampaignSet(ctx context.Context, t *campaign.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignSet indicates an expected call of CampaignSet.
func (mr *MockCacheHandlerMockRecorder) CampaignSet(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignSet", reflect.TypeOf((*MockCacheHandler)(nil).CampaignSet), ctx, t)
}

// CampaigncallGet mocks base method.
func (m *MockCacheHandler) CampaigncallGet(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGet", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGet indicates an expected call of CampaigncallGet.
func (mr *MockCacheHandlerMockRecorder) CampaigncallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGet", reflect.TypeOf((*MockCacheHandler)(nil).CampaigncallGet), ctx, id)
}

// CampaigncallSet mocks base method.
func (m *MockCacheHandler) CampaigncallSet(ctx context.Context, t *campaigncall.Campaigncall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaigncallSet indicates an expected call of CampaigncallSet.
func (mr *MockCacheHandlerMockRecorder) CampaigncallSet(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallSet", reflect.TypeOf((*MockCacheHandler)(nil).CampaigncallSet), ctx, t)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// OutplanGet mocks base method.
func (m *MockCacheHandler) OutplanGet(ctx context.Context, id uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanGet", ctx, id)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanGet indicates an expected call of OutplanGet.
func (mr *MockCacheHandlerMockRecorder) OutplanGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanGet", reflect.TypeOf((*MockCacheHandler)(nil).OutplanGet), ctx, id)
}

// OutplanSet mocks base method.
func (m *MockCacheHandler) OutplanSet(ctx context.Context, t *outplan.Outplan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutplanSet indicates an expected call of OutplanSet.
func (mr *MockCacheHandlerMockRecorder) OutplanSet(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanSet", reflect.TypeOf((*MockCacheHandler)(nil).OutplanSet), ctx, t)
}
