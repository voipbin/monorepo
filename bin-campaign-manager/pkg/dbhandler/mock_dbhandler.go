// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_dbhandler.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	campaign "monorepo/bin-campaign-manager/models/campaign"
	campaigncall "monorepo/bin-campaign-manager/models/campaigncall"
	outplan "monorepo/bin-campaign-manager/models/outplan"
	address "monorepo/bin-common-handler/models/address"
	action "monorepo/bin-flow-manager/models/action"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// CampaignCreate mocks base method.
func (m *MockDBHandler) CampaignCreate(ctx context.Context, t *campaign.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignCreate indicates an expected call of CampaignCreate.
func (mr *MockDBHandlerMockRecorder) CampaignCreate(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignCreate", reflect.TypeOf((*MockDBHandler)(nil).CampaignCreate), ctx, t)
}

// CampaignDelete mocks base method.
func (m *MockDBHandler) CampaignDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignDelete indicates an expected call of CampaignDelete.
func (mr *MockDBHandlerMockRecorder) CampaignDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignDelete", reflect.TypeOf((*MockDBHandler)(nil).CampaignDelete), ctx, id)
}

// CampaignGet mocks base method.
func (m *MockDBHandler) CampaignGet(ctx context.Context, id uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignGet", ctx, id)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignGet indicates an expected call of CampaignGet.
func (mr *MockDBHandlerMockRecorder) CampaignGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignGet", reflect.TypeOf((*MockDBHandler)(nil).CampaignGet), ctx, id)
}

// CampaignGetsByCustomerID mocks base method.
func (m *MockDBHandler) CampaignGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignGetsByCustomerID indicates an expected call of CampaignGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) CampaignGetsByCustomerID(ctx, customerID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).CampaignGetsByCustomerID), ctx, customerID, token, limit)
}

// CampaignUpdateActions mocks base method.
func (m *MockDBHandler) CampaignUpdateActions(ctx context.Context, id uuid.UUID, actions []action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateActions", ctx, id, actions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateActions indicates an expected call of CampaignUpdateActions.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateActions(ctx, id, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateActions", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateActions), ctx, id, actions)
}

// CampaignUpdateBasicInfo mocks base method.
func (m *MockDBHandler) CampaignUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, campaignType campaign.Type, serviceLevel int, endHandle campaign.EndHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateBasicInfo", ctx, id, name, detail, campaignType, serviceLevel, endHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateBasicInfo indicates an expected call of CampaignUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateBasicInfo(ctx, id, name, detail, campaignType, serviceLevel, endHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateBasicInfo), ctx, id, name, detail, campaignType, serviceLevel, endHandle)
}

// CampaignUpdateEndHandle mocks base method.
func (m *MockDBHandler) CampaignUpdateEndHandle(ctx context.Context, id uuid.UUID, endHandle campaign.EndHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateEndHandle", ctx, id, endHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateEndHandle indicates an expected call of CampaignUpdateEndHandle.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateEndHandle(ctx, id, endHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateEndHandle", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateEndHandle), ctx, id, endHandle)
}

// CampaignUpdateExecute mocks base method.
func (m *MockDBHandler) CampaignUpdateExecute(ctx context.Context, id uuid.UUID, execute campaign.Execute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateExecute", ctx, id, execute)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateExecute indicates an expected call of CampaignUpdateExecute.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateExecute(ctx, id, execute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateExecute", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateExecute), ctx, id, execute)
}

// CampaignUpdateNextCampaignID mocks base method.
func (m *MockDBHandler) CampaignUpdateNextCampaignID(ctx context.Context, id, nextCampaignID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateNextCampaignID", ctx, id, nextCampaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateNextCampaignID indicates an expected call of CampaignUpdateNextCampaignID.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateNextCampaignID(ctx, id, nextCampaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateNextCampaignID", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateNextCampaignID), ctx, id, nextCampaignID)
}

// CampaignUpdateResourceInfo mocks base method.
func (m *MockDBHandler) CampaignUpdateResourceInfo(ctx context.Context, id, outplanID, outdialID, queueID, nextCampaignID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateResourceInfo", ctx, id, outplanID, outdialID, queueID, nextCampaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateResourceInfo indicates an expected call of CampaignUpdateResourceInfo.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateResourceInfo(ctx, id, outplanID, outdialID, queueID, nextCampaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateResourceInfo", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateResourceInfo), ctx, id, outplanID, outdialID, queueID, nextCampaignID)
}

// CampaignUpdateServiceLevel mocks base method.
func (m *MockDBHandler) CampaignUpdateServiceLevel(ctx context.Context, id uuid.UUID, serviceLevel int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateServiceLevel", ctx, id, serviceLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateServiceLevel indicates an expected call of CampaignUpdateServiceLevel.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateServiceLevel(ctx, id, serviceLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateServiceLevel", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateServiceLevel), ctx, id, serviceLevel)
}

// CampaignUpdateStatus mocks base method.
func (m *MockDBHandler) CampaignUpdateStatus(ctx context.Context, id uuid.UUID, status campaign.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateStatus indicates an expected call of CampaignUpdateStatus.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateStatus", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateStatus), ctx, id, status)
}

// CampaignUpdateStatusAndExecute mocks base method.
func (m *MockDBHandler) CampaignUpdateStatusAndExecute(ctx context.Context, id uuid.UUID, status campaign.Status, execute campaign.Execute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateStatusAndExecute", ctx, id, status, execute)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateStatusAndExecute indicates an expected call of CampaignUpdateStatusAndExecute.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateStatusAndExecute(ctx, id, status, execute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateStatusAndExecute", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateStatusAndExecute), ctx, id, status, execute)
}

// CampaignUpdateType mocks base method.
func (m *MockDBHandler) CampaignUpdateType(ctx context.Context, id uuid.UUID, campaignType campaign.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateType", ctx, id, campaignType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignUpdateType indicates an expected call of CampaignUpdateType.
func (mr *MockDBHandlerMockRecorder) CampaignUpdateType(ctx, id, campaignType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateType", reflect.TypeOf((*MockDBHandler)(nil).CampaignUpdateType), ctx, id, campaignType)
}

// CampaigncallCreate mocks base method.
func (m *MockDBHandler) CampaigncallCreate(ctx context.Context, t *campaigncall.Campaigncall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaigncallCreate indicates an expected call of CampaigncallCreate.
func (mr *MockDBHandlerMockRecorder) CampaigncallCreate(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallCreate", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallCreate), ctx, t)
}

// CampaigncallDelete mocks base method.
func (m *MockDBHandler) CampaigncallDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaigncallDelete indicates an expected call of CampaigncallDelete.
func (mr *MockDBHandlerMockRecorder) CampaigncallDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallDelete", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallDelete), ctx, id)
}

// CampaigncallGet mocks base method.
func (m *MockDBHandler) CampaigncallGet(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGet", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGet indicates an expected call of CampaigncallGet.
func (mr *MockDBHandlerMockRecorder) CampaigncallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGet", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallGet), ctx, id)
}

// CampaigncallGetByActiveflowID mocks base method.
func (m *MockDBHandler) CampaigncallGetByActiveflowID(ctx context.Context, activeflowID uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGetByActiveflowID", ctx, activeflowID)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGetByActiveflowID indicates an expected call of CampaigncallGetByActiveflowID.
func (mr *MockDBHandlerMockRecorder) CampaigncallGetByActiveflowID(ctx, activeflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGetByActiveflowID", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallGetByActiveflowID), ctx, activeflowID)
}

// CampaigncallGetByReferenceID mocks base method.
func (m *MockDBHandler) CampaigncallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGetByReferenceID indicates an expected call of CampaigncallGetByReferenceID.
func (mr *MockDBHandlerMockRecorder) CampaigncallGetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGetByReferenceID", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallGetByReferenceID), ctx, referenceID)
}

// CampaigncallGetsByCampaignID mocks base method.
func (m *MockDBHandler) CampaigncallGetsByCampaignID(ctx context.Context, campaignID uuid.UUID, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGetsByCampaignID", ctx, campaignID, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGetsByCampaignID indicates an expected call of CampaigncallGetsByCampaignID.
func (mr *MockDBHandlerMockRecorder) CampaigncallGetsByCampaignID(ctx, campaignID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGetsByCampaignID", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallGetsByCampaignID), ctx, campaignID, token, limit)
}

// CampaigncallGetsByCampaignIDAndStatus mocks base method.
func (m *MockDBHandler) CampaigncallGetsByCampaignIDAndStatus(ctx context.Context, campaignID uuid.UUID, status campaigncall.Status, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGetsByCampaignIDAndStatus", ctx, campaignID, status, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGetsByCampaignIDAndStatus indicates an expected call of CampaigncallGetsByCampaignIDAndStatus.
func (mr *MockDBHandlerMockRecorder) CampaigncallGetsByCampaignIDAndStatus(ctx, campaignID, status, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGetsByCampaignIDAndStatus", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallGetsByCampaignIDAndStatus), ctx, campaignID, status, token, limit)
}

// CampaigncallGetsByCustomerID mocks base method.
func (m *MockDBHandler) CampaigncallGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGetsByCustomerID indicates an expected call of CampaigncallGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) CampaigncallGetsByCustomerID(ctx, customerID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallGetsByCustomerID), ctx, customerID, token, limit)
}

// CampaigncallGetsOngoingByCampaignID mocks base method.
func (m *MockDBHandler) CampaigncallGetsOngoingByCampaignID(ctx context.Context, campaignID uuid.UUID, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGetsOngoingByCampaignID", ctx, campaignID, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGetsOngoingByCampaignID indicates an expected call of CampaigncallGetsOngoingByCampaignID.
func (mr *MockDBHandlerMockRecorder) CampaigncallGetsOngoingByCampaignID(ctx, campaignID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGetsOngoingByCampaignID", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallGetsOngoingByCampaignID), ctx, campaignID, token, limit)
}

// CampaigncallUpdateStatus mocks base method.
func (m *MockDBHandler) CampaigncallUpdateStatus(ctx context.Context, id uuid.UUID, status campaigncall.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaigncallUpdateStatus indicates an expected call of CampaigncallUpdateStatus.
func (mr *MockDBHandlerMockRecorder) CampaigncallUpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallUpdateStatus", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallUpdateStatus), ctx, id, status)
}

// CampaigncallUpdateStatusAndResult mocks base method.
func (m *MockDBHandler) CampaigncallUpdateStatusAndResult(ctx context.Context, id uuid.UUID, status campaigncall.Status, result campaigncall.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallUpdateStatusAndResult", ctx, id, status, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaigncallUpdateStatusAndResult indicates an expected call of CampaigncallUpdateStatusAndResult.
func (mr *MockDBHandlerMockRecorder) CampaigncallUpdateStatusAndResult(ctx, id, status, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallUpdateStatusAndResult", reflect.TypeOf((*MockDBHandler)(nil).CampaigncallUpdateStatusAndResult), ctx, id, status, result)
}

// OutplanCreate mocks base method.
func (m *MockDBHandler) OutplanCreate(ctx context.Context, t *outplan.Outplan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutplanCreate indicates an expected call of OutplanCreate.
func (mr *MockDBHandlerMockRecorder) OutplanCreate(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanCreate", reflect.TypeOf((*MockDBHandler)(nil).OutplanCreate), ctx, t)
}

// OutplanDelete mocks base method.
func (m *MockDBHandler) OutplanDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutplanDelete indicates an expected call of OutplanDelete.
func (mr *MockDBHandlerMockRecorder) OutplanDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanDelete", reflect.TypeOf((*MockDBHandler)(nil).OutplanDelete), ctx, id)
}

// OutplanGet mocks base method.
func (m *MockDBHandler) OutplanGet(ctx context.Context, id uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanGet", ctx, id)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanGet indicates an expected call of OutplanGet.
func (mr *MockDBHandlerMockRecorder) OutplanGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanGet", reflect.TypeOf((*MockDBHandler)(nil).OutplanGet), ctx, id)
}

// OutplanGetsByCustomerID mocks base method.
func (m *MockDBHandler) OutplanGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanGetsByCustomerID indicates an expected call of OutplanGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) OutplanGetsByCustomerID(ctx, customerID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).OutplanGetsByCustomerID), ctx, customerID, token, limit)
}

// OutplanUpdateBasicInfo mocks base method.
func (m *MockDBHandler) OutplanUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutplanUpdateBasicInfo indicates an expected call of OutplanUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) OutplanUpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).OutplanUpdateBasicInfo), ctx, id, name, detail)
}

// OutplanUpdateDialInfo mocks base method.
func (m *MockDBHandler) OutplanUpdateDialInfo(ctx context.Context, id uuid.UUID, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanUpdateDialInfo", ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutplanUpdateDialInfo indicates an expected call of OutplanUpdateDialInfo.
func (mr *MockDBHandlerMockRecorder) OutplanUpdateDialInfo(ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanUpdateDialInfo", reflect.TypeOf((*MockDBHandler)(nil).OutplanUpdateDialInfo), ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}
