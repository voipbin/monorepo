// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package outplanhandler is a generated GoMock package.
package outplanhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	outplan "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/outplan"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
)

// MockOutplanHandler is a mock of OutplanHandler interface.
type MockOutplanHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOutplanHandlerMockRecorder
}

// MockOutplanHandlerMockRecorder is the mock recorder for MockOutplanHandler.
type MockOutplanHandlerMockRecorder struct {
	mock *MockOutplanHandler
}

// NewMockOutplanHandler creates a new mock instance.
func NewMockOutplanHandler(ctrl *gomock.Controller) *MockOutplanHandler {
	mock := &MockOutplanHandler{ctrl: ctrl}
	mock.recorder = &MockOutplanHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutplanHandler) EXPECT() *MockOutplanHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOutplanHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOutplanHandlerMockRecorder) Create(ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOutplanHandler)(nil).Create), ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}

// Delete mocks base method.
func (m *MockOutplanHandler) Delete(ctx context.Context, id uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOutplanHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOutplanHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockOutplanHandler) Get(ctx context.Context, id uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOutplanHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOutplanHandler)(nil).Get), ctx, id)
}

// GetsByCustomerID mocks base method.
func (m *MockOutplanHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockOutplanHandlerMockRecorder) GetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockOutplanHandler)(nil).GetsByCustomerID), ctx, customerID, token, limit)
}

// UpdateBasicInfo mocks base method.
func (m *MockOutplanHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockOutplanHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockOutplanHandler)(nil).UpdateBasicInfo), ctx, id, name, detail)
}

// UpdateDialInfo mocks base method.
func (m *MockOutplanHandler) UpdateDialInfo(ctx context.Context, id uuid.UUID, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDialInfo", ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDialInfo indicates an expected call of UpdateDialInfo.
func (mr *MockOutplanHandlerMockRecorder) UpdateDialInfo(ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDialInfo", reflect.TypeOf((*MockOutplanHandler)(nil).UpdateDialInfo), ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}
