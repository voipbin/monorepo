// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package campaigncallhandler -destination ./mock_campaigncallhandler.go -source main.go -build_flags=-mod=mod
//

// Package campaigncallhandler is a generated GoMock package.
package campaigncallhandler

import (
	context "context"
	call "monorepo/bin-call-manager/models/call"
	campaigncall "monorepo/bin-campaign-manager/models/campaigncall"
	address "monorepo/bin-common-handler/models/address"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaigncallHandler is a mock of CampaigncallHandler interface.
type MockCampaigncallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCampaigncallHandlerMockRecorder
	isgomock struct{}
}

// MockCampaigncallHandlerMockRecorder is the mock recorder for MockCampaigncallHandler.
type MockCampaigncallHandlerMockRecorder struct {
	mock *MockCampaigncallHandler
}

// NewMockCampaigncallHandler creates a new mock instance.
func NewMockCampaigncallHandler(ctrl *gomock.Controller) *MockCampaigncallHandler {
	mock := &MockCampaigncallHandler{ctrl: ctrl}
	mock.recorder = &MockCampaigncallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaigncallHandler) EXPECT() *MockCampaigncallHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCampaigncallHandler) Create(ctx context.Context, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID, flowID uuid.UUID, referenceType campaigncall.ReferenceType, referenceID uuid.UUID, source, destination *address.Address, destinationIndex, tryCount int) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID, flowID, referenceType, referenceID, source, destination, destinationIndex, tryCount)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCampaigncallHandlerMockRecorder) Create(ctx, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID, flowID, referenceType, referenceID, source, destination, destinationIndex, tryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCampaigncallHandler)(nil).Create), ctx, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID, flowID, referenceType, referenceID, source, destination, destinationIndex, tryCount)
}

// Delete mocks base method.
func (m *MockCampaigncallHandler) Delete(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCampaigncallHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCampaigncallHandler)(nil).Delete), ctx, id)
}

// Done mocks base method.
func (m *MockCampaigncallHandler) Done(ctx context.Context, id uuid.UUID, result campaigncall.Result) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", ctx, id, result)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Done indicates an expected call of Done.
func (mr *MockCampaigncallHandlerMockRecorder) Done(ctx, id, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockCampaigncallHandler)(nil).Done), ctx, id, result)
}

// EventHandleActiveflowDeleted mocks base method.
func (m *MockCampaigncallHandler) EventHandleActiveflowDeleted(ctx context.Context, cc *campaigncall.Campaigncall) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandleActiveflowDeleted", ctx, cc)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventHandleActiveflowDeleted indicates an expected call of EventHandleActiveflowDeleted.
func (mr *MockCampaigncallHandlerMockRecorder) EventHandleActiveflowDeleted(ctx, cc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandleActiveflowDeleted", reflect.TypeOf((*MockCampaigncallHandler)(nil).EventHandleActiveflowDeleted), ctx, cc)
}

// EventHandleReferenceCallHungup mocks base method.
func (m *MockCampaigncallHandler) EventHandleReferenceCallHungup(ctx context.Context, c *call.Call, cc *campaigncall.Campaigncall) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandleReferenceCallHungup", ctx, c, cc)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventHandleReferenceCallHungup indicates an expected call of EventHandleReferenceCallHungup.
func (mr *MockCampaigncallHandlerMockRecorder) EventHandleReferenceCallHungup(ctx, c, cc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandleReferenceCallHungup", reflect.TypeOf((*MockCampaigncallHandler)(nil).EventHandleReferenceCallHungup), ctx, c, cc)
}

// Get mocks base method.
func (m *MockCampaigncallHandler) Get(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCampaigncallHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCampaigncallHandler)(nil).Get), ctx, id)
}

// GetByActiveflowID mocks base method.
func (m *MockCampaigncallHandler) GetByActiveflowID(ctx context.Context, activeflowID uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByActiveflowID", ctx, activeflowID)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByActiveflowID indicates an expected call of GetByActiveflowID.
func (mr *MockCampaigncallHandlerMockRecorder) GetByActiveflowID(ctx, activeflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByActiveflowID", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetByActiveflowID), ctx, activeflowID)
}

// GetByReferenceID mocks base method.
func (m *MockCampaigncallHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockCampaigncallHandlerMockRecorder) GetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// GetsByCampaignID mocks base method.
func (m *MockCampaigncallHandler) GetsByCampaignID(ctx context.Context, campaignID uuid.UUID, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCampaignID", ctx, campaignID, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCampaignID indicates an expected call of GetsByCampaignID.
func (mr *MockCampaigncallHandlerMockRecorder) GetsByCampaignID(ctx, campaignID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCampaignID", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetsByCampaignID), ctx, campaignID, token, limit)
}

// GetsByCampaignIDAndStatus mocks base method.
func (m *MockCampaigncallHandler) GetsByCampaignIDAndStatus(ctx context.Context, campaignID uuid.UUID, status campaigncall.Status, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCampaignIDAndStatus", ctx, campaignID, status, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCampaignIDAndStatus indicates an expected call of GetsByCampaignIDAndStatus.
func (mr *MockCampaigncallHandlerMockRecorder) GetsByCampaignIDAndStatus(ctx, campaignID, status, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCampaignIDAndStatus", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetsByCampaignIDAndStatus), ctx, campaignID, status, token, limit)
}

// GetsByCustomerID mocks base method.
func (m *MockCampaigncallHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockCampaigncallHandlerMockRecorder) GetsByCustomerID(ctx, customerID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetsByCustomerID), ctx, customerID, token, limit)
}

// GetsOngoingByCampaignID mocks base method.
func (m *MockCampaigncallHandler) GetsOngoingByCampaignID(ctx context.Context, campaignID uuid.UUID, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsOngoingByCampaignID", ctx, campaignID, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsOngoingByCampaignID indicates an expected call of GetsOngoingByCampaignID.
func (mr *MockCampaigncallHandlerMockRecorder) GetsOngoingByCampaignID(ctx, campaignID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsOngoingByCampaignID", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetsOngoingByCampaignID), ctx, campaignID, token, limit)
}

// Progressing mocks base method.
func (m *MockCampaigncallHandler) Progressing(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progressing", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progressing indicates an expected call of Progressing.
func (mr *MockCampaigncallHandlerMockRecorder) Progressing(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progressing", reflect.TypeOf((*MockCampaigncallHandler)(nil).Progressing), ctx, id)
}
