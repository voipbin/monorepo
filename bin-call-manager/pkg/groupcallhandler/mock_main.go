// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package groupcallhandler is a generated GoMock package.
package groupcallhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	groupcall "gitlab.com/voipbin/bin-manager/call-manager.git/models/groupcall"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
	customer "gitlab.com/voipbin/bin-manager/customer-manager.git/models/customer"
)

// MockGroupcallHandler is a mock of GroupcallHandler interface.
type MockGroupcallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGroupcallHandlerMockRecorder
}

// MockGroupcallHandlerMockRecorder is the mock recorder for MockGroupcallHandler.
type MockGroupcallHandlerMockRecorder struct {
	mock *MockGroupcallHandler
}

// NewMockGroupcallHandler creates a new mock instance.
func NewMockGroupcallHandler(ctrl *gomock.Controller) *MockGroupcallHandler {
	mock := &MockGroupcallHandler{ctrl: ctrl}
	mock.recorder = &MockGroupcallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupcallHandler) EXPECT() *MockGroupcallHandlerMockRecorder {
	return m.recorder
}

// AnswerCall mocks base method.
func (m *MockGroupcallHandler) AnswerCall(ctx context.Context, groupcallID, answerCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerCall", ctx, groupcallID, answerCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnswerCall indicates an expected call of AnswerCall.
func (mr *MockGroupcallHandlerMockRecorder) AnswerCall(ctx, groupcallID, answerCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerCall", reflect.TypeOf((*MockGroupcallHandler)(nil).AnswerCall), ctx, groupcallID, answerCallID)
}

// AnswerGroupcall mocks base method.
func (m *MockGroupcallHandler) AnswerGroupcall(ctx context.Context, id, answerGroupcallID uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerGroupcall", ctx, id, answerGroupcallID)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerGroupcall indicates an expected call of AnswerGroupcall.
func (mr *MockGroupcallHandlerMockRecorder) AnswerGroupcall(ctx, id, answerGroupcallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerGroupcall", reflect.TypeOf((*MockGroupcallHandler)(nil).AnswerGroupcall), ctx, id, answerGroupcallID)
}

// Delete mocks base method.
func (m *MockGroupcallHandler) Delete(ctx context.Context, id uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupcallHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupcallHandler)(nil).Delete), ctx, id)
}

// EventCUCustomerDeleted mocks base method.
func (m *MockGroupcallHandler) EventCUCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCUCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCUCustomerDeleted indicates an expected call of EventCUCustomerDeleted.
func (mr *MockGroupcallHandlerMockRecorder) EventCUCustomerDeleted(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCUCustomerDeleted", reflect.TypeOf((*MockGroupcallHandler)(nil).EventCUCustomerDeleted), ctx, cu)
}

// Get mocks base method.
func (m *MockGroupcallHandler) Get(ctx context.Context, id uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupcallHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupcallHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockGroupcallHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockGroupcallHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockGroupcallHandler)(nil).Gets), ctx, size, token, filters)
}

// Hangingup mocks base method.
func (m *MockGroupcallHandler) Hangingup(ctx context.Context, id uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hangingup", ctx, id)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hangingup indicates an expected call of Hangingup.
func (mr *MockGroupcallHandlerMockRecorder) Hangingup(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hangingup", reflect.TypeOf((*MockGroupcallHandler)(nil).Hangingup), ctx, id)
}

// HangupCall mocks base method.
func (m *MockGroupcallHandler) HangupCall(ctx context.Context, id uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangupCall", ctx, id)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HangupCall indicates an expected call of HangupCall.
func (mr *MockGroupcallHandlerMockRecorder) HangupCall(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangupCall", reflect.TypeOf((*MockGroupcallHandler)(nil).HangupCall), ctx, id)
}

// HangupGroupcall mocks base method.
func (m *MockGroupcallHandler) HangupGroupcall(ctx context.Context, id uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangupGroupcall", ctx, id)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HangupGroupcall indicates an expected call of HangupGroupcall.
func (mr *MockGroupcallHandlerMockRecorder) HangupGroupcall(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangupGroupcall", reflect.TypeOf((*MockGroupcallHandler)(nil).HangupGroupcall), ctx, id)
}

// IsGroupcallTypeAddress mocks base method.
func (m *MockGroupcallHandler) IsGroupcallTypeAddress(destination *address.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGroupcallTypeAddress", destination)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGroupcallTypeAddress indicates an expected call of IsGroupcallTypeAddress.
func (mr *MockGroupcallHandlerMockRecorder) IsGroupcallTypeAddress(destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGroupcallTypeAddress", reflect.TypeOf((*MockGroupcallHandler)(nil).IsGroupcallTypeAddress), destination)
}

// Start mocks base method.
func (m *MockGroupcallHandler) Start(ctx context.Context, id, customerID, flowID uuid.UUID, source *address.Address, destinations []address.Address, masterCallID, masterGroupcallID uuid.UUID, ringMethod groupcall.RingMethod, answerMethod groupcall.AnswerMethod) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, id, customerID, flowID, source, destinations, masterCallID, masterGroupcallID, ringMethod, answerMethod)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockGroupcallHandlerMockRecorder) Start(ctx, id, customerID, flowID, source, destinations, masterCallID, masterGroupcallID, ringMethod, answerMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGroupcallHandler)(nil).Start), ctx, id, customerID, flowID, source, destinations, masterCallID, masterGroupcallID, ringMethod, answerMethod)
}

// UpdateAnswerCallID mocks base method.
func (m *MockGroupcallHandler) UpdateAnswerCallID(ctx context.Context, id, callID uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswerCallID", ctx, id, callID)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswerCallID indicates an expected call of UpdateAnswerCallID.
func (mr *MockGroupcallHandlerMockRecorder) UpdateAnswerCallID(ctx, id, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswerCallID", reflect.TypeOf((*MockGroupcallHandler)(nil).UpdateAnswerCallID), ctx, id, callID)
}
