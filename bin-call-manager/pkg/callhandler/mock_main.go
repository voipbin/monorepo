// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package callhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package callhandler is a generated GoMock package.
package callhandler

import (
	context "context"
	bridge "monorepo/bin-call-manager/models/bridge"
	call "monorepo/bin-call-manager/models/call"
	channel "monorepo/bin-call-manager/models/channel"
	externalmedia "monorepo/bin-call-manager/models/externalmedia"
	groupcall "monorepo/bin-call-manager/models/groupcall"
	recording "monorepo/bin-call-manager/models/recording"
	address "monorepo/bin-common-handler/models/address"
	customer "monorepo/bin-customer-manager/models/customer"
	action "monorepo/bin-flow-manager/models/action"
	activeflow "monorepo/bin-flow-manager/models/activeflow"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCallHandler is a mock of CallHandler interface.
type MockCallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCallHandlerMockRecorder
	isgomock struct{}
}

// MockCallHandlerMockRecorder is the mock recorder for MockCallHandler.
type MockCallHandlerMockRecorder struct {
	mock *MockCallHandler
}

// NewMockCallHandler creates a new mock instance.
func NewMockCallHandler(ctrl *gomock.Controller) *MockCallHandler {
	mock := &MockCallHandler{ctrl: ctrl}
	mock.recorder = &MockCallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallHandler) EXPECT() *MockCallHandlerMockRecorder {
	return m.recorder
}

// ARIChannelDestroyed mocks base method.
func (m *MockCallHandler) ARIChannelDestroyed(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelDestroyed", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelDestroyed indicates an expected call of ARIChannelDestroyed.
func (mr *MockCallHandlerMockRecorder) ARIChannelDestroyed(ctx, cn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelDestroyed", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelDestroyed), ctx, cn)
}

// ARIChannelDtmfReceived mocks base method.
func (m *MockCallHandler) ARIChannelDtmfReceived(ctx context.Context, cn *channel.Channel, digit string, duration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelDtmfReceived", ctx, cn, digit, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelDtmfReceived indicates an expected call of ARIChannelDtmfReceived.
func (mr *MockCallHandlerMockRecorder) ARIChannelDtmfReceived(ctx, cn, digit, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelDtmfReceived", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelDtmfReceived), ctx, cn, digit, duration)
}

// ARIChannelLeftBridge mocks base method.
func (m *MockCallHandler) ARIChannelLeftBridge(ctx context.Context, cn *channel.Channel, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelLeftBridge", ctx, cn, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelLeftBridge indicates an expected call of ARIChannelLeftBridge.
func (mr *MockCallHandlerMockRecorder) ARIChannelLeftBridge(ctx, cn, br any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelLeftBridge", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelLeftBridge), ctx, cn, br)
}

// ARIChannelStateChange mocks base method.
func (m *MockCallHandler) ARIChannelStateChange(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelStateChange", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelStateChange indicates an expected call of ARIChannelStateChange.
func (mr *MockCallHandlerMockRecorder) ARIChannelStateChange(ctx, cn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelStateChange", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelStateChange), ctx, cn)
}

// ARIPlaybackFinished mocks base method.
func (m *MockCallHandler) ARIPlaybackFinished(ctx context.Context, cn *channel.Channel, playbackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIPlaybackFinished", ctx, cn, playbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIPlaybackFinished indicates an expected call of ARIPlaybackFinished.
func (mr *MockCallHandlerMockRecorder) ARIPlaybackFinished(ctx, cn, playbackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIPlaybackFinished", reflect.TypeOf((*MockCallHandler)(nil).ARIPlaybackFinished), ctx, cn, playbackID)
}

// ARIStasisStart mocks base method.
func (m *MockCallHandler) ARIStasisStart(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIStasisStart", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIStasisStart indicates an expected call of ARIStasisStart.
func (mr *MockCallHandlerMockRecorder) ARIStasisStart(ctx, cn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIStasisStart", reflect.TypeOf((*MockCallHandler)(nil).ARIStasisStart), ctx, cn)
}

// ActionNext mocks base method.
func (m *MockCallHandler) ActionNext(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionNext", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionNext indicates an expected call of ActionNext.
func (mr *MockCallHandlerMockRecorder) ActionNext(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionNext", reflect.TypeOf((*MockCallHandler)(nil).ActionNext), ctx, c)
}

// ActionNextForce mocks base method.
func (m *MockCallHandler) ActionNextForce(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionNextForce", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionNextForce indicates an expected call of ActionNextForce.
func (mr *MockCallHandlerMockRecorder) ActionNextForce(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionNextForce", reflect.TypeOf((*MockCallHandler)(nil).ActionNextForce), ctx, c)
}

// ActionTimeout mocks base method.
func (m *MockCallHandler) ActionTimeout(ctx context.Context, callID uuid.UUID, a *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionTimeout", ctx, callID, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionTimeout indicates an expected call of ActionTimeout.
func (mr *MockCallHandlerMockRecorder) ActionTimeout(ctx, callID, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionTimeout", reflect.TypeOf((*MockCallHandler)(nil).ActionTimeout), ctx, callID, a)
}

// ChainedCallIDAdd mocks base method.
func (m *MockCallHandler) ChainedCallIDAdd(ctx context.Context, id, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainedCallIDAdd", ctx, id, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainedCallIDAdd indicates an expected call of ChainedCallIDAdd.
func (mr *MockCallHandlerMockRecorder) ChainedCallIDAdd(ctx, id, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainedCallIDAdd", reflect.TypeOf((*MockCallHandler)(nil).ChainedCallIDAdd), ctx, id, chainedCallID)
}

// ChainedCallIDRemove mocks base method.
func (m *MockCallHandler) ChainedCallIDRemove(ctx context.Context, id, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainedCallIDRemove", ctx, id, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainedCallIDRemove indicates an expected call of ChainedCallIDRemove.
func (mr *MockCallHandlerMockRecorder) ChainedCallIDRemove(ctx, id, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainedCallIDRemove", reflect.TypeOf((*MockCallHandler)(nil).ChainedCallIDRemove), ctx, id, chainedCallID)
}

// CreateCallOutgoing mocks base method.
func (m *MockCallHandler) CreateCallOutgoing(ctx context.Context, id, customerID, flowID, activeflowID, masterCallID, groupcallID uuid.UUID, source, destination address.Address, earlyExecution, connect bool) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallOutgoing", ctx, id, customerID, flowID, activeflowID, masterCallID, groupcallID, source, destination, earlyExecution, connect)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallOutgoing indicates an expected call of CreateCallOutgoing.
func (mr *MockCallHandlerMockRecorder) CreateCallOutgoing(ctx, id, customerID, flowID, activeflowID, masterCallID, groupcallID, source, destination, earlyExecution, connect any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallOutgoing", reflect.TypeOf((*MockCallHandler)(nil).CreateCallOutgoing), ctx, id, customerID, flowID, activeflowID, masterCallID, groupcallID, source, destination, earlyExecution, connect)
}

// CreateCallsOutgoing mocks base method.
func (m *MockCallHandler) CreateCallsOutgoing(ctx context.Context, customerID, flowID, masterCallID uuid.UUID, source address.Address, destinations []address.Address, earlyExecution, connect bool) ([]*call.Call, []*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallsOutgoing", ctx, customerID, flowID, masterCallID, source, destinations, earlyExecution, connect)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].([]*groupcall.Groupcall)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCallsOutgoing indicates an expected call of CreateCallsOutgoing.
func (mr *MockCallHandlerMockRecorder) CreateCallsOutgoing(ctx, customerID, flowID, masterCallID, source, destinations, earlyExecution, connect any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallsOutgoing", reflect.TypeOf((*MockCallHandler)(nil).CreateCallsOutgoing), ctx, customerID, flowID, masterCallID, source, destinations, earlyExecution, connect)
}

// Delete mocks base method.
func (m *MockCallHandler) Delete(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCallHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCallHandler)(nil).Delete), ctx, id)
}

// DigitsGet mocks base method.
func (m *MockCallHandler) DigitsGet(ctx context.Context, id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DigitsGet", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DigitsGet indicates an expected call of DigitsGet.
func (mr *MockCallHandlerMockRecorder) DigitsGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DigitsGet", reflect.TypeOf((*MockCallHandler)(nil).DigitsGet), ctx, id)
}

// DigitsSet mocks base method.
func (m *MockCallHandler) DigitsSet(ctx context.Context, id uuid.UUID, digits string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DigitsSet", ctx, id, digits)
	ret0, _ := ret[0].(error)
	return ret0
}

// DigitsSet indicates an expected call of DigitsSet.
func (mr *MockCallHandlerMockRecorder) DigitsSet(ctx, id, digits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DigitsSet", reflect.TypeOf((*MockCallHandler)(nil).DigitsSet), ctx, id, digits)
}

// EventCUCustomerDeleted mocks base method.
func (m *MockCallHandler) EventCUCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCUCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCUCustomerDeleted indicates an expected call of EventCUCustomerDeleted.
func (mr *MockCallHandlerMockRecorder) EventCUCustomerDeleted(ctx, cu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCUCustomerDeleted", reflect.TypeOf((*MockCallHandler)(nil).EventCUCustomerDeleted), ctx, cu)
}

// EventFMActiveflowUpdated mocks base method.
func (m *MockCallHandler) EventFMActiveflowUpdated(ctx context.Context, a *activeflow.Activeflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventFMActiveflowUpdated", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventFMActiveflowUpdated indicates an expected call of EventFMActiveflowUpdated.
func (mr *MockCallHandlerMockRecorder) EventFMActiveflowUpdated(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventFMActiveflowUpdated", reflect.TypeOf((*MockCallHandler)(nil).EventFMActiveflowUpdated), ctx, a)
}

// ExternalMediaStart mocks base method.
func (m *MockCallHandler) ExternalMediaStart(ctx context.Context, id, externalMediaID uuid.UUID, externalHost string, encapsulation externalmedia.Encapsulation, transport externalmedia.Transport, connectionType, format, direction string) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaStart", ctx, id, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaStart indicates an expected call of ExternalMediaStart.
func (mr *MockCallHandlerMockRecorder) ExternalMediaStart(ctx, id, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaStart", reflect.TypeOf((*MockCallHandler)(nil).ExternalMediaStart), ctx, id, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction)
}

// ExternalMediaStop mocks base method.
func (m *MockCallHandler) ExternalMediaStop(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaStop", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaStop indicates an expected call of ExternalMediaStop.
func (mr *MockCallHandlerMockRecorder) ExternalMediaStop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaStop", reflect.TypeOf((*MockCallHandler)(nil).ExternalMediaStop), ctx, id)
}

// Get mocks base method.
func (m *MockCallHandler) Get(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCallHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCallHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockCallHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockCallHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockCallHandler)(nil).Gets), ctx, size, token, filters)
}

// HangingUp mocks base method.
func (m *MockCallHandler) HangingUp(ctx context.Context, id uuid.UUID, reason call.HangupReason) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangingUp", ctx, id, reason)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HangingUp indicates an expected call of HangingUp.
func (mr *MockCallHandlerMockRecorder) HangingUp(ctx, id, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangingUp", reflect.TypeOf((*MockCallHandler)(nil).HangingUp), ctx, id, reason)
}

// Hangup mocks base method.
func (m *MockCallHandler) Hangup(ctx context.Context, cn *channel.Channel) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hangup", ctx, cn)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hangup indicates an expected call of Hangup.
func (mr *MockCallHandlerMockRecorder) Hangup(ctx, cn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hangup", reflect.TypeOf((*MockCallHandler)(nil).Hangup), ctx, cn)
}

// HealthCheck mocks base method.
func (m *MockCallHandler) HealthCheck(ctx context.Context, id uuid.UUID, retryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", ctx, id, retryCount)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockCallHandlerMockRecorder) HealthCheck(ctx, id, retryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockCallHandler)(nil).HealthCheck), ctx, id, retryCount)
}

// HoldOff mocks base method.
func (m *MockCallHandler) HoldOff(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldOff", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HoldOff indicates an expected call of HoldOff.
func (mr *MockCallHandlerMockRecorder) HoldOff(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldOff", reflect.TypeOf((*MockCallHandler)(nil).HoldOff), ctx, id)
}

// HoldOn mocks base method.
func (m *MockCallHandler) HoldOn(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldOn", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HoldOn indicates an expected call of HoldOn.
func (mr *MockCallHandlerMockRecorder) HoldOn(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldOn", reflect.TypeOf((*MockCallHandler)(nil).HoldOn), ctx, id)
}

// MOHOff mocks base method.
func (m *MockCallHandler) MOHOff(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MOHOff", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MOHOff indicates an expected call of MOHOff.
func (mr *MockCallHandlerMockRecorder) MOHOff(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MOHOff", reflect.TypeOf((*MockCallHandler)(nil).MOHOff), ctx, id)
}

// MOHOn mocks base method.
func (m *MockCallHandler) MOHOn(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MOHOn", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MOHOn indicates an expected call of MOHOn.
func (mr *MockCallHandlerMockRecorder) MOHOn(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MOHOn", reflect.TypeOf((*MockCallHandler)(nil).MOHOn), ctx, id)
}

// MediaStop mocks base method.
func (m *MockCallHandler) MediaStop(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MediaStop", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MediaStop indicates an expected call of MediaStop.
func (mr *MockCallHandlerMockRecorder) MediaStop(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MediaStop", reflect.TypeOf((*MockCallHandler)(nil).MediaStop), ctx, callID)
}

// MuteOff mocks base method.
func (m *MockCallHandler) MuteOff(ctx context.Context, id uuid.UUID, direction call.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteOff", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// MuteOff indicates an expected call of MuteOff.
func (mr *MockCallHandlerMockRecorder) MuteOff(ctx, id, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteOff", reflect.TypeOf((*MockCallHandler)(nil).MuteOff), ctx, id, direction)
}

// MuteOn mocks base method.
func (m *MockCallHandler) MuteOn(ctx context.Context, id uuid.UUID, direction call.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteOn", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// MuteOn indicates an expected call of MuteOn.
func (mr *MockCallHandlerMockRecorder) MuteOn(ctx, id, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteOn", reflect.TypeOf((*MockCallHandler)(nil).MuteOn), ctx, id, direction)
}

// Play mocks base method.
func (m *MockCallHandler) Play(ctx context.Context, callID uuid.UUID, runNext bool, urls []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Play", ctx, callID, runNext, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// Play indicates an expected call of Play.
func (mr *MockCallHandlerMockRecorder) Play(ctx, callID, runNext, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Play", reflect.TypeOf((*MockCallHandler)(nil).Play), ctx, callID, runNext, urls)
}

// RecordingStart mocks base method.
func (m *MockCallHandler) RecordingStart(ctx context.Context, id uuid.UUID, format recording.Format, endOfSilence int, endOfKey string, duration int) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingStart", ctx, id, format, endOfSilence, endOfKey, duration)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingStart indicates an expected call of RecordingStart.
func (mr *MockCallHandlerMockRecorder) RecordingStart(ctx, id, format, endOfSilence, endOfKey, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingStart", reflect.TypeOf((*MockCallHandler)(nil).RecordingStart), ctx, id, format, endOfSilence, endOfKey, duration)
}

// RecordingStop mocks base method.
func (m *MockCallHandler) RecordingStop(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingStop", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingStop indicates an expected call of RecordingStop.
func (mr *MockCallHandlerMockRecorder) RecordingStop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingStop", reflect.TypeOf((*MockCallHandler)(nil).RecordingStop), ctx, id)
}

// SilenceOff mocks base method.
func (m *MockCallHandler) SilenceOff(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilenceOff", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SilenceOff indicates an expected call of SilenceOff.
func (mr *MockCallHandlerMockRecorder) SilenceOff(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilenceOff", reflect.TypeOf((*MockCallHandler)(nil).SilenceOff), ctx, id)
}

// SilenceOn mocks base method.
func (m *MockCallHandler) SilenceOn(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilenceOn", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SilenceOn indicates an expected call of SilenceOn.
func (mr *MockCallHandlerMockRecorder) SilenceOn(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilenceOn", reflect.TypeOf((*MockCallHandler)(nil).SilenceOn), ctx, id)
}

// Start mocks base method.
func (m *MockCallHandler) Start(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCallHandlerMockRecorder) Start(ctx, cn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCallHandler)(nil).Start), ctx, cn)
}

// Talk mocks base method.
func (m *MockCallHandler) Talk(ctx context.Context, callID uuid.UUID, runNext bool, text, gender, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Talk", ctx, callID, runNext, text, gender, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// Talk indicates an expected call of Talk.
func (mr *MockCallHandlerMockRecorder) Talk(ctx, callID, runNext, text, gender, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Talk", reflect.TypeOf((*MockCallHandler)(nil).Talk), ctx, callID, runNext, text, gender, language)
}

// UpdateConfbridgeID mocks base method.
func (m *MockCallHandler) UpdateConfbridgeID(ctx context.Context, id, confbridgeID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfbridgeID", ctx, id, confbridgeID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfbridgeID indicates an expected call of UpdateConfbridgeID.
func (mr *MockCallHandlerMockRecorder) UpdateConfbridgeID(ctx, id, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfbridgeID", reflect.TypeOf((*MockCallHandler)(nil).UpdateConfbridgeID), ctx, id, confbridgeID)
}

// UpdateExternalMediaID mocks base method.
func (m *MockCallHandler) UpdateExternalMediaID(ctx context.Context, id, externalMediaID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalMediaID", ctx, id, externalMediaID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExternalMediaID indicates an expected call of UpdateExternalMediaID.
func (mr *MockCallHandlerMockRecorder) UpdateExternalMediaID(ctx, id, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalMediaID", reflect.TypeOf((*MockCallHandler)(nil).UpdateExternalMediaID), ctx, id, externalMediaID)
}

// UpdateRecordingID mocks base method.
func (m *MockCallHandler) UpdateRecordingID(ctx context.Context, id, recordingID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecordingID", ctx, id, recordingID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecordingID indicates an expected call of UpdateRecordingID.
func (mr *MockCallHandlerMockRecorder) UpdateRecordingID(ctx, id, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecordingID", reflect.TypeOf((*MockCallHandler)(nil).UpdateRecordingID), ctx, id, recordingID)
}

// UpdateStatus mocks base method.
func (m *MockCallHandler) UpdateStatus(ctx context.Context, id uuid.UUID, status call.Status) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCallHandlerMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCallHandler)(nil).UpdateStatus), ctx, id, status)
}
