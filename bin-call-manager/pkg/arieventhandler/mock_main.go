// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package arieventhandler is a generated GoMock package.
package arieventhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockARIEventHandler is a mock of ARIEventHandler interface.
type MockARIEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockARIEventHandlerMockRecorder
}

// MockARIEventHandlerMockRecorder is the mock recorder for MockARIEventHandler.
type MockARIEventHandlerMockRecorder struct {
	mock *MockARIEventHandler
}

// NewMockARIEventHandler creates a new mock instance.
func NewMockARIEventHandler(ctrl *gomock.Controller) *MockARIEventHandler {
	mock := &MockARIEventHandler{ctrl: ctrl}
	mock.recorder = &MockARIEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockARIEventHandler) EXPECT() *MockARIEventHandlerMockRecorder {
	return m.recorder
}

// EventHandlerBridgeCreated mocks base method.
func (m *MockARIEventHandler) EventHandlerBridgeCreated(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerBridgeCreated", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerBridgeCreated indicates an expected call of EventHandlerBridgeCreated.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerBridgeCreated(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerBridgeCreated", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerBridgeCreated), ctx, evt)
}

// EventHandlerBridgeDestroyed mocks base method.
func (m *MockARIEventHandler) EventHandlerBridgeDestroyed(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerBridgeDestroyed", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerBridgeDestroyed indicates an expected call of EventHandlerBridgeDestroyed.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerBridgeDestroyed(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerBridgeDestroyed", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerBridgeDestroyed), ctx, evt)
}

// EventHandlerChannelCreated mocks base method.
func (m *MockARIEventHandler) EventHandlerChannelCreated(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerChannelCreated", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerChannelCreated indicates an expected call of EventHandlerChannelCreated.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerChannelCreated(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerChannelCreated", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerChannelCreated), ctx, evt)
}

// EventHandlerChannelDestroyed mocks base method.
func (m *MockARIEventHandler) EventHandlerChannelDestroyed(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerChannelDestroyed", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerChannelDestroyed indicates an expected call of EventHandlerChannelDestroyed.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerChannelDestroyed(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerChannelDestroyed", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerChannelDestroyed), ctx, evt)
}

// EventHandlerChannelDtmfReceived mocks base method.
func (m *MockARIEventHandler) EventHandlerChannelDtmfReceived(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerChannelDtmfReceived", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerChannelDtmfReceived indicates an expected call of EventHandlerChannelDtmfReceived.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerChannelDtmfReceived(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerChannelDtmfReceived", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerChannelDtmfReceived), ctx, evt)
}

// EventHandlerChannelEnteredBridge mocks base method.
func (m *MockARIEventHandler) EventHandlerChannelEnteredBridge(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerChannelEnteredBridge", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerChannelEnteredBridge indicates an expected call of EventHandlerChannelEnteredBridge.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerChannelEnteredBridge(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerChannelEnteredBridge", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerChannelEnteredBridge), ctx, evt)
}

// EventHandlerChannelLeftBridge mocks base method.
func (m *MockARIEventHandler) EventHandlerChannelLeftBridge(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerChannelLeftBridge", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerChannelLeftBridge indicates an expected call of EventHandlerChannelLeftBridge.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerChannelLeftBridge(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerChannelLeftBridge", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerChannelLeftBridge), ctx, evt)
}

// EventHandlerChannelStateChange mocks base method.
func (m *MockARIEventHandler) EventHandlerChannelStateChange(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerChannelStateChange", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerChannelStateChange indicates an expected call of EventHandlerChannelStateChange.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerChannelStateChange(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerChannelStateChange", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerChannelStateChange), ctx, evt)
}

// EventHandlerChannelVarset mocks base method.
func (m *MockARIEventHandler) EventHandlerChannelVarset(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerChannelVarset", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerChannelVarset indicates an expected call of EventHandlerChannelVarset.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerChannelVarset(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerChannelVarset", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerChannelVarset), ctx, evt)
}

// EventHandlerContactStatusChange mocks base method.
func (m *MockARIEventHandler) EventHandlerContactStatusChange(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerContactStatusChange", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerContactStatusChange indicates an expected call of EventHandlerContactStatusChange.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerContactStatusChange(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerContactStatusChange", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerContactStatusChange), ctx, evt)
}

// EventHandlerPlaybackFinished mocks base method.
func (m *MockARIEventHandler) EventHandlerPlaybackFinished(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerPlaybackFinished", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerPlaybackFinished indicates an expected call of EventHandlerPlaybackFinished.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerPlaybackFinished(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerPlaybackFinished", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerPlaybackFinished), ctx, evt)
}

// EventHandlerPlaybackStarted mocks base method.
func (m *MockARIEventHandler) EventHandlerPlaybackStarted(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerPlaybackStarted", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerPlaybackStarted indicates an expected call of EventHandlerPlaybackStarted.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerPlaybackStarted(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerPlaybackStarted", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerPlaybackStarted), ctx, evt)
}

// EventHandlerRecordingFinished mocks base method.
func (m *MockARIEventHandler) EventHandlerRecordingFinished(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerRecordingFinished", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerRecordingFinished indicates an expected call of EventHandlerRecordingFinished.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerRecordingFinished(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerRecordingFinished", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerRecordingFinished), ctx, evt)
}

// EventHandlerRecordingStarted mocks base method.
func (m *MockARIEventHandler) EventHandlerRecordingStarted(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerRecordingStarted", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerRecordingStarted indicates an expected call of EventHandlerRecordingStarted.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerRecordingStarted(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerRecordingStarted", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerRecordingStarted), ctx, evt)
}

// EventHandlerStasisEnd mocks base method.
func (m *MockARIEventHandler) EventHandlerStasisEnd(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerStasisEnd", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerStasisEnd indicates an expected call of EventHandlerStasisEnd.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerStasisEnd(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerStasisEnd", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerStasisEnd), ctx, evt)
}

// EventHandlerStasisStart mocks base method.
func (m *MockARIEventHandler) EventHandlerStasisStart(ctx context.Context, evt interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandlerStasisStart", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventHandlerStasisStart indicates an expected call of EventHandlerStasisStart.
func (mr *MockARIEventHandlerMockRecorder) EventHandlerStasisStart(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandlerStasisStart", reflect.TypeOf((*MockARIEventHandler)(nil).EventHandlerStasisStart), ctx, evt)
}
