package channelhandler

import (
	"context"
	"testing"

	"monorepo/bin-common-handler/pkg/notifyhandler"
	"monorepo/bin-common-handler/pkg/requesthandler"
	"monorepo/bin-common-handler/pkg/utilhandler"

	gomock "github.com/golang/mock/gomock"

	"monorepo/bin-call-manager/models/ari"
	"monorepo/bin-call-manager/models/channel"
	"monorepo/bin-call-manager/pkg/dbhandler"
)

func Test_HealthCheck(t *testing.T) {

	type test struct {
		name string

		id         string
		retryCount int

		responseChannel *channel.Channel
	}

	tests := []test{
		{
			"normal",

			"4f8eee94-dee8-11ee-a675-e301225ac38f",
			0,

			&channel.Channel{
				ID:         "4f8eee94-dee8-11ee-a675-e301225ac38f",
				AsteriskID: "42:01:0a:a4:00:03",
				TMEnd:      dbhandler.DefaultTimeStamp,
			},
		},
		{
			"exceeded max retry count",

			"27959a54-6e79-11ed-aef7-df3a51cc2639",
			3,

			&channel.Channel{
				ID:         "27959a54-6e79-11ed-aef7-df3a51cc2639",
				AsteriskID: "42:01:0a:a4:00:03",
				TMEnd:      dbhandler.DefaultTimeStamp,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mc := gomock.NewController(t)
			defer mc.Finish()

			mockUtil := utilhandler.NewMockUtilHandler(mc)
			mockDB := dbhandler.NewMockDBHandler(mc)
			mockReq := requesthandler.NewMockRequestHandler(mc)
			mockNotify := notifyhandler.NewMockNotifyHandler(mc)

			h := channelHandler{
				utilHandler:   mockUtil,
				db:            mockDB,
				reqHandler:    mockReq,
				notifyHandler: mockNotify,
			}
			ctx := context.Background()

			if tt.retryCount > defaultHealthMaxRetryCount {
				mockReq.EXPECT().CallPublishEvent(ctx, string(ari.EventTypeChannelDestroyed), "asterisk-proxy", "application/json", gomock.Any())

			} else {
				mockDB.EXPECT().ChannelGet(gomock.Any(), tt.id).Return(tt.responseChannel, nil)
				mockReq.EXPECT().AstChannelGet(ctx, tt.responseChannel.AsteriskID, tt.responseChannel.ID).Return(tt.responseChannel, nil)
				mockReq.EXPECT().CallV1ChannelHealth(ctx, tt.id, defaultHealthDelay, 0).Return(nil)

			}

			h.HealthCheck(ctx, tt.id, tt.retryCount)
		})
	}
}

func Test_publishFakeEventChannelDestoryed(t *testing.T) {

	type test struct {
		name string

		id string

		expectData []byte
	}

	tests := []test{
		{
			"normal",

			"7c9f1cf8-defa-11ee-84f7-dbd9ffcc4b6e",

			[]byte(`{"type":"","application":"","timestamp":"","asterisk_id":"","channel":{"accoutcode":"","id":"7c9f1cf8-defa-11ee-84f7-dbd9ffcc4b6e","name":"","language":"","creationtime":"","state":"","caller":{"name":"","number":""},"connected":{"name":"","number":""},"dialplan":{"context":"","exten":"","priority":0,"app_name":"","app_data":""},"ChannelVars":null},"cause_txt":"channel destroy generated by the call-manager","cause":16}`),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mc := gomock.NewController(t)
			defer mc.Finish()

			mockUtil := utilhandler.NewMockUtilHandler(mc)
			mockDB := dbhandler.NewMockDBHandler(mc)
			mockReq := requesthandler.NewMockRequestHandler(mc)
			mockNotify := notifyhandler.NewMockNotifyHandler(mc)

			h := channelHandler{
				utilHandler:   mockUtil,
				db:            mockDB,
				reqHandler:    mockReq,
				notifyHandler: mockNotify,
			}
			ctx := context.Background()

			mockReq.EXPECT().CallPublishEvent(ctx, string(ari.EventTypeChannelDestroyed), "asterisk-proxy", "application/json", tt.expectData)

			h.publishFakeEventChannelDestoryed(ctx, tt.id)
		})
	}
}
