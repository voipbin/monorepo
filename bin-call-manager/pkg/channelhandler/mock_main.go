// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package channelhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package channelhandler is a generated GoMock package.
package channelhandler

import (
	context "context"
	ari "monorepo/bin-call-manager/models/ari"
	channel "monorepo/bin-call-manager/models/channel"
	address "monorepo/bin-common-handler/models/address"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockChannelHandler is a mock of ChannelHandler interface.
type MockChannelHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChannelHandlerMockRecorder
	isgomock struct{}
}

// MockChannelHandlerMockRecorder is the mock recorder for MockChannelHandler.
type MockChannelHandlerMockRecorder struct {
	mock *MockChannelHandler
}

// NewMockChannelHandler creates a new mock instance.
func NewMockChannelHandler(ctrl *gomock.Controller) *MockChannelHandler {
	mock := &MockChannelHandler{ctrl: ctrl}
	mock.recorder = &MockChannelHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelHandler) EXPECT() *MockChannelHandlerMockRecorder {
	return m.recorder
}

// ARIChannelStateChange mocks base method.
func (m *MockChannelHandler) ARIChannelStateChange(ctx context.Context, e *ari.ChannelStateChange) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelStateChange", ctx, e)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ARIChannelStateChange indicates an expected call of ARIChannelStateChange.
func (mr *MockChannelHandlerMockRecorder) ARIChannelStateChange(ctx, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelStateChange", reflect.TypeOf((*MockChannelHandler)(nil).ARIChannelStateChange), ctx, e)
}

// ARIStasisStart mocks base method.
func (m *MockChannelHandler) ARIStasisStart(ctx context.Context, e *ari.StasisStart) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIStasisStart", ctx, e)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ARIStasisStart indicates an expected call of ARIStasisStart.
func (mr *MockChannelHandlerMockRecorder) ARIStasisStart(ctx, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIStasisStart", reflect.TypeOf((*MockChannelHandler)(nil).ARIStasisStart), ctx, e)
}

// AddressGetDestination mocks base method.
func (m *MockChannelHandler) AddressGetDestination(cn *channel.Channel, addressType address.Type) *address.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressGetDestination", cn, addressType)
	ret0, _ := ret[0].(*address.Address)
	return ret0
}

// AddressGetDestination indicates an expected call of AddressGetDestination.
func (mr *MockChannelHandlerMockRecorder) AddressGetDestination(cn, addressType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressGetDestination", reflect.TypeOf((*MockChannelHandler)(nil).AddressGetDestination), cn, addressType)
}

// AddressGetDestinationWithoutSpecificType mocks base method.
func (m *MockChannelHandler) AddressGetDestinationWithoutSpecificType(cn *channel.Channel) *address.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressGetDestinationWithoutSpecificType", cn)
	ret0, _ := ret[0].(*address.Address)
	return ret0
}

// AddressGetDestinationWithoutSpecificType indicates an expected call of AddressGetDestinationWithoutSpecificType.
func (mr *MockChannelHandlerMockRecorder) AddressGetDestinationWithoutSpecificType(cn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressGetDestinationWithoutSpecificType", reflect.TypeOf((*MockChannelHandler)(nil).AddressGetDestinationWithoutSpecificType), cn)
}

// AddressGetSource mocks base method.
func (m *MockChannelHandler) AddressGetSource(cn *channel.Channel, addressType address.Type) *address.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressGetSource", cn, addressType)
	ret0, _ := ret[0].(*address.Address)
	return ret0
}

// AddressGetSource indicates an expected call of AddressGetSource.
func (mr *MockChannelHandlerMockRecorder) AddressGetSource(cn, addressType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressGetSource", reflect.TypeOf((*MockChannelHandler)(nil).AddressGetSource), cn, addressType)
}

// Answer mocks base method.
func (m *MockChannelHandler) Answer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Answer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Answer indicates an expected call of Answer.
func (mr *MockChannelHandlerMockRecorder) Answer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Answer", reflect.TypeOf((*MockChannelHandler)(nil).Answer), ctx, id)
}

// Continue mocks base method.
func (m *MockChannelHandler) Continue(ctx context.Context, id, context, exten string, priority int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Continue", ctx, id, context, exten, priority, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// Continue indicates an expected call of Continue.
func (mr *MockChannelHandlerMockRecorder) Continue(ctx, id, context, exten, priority, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Continue", reflect.TypeOf((*MockChannelHandler)(nil).Continue), ctx, id, context, exten, priority, label)
}

// Create mocks base method.
func (m *MockChannelHandler) Create(ctx context.Context, id, asteriskID, name string, channelType channel.Type, tech channel.Tech, sourceName, sourceNumber, destinationName, destinationNumber string, state ari.ChannelState) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, asteriskID, name, channelType, tech, sourceName, sourceNumber, destinationName, destinationNumber, state)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChannelHandlerMockRecorder) Create(ctx, id, asteriskID, name, channelType, tech, sourceName, sourceNumber, destinationName, destinationNumber, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelHandler)(nil).Create), ctx, id, asteriskID, name, channelType, tech, sourceName, sourceNumber, destinationName, destinationNumber, state)
}

// DTMFSend mocks base method.
func (m *MockChannelHandler) DTMFSend(ctx context.Context, id, digit string, duration, before, between, after int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DTMFSend", ctx, id, digit, duration, before, between, after)
	ret0, _ := ret[0].(error)
	return ret0
}

// DTMFSend indicates an expected call of DTMFSend.
func (mr *MockChannelHandlerMockRecorder) DTMFSend(ctx, id, digit, duration, before, between, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DTMFSend", reflect.TypeOf((*MockChannelHandler)(nil).DTMFSend), ctx, id, digit, duration, before, between, after)
}

// Delete mocks base method.
func (m *MockChannelHandler) Delete(ctx context.Context, id string, cause ari.ChannelCause) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, cause)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockChannelHandlerMockRecorder) Delete(ctx, id, cause any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChannelHandler)(nil).Delete), ctx, id, cause)
}

// Dial mocks base method.
func (m *MockChannelHandler) Dial(ctx context.Context, id, caller string, timeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", ctx, id, caller, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dial indicates an expected call of Dial.
func (mr *MockChannelHandlerMockRecorder) Dial(ctx, id, caller, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockChannelHandler)(nil).Dial), ctx, id, caller, timeout)
}

// Get mocks base method.
func (m *MockChannelHandler) Get(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChannelHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChannelHandler)(nil).Get), ctx, id)
}

// GetChannelsForRecovery mocks base method.
func (m *MockChannelHandler) GetChannelsForRecovery(ctx context.Context, asteriskID string) ([]*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelsForRecovery", ctx, asteriskID)
	ret0, _ := ret[0].([]*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelsForRecovery indicates an expected call of GetChannelsForRecovery.
func (mr *MockChannelHandlerMockRecorder) GetChannelsForRecovery(ctx, asteriskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsForRecovery", reflect.TypeOf((*MockChannelHandler)(nil).GetChannelsForRecovery), ctx, asteriskID)
}

// HangingUp mocks base method.
func (m *MockChannelHandler) HangingUp(ctx context.Context, id string, cause ari.ChannelCause) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangingUp", ctx, id, cause)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HangingUp indicates an expected call of HangingUp.
func (mr *MockChannelHandlerMockRecorder) HangingUp(ctx, id, cause any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangingUp", reflect.TypeOf((*MockChannelHandler)(nil).HangingUp), ctx, id, cause)
}

// HangingUpWithAsteriskID mocks base method.
func (m *MockChannelHandler) HangingUpWithAsteriskID(ctx context.Context, asteriskID, id string, cause ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangingUpWithAsteriskID", ctx, asteriskID, id, cause)
	ret0, _ := ret[0].(error)
	return ret0
}

// HangingUpWithAsteriskID indicates an expected call of HangingUpWithAsteriskID.
func (mr *MockChannelHandlerMockRecorder) HangingUpWithAsteriskID(ctx, asteriskID, id, cause any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangingUpWithAsteriskID", reflect.TypeOf((*MockChannelHandler)(nil).HangingUpWithAsteriskID), ctx, asteriskID, id, cause)
}

// HangingUpWithDelay mocks base method.
func (m *MockChannelHandler) HangingUpWithDelay(ctx context.Context, id string, cause ari.ChannelCause, delay int) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangingUpWithDelay", ctx, id, cause, delay)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HangingUpWithDelay indicates an expected call of HangingUpWithDelay.
func (mr *MockChannelHandlerMockRecorder) HangingUpWithDelay(ctx, id, cause, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangingUpWithDelay", reflect.TypeOf((*MockChannelHandler)(nil).HangingUpWithDelay), ctx, id, cause, delay)
}

// Hangup mocks base method.
func (m *MockChannelHandler) Hangup(ctx context.Context, id string, cause ari.ChannelCause) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hangup", ctx, id, cause)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hangup indicates an expected call of Hangup.
func (mr *MockChannelHandlerMockRecorder) Hangup(ctx, id, cause any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hangup", reflect.TypeOf((*MockChannelHandler)(nil).Hangup), ctx, id, cause)
}

// HealthCheck mocks base method.
func (m *MockChannelHandler) HealthCheck(ctx context.Context, channelID string, retryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", ctx, channelID, retryCount)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockChannelHandlerMockRecorder) HealthCheck(ctx, channelID, retryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockChannelHandler)(nil).HealthCheck), ctx, channelID, retryCount)
}

// HoldOff mocks base method.
func (m *MockChannelHandler) HoldOff(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldOff", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HoldOff indicates an expected call of HoldOff.
func (mr *MockChannelHandlerMockRecorder) HoldOff(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldOff", reflect.TypeOf((*MockChannelHandler)(nil).HoldOff), ctx, id)
}

// HoldOn mocks base method.
func (m *MockChannelHandler) HoldOn(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldOn", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HoldOn indicates an expected call of HoldOn.
func (mr *MockChannelHandlerMockRecorder) HoldOn(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldOn", reflect.TypeOf((*MockChannelHandler)(nil).HoldOn), ctx, id)
}

// MOHOff mocks base method.
func (m *MockChannelHandler) MOHOff(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MOHOff", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MOHOff indicates an expected call of MOHOff.
func (mr *MockChannelHandlerMockRecorder) MOHOff(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MOHOff", reflect.TypeOf((*MockChannelHandler)(nil).MOHOff), ctx, id)
}

// MOHOn mocks base method.
func (m *MockChannelHandler) MOHOn(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MOHOn", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MOHOn indicates an expected call of MOHOn.
func (mr *MockChannelHandlerMockRecorder) MOHOn(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MOHOn", reflect.TypeOf((*MockChannelHandler)(nil).MOHOn), ctx, id)
}

// MuteOff mocks base method.
func (m *MockChannelHandler) MuteOff(ctx context.Context, id string, direction channel.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteOff", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// MuteOff indicates an expected call of MuteOff.
func (mr *MockChannelHandlerMockRecorder) MuteOff(ctx, id, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteOff", reflect.TypeOf((*MockChannelHandler)(nil).MuteOff), ctx, id, direction)
}

// MuteOn mocks base method.
func (m *MockChannelHandler) MuteOn(ctx context.Context, id string, direction channel.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteOn", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// MuteOn indicates an expected call of MuteOn.
func (mr *MockChannelHandlerMockRecorder) MuteOn(ctx, id, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteOn", reflect.TypeOf((*MockChannelHandler)(nil).MuteOn), ctx, id, direction)
}

// Play mocks base method.
func (m *MockChannelHandler) Play(ctx context.Context, id string, actionID uuid.UUID, medias []string, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Play", ctx, id, actionID, medias, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// Play indicates an expected call of Play.
func (mr *MockChannelHandlerMockRecorder) Play(ctx, id, actionID, medias, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Play", reflect.TypeOf((*MockChannelHandler)(nil).Play), ctx, id, actionID, medias, language)
}

// PlaybackStop mocks base method.
func (m *MockChannelHandler) PlaybackStop(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaybackStop", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlaybackStop indicates an expected call of PlaybackStop.
func (mr *MockChannelHandlerMockRecorder) PlaybackStop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaybackStop", reflect.TypeOf((*MockChannelHandler)(nil).PlaybackStop), ctx, id)
}

// Record mocks base method.
func (m *MockChannelHandler) Record(ctx context.Context, id, filename, format string, duration, silence int, beep bool, endKey, ifExists string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", ctx, id, filename, format, duration, silence, beep, endKey, ifExists)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockChannelHandlerMockRecorder) Record(ctx, id, filename, format, duration, silence, beep, endKey, ifExists any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockChannelHandler)(nil).Record), ctx, id, filename, format, duration, silence, beep, endKey, ifExists)
}

// Redirect mocks base method.
func (m *MockChannelHandler) Redirect(ctx context.Context, id, context, exten, priority string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", ctx, id, context, exten, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// Redirect indicates an expected call of Redirect.
func (mr *MockChannelHandlerMockRecorder) Redirect(ctx, id, context, exten, priority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockChannelHandler)(nil).Redirect), ctx, id, context, exten, priority)
}

// Ring mocks base method.
func (m *MockChannelHandler) Ring(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ring", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ring indicates an expected call of Ring.
func (mr *MockChannelHandlerMockRecorder) Ring(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ring", reflect.TypeOf((*MockChannelHandler)(nil).Ring), ctx, id)
}

// SetDataItem mocks base method.
func (m *MockChannelHandler) SetDataItem(ctx context.Context, id, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDataItem", ctx, id, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDataItem indicates an expected call of SetDataItem.
func (mr *MockChannelHandlerMockRecorder) SetDataItem(ctx, id, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataItem", reflect.TypeOf((*MockChannelHandler)(nil).SetDataItem), ctx, id, key, value)
}

// SetDirection mocks base method.
func (m *MockChannelHandler) SetDirection(ctx context.Context, id string, direction channel.Direction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDirection", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDirection indicates an expected call of SetDirection.
func (mr *MockChannelHandlerMockRecorder) SetDirection(ctx, id, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirection", reflect.TypeOf((*MockChannelHandler)(nil).SetDirection), ctx, id, direction)
}

// SetSIPCallID mocks base method.
func (m *MockChannelHandler) SetSIPCallID(ctx context.Context, id, sipCallID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSIPCallID", ctx, id, sipCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSIPCallID indicates an expected call of SetSIPCallID.
func (mr *MockChannelHandlerMockRecorder) SetSIPCallID(ctx, id, sipCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSIPCallID", reflect.TypeOf((*MockChannelHandler)(nil).SetSIPCallID), ctx, id, sipCallID)
}

// SetSIPTransport mocks base method.
func (m *MockChannelHandler) SetSIPTransport(ctx context.Context, id string, transport channel.SIPTransport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSIPTransport", ctx, id, transport)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSIPTransport indicates an expected call of SetSIPTransport.
func (mr *MockChannelHandlerMockRecorder) SetSIPTransport(ctx, id, transport any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSIPTransport", reflect.TypeOf((*MockChannelHandler)(nil).SetSIPTransport), ctx, id, transport)
}

// SilenceOff mocks base method.
func (m *MockChannelHandler) SilenceOff(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilenceOff", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SilenceOff indicates an expected call of SilenceOff.
func (mr *MockChannelHandlerMockRecorder) SilenceOff(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilenceOff", reflect.TypeOf((*MockChannelHandler)(nil).SilenceOff), ctx, id)
}

// SilenceOn mocks base method.
func (m *MockChannelHandler) SilenceOn(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilenceOn", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SilenceOn indicates an expected call of SilenceOn.
func (mr *MockChannelHandlerMockRecorder) SilenceOn(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilenceOn", reflect.TypeOf((*MockChannelHandler)(nil).SilenceOn), ctx, id)
}

// StartChannel mocks base method.
func (m *MockChannelHandler) StartChannel(ctx context.Context, asteriskID, id, appArgs, endpoint, otherChannelID, originator, formats string, variables map[string]string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChannel", ctx, asteriskID, id, appArgs, endpoint, otherChannelID, originator, formats, variables)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChannel indicates an expected call of StartChannel.
func (mr *MockChannelHandlerMockRecorder) StartChannel(ctx, asteriskID, id, appArgs, endpoint, otherChannelID, originator, formats, variables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannel", reflect.TypeOf((*MockChannelHandler)(nil).StartChannel), ctx, asteriskID, id, appArgs, endpoint, otherChannelID, originator, formats, variables)
}

// StartChannelWithBaseChannel mocks base method.
func (m *MockChannelHandler) StartChannelWithBaseChannel(ctx context.Context, baseChannelID, id, appArgs, endpoint, otherChannelID, originator, formats string, variables map[string]string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChannelWithBaseChannel", ctx, baseChannelID, id, appArgs, endpoint, otherChannelID, originator, formats, variables)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChannelWithBaseChannel indicates an expected call of StartChannelWithBaseChannel.
func (mr *MockChannelHandlerMockRecorder) StartChannelWithBaseChannel(ctx, baseChannelID, id, appArgs, endpoint, otherChannelID, originator, formats, variables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannelWithBaseChannel", reflect.TypeOf((*MockChannelHandler)(nil).StartChannelWithBaseChannel), ctx, baseChannelID, id, appArgs, endpoint, otherChannelID, originator, formats, variables)
}

// StartExternalMedia mocks base method.
func (m *MockChannelHandler) StartExternalMedia(ctx context.Context, asteriskID, id, externalHost, encapsulation, transport, connectionType, format, direction, data string, variables map[string]string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExternalMedia", ctx, asteriskID, id, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExternalMedia indicates an expected call of StartExternalMedia.
func (mr *MockChannelHandlerMockRecorder) StartExternalMedia(ctx, asteriskID, id, externalHost, encapsulation, transport, connectionType, format, direction, data, variables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExternalMedia", reflect.TypeOf((*MockChannelHandler)(nil).StartExternalMedia), ctx, asteriskID, id, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
}

// StartSnoop mocks base method.
func (m *MockChannelHandler) StartSnoop(ctx context.Context, id, snoopID, appArgs string, spy, whisper channel.SnoopDirection) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSnoop", ctx, id, snoopID, appArgs, spy, whisper)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSnoop indicates an expected call of StartSnoop.
func (mr *MockChannelHandlerMockRecorder) StartSnoop(ctx, id, snoopID, appArgs, spy, whisper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSnoop", reflect.TypeOf((*MockChannelHandler)(nil).StartSnoop), ctx, id, snoopID, appArgs, spy, whisper)
}

// UpdateBridgeID mocks base method.
func (m *MockChannelHandler) UpdateBridgeID(ctx context.Context, id, bridgeID string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeID indicates an expected call of UpdateBridgeID.
func (mr *MockChannelHandlerMockRecorder) UpdateBridgeID(ctx, id, bridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeID", reflect.TypeOf((*MockChannelHandler)(nil).UpdateBridgeID), ctx, id, bridgeID)
}

// UpdatePlaybackID mocks base method.
func (m *MockChannelHandler) UpdatePlaybackID(ctx context.Context, id, playbackID string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaybackID", ctx, id, playbackID)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaybackID indicates an expected call of UpdatePlaybackID.
func (mr *MockChannelHandlerMockRecorder) UpdatePlaybackID(ctx, id, playbackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaybackID", reflect.TypeOf((*MockChannelHandler)(nil).UpdatePlaybackID), ctx, id, playbackID)
}

// UpdateStasisName mocks base method.
func (m *MockChannelHandler) UpdateStasisName(ctx context.Context, id, stasisName string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStasisName", ctx, id, stasisName)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStasisName indicates an expected call of UpdateStasisName.
func (mr *MockChannelHandlerMockRecorder) UpdateStasisName(ctx, id, stasisName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStasisName", reflect.TypeOf((*MockChannelHandler)(nil).UpdateStasisName), ctx, id, stasisName)
}

// UpdateState mocks base method.
func (m *MockChannelHandler) UpdateState(ctx context.Context, id string, state ari.ChannelState) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", ctx, id, state)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockChannelHandlerMockRecorder) UpdateState(ctx, id, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockChannelHandler)(nil).UpdateState), ctx, id, state)
}

// VariableSet mocks base method.
func (m *MockChannelHandler) VariableSet(ctx context.Context, id, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableSet", ctx, id, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// VariableSet indicates an expected call of VariableSet.
func (mr *MockChannelHandlerMockRecorder) VariableSet(ctx, id, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableSet", reflect.TypeOf((*MockChannelHandler)(nil).VariableSet), ctx, id, key, value)
}
