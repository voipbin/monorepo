// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package bridgehandler is a generated GoMock package.
package bridgehandler

import (
	context "context"
	bridge "monorepo/bin-call-manager/models/bridge"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockBridgeHandler is a mock of BridgeHandler interface.
type MockBridgeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeHandlerMockRecorder
}

// MockBridgeHandlerMockRecorder is the mock recorder for MockBridgeHandler.
type MockBridgeHandlerMockRecorder struct {
	mock *MockBridgeHandler
}

// NewMockBridgeHandler creates a new mock instance.
func NewMockBridgeHandler(ctrl *gomock.Controller) *MockBridgeHandler {
	mock := &MockBridgeHandler{ctrl: ctrl}
	mock.recorder = &MockBridgeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridgeHandler) EXPECT() *MockBridgeHandlerMockRecorder {
	return m.recorder
}

// AddChannelID mocks base method.
func (m *MockBridgeHandler) AddChannelID(ctx context.Context, id, channelID string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChannelID", ctx, id, channelID)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChannelID indicates an expected call of AddChannelID.
func (mr *MockBridgeHandlerMockRecorder) AddChannelID(ctx, id, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChannelID", reflect.TypeOf((*MockBridgeHandler)(nil).AddChannelID), ctx, id, channelID)
}

// ChannelJoin mocks base method.
func (m *MockBridgeHandler) ChannelJoin(ctx context.Context, id, channelID, role string, absorbDTMF, mute bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelJoin", ctx, id, channelID, role, absorbDTMF, mute)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelJoin indicates an expected call of ChannelJoin.
func (mr *MockBridgeHandlerMockRecorder) ChannelJoin(ctx, id, channelID, role, absorbDTMF, mute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelJoin", reflect.TypeOf((*MockBridgeHandler)(nil).ChannelJoin), ctx, id, channelID, role, absorbDTMF, mute)
}

// ChannelKick mocks base method.
func (m *MockBridgeHandler) ChannelKick(ctx context.Context, id, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelKick", ctx, id, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelKick indicates an expected call of ChannelKick.
func (mr *MockBridgeHandlerMockRecorder) ChannelKick(ctx, id, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelKick", reflect.TypeOf((*MockBridgeHandler)(nil).ChannelKick), ctx, id, channelID)
}

// Create mocks base method.
func (m *MockBridgeHandler) Create(ctx context.Context, asteriskID, id, name string, bridgeType bridge.Type, tech bridge.Tech, class, creator, videoMode, videoSourceID string, referenceType bridge.ReferenceType, referenceID uuid.UUID) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, asteriskID, id, name, bridgeType, tech, class, creator, videoMode, videoSourceID, referenceType, referenceID)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBridgeHandlerMockRecorder) Create(ctx, asteriskID, id, name, bridgeType, tech, class, creator, videoMode, videoSourceID, referenceType, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBridgeHandler)(nil).Create), ctx, asteriskID, id, name, bridgeType, tech, class, creator, videoMode, videoSourceID, referenceType, referenceID)
}

// Delete mocks base method.
func (m *MockBridgeHandler) Delete(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBridgeHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBridgeHandler)(nil).Delete), ctx, id)
}

// Destroy mocks base method.
func (m *MockBridgeHandler) Destroy(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockBridgeHandlerMockRecorder) Destroy(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockBridgeHandler)(nil).Destroy), ctx, id)
}

// Get mocks base method.
func (m *MockBridgeHandler) Get(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBridgeHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBridgeHandler)(nil).Get), ctx, id)
}

// IsExist mocks base method.
func (m *MockBridgeHandler) IsExist(ctx context.Context, id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockBridgeHandlerMockRecorder) IsExist(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockBridgeHandler)(nil).IsExist), ctx, id)
}

// RemoveChannelID mocks base method.
func (m *MockBridgeHandler) RemoveChannelID(ctx context.Context, id, channelID string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveChannelID", ctx, id, channelID)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveChannelID indicates an expected call of RemoveChannelID.
func (mr *MockBridgeHandlerMockRecorder) RemoveChannelID(ctx, id, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChannelID", reflect.TypeOf((*MockBridgeHandler)(nil).RemoveChannelID), ctx, id, channelID)
}

// Start mocks base method.
func (m *MockBridgeHandler) Start(ctx context.Context, asteriskID, bridgeID, bridgeName string, bridgeType []bridge.Type) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, asteriskID, bridgeID, bridgeName, bridgeType)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockBridgeHandlerMockRecorder) Start(ctx, asteriskID, bridgeID, bridgeName, bridgeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBridgeHandler)(nil).Start), ctx, asteriskID, bridgeID, bridgeName, bridgeType)
}
