// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package confbridgehandler is a generated GoMock package.
package confbridgehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	bridge "monorepo/bin-call-manager/models/bridge"
	channel "monorepo/bin-call-manager/models/channel"
	confbridge "monorepo/bin-call-manager/models/confbridge"
	externalmedia "monorepo/bin-call-manager/models/externalmedia"
	recording "monorepo/bin-call-manager/models/recording"
	customer "monorepo/bin-customer-manager/models/customer"
)

// MockConfbridgeHandler is a mock of ConfbridgeHandler interface.
type MockConfbridgeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConfbridgeHandlerMockRecorder
}

// MockConfbridgeHandlerMockRecorder is the mock recorder for MockConfbridgeHandler.
type MockConfbridgeHandlerMockRecorder struct {
	mock *MockConfbridgeHandler
}

// NewMockConfbridgeHandler creates a new mock instance.
func NewMockConfbridgeHandler(ctrl *gomock.Controller) *MockConfbridgeHandler {
	mock := &MockConfbridgeHandler{ctrl: ctrl}
	mock.recorder = &MockConfbridgeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfbridgeHandler) EXPECT() *MockConfbridgeHandlerMockRecorder {
	return m.recorder
}

// ARIBridgeDestroyed mocks base method.
func (m *MockConfbridgeHandler) ARIBridgeDestroyed(ctx context.Context, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIBridgeDestroyed", ctx, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIBridgeDestroyed indicates an expected call of ARIBridgeDestroyed.
func (mr *MockConfbridgeHandlerMockRecorder) ARIBridgeDestroyed(ctx, br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIBridgeDestroyed", reflect.TypeOf((*MockConfbridgeHandler)(nil).ARIBridgeDestroyed), ctx, br)
}

// ARIChannelEnteredBridge mocks base method.
func (m *MockConfbridgeHandler) ARIChannelEnteredBridge(ctx context.Context, cn *channel.Channel, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelEnteredBridge", ctx, cn, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelEnteredBridge indicates an expected call of ARIChannelEnteredBridge.
func (mr *MockConfbridgeHandlerMockRecorder) ARIChannelEnteredBridge(ctx, cn, br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelEnteredBridge", reflect.TypeOf((*MockConfbridgeHandler)(nil).ARIChannelEnteredBridge), ctx, cn, br)
}

// ARIChannelLeftBridge mocks base method.
func (m *MockConfbridgeHandler) ARIChannelLeftBridge(ctx context.Context, cn *channel.Channel, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelLeftBridge", ctx, cn, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelLeftBridge indicates an expected call of ARIChannelLeftBridge.
func (mr *MockConfbridgeHandlerMockRecorder) ARIChannelLeftBridge(ctx, cn, br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelLeftBridge", reflect.TypeOf((*MockConfbridgeHandler)(nil).ARIChannelLeftBridge), ctx, cn, br)
}

// ARIStasisStart mocks base method.
func (m *MockConfbridgeHandler) ARIStasisStart(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIStasisStart", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIStasisStart indicates an expected call of ARIStasisStart.
func (mr *MockConfbridgeHandlerMockRecorder) ARIStasisStart(ctx, cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIStasisStart", reflect.TypeOf((*MockConfbridgeHandler)(nil).ARIStasisStart), ctx, cn)
}

// Answer mocks base method.
func (m *MockConfbridgeHandler) Answer(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Answer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Answer indicates an expected call of Answer.
func (mr *MockConfbridgeHandlerMockRecorder) Answer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Answer", reflect.TypeOf((*MockConfbridgeHandler)(nil).Answer), ctx, id)
}

// Create mocks base method.
func (m *MockConfbridgeHandler) Create(ctx context.Context, customerID uuid.UUID, confbridgeType confbridge.Type) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, confbridgeType)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConfbridgeHandlerMockRecorder) Create(ctx, customerID, confbridgeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfbridgeHandler)(nil).Create), ctx, customerID, confbridgeType)
}

// Delete mocks base method.
func (m *MockConfbridgeHandler) Delete(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockConfbridgeHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConfbridgeHandler)(nil).Delete), ctx, id)
}

// EventCUCustomerDeleted mocks base method.
func (m *MockConfbridgeHandler) EventCUCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCUCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCUCustomerDeleted indicates an expected call of EventCUCustomerDeleted.
func (mr *MockConfbridgeHandlerMockRecorder) EventCUCustomerDeleted(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCUCustomerDeleted", reflect.TypeOf((*MockConfbridgeHandler)(nil).EventCUCustomerDeleted), ctx, cu)
}

// ExternalMediaStart mocks base method.
func (m *MockConfbridgeHandler) ExternalMediaStart(ctx context.Context, id uuid.UUID, externalHost string, encapsulation externalmedia.Encapsulation, transport externalmedia.Transport, connectionType, format, direction string) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaStart", ctx, id, externalHost, encapsulation, transport, connectionType, format, direction)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaStart indicates an expected call of ExternalMediaStart.
func (mr *MockConfbridgeHandlerMockRecorder) ExternalMediaStart(ctx, id, externalHost, encapsulation, transport, connectionType, format, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaStart", reflect.TypeOf((*MockConfbridgeHandler)(nil).ExternalMediaStart), ctx, id, externalHost, encapsulation, transport, connectionType, format, direction)
}

// ExternalMediaStop mocks base method.
func (m *MockConfbridgeHandler) ExternalMediaStop(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaStop", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaStop indicates an expected call of ExternalMediaStop.
func (mr *MockConfbridgeHandlerMockRecorder) ExternalMediaStop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaStop", reflect.TypeOf((*MockConfbridgeHandler)(nil).ExternalMediaStop), ctx, id)
}

// FlagAdd mocks base method.
func (m *MockConfbridgeHandler) FlagAdd(ctx context.Context, id uuid.UUID, flag confbridge.Flag) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagAdd", ctx, id, flag)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlagAdd indicates an expected call of FlagAdd.
func (mr *MockConfbridgeHandlerMockRecorder) FlagAdd(ctx, id, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagAdd", reflect.TypeOf((*MockConfbridgeHandler)(nil).FlagAdd), ctx, id, flag)
}

// FlagRemove mocks base method.
func (m *MockConfbridgeHandler) FlagRemove(ctx context.Context, id uuid.UUID, flag confbridge.Flag) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagRemove", ctx, id, flag)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlagRemove indicates an expected call of FlagRemove.
func (mr *MockConfbridgeHandlerMockRecorder) FlagRemove(ctx, id, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagRemove", reflect.TypeOf((*MockConfbridgeHandler)(nil).FlagRemove), ctx, id, flag)
}

// Get mocks base method.
func (m *MockConfbridgeHandler) Get(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfbridgeHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfbridgeHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockConfbridgeHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockConfbridgeHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockConfbridgeHandler)(nil).Gets), ctx, size, token, filters)
}

// Join mocks base method.
func (m *MockConfbridgeHandler) Join(ctx context.Context, confbridgeID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, confbridgeID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockConfbridgeHandlerMockRecorder) Join(ctx, confbridgeID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockConfbridgeHandler)(nil).Join), ctx, confbridgeID, callID)
}

// Joined mocks base method.
func (m *MockConfbridgeHandler) Joined(ctx context.Context, cn *channel.Channel, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Joined", ctx, cn, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// Joined indicates an expected call of Joined.
func (mr *MockConfbridgeHandlerMockRecorder) Joined(ctx, cn, br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joined", reflect.TypeOf((*MockConfbridgeHandler)(nil).Joined), ctx, cn, br)
}

// Kick mocks base method.
func (m *MockConfbridgeHandler) Kick(ctx context.Context, id, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kick", ctx, id, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kick indicates an expected call of Kick.
func (mr *MockConfbridgeHandlerMockRecorder) Kick(ctx, id, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kick", reflect.TypeOf((*MockConfbridgeHandler)(nil).Kick), ctx, id, callID)
}

// Leaved mocks base method.
func (m *MockConfbridgeHandler) Leaved(ctx context.Context, cn *channel.Channel, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leaved", ctx, cn, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leaved indicates an expected call of Leaved.
func (mr *MockConfbridgeHandlerMockRecorder) Leaved(ctx, cn, br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leaved", reflect.TypeOf((*MockConfbridgeHandler)(nil).Leaved), ctx, cn, br)
}

// RecordingStart mocks base method.
func (m *MockConfbridgeHandler) RecordingStart(ctx context.Context, id uuid.UUID, format recording.Format, endOfSilence int, endOfKey string, duration int) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingStart", ctx, id, format, endOfSilence, endOfKey, duration)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingStart indicates an expected call of RecordingStart.
func (mr *MockConfbridgeHandlerMockRecorder) RecordingStart(ctx, id, format, endOfSilence, endOfKey, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingStart", reflect.TypeOf((*MockConfbridgeHandler)(nil).RecordingStart), ctx, id, format, endOfSilence, endOfKey, duration)
}

// RecordingStop mocks base method.
func (m *MockConfbridgeHandler) RecordingStop(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingStop", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingStop indicates an expected call of RecordingStop.
func (mr *MockConfbridgeHandlerMockRecorder) RecordingStop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingStop", reflect.TypeOf((*MockConfbridgeHandler)(nil).RecordingStop), ctx, id)
}

// Ring mocks base method.
func (m *MockConfbridgeHandler) Ring(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ring", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ring indicates an expected call of Ring.
func (mr *MockConfbridgeHandlerMockRecorder) Ring(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ring", reflect.TypeOf((*MockConfbridgeHandler)(nil).Ring), ctx, id)
}

// Terminating mocks base method.
func (m *MockConfbridgeHandler) Terminating(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminating", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Terminating indicates an expected call of Terminating.
func (mr *MockConfbridgeHandlerMockRecorder) Terminating(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminating", reflect.TypeOf((*MockConfbridgeHandler)(nil).Terminating), ctx, id)
}

// UpdateExternalMediaID mocks base method.
func (m *MockConfbridgeHandler) UpdateExternalMediaID(ctx context.Context, id, externalMediaID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalMediaID", ctx, id, externalMediaID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExternalMediaID indicates an expected call of UpdateExternalMediaID.
func (mr *MockConfbridgeHandlerMockRecorder) UpdateExternalMediaID(ctx, id, externalMediaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalMediaID", reflect.TypeOf((*MockConfbridgeHandler)(nil).UpdateExternalMediaID), ctx, id, externalMediaID)
}
