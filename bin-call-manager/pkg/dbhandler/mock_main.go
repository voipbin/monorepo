// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	sql "database/sql"
	ari "monorepo/bin-call-manager/models/ari"
	bridge "monorepo/bin-call-manager/models/bridge"
	call "monorepo/bin-call-manager/models/call"
	callapplication "monorepo/bin-call-manager/models/callapplication"
	channel "monorepo/bin-call-manager/models/channel"
	confbridge "monorepo/bin-call-manager/models/confbridge"
	externalmedia "monorepo/bin-call-manager/models/externalmedia"
	groupcall "monorepo/bin-call-manager/models/groupcall"
	recording "monorepo/bin-call-manager/models/recording"
	action "monorepo/bin-flow-manager/models/action"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// BridgeAddChannelID mocks base method.
func (m *MockDBHandler) BridgeAddChannelID(ctx context.Context, id, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeAddChannelID", ctx, id, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeAddChannelID indicates an expected call of BridgeAddChannelID.
func (mr *MockDBHandlerMockRecorder) BridgeAddChannelID(ctx, id, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeAddChannelID", reflect.TypeOf((*MockDBHandler)(nil).BridgeAddChannelID), ctx, id, channelID)
}

// BridgeCreate mocks base method.
func (m *MockDBHandler) BridgeCreate(ctx context.Context, b *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeCreate indicates an expected call of BridgeCreate.
func (mr *MockDBHandlerMockRecorder) BridgeCreate(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeCreate", reflect.TypeOf((*MockDBHandler)(nil).BridgeCreate), ctx, b)
}

// BridgeEnd mocks base method.
func (m *MockDBHandler) BridgeEnd(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeEnd", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeEnd indicates an expected call of BridgeEnd.
func (mr *MockDBHandlerMockRecorder) BridgeEnd(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeEnd", reflect.TypeOf((*MockDBHandler)(nil).BridgeEnd), ctx, id)
}

// BridgeGet mocks base method.
func (m *MockDBHandler) BridgeGet(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGet", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGet indicates an expected call of BridgeGet.
func (mr *MockDBHandlerMockRecorder) BridgeGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGet", reflect.TypeOf((*MockDBHandler)(nil).BridgeGet), ctx, id)
}

// BridgeRemoveChannelID mocks base method.
func (m *MockDBHandler) BridgeRemoveChannelID(ctx context.Context, id, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeRemoveChannelID", ctx, id, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeRemoveChannelID indicates an expected call of BridgeRemoveChannelID.
func (mr *MockDBHandlerMockRecorder) BridgeRemoveChannelID(ctx, id, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeRemoveChannelID", reflect.TypeOf((*MockDBHandler)(nil).BridgeRemoveChannelID), ctx, id, channelID)
}

// CallAddChainedCallID mocks base method.
func (m *MockDBHandler) CallAddChainedCallID(ctx context.Context, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAddChainedCallID", ctx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallAddChainedCallID indicates an expected call of CallAddChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallAddChainedCallID(ctx, id, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAddChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallAddChainedCallID), ctx, id, chainedCallID)
}

// CallAddRecordingIDs mocks base method.
func (m *MockDBHandler) CallAddRecordingIDs(ctx context.Context, id, recordingID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAddRecordingIDs", ctx, id, recordingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallAddRecordingIDs indicates an expected call of CallAddRecordingIDs.
func (mr *MockDBHandlerMockRecorder) CallAddRecordingIDs(ctx, id, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAddRecordingIDs", reflect.TypeOf((*MockDBHandler)(nil).CallAddRecordingIDs), ctx, id, recordingID)
}

// CallApplicationAMDGet mocks base method.
func (m *MockDBHandler) CallApplicationAMDGet(ctx context.Context, channelID string) (*callapplication.AMD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallApplicationAMDGet", ctx, channelID)
	ret0, _ := ret[0].(*callapplication.AMD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallApplicationAMDGet indicates an expected call of CallApplicationAMDGet.
func (mr *MockDBHandlerMockRecorder) CallApplicationAMDGet(ctx, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallApplicationAMDGet", reflect.TypeOf((*MockDBHandler)(nil).CallApplicationAMDGet), ctx, channelID)
}

// CallApplicationAMDSet mocks base method.
func (m *MockDBHandler) CallApplicationAMDSet(ctx context.Context, channelID string, app *callapplication.AMD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallApplicationAMDSet", ctx, channelID, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallApplicationAMDSet indicates an expected call of CallApplicationAMDSet.
func (mr *MockDBHandlerMockRecorder) CallApplicationAMDSet(ctx, channelID, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallApplicationAMDSet", reflect.TypeOf((*MockDBHandler)(nil).CallApplicationAMDSet), ctx, channelID, app)
}

// CallCreate mocks base method.
func (m *MockDBHandler) CallCreate(ctx context.Context, call *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCreate", ctx, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallCreate indicates an expected call of CallCreate.
func (mr *MockDBHandlerMockRecorder) CallCreate(ctx, call any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCreate", reflect.TypeOf((*MockDBHandler)(nil).CallCreate), ctx, call)
}

// CallDelete mocks base method.
func (m *MockDBHandler) CallDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallDelete indicates an expected call of CallDelete.
func (mr *MockDBHandlerMockRecorder) CallDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDelete", reflect.TypeOf((*MockDBHandler)(nil).CallDelete), ctx, id)
}

// CallGet mocks base method.
func (m *MockDBHandler) CallGet(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockDBHandlerMockRecorder) CallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockDBHandler)(nil).CallGet), ctx, id)
}

// CallGetByChannelID mocks base method.
func (m *MockDBHandler) CallGetByChannelID(ctx context.Context, channelID string) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGetByChannelID", ctx, channelID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGetByChannelID indicates an expected call of CallGetByChannelID.
func (mr *MockDBHandlerMockRecorder) CallGetByChannelID(ctx, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGetByChannelID", reflect.TypeOf((*MockDBHandler)(nil).CallGetByChannelID), ctx, channelID)
}

// CallGets mocks base method.
func (m *MockDBHandler) CallGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGets indicates an expected call of CallGets.
func (mr *MockDBHandlerMockRecorder) CallGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGets", reflect.TypeOf((*MockDBHandler)(nil).CallGets), ctx, size, token, filters)
}

// CallRemoveChainedCallID mocks base method.
func (m *MockDBHandler) CallRemoveChainedCallID(ctx context.Context, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallRemoveChainedCallID", ctx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallRemoveChainedCallID indicates an expected call of CallRemoveChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallRemoveChainedCallID(ctx, id, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRemoveChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallRemoveChainedCallID), ctx, id, chainedCallID)
}

// CallSetActionAndActionNextHold mocks base method.
func (m *MockDBHandler) CallSetActionAndActionNextHold(ctx context.Context, id uuid.UUID, action *action.Action, hold bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetActionAndActionNextHold", ctx, id, action, hold)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetActionAndActionNextHold indicates an expected call of CallSetActionAndActionNextHold.
func (mr *MockDBHandlerMockRecorder) CallSetActionAndActionNextHold(ctx, id, action, hold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetActionAndActionNextHold", reflect.TypeOf((*MockDBHandler)(nil).CallSetActionAndActionNextHold), ctx, id, action, hold)
}

// CallSetActionNextHold mocks base method.
func (m *MockDBHandler) CallSetActionNextHold(ctx context.Context, id uuid.UUID, hold bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetActionNextHold", ctx, id, hold)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetActionNextHold indicates an expected call of CallSetActionNextHold.
func (mr *MockDBHandlerMockRecorder) CallSetActionNextHold(ctx, id, hold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetActionNextHold", reflect.TypeOf((*MockDBHandler)(nil).CallSetActionNextHold), ctx, id, hold)
}

// CallSetBridgeID mocks base method.
func (m *MockDBHandler) CallSetBridgeID(ctx context.Context, id uuid.UUID, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetBridgeID indicates an expected call of CallSetBridgeID.
func (mr *MockDBHandlerMockRecorder) CallSetBridgeID(ctx, id, bridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).CallSetBridgeID), ctx, id, bridgeID)
}

// CallSetConfbridgeID mocks base method.
func (m *MockDBHandler) CallSetConfbridgeID(ctx context.Context, id, confbridgeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetConfbridgeID", ctx, id, confbridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetConfbridgeID indicates an expected call of CallSetConfbridgeID.
func (mr *MockDBHandlerMockRecorder) CallSetConfbridgeID(ctx, id, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetConfbridgeID", reflect.TypeOf((*MockDBHandler)(nil).CallSetConfbridgeID), ctx, id, confbridgeID)
}

// CallSetData mocks base method.
func (m *MockDBHandler) CallSetData(ctx context.Context, id uuid.UUID, data map[call.DataType]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetData indicates an expected call of CallSetData.
func (mr *MockDBHandlerMockRecorder) CallSetData(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetData", reflect.TypeOf((*MockDBHandler)(nil).CallSetData), ctx, id, data)
}

// CallSetExternalMediaID mocks base method.
func (m *MockDBHandler) CallSetExternalMediaID(ctx context.Context, id, externalMediaID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetExternalMediaID", ctx, id, externalMediaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetExternalMediaID indicates an expected call of CallSetExternalMediaID.
func (mr *MockDBHandlerMockRecorder) CallSetExternalMediaID(ctx, id, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetExternalMediaID", reflect.TypeOf((*MockDBHandler)(nil).CallSetExternalMediaID), ctx, id, externalMediaID)
}

// CallSetFlowID mocks base method.
func (m *MockDBHandler) CallSetFlowID(ctx context.Context, id, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetFlowID", ctx, id, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetFlowID indicates an expected call of CallSetFlowID.
func (mr *MockDBHandlerMockRecorder) CallSetFlowID(ctx, id, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetFlowID", reflect.TypeOf((*MockDBHandler)(nil).CallSetFlowID), ctx, id, flowID)
}

// CallSetForRouteFailover mocks base method.
func (m *MockDBHandler) CallSetForRouteFailover(ctx context.Context, id uuid.UUID, channelID string, dialrouteID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetForRouteFailover", ctx, id, channelID, dialrouteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetForRouteFailover indicates an expected call of CallSetForRouteFailover.
func (mr *MockDBHandlerMockRecorder) CallSetForRouteFailover(ctx, id, channelID, dialrouteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetForRouteFailover", reflect.TypeOf((*MockDBHandler)(nil).CallSetForRouteFailover), ctx, id, channelID, dialrouteID)
}

// CallSetHangup mocks base method.
func (m *MockDBHandler) CallSetHangup(ctx context.Context, id uuid.UUID, reason call.HangupReason, hangupBy call.HangupBy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetHangup", ctx, id, reason, hangupBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetHangup indicates an expected call of CallSetHangup.
func (mr *MockDBHandlerMockRecorder) CallSetHangup(ctx, id, reason, hangupBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetHangup", reflect.TypeOf((*MockDBHandler)(nil).CallSetHangup), ctx, id, reason, hangupBy)
}

// CallSetMasterCallID mocks base method.
func (m *MockDBHandler) CallSetMasterCallID(ctx context.Context, id, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetMasterCallID", ctx, id, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetMasterCallID indicates an expected call of CallSetMasterCallID.
func (mr *MockDBHandlerMockRecorder) CallSetMasterCallID(ctx, id, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetMasterCallID", reflect.TypeOf((*MockDBHandler)(nil).CallSetMasterCallID), ctx, id, callID)
}

// CallSetMuteDirection mocks base method.
func (m *MockDBHandler) CallSetMuteDirection(ctx context.Context, id uuid.UUID, muteDirection call.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetMuteDirection", ctx, id, muteDirection)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetMuteDirection indicates an expected call of CallSetMuteDirection.
func (mr *MockDBHandlerMockRecorder) CallSetMuteDirection(ctx, id, muteDirection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetMuteDirection", reflect.TypeOf((*MockDBHandler)(nil).CallSetMuteDirection), ctx, id, muteDirection)
}

// CallSetRecordingID mocks base method.
func (m *MockDBHandler) CallSetRecordingID(ctx context.Context, id, recordingID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetRecordingID", ctx, id, recordingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetRecordingID indicates an expected call of CallSetRecordingID.
func (mr *MockDBHandlerMockRecorder) CallSetRecordingID(ctx, id, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetRecordingID", reflect.TypeOf((*MockDBHandler)(nil).CallSetRecordingID), ctx, id, recordingID)
}

// CallSetStatus mocks base method.
func (m *MockDBHandler) CallSetStatus(ctx context.Context, id uuid.UUID, status call.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetStatus indicates an expected call of CallSetStatus.
func (mr *MockDBHandlerMockRecorder) CallSetStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetStatus", reflect.TypeOf((*MockDBHandler)(nil).CallSetStatus), ctx, id, status)
}

// CallSetStatusProgressing mocks base method.
func (m *MockDBHandler) CallSetStatusProgressing(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetStatusProgressing", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetStatusProgressing indicates an expected call of CallSetStatusProgressing.
func (mr *MockDBHandlerMockRecorder) CallSetStatusProgressing(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetStatusProgressing", reflect.TypeOf((*MockDBHandler)(nil).CallSetStatusProgressing), ctx, id)
}

// CallSetStatusRinging mocks base method.
func (m *MockDBHandler) CallSetStatusRinging(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetStatusRinging", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetStatusRinging indicates an expected call of CallSetStatusRinging.
func (mr *MockDBHandlerMockRecorder) CallSetStatusRinging(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetStatusRinging", reflect.TypeOf((*MockDBHandler)(nil).CallSetStatusRinging), ctx, id)
}

// CallTXAddChainedCallID mocks base method.
func (m *MockDBHandler) CallTXAddChainedCallID(tx *sql.Tx, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTXAddChainedCallID", tx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallTXAddChainedCallID indicates an expected call of CallTXAddChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallTXAddChainedCallID(tx, id, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXAddChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallTXAddChainedCallID), tx, id, chainedCallID)
}

// CallTXFinish mocks base method.
func (m *MockDBHandler) CallTXFinish(tx *sql.Tx, commit bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CallTXFinish", tx, commit)
}

// CallTXFinish indicates an expected call of CallTXFinish.
func (mr *MockDBHandlerMockRecorder) CallTXFinish(tx, commit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXFinish", reflect.TypeOf((*MockDBHandler)(nil).CallTXFinish), tx, commit)
}

// CallTXRemoveChainedCallID mocks base method.
func (m *MockDBHandler) CallTXRemoveChainedCallID(tx *sql.Tx, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTXRemoveChainedCallID", tx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallTXRemoveChainedCallID indicates an expected call of CallTXRemoveChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallTXRemoveChainedCallID(tx, id, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXRemoveChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallTXRemoveChainedCallID), tx, id, chainedCallID)
}

// CallTXStart mocks base method.
func (m *MockDBHandler) CallTXStart(id uuid.UUID) (*sql.Tx, *call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTXStart", id)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(*call.Call)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CallTXStart indicates an expected call of CallTXStart.
func (mr *MockDBHandlerMockRecorder) CallTXStart(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXStart", reflect.TypeOf((*MockDBHandler)(nil).CallTXStart), id)
}

// ChannelCreate mocks base method.
func (m *MockDBHandler) ChannelCreate(ctx context.Context, channel *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelCreate", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelCreate indicates an expected call of ChannelCreate.
func (mr *MockDBHandlerMockRecorder) ChannelCreate(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelCreate", reflect.TypeOf((*MockDBHandler)(nil).ChannelCreate), ctx, channel)
}

// ChannelEndAndDelete mocks base method.
func (m *MockDBHandler) ChannelEndAndDelete(ctx context.Context, id string, hangup ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelEndAndDelete", ctx, id, hangup)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelEndAndDelete indicates an expected call of ChannelEndAndDelete.
func (mr *MockDBHandlerMockRecorder) ChannelEndAndDelete(ctx, id, hangup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEndAndDelete", reflect.TypeOf((*MockDBHandler)(nil).ChannelEndAndDelete), ctx, id, hangup)
}

// ChannelGet mocks base method.
func (m *MockDBHandler) ChannelGet(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGet", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGet indicates an expected call of ChannelGet.
func (mr *MockDBHandlerMockRecorder) ChannelGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGet", reflect.TypeOf((*MockDBHandler)(nil).ChannelGet), ctx, id)
}

// ChannelSetBridgeID mocks base method.
func (m *MockDBHandler) ChannelSetBridgeID(ctx context.Context, id, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetBridgeID indicates an expected call of ChannelSetBridgeID.
func (mr *MockDBHandlerMockRecorder) ChannelSetBridgeID(ctx, id, bridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetBridgeID), ctx, id, bridgeID)
}

// ChannelSetData mocks base method.
func (m *MockDBHandler) ChannelSetData(ctx context.Context, id string, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetData indicates an expected call of ChannelSetData.
func (mr *MockDBHandlerMockRecorder) ChannelSetData(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetData", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetData), ctx, id, data)
}

// ChannelSetDataItem mocks base method.
func (m *MockDBHandler) ChannelSetDataItem(ctx context.Context, id, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetDataItem", ctx, id, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetDataItem indicates an expected call of ChannelSetDataItem.
func (mr *MockDBHandlerMockRecorder) ChannelSetDataItem(ctx, id, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetDataItem", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetDataItem), ctx, id, key, value)
}

// ChannelSetDirection mocks base method.
func (m *MockDBHandler) ChannelSetDirection(ctx context.Context, id string, direction channel.Direction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetDirection", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetDirection indicates an expected call of ChannelSetDirection.
func (mr *MockDBHandlerMockRecorder) ChannelSetDirection(ctx, id, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetDirection", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetDirection), ctx, id, direction)
}

// ChannelSetMuteDirection mocks base method.
func (m *MockDBHandler) ChannelSetMuteDirection(ctx context.Context, id string, muteDirection channel.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetMuteDirection", ctx, id, muteDirection)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetMuteDirection indicates an expected call of ChannelSetMuteDirection.
func (mr *MockDBHandlerMockRecorder) ChannelSetMuteDirection(ctx, id, muteDirection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetMuteDirection", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetMuteDirection), ctx, id, muteDirection)
}

// ChannelSetPlaybackID mocks base method.
func (m *MockDBHandler) ChannelSetPlaybackID(ctx context.Context, id, playbackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetPlaybackID", ctx, id, playbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetPlaybackID indicates an expected call of ChannelSetPlaybackID.
func (mr *MockDBHandlerMockRecorder) ChannelSetPlaybackID(ctx, id, playbackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetPlaybackID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetPlaybackID), ctx, id, playbackID)
}

// ChannelSetSIPCallID mocks base method.
func (m *MockDBHandler) ChannelSetSIPCallID(ctx context.Context, id, sipID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetSIPCallID", ctx, id, sipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetSIPCallID indicates an expected call of ChannelSetSIPCallID.
func (mr *MockDBHandlerMockRecorder) ChannelSetSIPCallID(ctx, id, sipID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetSIPCallID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetSIPCallID), ctx, id, sipID)
}

// ChannelSetSIPTransport mocks base method.
func (m *MockDBHandler) ChannelSetSIPTransport(ctx context.Context, id string, transport channel.SIPTransport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetSIPTransport", ctx, id, transport)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetSIPTransport indicates an expected call of ChannelSetSIPTransport.
func (mr *MockDBHandlerMockRecorder) ChannelSetSIPTransport(ctx, id, transport any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetSIPTransport", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetSIPTransport), ctx, id, transport)
}

// ChannelSetStasis mocks base method.
func (m *MockDBHandler) ChannelSetStasis(ctx context.Context, id, stasis string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetStasis", ctx, id, stasis)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetStasis indicates an expected call of ChannelSetStasis.
func (mr *MockDBHandlerMockRecorder) ChannelSetStasis(ctx, id, stasis any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetStasis", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetStasis), ctx, id, stasis)
}

// ChannelSetStasisInfo mocks base method.
func (m *MockDBHandler) ChannelSetStasisInfo(ctx context.Context, id string, chType channel.Type, stasisName string, stasisData map[channel.StasisDataType]string, direction channel.Direction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetStasisInfo", ctx, id, chType, stasisName, stasisData, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetStasisInfo indicates an expected call of ChannelSetStasisInfo.
func (mr *MockDBHandlerMockRecorder) ChannelSetStasisInfo(ctx, id, chType, stasisName, stasisData, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetStasisInfo", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetStasisInfo), ctx, id, chType, stasisName, stasisData, direction)
}

// ChannelSetStateAnswer mocks base method.
func (m *MockDBHandler) ChannelSetStateAnswer(ctx context.Context, id string, state ari.ChannelState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetStateAnswer", ctx, id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetStateAnswer indicates an expected call of ChannelSetStateAnswer.
func (mr *MockDBHandlerMockRecorder) ChannelSetStateAnswer(ctx, id, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetStateAnswer", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetStateAnswer), ctx, id, state)
}

// ChannelSetStateRinging mocks base method.
func (m *MockDBHandler) ChannelSetStateRinging(ctx context.Context, id string, state ari.ChannelState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetStateRinging", ctx, id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetStateRinging indicates an expected call of ChannelSetStateRinging.
func (mr *MockDBHandlerMockRecorder) ChannelSetStateRinging(ctx, id, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetStateRinging", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetStateRinging), ctx, id, state)
}

// ChannelSetType mocks base method.
func (m *MockDBHandler) ChannelSetType(ctx context.Context, id string, cType channel.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetType", ctx, id, cType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetType indicates an expected call of ChannelSetType.
func (mr *MockDBHandlerMockRecorder) ChannelSetType(ctx, id, cType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetType", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetType), ctx, id, cType)
}

// ConfbridgeAddChannelCallID mocks base method.
func (m *MockDBHandler) ConfbridgeAddChannelCallID(ctx context.Context, id uuid.UUID, channelID string, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeAddChannelCallID", ctx, id, channelID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeAddChannelCallID indicates an expected call of ConfbridgeAddChannelCallID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeAddChannelCallID(ctx, id, channelID, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeAddChannelCallID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeAddChannelCallID), ctx, id, channelID, callID)
}

// ConfbridgeAddRecordingIDs mocks base method.
func (m *MockDBHandler) ConfbridgeAddRecordingIDs(ctx context.Context, id, recordingID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeAddRecordingIDs", ctx, id, recordingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeAddRecordingIDs indicates an expected call of ConfbridgeAddRecordingIDs.
func (mr *MockDBHandlerMockRecorder) ConfbridgeAddRecordingIDs(ctx, id, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeAddRecordingIDs", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeAddRecordingIDs), ctx, id, recordingID)
}

// ConfbridgeCreate mocks base method.
func (m *MockDBHandler) ConfbridgeCreate(ctx context.Context, cb *confbridge.Confbridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeCreate", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeCreate indicates an expected call of ConfbridgeCreate.
func (mr *MockDBHandlerMockRecorder) ConfbridgeCreate(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeCreate", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeCreate), ctx, cb)
}

// ConfbridgeDelete mocks base method.
func (m *MockDBHandler) ConfbridgeDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeDelete indicates an expected call of ConfbridgeDelete.
func (mr *MockDBHandlerMockRecorder) ConfbridgeDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeDelete", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeDelete), ctx, id)
}

// ConfbridgeGet mocks base method.
func (m *MockDBHandler) ConfbridgeGet(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGet", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGet indicates an expected call of ConfbridgeGet.
func (mr *MockDBHandlerMockRecorder) ConfbridgeGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGet", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeGet), ctx, id)
}

// ConfbridgeGetByBridgeID mocks base method.
func (m *MockDBHandler) ConfbridgeGetByBridgeID(ctx context.Context, bridgeID string) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGetByBridgeID", ctx, bridgeID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGetByBridgeID indicates an expected call of ConfbridgeGetByBridgeID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeGetByBridgeID(ctx, bridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGetByBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeGetByBridgeID), ctx, bridgeID)
}

// ConfbridgeGets mocks base method.
func (m *MockDBHandler) ConfbridgeGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGets indicates an expected call of ConfbridgeGets.
func (mr *MockDBHandlerMockRecorder) ConfbridgeGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGets", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeGets), ctx, size, token, filters)
}

// ConfbridgeRemoveChannelCallID mocks base method.
func (m *MockDBHandler) ConfbridgeRemoveChannelCallID(ctx context.Context, id uuid.UUID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeRemoveChannelCallID", ctx, id, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeRemoveChannelCallID indicates an expected call of ConfbridgeRemoveChannelCallID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeRemoveChannelCallID(ctx, id, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeRemoveChannelCallID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeRemoveChannelCallID), ctx, id, channelID)
}

// ConfbridgeSetBridgeID mocks base method.
func (m *MockDBHandler) ConfbridgeSetBridgeID(ctx context.Context, id uuid.UUID, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetBridgeID indicates an expected call of ConfbridgeSetBridgeID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetBridgeID(ctx, id, bridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetBridgeID), ctx, id, bridgeID)
}

// ConfbridgeSetExternalMediaID mocks base method.
func (m *MockDBHandler) ConfbridgeSetExternalMediaID(ctx context.Context, id, externalMediaID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetExternalMediaID", ctx, id, externalMediaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetExternalMediaID indicates an expected call of ConfbridgeSetExternalMediaID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetExternalMediaID(ctx, id, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetExternalMediaID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetExternalMediaID), ctx, id, externalMediaID)
}

// ConfbridgeSetFlags mocks base method.
func (m *MockDBHandler) ConfbridgeSetFlags(ctx context.Context, id uuid.UUID, flags []confbridge.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetFlags", ctx, id, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetFlags indicates an expected call of ConfbridgeSetFlags.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetFlags(ctx, id, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetFlags", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetFlags), ctx, id, flags)
}

// ConfbridgeSetRecordingID mocks base method.
func (m *MockDBHandler) ConfbridgeSetRecordingID(ctx context.Context, id, recordingID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetRecordingID", ctx, id, recordingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetRecordingID indicates an expected call of ConfbridgeSetRecordingID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetRecordingID(ctx, id, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetRecordingID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetRecordingID), ctx, id, recordingID)
}

// ConfbridgeSetStatus mocks base method.
func (m *MockDBHandler) ConfbridgeSetStatus(ctx context.Context, id uuid.UUID, status confbridge.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetStatus indicates an expected call of ConfbridgeSetStatus.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetStatus", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetStatus), ctx, id, status)
}

// ExternalMediaDelete mocks base method.
func (m *MockDBHandler) ExternalMediaDelete(ctx context.Context, externalMediaID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaDelete", ctx, externalMediaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalMediaDelete indicates an expected call of ExternalMediaDelete.
func (mr *MockDBHandlerMockRecorder) ExternalMediaDelete(ctx, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaDelete", reflect.TypeOf((*MockDBHandler)(nil).ExternalMediaDelete), ctx, externalMediaID)
}

// ExternalMediaGet mocks base method.
func (m *MockDBHandler) ExternalMediaGet(ctx context.Context, externalMediaID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaGet", ctx, externalMediaID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaGet indicates an expected call of ExternalMediaGet.
func (mr *MockDBHandlerMockRecorder) ExternalMediaGet(ctx, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaGet", reflect.TypeOf((*MockDBHandler)(nil).ExternalMediaGet), ctx, externalMediaID)
}

// ExternalMediaGetByReferenceID mocks base method.
func (m *MockDBHandler) ExternalMediaGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaGetByReferenceID indicates an expected call of ExternalMediaGetByReferenceID.
func (mr *MockDBHandlerMockRecorder) ExternalMediaGetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaGetByReferenceID", reflect.TypeOf((*MockDBHandler)(nil).ExternalMediaGetByReferenceID), ctx, referenceID)
}

// ExternalMediaSet mocks base method.
func (m *MockDBHandler) ExternalMediaSet(ctx context.Context, data *externalmedia.ExternalMedia) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalMediaSet indicates an expected call of ExternalMediaSet.
func (mr *MockDBHandlerMockRecorder) ExternalMediaSet(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaSet", reflect.TypeOf((*MockDBHandler)(nil).ExternalMediaSet), ctx, data)
}

// GroupcallCreate mocks base method.
func (m *MockDBHandler) GroupcallCreate(ctx context.Context, data *groupcall.Groupcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallCreate", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallCreate indicates an expected call of GroupcallCreate.
func (mr *MockDBHandlerMockRecorder) GroupcallCreate(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallCreate", reflect.TypeOf((*MockDBHandler)(nil).GroupcallCreate), ctx, data)
}

// GroupcallDecreaseCallCount mocks base method.
func (m *MockDBHandler) GroupcallDecreaseCallCount(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallDecreaseCallCount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallDecreaseCallCount indicates an expected call of GroupcallDecreaseCallCount.
func (mr *MockDBHandlerMockRecorder) GroupcallDecreaseCallCount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallDecreaseCallCount", reflect.TypeOf((*MockDBHandler)(nil).GroupcallDecreaseCallCount), ctx, id)
}

// GroupcallDecreaseGroupcallCount mocks base method.
func (m *MockDBHandler) GroupcallDecreaseGroupcallCount(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallDecreaseGroupcallCount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallDecreaseGroupcallCount indicates an expected call of GroupcallDecreaseGroupcallCount.
func (mr *MockDBHandlerMockRecorder) GroupcallDecreaseGroupcallCount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallDecreaseGroupcallCount", reflect.TypeOf((*MockDBHandler)(nil).GroupcallDecreaseGroupcallCount), ctx, id)
}

// GroupcallDelete mocks base method.
func (m *MockDBHandler) GroupcallDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallDelete indicates an expected call of GroupcallDelete.
func (mr *MockDBHandlerMockRecorder) GroupcallDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallDelete", reflect.TypeOf((*MockDBHandler)(nil).GroupcallDelete), ctx, id)
}

// GroupcallGet mocks base method.
func (m *MockDBHandler) GroupcallGet(ctx context.Context, id uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallGet", ctx, id)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupcallGet indicates an expected call of GroupcallGet.
func (mr *MockDBHandlerMockRecorder) GroupcallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallGet", reflect.TypeOf((*MockDBHandler)(nil).GroupcallGet), ctx, id)
}

// GroupcallGets mocks base method.
func (m *MockDBHandler) GroupcallGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupcallGets indicates an expected call of GroupcallGets.
func (mr *MockDBHandlerMockRecorder) GroupcallGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallGets", reflect.TypeOf((*MockDBHandler)(nil).GroupcallGets), ctx, size, token, filters)
}

// GroupcallSetAnswerCallID mocks base method.
func (m *MockDBHandler) GroupcallSetAnswerCallID(ctx context.Context, id, answerCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallSetAnswerCallID", ctx, id, answerCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallSetAnswerCallID indicates an expected call of GroupcallSetAnswerCallID.
func (mr *MockDBHandlerMockRecorder) GroupcallSetAnswerCallID(ctx, id, answerCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallSetAnswerCallID", reflect.TypeOf((*MockDBHandler)(nil).GroupcallSetAnswerCallID), ctx, id, answerCallID)
}

// GroupcallSetAnswerGroupcallID mocks base method.
func (m *MockDBHandler) GroupcallSetAnswerGroupcallID(ctx context.Context, id, answerGroupcallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallSetAnswerGroupcallID", ctx, id, answerGroupcallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallSetAnswerGroupcallID indicates an expected call of GroupcallSetAnswerGroupcallID.
func (mr *MockDBHandlerMockRecorder) GroupcallSetAnswerGroupcallID(ctx, id, answerGroupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallSetAnswerGroupcallID", reflect.TypeOf((*MockDBHandler)(nil).GroupcallSetAnswerGroupcallID), ctx, id, answerGroupcallID)
}

// GroupcallSetCallIDsAndCallCountAndDialIndex mocks base method.
func (m *MockDBHandler) GroupcallSetCallIDsAndCallCountAndDialIndex(ctx context.Context, id uuid.UUID, callIDs []uuid.UUID, callCount, dialIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallSetCallIDsAndCallCountAndDialIndex", ctx, id, callIDs, callCount, dialIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallSetCallIDsAndCallCountAndDialIndex indicates an expected call of GroupcallSetCallIDsAndCallCountAndDialIndex.
func (mr *MockDBHandlerMockRecorder) GroupcallSetCallIDsAndCallCountAndDialIndex(ctx, id, callIDs, callCount, dialIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallSetCallIDsAndCallCountAndDialIndex", reflect.TypeOf((*MockDBHandler)(nil).GroupcallSetCallIDsAndCallCountAndDialIndex), ctx, id, callIDs, callCount, dialIndex)
}

// GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex mocks base method.
func (m *MockDBHandler) GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex(ctx context.Context, id uuid.UUID, groupcallIDs []uuid.UUID, groupcallCount, dialIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex", ctx, id, groupcallIDs, groupcallCount, dialIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex indicates an expected call of GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex.
func (mr *MockDBHandlerMockRecorder) GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex(ctx, id, groupcallIDs, groupcallCount, dialIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex", reflect.TypeOf((*MockDBHandler)(nil).GroupcallSetGroupcallIDsAndGroupcallCountAndDialIndex), ctx, id, groupcallIDs, groupcallCount, dialIndex)
}

// GroupcallSetStatus mocks base method.
func (m *MockDBHandler) GroupcallSetStatus(ctx context.Context, id uuid.UUID, status groupcall.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallSetStatus indicates an expected call of GroupcallSetStatus.
func (mr *MockDBHandlerMockRecorder) GroupcallSetStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallSetStatus", reflect.TypeOf((*MockDBHandler)(nil).GroupcallSetStatus), ctx, id, status)
}

// RecordingCreate mocks base method.
func (m *MockDBHandler) RecordingCreate(ctx context.Context, c *recording.Recording) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingCreate indicates an expected call of RecordingCreate.
func (mr *MockDBHandlerMockRecorder) RecordingCreate(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingCreate", reflect.TypeOf((*MockDBHandler)(nil).RecordingCreate), ctx, c)
}

// RecordingDelete mocks base method.
func (m *MockDBHandler) RecordingDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingDelete indicates an expected call of RecordingDelete.
func (mr *MockDBHandlerMockRecorder) RecordingDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingDelete", reflect.TypeOf((*MockDBHandler)(nil).RecordingDelete), ctx, id)
}

// RecordingGet mocks base method.
func (m *MockDBHandler) RecordingGet(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGet", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGet indicates an expected call of RecordingGet.
func (mr *MockDBHandlerMockRecorder) RecordingGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGet", reflect.TypeOf((*MockDBHandler)(nil).RecordingGet), ctx, id)
}

// RecordingGetByRecordingName mocks base method.
func (m *MockDBHandler) RecordingGetByRecordingName(ctx context.Context, recordingName string) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGetByRecordingName", ctx, recordingName)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGetByRecordingName indicates an expected call of RecordingGetByRecordingName.
func (mr *MockDBHandlerMockRecorder) RecordingGetByRecordingName(ctx, recordingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGetByRecordingName", reflect.TypeOf((*MockDBHandler)(nil).RecordingGetByRecordingName), ctx, recordingName)
}

// RecordingGets mocks base method.
func (m *MockDBHandler) RecordingGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGets indicates an expected call of RecordingGets.
func (mr *MockDBHandlerMockRecorder) RecordingGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGets", reflect.TypeOf((*MockDBHandler)(nil).RecordingGets), ctx, size, token, filters)
}

// RecordingSetStatus mocks base method.
func (m *MockDBHandler) RecordingSetStatus(ctx context.Context, id uuid.UUID, status recording.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingSetStatus indicates an expected call of RecordingSetStatus.
func (mr *MockDBHandlerMockRecorder) RecordingSetStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingSetStatus", reflect.TypeOf((*MockDBHandler)(nil).RecordingSetStatus), ctx, id, status)
}
