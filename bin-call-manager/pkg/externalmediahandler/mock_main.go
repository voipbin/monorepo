// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package externalmediahandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package externalmediahandler is a generated GoMock package.
package externalmediahandler

import (
	context "context"
	ari "monorepo/bin-call-manager/models/ari"
	channel "monorepo/bin-call-manager/models/channel"
	externalmedia "monorepo/bin-call-manager/models/externalmedia"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalMediaHandler is a mock of ExternalMediaHandler interface.
type MockExternalMediaHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExternalMediaHandlerMockRecorder
	isgomock struct{}
}

// MockExternalMediaHandlerMockRecorder is the mock recorder for MockExternalMediaHandler.
type MockExternalMediaHandlerMockRecorder struct {
	mock *MockExternalMediaHandler
}

// NewMockExternalMediaHandler creates a new mock instance.
func NewMockExternalMediaHandler(ctrl *gomock.Controller) *MockExternalMediaHandler {
	mock := &MockExternalMediaHandler{ctrl: ctrl}
	mock.recorder = &MockExternalMediaHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalMediaHandler) EXPECT() *MockExternalMediaHandlerMockRecorder {
	return m.recorder
}

// ARIPlaybackFinished mocks base method.
func (m *MockExternalMediaHandler) ARIPlaybackFinished(ctx context.Context, cn *channel.Channel, e *ari.PlaybackFinished) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIPlaybackFinished", ctx, cn, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIPlaybackFinished indicates an expected call of ARIPlaybackFinished.
func (mr *MockExternalMediaHandlerMockRecorder) ARIPlaybackFinished(ctx, cn, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIPlaybackFinished", reflect.TypeOf((*MockExternalMediaHandler)(nil).ARIPlaybackFinished), ctx, cn, e)
}

// Get mocks base method.
func (m *MockExternalMediaHandler) Get(ctx context.Context, id uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExternalMediaHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExternalMediaHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockExternalMediaHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockExternalMediaHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockExternalMediaHandler)(nil).Gets), ctx, size, token, filters)
}

// Start mocks base method.
func (m *MockExternalMediaHandler) Start(ctx context.Context, id uuid.UUID, referenceType externalmedia.ReferenceType, referenceID uuid.UUID, externalHost string, encapsulation externalmedia.Encapsulation, transport externalmedia.Transport, connectionType, format string, directionListen, directionSpeak externalmedia.Direction) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, id, referenceType, referenceID, externalHost, encapsulation, transport, connectionType, format, directionListen, directionSpeak)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockExternalMediaHandlerMockRecorder) Start(ctx, id, referenceType, referenceID, externalHost, encapsulation, transport, connectionType, format, directionListen, directionSpeak any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockExternalMediaHandler)(nil).Start), ctx, id, referenceType, referenceID, externalHost, encapsulation, transport, connectionType, format, directionListen, directionSpeak)
}

// Stop mocks base method.
func (m *MockExternalMediaHandler) Stop(ctx context.Context, externalMediaID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, externalMediaID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockExternalMediaHandlerMockRecorder) Stop(ctx, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockExternalMediaHandler)(nil).Stop), ctx, externalMediaID)
}
