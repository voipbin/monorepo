// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	bridge "monorepo/bin-call-manager/models/bridge"
	call "monorepo/bin-call-manager/models/call"
	callapplication "monorepo/bin-call-manager/models/callapplication"
	channel "monorepo/bin-call-manager/models/channel"
	confbridge "monorepo/bin-call-manager/models/confbridge"
	externalmedia "monorepo/bin-call-manager/models/externalmedia"
	groupcall "monorepo/bin-call-manager/models/groupcall"
	recording "monorepo/bin-call-manager/models/recording"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// AsteriskAddressInternalGet mocks base method.
func (m *MockCacheHandler) AsteriskAddressInternalGet(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsteriskAddressInternalGet", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsteriskAddressInternalGet indicates an expected call of AsteriskAddressInternalGet.
func (mr *MockCacheHandlerMockRecorder) AsteriskAddressInternalGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsteriskAddressInternalGet", reflect.TypeOf((*MockCacheHandler)(nil).AsteriskAddressInternalGet), ctx, id)
}

// BridgeGet mocks base method.
func (m *MockCacheHandler) BridgeGet(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGet", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGet indicates an expected call of BridgeGet.
func (mr *MockCacheHandlerMockRecorder) BridgeGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGet", reflect.TypeOf((*MockCacheHandler)(nil).BridgeGet), ctx, id)
}

// BridgeSet mocks base method.
func (m *MockCacheHandler) BridgeSet(ctx context.Context, bridge *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeSet", ctx, bridge)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeSet indicates an expected call of BridgeSet.
func (mr *MockCacheHandlerMockRecorder) BridgeSet(ctx, bridge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeSet", reflect.TypeOf((*MockCacheHandler)(nil).BridgeSet), ctx, bridge)
}

// CallAppAMDGet mocks base method.
func (m *MockCacheHandler) CallAppAMDGet(ctx context.Context, channelID string) (*callapplication.AMD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAppAMDGet", ctx, channelID)
	ret0, _ := ret[0].(*callapplication.AMD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallAppAMDGet indicates an expected call of CallAppAMDGet.
func (mr *MockCacheHandlerMockRecorder) CallAppAMDGet(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAppAMDGet", reflect.TypeOf((*MockCacheHandler)(nil).CallAppAMDGet), ctx, channelID)
}

// CallAppAMDSet mocks base method.
func (m *MockCacheHandler) CallAppAMDSet(ctx context.Context, channelID string, app *callapplication.AMD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAppAMDSet", ctx, channelID, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallAppAMDSet indicates an expected call of CallAppAMDSet.
func (mr *MockCacheHandlerMockRecorder) CallAppAMDSet(ctx, channelID, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAppAMDSet", reflect.TypeOf((*MockCacheHandler)(nil).CallAppAMDSet), ctx, channelID, app)
}

// CallGet mocks base method.
func (m *MockCacheHandler) CallGet(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockCacheHandlerMockRecorder) CallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockCacheHandler)(nil).CallGet), ctx, id)
}

// CallSet mocks base method.
func (m *MockCacheHandler) CallSet(ctx context.Context, call *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSet", ctx, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSet indicates an expected call of CallSet.
func (mr *MockCacheHandlerMockRecorder) CallSet(ctx, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSet", reflect.TypeOf((*MockCacheHandler)(nil).CallSet), ctx, call)
}

// ChannelGet mocks base method.
func (m *MockCacheHandler) ChannelGet(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGet", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGet indicates an expected call of ChannelGet.
func (mr *MockCacheHandlerMockRecorder) ChannelGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGet", reflect.TypeOf((*MockCacheHandler)(nil).ChannelGet), ctx, id)
}

// ChannelSet mocks base method.
func (m *MockCacheHandler) ChannelSet(ctx context.Context, channel *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSet", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSet indicates an expected call of ChannelSet.
func (mr *MockCacheHandlerMockRecorder) ChannelSet(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSet", reflect.TypeOf((*MockCacheHandler)(nil).ChannelSet), ctx, channel)
}

// ConfbridgeGet mocks base method.
func (m *MockCacheHandler) ConfbridgeGet(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGet", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGet indicates an expected call of ConfbridgeGet.
func (mr *MockCacheHandlerMockRecorder) ConfbridgeGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGet", reflect.TypeOf((*MockCacheHandler)(nil).ConfbridgeGet), ctx, id)
}

// ConfbridgeSet mocks base method.
func (m *MockCacheHandler) ConfbridgeSet(ctx context.Context, data *confbridge.Confbridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSet indicates an expected call of ConfbridgeSet.
func (mr *MockCacheHandlerMockRecorder) ConfbridgeSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSet", reflect.TypeOf((*MockCacheHandler)(nil).ConfbridgeSet), ctx, data)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// ExternalMediaDelete mocks base method.
func (m *MockCacheHandler) ExternalMediaDelete(ctx context.Context, externalMediaID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaDelete", ctx, externalMediaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalMediaDelete indicates an expected call of ExternalMediaDelete.
func (mr *MockCacheHandlerMockRecorder) ExternalMediaDelete(ctx, externalMediaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaDelete", reflect.TypeOf((*MockCacheHandler)(nil).ExternalMediaDelete), ctx, externalMediaID)
}

// ExternalMediaGet mocks base method.
func (m *MockCacheHandler) ExternalMediaGet(ctx context.Context, externalMediaID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaGet", ctx, externalMediaID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaGet indicates an expected call of ExternalMediaGet.
func (mr *MockCacheHandlerMockRecorder) ExternalMediaGet(ctx, externalMediaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaGet", reflect.TypeOf((*MockCacheHandler)(nil).ExternalMediaGet), ctx, externalMediaID)
}

// ExternalMediaGetByReferenceID mocks base method.
func (m *MockCacheHandler) ExternalMediaGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaGetByReferenceID indicates an expected call of ExternalMediaGetByReferenceID.
func (mr *MockCacheHandlerMockRecorder) ExternalMediaGetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaGetByReferenceID", reflect.TypeOf((*MockCacheHandler)(nil).ExternalMediaGetByReferenceID), ctx, referenceID)
}

// ExternalMediaSet mocks base method.
func (m *MockCacheHandler) ExternalMediaSet(ctx context.Context, data *externalmedia.ExternalMedia) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalMediaSet indicates an expected call of ExternalMediaSet.
func (mr *MockCacheHandlerMockRecorder) ExternalMediaSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaSet", reflect.TypeOf((*MockCacheHandler)(nil).ExternalMediaSet), ctx, data)
}

// GroupcallGet mocks base method.
func (m *MockCacheHandler) GroupcallGet(ctx context.Context, id uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallGet", ctx, id)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupcallGet indicates an expected call of GroupcallGet.
func (mr *MockCacheHandlerMockRecorder) GroupcallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallGet", reflect.TypeOf((*MockCacheHandler)(nil).GroupcallGet), ctx, id)
}

// GroupcallSet mocks base method.
func (m *MockCacheHandler) GroupcallSet(ctx context.Context, data *groupcall.Groupcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupcallSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupcallSet indicates an expected call of GroupcallSet.
func (mr *MockCacheHandlerMockRecorder) GroupcallSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupcallSet", reflect.TypeOf((*MockCacheHandler)(nil).GroupcallSet), ctx, data)
}

// RecordingGet mocks base method.
func (m *MockCacheHandler) RecordingGet(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGet", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGet indicates an expected call of RecordingGet.
func (mr *MockCacheHandlerMockRecorder) RecordingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGet", reflect.TypeOf((*MockCacheHandler)(nil).RecordingGet), ctx, id)
}

// RecordingSet mocks base method.
func (m *MockCacheHandler) RecordingSet(ctx context.Context, record *recording.Recording) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingSet", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingSet indicates an expected call of RecordingSet.
func (mr *MockCacheHandlerMockRecorder) RecordingSet(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingSet", reflect.TypeOf((*MockCacheHandler)(nil).RecordingSet), ctx, record)
}
