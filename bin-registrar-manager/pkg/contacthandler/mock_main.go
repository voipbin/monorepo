// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package contacthandler is a generated GoMock package.
package contacthandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	astcontact "monorepo/bin-registrar-manager/models/astcontact"
)

// MockContactHandler is a mock of ContactHandler interface.
type MockContactHandler struct {
	ctrl     *gomock.Controller
	recorder *MockContactHandlerMockRecorder
}

// MockContactHandlerMockRecorder is the mock recorder for MockContactHandler.
type MockContactHandlerMockRecorder struct {
	mock *MockContactHandler
}

// NewMockContactHandler creates a new mock instance.
func NewMockContactHandler(ctrl *gomock.Controller) *MockContactHandler {
	mock := &MockContactHandler{ctrl: ctrl}
	mock.recorder = &MockContactHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactHandler) EXPECT() *MockContactHandlerMockRecorder {
	return m.recorder
}

// ContactGetsByExtension mocks base method.
func (m *MockContactHandler) ContactGetsByExtension(ctx context.Context, customerID uuid.UUID, ext string) ([]*astcontact.AstContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContactGetsByExtension", ctx, customerID, ext)
	ret0, _ := ret[0].([]*astcontact.AstContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContactGetsByExtension indicates an expected call of ContactGetsByExtension.
func (mr *MockContactHandlerMockRecorder) ContactGetsByExtension(ctx, customerID, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContactGetsByExtension", reflect.TypeOf((*MockContactHandler)(nil).ContactGetsByExtension), ctx, customerID, ext)
}

// ContactRefreshByEndpoint mocks base method.
func (m *MockContactHandler) ContactRefreshByEndpoint(ctx context.Context, customerID uuid.UUID, ext string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContactRefreshByEndpoint", ctx, customerID, ext)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContactRefreshByEndpoint indicates an expected call of ContactRefreshByEndpoint.
func (mr *MockContactHandlerMockRecorder) ContactRefreshByEndpoint(ctx, customerID, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContactRefreshByEndpoint", reflect.TypeOf((*MockContactHandler)(nil).ContactRefreshByEndpoint), ctx, customerID, ext)
}
