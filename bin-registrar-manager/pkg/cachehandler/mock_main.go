// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	astaor "monorepo/bin-registrar-manager/models/astaor"
	astauth "monorepo/bin-registrar-manager/models/astauth"
	astcontact "monorepo/bin-registrar-manager/models/astcontact"
	astendpoint "monorepo/bin-registrar-manager/models/astendpoint"
	extension "monorepo/bin-registrar-manager/models/extension"
	trunk "monorepo/bin-registrar-manager/models/trunk"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// AstAORDel mocks base method.
func (m *MockCacheHandler) AstAORDel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORDel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORDel indicates an expected call of AstAORDel.
func (mr *MockCacheHandlerMockRecorder) AstAORDel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORDel", reflect.TypeOf((*MockCacheHandler)(nil).AstAORDel), ctx, id)
}

// AstAORGet mocks base method.
func (m *MockCacheHandler) AstAORGet(ctx context.Context, id string) (*astaor.AstAOR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORGet", ctx, id)
	ret0, _ := ret[0].(*astaor.AstAOR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAORGet indicates an expected call of AstAORGet.
func (mr *MockCacheHandlerMockRecorder) AstAORGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORGet", reflect.TypeOf((*MockCacheHandler)(nil).AstAORGet), ctx, id)
}

// AstAORSet mocks base method.
func (m *MockCacheHandler) AstAORSet(ctx context.Context, e *astaor.AstAOR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORSet", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORSet indicates an expected call of AstAORSet.
func (mr *MockCacheHandlerMockRecorder) AstAORSet(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORSet", reflect.TypeOf((*MockCacheHandler)(nil).AstAORSet), ctx, e)
}

// AstAuthDel mocks base method.
func (m *MockCacheHandler) AstAuthDel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthDel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthDel indicates an expected call of AstAuthDel.
func (mr *MockCacheHandlerMockRecorder) AstAuthDel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthDel", reflect.TypeOf((*MockCacheHandler)(nil).AstAuthDel), ctx, id)
}

// AstAuthGet mocks base method.
func (m *MockCacheHandler) AstAuthGet(ctx context.Context, id string) (*astauth.AstAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthGet", ctx, id)
	ret0, _ := ret[0].(*astauth.AstAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAuthGet indicates an expected call of AstAuthGet.
func (mr *MockCacheHandlerMockRecorder) AstAuthGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthGet", reflect.TypeOf((*MockCacheHandler)(nil).AstAuthGet), ctx, id)
}

// AstAuthSet mocks base method.
func (m *MockCacheHandler) AstAuthSet(ctx context.Context, e *astauth.AstAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthSet", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthSet indicates an expected call of AstAuthSet.
func (mr *MockCacheHandlerMockRecorder) AstAuthSet(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthSet", reflect.TypeOf((*MockCacheHandler)(nil).AstAuthSet), ctx, e)
}

// AstContactsDel mocks base method.
func (m *MockCacheHandler) AstContactsDel(ctx context.Context, endpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstContactsDel", ctx, endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstContactsDel indicates an expected call of AstContactsDel.
func (mr *MockCacheHandlerMockRecorder) AstContactsDel(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstContactsDel", reflect.TypeOf((*MockCacheHandler)(nil).AstContactsDel), ctx, endpoint)
}

// AstContactsGet mocks base method.
func (m *MockCacheHandler) AstContactsGet(ctx context.Context, endpoint string) ([]*astcontact.AstContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstContactsGet", ctx, endpoint)
	ret0, _ := ret[0].([]*astcontact.AstContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstContactsGet indicates an expected call of AstContactsGet.
func (mr *MockCacheHandlerMockRecorder) AstContactsGet(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstContactsGet", reflect.TypeOf((*MockCacheHandler)(nil).AstContactsGet), ctx, endpoint)
}

// AstContactsSet mocks base method.
func (m *MockCacheHandler) AstContactsSet(ctx context.Context, endpoint string, contacts []*astcontact.AstContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstContactsSet", ctx, endpoint, contacts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstContactsSet indicates an expected call of AstContactsSet.
func (mr *MockCacheHandlerMockRecorder) AstContactsSet(ctx, endpoint, contacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstContactsSet", reflect.TypeOf((*MockCacheHandler)(nil).AstContactsSet), ctx, endpoint, contacts)
}

// AstEndpointDel mocks base method.
func (m *MockCacheHandler) AstEndpointDel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointDel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointDel indicates an expected call of AstEndpointDel.
func (mr *MockCacheHandlerMockRecorder) AstEndpointDel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointDel", reflect.TypeOf((*MockCacheHandler)(nil).AstEndpointDel), ctx, id)
}

// AstEndpointGet mocks base method.
func (m *MockCacheHandler) AstEndpointGet(ctx context.Context, id string) (*astendpoint.AstEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointGet", ctx, id)
	ret0, _ := ret[0].(*astendpoint.AstEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstEndpointGet indicates an expected call of AstEndpointGet.
func (mr *MockCacheHandlerMockRecorder) AstEndpointGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointGet", reflect.TypeOf((*MockCacheHandler)(nil).AstEndpointGet), ctx, id)
}

// AstEndpointSet mocks base method.
func (m *MockCacheHandler) AstEndpointSet(ctx context.Context, e *astendpoint.AstEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointSet", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointSet indicates an expected call of AstEndpointSet.
func (mr *MockCacheHandlerMockRecorder) AstEndpointSet(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointSet", reflect.TypeOf((*MockCacheHandler)(nil).AstEndpointSet), ctx, e)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// ExtensionGet mocks base method.
func (m *MockCacheHandler) ExtensionGet(ctx context.Context, id uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGet", ctx, id)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGet indicates an expected call of ExtensionGet.
func (mr *MockCacheHandlerMockRecorder) ExtensionGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGet", reflect.TypeOf((*MockCacheHandler)(nil).ExtensionGet), ctx, id)
}

// ExtensionGetByCustomerIDANDExtension mocks base method.
func (m *MockCacheHandler) ExtensionGetByCustomerIDANDExtension(ctx context.Context, customerID uuid.UUID, ext string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetByCustomerIDANDExtension", ctx, customerID, ext)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetByCustomerIDANDExtension indicates an expected call of ExtensionGetByCustomerIDANDExtension.
func (mr *MockCacheHandlerMockRecorder) ExtensionGetByCustomerIDANDExtension(ctx, customerID, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetByCustomerIDANDExtension", reflect.TypeOf((*MockCacheHandler)(nil).ExtensionGetByCustomerIDANDExtension), ctx, customerID, ext)
}

// ExtensionGetByEndpointID mocks base method.
func (m *MockCacheHandler) ExtensionGetByEndpointID(ctx context.Context, endpointID string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetByEndpointID", ctx, endpointID)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetByEndpointID indicates an expected call of ExtensionGetByEndpointID.
func (mr *MockCacheHandlerMockRecorder) ExtensionGetByEndpointID(ctx, endpointID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetByEndpointID", reflect.TypeOf((*MockCacheHandler)(nil).ExtensionGetByEndpointID), ctx, endpointID)
}

// ExtensionSet mocks base method.
func (m *MockCacheHandler) ExtensionSet(ctx context.Context, e *extension.Extension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionSet", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionSet indicates an expected call of ExtensionSet.
func (mr *MockCacheHandlerMockRecorder) ExtensionSet(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionSet", reflect.TypeOf((*MockCacheHandler)(nil).ExtensionSet), ctx, e)
}

// TrunkDel mocks base method.
func (m *MockCacheHandler) TrunkDel(ctx context.Context, id uuid.UUID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkDel", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrunkDel indicates an expected call of TrunkDel.
func (mr *MockCacheHandlerMockRecorder) TrunkDel(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkDel", reflect.TypeOf((*MockCacheHandler)(nil).TrunkDel), ctx, id, name)
}

// TrunkGet mocks base method.
func (m *MockCacheHandler) TrunkGet(ctx context.Context, id uuid.UUID) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkGet", ctx, id)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrunkGet indicates an expected call of TrunkGet.
func (mr *MockCacheHandlerMockRecorder) TrunkGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkGet", reflect.TypeOf((*MockCacheHandler)(nil).TrunkGet), ctx, id)
}

// TrunkGetByDomainName mocks base method.
func (m *MockCacheHandler) TrunkGetByDomainName(ctx context.Context, domainName string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkGetByDomainName", ctx, domainName)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrunkGetByDomainName indicates an expected call of TrunkGetByDomainName.
func (mr *MockCacheHandlerMockRecorder) TrunkGetByDomainName(ctx, domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkGetByDomainName", reflect.TypeOf((*MockCacheHandler)(nil).TrunkGetByDomainName), ctx, domainName)
}

// TrunkSet mocks base method.
func (m *MockCacheHandler) TrunkSet(ctx context.Context, e *trunk.Trunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkSet", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrunkSet indicates an expected call of TrunkSet.
func (mr *MockCacheHandlerMockRecorder) TrunkSet(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkSet", reflect.TypeOf((*MockCacheHandler)(nil).TrunkSet), ctx, e)
}
