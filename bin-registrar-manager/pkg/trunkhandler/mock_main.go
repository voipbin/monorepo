// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package trunkhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package trunkhandler is a generated GoMock package.
package trunkhandler

import (
	context "context"
	customer "monorepo/bin-customer-manager/models/customer"
	sipauth "monorepo/bin-registrar-manager/models/sipauth"
	trunk "monorepo/bin-registrar-manager/models/trunk"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTrunkHandler is a mock of TrunkHandler interface.
type MockTrunkHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTrunkHandlerMockRecorder
	isgomock struct{}
}

// MockTrunkHandlerMockRecorder is the mock recorder for MockTrunkHandler.
type MockTrunkHandlerMockRecorder struct {
	mock *MockTrunkHandler
}

// NewMockTrunkHandler creates a new mock instance.
func NewMockTrunkHandler(ctrl *gomock.Controller) *MockTrunkHandler {
	mock := &MockTrunkHandler{ctrl: ctrl}
	mock.recorder = &MockTrunkHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrunkHandler) EXPECT() *MockTrunkHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTrunkHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail, domainName string, authTypes []sipauth.AuthType, username, password string, allowedIPs []string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, domainName, authTypes, username, password, allowedIPs)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTrunkHandlerMockRecorder) Create(ctx, customerID, name, detail, domainName, authTypes, username, password, allowedIPs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTrunkHandler)(nil).Create), ctx, customerID, name, detail, domainName, authTypes, username, password, allowedIPs)
}

// Delete mocks base method.
func (m *MockTrunkHandler) Delete(ctx context.Context, id uuid.UUID) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTrunkHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTrunkHandler)(nil).Delete), ctx, id)
}

// EventCUCustomerDeleted mocks base method.
func (m *MockTrunkHandler) EventCUCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCUCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCUCustomerDeleted indicates an expected call of EventCUCustomerDeleted.
func (mr *MockTrunkHandlerMockRecorder) EventCUCustomerDeleted(ctx, cu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCUCustomerDeleted", reflect.TypeOf((*MockTrunkHandler)(nil).EventCUCustomerDeleted), ctx, cu)
}

// Get mocks base method.
func (m *MockTrunkHandler) Get(ctx context.Context, id uuid.UUID) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTrunkHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTrunkHandler)(nil).Get), ctx, id)
}

// GetByDomainName mocks base method.
func (m *MockTrunkHandler) GetByDomainName(ctx context.Context, domainName string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDomainName", ctx, domainName)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDomainName indicates an expected call of GetByDomainName.
func (mr *MockTrunkHandlerMockRecorder) GetByDomainName(ctx, domainName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDomainName", reflect.TypeOf((*MockTrunkHandler)(nil).GetByDomainName), ctx, domainName)
}

// Gets mocks base method.
func (m *MockTrunkHandler) Gets(ctx context.Context, token string, limit uint64, filters map[string]string) ([]*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, limit, filters)
	ret0, _ := ret[0].([]*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockTrunkHandlerMockRecorder) Gets(ctx, token, limit, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockTrunkHandler)(nil).Gets), ctx, token, limit, filters)
}

// Update mocks base method.
func (m *MockTrunkHandler) Update(ctx context.Context, id uuid.UUID, name, detail string, authTypes []sipauth.AuthType, username, password string, allowedIPs []string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail, authTypes, username, password, allowedIPs)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTrunkHandlerMockRecorder) Update(ctx, id, name, detail, authTypes, username, password, allowedIPs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTrunkHandler)(nil).Update), ctx, id, name, detail, authTypes, username, password, allowedIPs)
}
