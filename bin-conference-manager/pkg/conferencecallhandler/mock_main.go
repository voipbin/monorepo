// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package conferencecallhandler is a generated GoMock package.
package conferencecallhandler

import (
	context "context"
	conferencecall "monorepo/bin-conference-manager/models/conferencecall"
	service "monorepo/bin-conference-manager/models/service"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockConferencecallHandler is a mock of ConferencecallHandler interface.
type MockConferencecallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConferencecallHandlerMockRecorder
}

// MockConferencecallHandlerMockRecorder is the mock recorder for MockConferencecallHandler.
type MockConferencecallHandlerMockRecorder struct {
	mock *MockConferencecallHandler
}

// NewMockConferencecallHandler creates a new mock instance.
func NewMockConferencecallHandler(ctrl *gomock.Controller) *MockConferencecallHandler {
	mock := &MockConferencecallHandler{ctrl: ctrl}
	mock.recorder = &MockConferencecallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConferencecallHandler) EXPECT() *MockConferencecallHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConferencecallHandler) Create(ctx context.Context, customerID, conferenceID uuid.UUID, referenceType conferencecall.ReferenceType, referenceID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, conferenceID, referenceType, referenceID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConferencecallHandlerMockRecorder) Create(ctx, customerID, conferenceID, referenceType, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConferencecallHandler)(nil).Create), ctx, customerID, conferenceID, referenceType, referenceID)
}

// Get mocks base method.
func (m *MockConferencecallHandler) Get(ctx context.Context, id uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConferencecallHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConferencecallHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockConferencecallHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockConferencecallHandlerMockRecorder) GetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockConferencecallHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// Gets mocks base method.
func (m *MockConferencecallHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockConferencecallHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockConferencecallHandler)(nil).Gets), ctx, size, token, filters)
}

// HealthCheck mocks base method.
func (m *MockConferencecallHandler) HealthCheck(ctx context.Context, id uuid.UUID, retryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", ctx, id, retryCount)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockConferencecallHandlerMockRecorder) HealthCheck(ctx, id, retryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockConferencecallHandler)(nil).HealthCheck), ctx, id, retryCount)
}

// Joined mocks base method.
func (m *MockConferencecallHandler) Joined(ctx context.Context, cc *conferencecall.Conferencecall) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Joined", ctx, cc)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Joined indicates an expected call of Joined.
func (mr *MockConferencecallHandlerMockRecorder) Joined(ctx, cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joined", reflect.TypeOf((*MockConferencecallHandler)(nil).Joined), ctx, cc)
}

// ServiceStart mocks base method.
func (m *MockConferencecallHandler) ServiceStart(ctx context.Context, conferenceID uuid.UUID, referenceType conferencecall.ReferenceType, referenceID uuid.UUID) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStart", ctx, conferenceID, referenceType, referenceID)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStart indicates an expected call of ServiceStart.
func (mr *MockConferencecallHandlerMockRecorder) ServiceStart(ctx, conferenceID, referenceType, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStart", reflect.TypeOf((*MockConferencecallHandler)(nil).ServiceStart), ctx, conferenceID, referenceType, referenceID)
}

// Terminate mocks base method.
func (m *MockConferencecallHandler) Terminate(ctx context.Context, id uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", ctx, id)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Terminate indicates an expected call of Terminate.
func (mr *MockConferencecallHandlerMockRecorder) Terminate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockConferencecallHandler)(nil).Terminate), ctx, id)
}

// Terminated mocks base method.
func (m *MockConferencecallHandler) Terminated(ctx context.Context, cc *conferencecall.Conferencecall) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminated", ctx, cc)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Terminated indicates an expected call of Terminated.
func (mr *MockConferencecallHandlerMockRecorder) Terminated(ctx, cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminated", reflect.TypeOf((*MockConferencecallHandler)(nil).Terminated), ctx, cc)
}
