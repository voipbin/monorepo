// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package conferencehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package conferencehandler is a generated GoMock package.
package conferencehandler

import (
	context "context"
	recording "monorepo/bin-call-manager/models/recording"
	conference "monorepo/bin-conference-manager/models/conference"
	action "monorepo/bin-flow-manager/models/action"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockConferenceHandler is a mock of ConferenceHandler interface.
type MockConferenceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConferenceHandlerMockRecorder
	isgomock struct{}
}

// MockConferenceHandlerMockRecorder is the mock recorder for MockConferenceHandler.
type MockConferenceHandlerMockRecorder struct {
	mock *MockConferenceHandler
}

// NewMockConferenceHandler creates a new mock instance.
func NewMockConferenceHandler(ctrl *gomock.Controller) *MockConferenceHandler {
	mock := &MockConferenceHandler{ctrl: ctrl}
	mock.recorder = &MockConferenceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConferenceHandler) EXPECT() *MockConferenceHandlerMockRecorder {
	return m.recorder
}

// AddConferencecallID mocks base method.
func (m *MockConferenceHandler) AddConferencecallID(ctx context.Context, id, conferencecallID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConferencecallID", ctx, id, conferencecallID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConferencecallID indicates an expected call of AddConferencecallID.
func (mr *MockConferenceHandlerMockRecorder) AddConferencecallID(ctx, id, conferencecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConferencecallID", reflect.TypeOf((*MockConferenceHandler)(nil).AddConferencecallID), ctx, id, conferencecallID)
}

// Create mocks base method.
func (m *MockConferenceHandler) Create(ctx context.Context, conferenceType conference.Type, customerID uuid.UUID, name, detail string, timeout int, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, conferenceType, customerID, name, detail, timeout, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConferenceHandlerMockRecorder) Create(ctx, conferenceType, customerID, name, detail, timeout, preActions, postActions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConferenceHandler)(nil).Create), ctx, conferenceType, customerID, name, detail, timeout, preActions, postActions)
}

// Delete mocks base method.
func (m *MockConferenceHandler) Delete(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockConferenceHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConferenceHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockConferenceHandler) Get(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConferenceHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConferenceHandler)(nil).Get), ctx, id)
}

// GetByConfbridgeID mocks base method.
func (m *MockConferenceHandler) GetByConfbridgeID(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByConfbridgeID", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByConfbridgeID indicates an expected call of GetByConfbridgeID.
func (mr *MockConferenceHandlerMockRecorder) GetByConfbridgeID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByConfbridgeID", reflect.TypeOf((*MockConferenceHandler)(nil).GetByConfbridgeID), ctx, id)
}

// Gets mocks base method.
func (m *MockConferenceHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockConferenceHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockConferenceHandler)(nil).Gets), ctx, size, token, filters)
}

// RecordingStart mocks base method.
func (m *MockConferenceHandler) RecordingStart(ctx context.Context, id uuid.UUID, format recording.Format, duration int, onEndFlowID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingStart", ctx, id, format, duration, onEndFlowID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingStart indicates an expected call of RecordingStart.
func (mr *MockConferenceHandlerMockRecorder) RecordingStart(ctx, id, format, duration, onEndFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingStart", reflect.TypeOf((*MockConferenceHandler)(nil).RecordingStart), ctx, id, format, duration, onEndFlowID)
}

// RecordingStop mocks base method.
func (m *MockConferenceHandler) RecordingStop(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingStop", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingStop indicates an expected call of RecordingStop.
func (mr *MockConferenceHandlerMockRecorder) RecordingStop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingStop", reflect.TypeOf((*MockConferenceHandler)(nil).RecordingStop), ctx, id)
}

// RemoveConferencecallID mocks base method.
func (m *MockConferenceHandler) RemoveConferencecallID(ctx context.Context, cfID, ccID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConferencecallID", ctx, cfID, ccID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveConferencecallID indicates an expected call of RemoveConferencecallID.
func (mr *MockConferenceHandlerMockRecorder) RemoveConferencecallID(ctx, cfID, ccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConferencecallID", reflect.TypeOf((*MockConferenceHandler)(nil).RemoveConferencecallID), ctx, cfID, ccID)
}

// Terminating mocks base method.
func (m *MockConferenceHandler) Terminating(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminating", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Terminating indicates an expected call of Terminating.
func (mr *MockConferenceHandlerMockRecorder) Terminating(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminating", reflect.TypeOf((*MockConferenceHandler)(nil).Terminating), ctx, id)
}

// TranscribeStart mocks base method.
func (m *MockConferenceHandler) TranscribeStart(ctx context.Context, id uuid.UUID, lang string) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeStart", ctx, id, lang)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeStart indicates an expected call of TranscribeStart.
func (mr *MockConferenceHandlerMockRecorder) TranscribeStart(ctx, id, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeStart", reflect.TypeOf((*MockConferenceHandler)(nil).TranscribeStart), ctx, id, lang)
}

// TranscribeStop mocks base method.
func (m *MockConferenceHandler) TranscribeStop(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeStop", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeStop indicates an expected call of TranscribeStop.
func (mr *MockConferenceHandlerMockRecorder) TranscribeStop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeStop", reflect.TypeOf((*MockConferenceHandler)(nil).TranscribeStop), ctx, id)
}

// Update mocks base method.
func (m *MockConferenceHandler) Update(ctx context.Context, id uuid.UUID, name, detail string, timeout int, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail, timeout, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockConferenceHandlerMockRecorder) Update(ctx, id, name, detail, timeout, preActions, postActions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConferenceHandler)(nil).Update), ctx, id, name, detail, timeout, preActions, postActions)
}

// UpdateRecordingID mocks base method.
func (m *MockConferenceHandler) UpdateRecordingID(ctx context.Context, id, recordingID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecordingID", ctx, id, recordingID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecordingID indicates an expected call of UpdateRecordingID.
func (mr *MockConferenceHandlerMockRecorder) UpdateRecordingID(ctx, id, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecordingID", reflect.TypeOf((*MockConferenceHandler)(nil).UpdateRecordingID), ctx, id, recordingID)
}
