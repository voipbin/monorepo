// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	conference "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conference"
	conferencecall "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conferencecall"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// ConferenceGet mocks base method.
func (m *MockCacheHandler) ConferenceGet(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGet", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGet indicates an expected call of ConferenceGet.
func (mr *MockCacheHandlerMockRecorder) ConferenceGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGet", reflect.TypeOf((*MockCacheHandler)(nil).ConferenceGet), ctx, id)
}

// ConferenceSet mocks base method.
func (m *MockCacheHandler) ConferenceSet(ctx context.Context, conference *conference.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSet", ctx, conference)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSet indicates an expected call of ConferenceSet.
func (mr *MockCacheHandlerMockRecorder) ConferenceSet(ctx, conference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSet", reflect.TypeOf((*MockCacheHandler)(nil).ConferenceSet), ctx, conference)
}

// ConferencecallGet mocks base method.
func (m *MockCacheHandler) ConferencecallGet(ctx context.Context, id uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferencecallGet", ctx, id)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferencecallGet indicates an expected call of ConferencecallGet.
func (mr *MockCacheHandlerMockRecorder) ConferencecallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferencecallGet", reflect.TypeOf((*MockCacheHandler)(nil).ConferencecallGet), ctx, id)
}

// ConferencecallGetByReferenceID mocks base method.
func (m *MockCacheHandler) ConferencecallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferencecallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferencecallGetByReferenceID indicates an expected call of ConferencecallGetByReferenceID.
func (mr *MockCacheHandlerMockRecorder) ConferencecallGetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferencecallGetByReferenceID", reflect.TypeOf((*MockCacheHandler)(nil).ConferencecallGetByReferenceID), ctx, referenceID)
}

// ConferencecallSet mocks base method.
func (m *MockCacheHandler) ConferencecallSet(ctx context.Context, conference *conferencecall.Conferencecall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferencecallSet", ctx, conference)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferencecallSet indicates an expected call of ConferencecallSet.
func (mr *MockCacheHandlerMockRecorder) ConferencecallSet(ctx, conference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferencecallSet", reflect.TypeOf((*MockCacheHandler)(nil).ConferencecallSet), ctx, conference)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}
