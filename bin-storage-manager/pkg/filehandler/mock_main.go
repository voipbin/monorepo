// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package filehandler is a generated GoMock package.
package filehandler

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockFileHandler is a mock of FileHandler interface.
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler.
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance.
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// CompressCreate mocks base method.
func (m *MockFileHandler) CompressCreate(ctx context.Context, srcBucketName string, srcFilepaths []string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompressCreate", ctx, srcBucketName, srcFilepaths)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompressCreate indicates an expected call of CompressCreate.
func (mr *MockFileHandlerMockRecorder) CompressCreate(ctx, srcBucketName, srcFilepaths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressCreate", reflect.TypeOf((*MockFileHandler)(nil).CompressCreate), ctx, srcBucketName, srcFilepaths)
}

// DeleteForce mocks base method.
func (m *MockFileHandler) DeleteForce(ctx context.Context, bucketName, filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForce", ctx, bucketName, filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForce indicates an expected call of DeleteForce.
func (mr *MockFileHandlerMockRecorder) DeleteForce(ctx, bucketName, filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForce", reflect.TypeOf((*MockFileHandler)(nil).DeleteForce), ctx, bucketName, filepath)
}

// DownloadURIGet mocks base method.
func (m *MockFileHandler) DownloadURIGet(ctx context.Context, bucketName, filepath string, expire time.Duration) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadURIGet", ctx, bucketName, filepath, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadURIGet indicates an expected call of DownloadURIGet.
func (mr *MockFileHandlerMockRecorder) DownloadURIGet(ctx, bucketName, filepath, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadURIGet", reflect.TypeOf((*MockFileHandler)(nil).DownloadURIGet), ctx, bucketName, filepath, expire)
}

// GetDownloadURI mocks base method.
func (m *MockFileHandler) GetDownloadURI(ctx context.Context, bucketName string, filepaths []string, expire time.Duration) (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadURI", ctx, bucketName, filepaths, expire)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDownloadURI indicates an expected call of GetDownloadURI.
func (mr *MockFileHandlerMockRecorder) GetDownloadURI(ctx, bucketName, filepaths, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadURI", reflect.TypeOf((*MockFileHandler)(nil).GetDownloadURI), ctx, bucketName, filepaths, expire)
}

// IsExist mocks base method.
func (m *MockFileHandler) IsExist(ctx context.Context, bucketName, filepath string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", ctx, bucketName, filepath)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockFileHandlerMockRecorder) IsExist(ctx, bucketName, filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockFileHandler)(nil).IsExist), ctx, bucketName, filepath)
}
