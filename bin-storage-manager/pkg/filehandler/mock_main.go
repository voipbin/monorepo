// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package filehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package filehandler is a generated GoMock package.
package filehandler

import (
	context "context"
	customer "monorepo/bin-customer-manager/models/customer"
	file "monorepo/bin-storage-manager/models/file"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockFileHandler is a mock of FileHandler interface.
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
	isgomock struct{}
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler.
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance.
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// CompressCreate mocks base method.
func (m *MockFileHandler) CompressCreate(ctx context.Context, files []*file.File) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompressCreate", ctx, files)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompressCreate indicates an expected call of CompressCreate.
func (mr *MockFileHandlerMockRecorder) CompressCreate(ctx, files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressCreate", reflect.TypeOf((*MockFileHandler)(nil).CompressCreate), ctx, files)
}

// Create mocks base method.
func (m *MockFileHandler) Create(ctx context.Context, customerID, ownerID uuid.UUID, referenceType file.ReferenceType, referenceID uuid.UUID, name, detail, filename, bucketName, filepath string) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileHandlerMockRecorder) Create(ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileHandler)(nil).Create), ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath)
}

// Delete mocks base method.
func (m *MockFileHandler) Delete(ctx context.Context, id uuid.UUID) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFileHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileHandler)(nil).Delete), ctx, id)
}

// DeleteBucketfile mocks base method.
func (m *MockFileHandler) DeleteBucketfile(ctx context.Context, bucketName, filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketfile", ctx, bucketName, filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucketfile indicates an expected call of DeleteBucketfile.
func (mr *MockFileHandlerMockRecorder) DeleteBucketfile(ctx, bucketName, filepath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketfile", reflect.TypeOf((*MockFileHandler)(nil).DeleteBucketfile), ctx, bucketName, filepath)
}

// DownloadURIGet mocks base method.
func (m *MockFileHandler) DownloadURIGet(ctx context.Context, bucketName, filepath string, expire time.Duration) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadURIGet", ctx, bucketName, filepath, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadURIGet indicates an expected call of DownloadURIGet.
func (mr *MockFileHandlerMockRecorder) DownloadURIGet(ctx, bucketName, filepath, expire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadURIGet", reflect.TypeOf((*MockFileHandler)(nil).DownloadURIGet), ctx, bucketName, filepath, expire)
}

// EventCustomerDeleted mocks base method.
func (m *MockFileHandler) EventCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCustomerDeleted indicates an expected call of EventCustomerDeleted.
func (mr *MockFileHandlerMockRecorder) EventCustomerDeleted(ctx, cu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCustomerDeleted", reflect.TypeOf((*MockFileHandler)(nil).EventCustomerDeleted), ctx, cu)
}

// Get mocks base method.
func (m *MockFileHandler) Get(ctx context.Context, id uuid.UUID) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockFileHandler) Gets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockFileHandlerMockRecorder) Gets(ctx, token, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockFileHandler)(nil).Gets), ctx, token, size, filters)
}

// IsExist mocks base method.
func (m *MockFileHandler) IsExist(ctx context.Context, bucketName, filepath string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", ctx, bucketName, filepath)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockFileHandlerMockRecorder) IsExist(ctx, bucketName, filepath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockFileHandler)(nil).IsExist), ctx, bucketName, filepath)
}
