// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package accounthandler is a generated GoMock package.
package accounthandler

import (
	context "context"
	customer "monorepo/bin-customer-manager/models/customer"
	account "monorepo/bin-storage-manager/models/account"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountHandler is a mock of AccountHandler interface.
type MockAccountHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccountHandlerMockRecorder
}

// MockAccountHandlerMockRecorder is the mock recorder for MockAccountHandler.
type MockAccountHandlerMockRecorder struct {
	mock *MockAccountHandler
}

// NewMockAccountHandler creates a new mock instance.
func NewMockAccountHandler(ctrl *gomock.Controller) *MockAccountHandler {
	mock := &MockAccountHandler{ctrl: ctrl}
	mock.recorder = &MockAccountHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountHandler) EXPECT() *MockAccountHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountHandler) Create(ctx context.Context, customerID uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountHandlerMockRecorder) Create(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountHandler)(nil).Create), ctx, customerID)
}

// DecreaseFileInfo mocks base method.
func (m *MockAccountHandler) DecreaseFileInfo(ctx context.Context, id uuid.UUID, filecount, filesize int64) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseFileInfo", ctx, id, filecount, filesize)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseFileInfo indicates an expected call of DecreaseFileInfo.
func (mr *MockAccountHandlerMockRecorder) DecreaseFileInfo(ctx, id, filecount, filesize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseFileInfo", reflect.TypeOf((*MockAccountHandler)(nil).DecreaseFileInfo), ctx, id, filecount, filesize)
}

// Delete mocks base method.
func (m *MockAccountHandler) Delete(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountHandler)(nil).Delete), ctx, id)
}

// EventCustomerCreated mocks base method.
func (m *MockAccountHandler) EventCustomerCreated(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCustomerCreated", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCustomerCreated indicates an expected call of EventCustomerCreated.
func (mr *MockAccountHandlerMockRecorder) EventCustomerCreated(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCustomerCreated", reflect.TypeOf((*MockAccountHandler)(nil).EventCustomerCreated), ctx, cu)
}

// EventCustomerDeleted mocks base method.
func (m *MockAccountHandler) EventCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCustomerDeleted indicates an expected call of EventCustomerDeleted.
func (mr *MockAccountHandlerMockRecorder) EventCustomerDeleted(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCustomerDeleted", reflect.TypeOf((*MockAccountHandler)(nil).EventCustomerDeleted), ctx, cu)
}

// Get mocks base method.
func (m *MockAccountHandler) Get(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockAccountHandler) Gets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockAccountHandlerMockRecorder) Gets(ctx, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockAccountHandler)(nil).Gets), ctx, token, size, filters)
}

// IncreaseFileInfo mocks base method.
func (m *MockAccountHandler) IncreaseFileInfo(ctx context.Context, id uuid.UUID, filecount, filesize int64) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseFileInfo", ctx, id, filecount, filesize)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseFileInfo indicates an expected call of IncreaseFileInfo.
func (mr *MockAccountHandlerMockRecorder) IncreaseFileInfo(ctx, id, filecount, filesize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseFileInfo", reflect.TypeOf((*MockAccountHandler)(nil).IncreaseFileInfo), ctx, id, filecount, filesize)
}

// ValidateFileInfoByCustomerID mocks base method.
func (m *MockAccountHandler) ValidateFileInfoByCustomerID(ctx context.Context, customerID uuid.UUID, filecount, filesize int64) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFileInfoByCustomerID", ctx, customerID, filecount, filesize)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateFileInfoByCustomerID indicates an expected call of ValidateFileInfoByCustomerID.
func (mr *MockAccountHandlerMockRecorder) ValidateFileInfoByCustomerID(ctx, customerID, filecount, filesize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFileInfoByCustomerID", reflect.TypeOf((*MockAccountHandler)(nil).ValidateFileInfoByCustomerID), ctx, customerID, filecount, filesize)
}
