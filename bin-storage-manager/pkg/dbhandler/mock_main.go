// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	file "monorepo/bin-storage-manager/models/file"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// FileCreate mocks base method.
func (m *MockDBHandler) FileCreate(ctx context.Context, f *file.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileCreate", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileCreate indicates an expected call of FileCreate.
func (mr *MockDBHandlerMockRecorder) FileCreate(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileCreate", reflect.TypeOf((*MockDBHandler)(nil).FileCreate), ctx, f)
}

// FileDelete mocks base method.
func (m *MockDBHandler) FileDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileDelete indicates an expected call of FileDelete.
func (mr *MockDBHandlerMockRecorder) FileDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileDelete", reflect.TypeOf((*MockDBHandler)(nil).FileDelete), ctx, id)
}

// FileGet mocks base method.
func (m *MockDBHandler) FileGet(ctx context.Context, id uuid.UUID) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileGet", ctx, id)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileGet indicates an expected call of FileGet.
func (mr *MockDBHandlerMockRecorder) FileGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileGet", reflect.TypeOf((*MockDBHandler)(nil).FileGet), ctx, id)
}

// FileGets mocks base method.
func (m *MockDBHandler) FileGets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileGets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileGets indicates an expected call of FileGets.
func (mr *MockDBHandlerMockRecorder) FileGets(ctx, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileGets", reflect.TypeOf((*MockDBHandler)(nil).FileGets), ctx, token, size, filters)
}

// FileUpdate mocks base method.
func (m *MockDBHandler) FileUpdate(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileUpdate", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileUpdate indicates an expected call of FileUpdate.
func (mr *MockDBHandlerMockRecorder) FileUpdate(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileUpdate", reflect.TypeOf((*MockDBHandler)(nil).FileUpdate), ctx, id, name, detail)
}

// FileUpdateDownloadInfo mocks base method.
func (m *MockDBHandler) FileUpdateDownloadInfo(ctx context.Context, id uuid.UUID, uriDownload, tmDownloadExpire string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileUpdateDownloadInfo", ctx, id, uriDownload, tmDownloadExpire)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileUpdateDownloadInfo indicates an expected call of FileUpdateDownloadInfo.
func (mr *MockDBHandlerMockRecorder) FileUpdateDownloadInfo(ctx, id, uriDownload, tmDownloadExpire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileUpdateDownloadInfo", reflect.TypeOf((*MockDBHandler)(nil).FileUpdateDownloadInfo), ctx, id, uriDownload, tmDownloadExpire)
}
