// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
	conference "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conference"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
	domain "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/domain"
	extension "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/extension"
	bucketrecording "gitlab.com/voipbin/bin-manager/storage-manager.git/models/bucketrecording"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// CFConferenceCreate mocks base method.
func (m *MockRequestHandler) CFConferenceCreate(userID uint64, conferenceType conference.Type, name, detail, webhookURI string) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFConferenceCreate", userID, conferenceType, name, detail, webhookURI)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFConferenceCreate indicates an expected call of CFConferenceCreate.
func (mr *MockRequestHandlerMockRecorder) CFConferenceCreate(userID, conferenceType, name, detail, webhookURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFConferenceCreate", reflect.TypeOf((*MockRequestHandler)(nil).CFConferenceCreate), userID, conferenceType, name, detail, webhookURI)
}

// CFConferenceDelete mocks base method.
func (m *MockRequestHandler) CFConferenceDelete(conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFConferenceDelete", conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFConferenceDelete indicates an expected call of CFConferenceDelete.
func (mr *MockRequestHandlerMockRecorder) CFConferenceDelete(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFConferenceDelete", reflect.TypeOf((*MockRequestHandler)(nil).CFConferenceDelete), conferenceID)
}

// CFConferenceGet mocks base method.
func (m *MockRequestHandler) CFConferenceGet(conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFConferenceGet", conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFConferenceGet indicates an expected call of CFConferenceGet.
func (mr *MockRequestHandlerMockRecorder) CFConferenceGet(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFConferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).CFConferenceGet), conferenceID)
}

// CFConferenceGets mocks base method.
func (m *MockRequestHandler) CFConferenceGets(userID uint64, pageToken string, pageSize uint64, conferenceType string) ([]conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFConferenceGets", userID, pageToken, pageSize, conferenceType)
	ret0, _ := ret[0].([]conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFConferenceGets indicates an expected call of CFConferenceGets.
func (mr *MockRequestHandlerMockRecorder) CFConferenceGets(userID, pageToken, pageSize, conferenceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFConferenceGets", reflect.TypeOf((*MockRequestHandler)(nil).CFConferenceGets), userID, pageToken, pageSize, conferenceType)
}

// CMCallCreate mocks base method.
func (m *MockRequestHandler) CMCallCreate(userID uint64, flowID uuid.UUID, source, destination address.Address) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallCreate", userID, flowID, source, destination)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallCreate indicates an expected call of CMCallCreate.
func (mr *MockRequestHandlerMockRecorder) CMCallCreate(userID, flowID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMCallCreate), userID, flowID, source, destination)
}

// CMCallDelete mocks base method.
func (m *MockRequestHandler) CMCallDelete(callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallDelete", callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMCallDelete indicates an expected call of CMCallDelete.
func (mr *MockRequestHandlerMockRecorder) CMCallDelete(callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMCallDelete), callID)
}

// CMCallGet mocks base method.
func (m *MockRequestHandler) CMCallGet(callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallGet", callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallGet indicates an expected call of CMCallGet.
func (mr *MockRequestHandlerMockRecorder) CMCallGet(callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallGet", reflect.TypeOf((*MockRequestHandler)(nil).CMCallGet), callID)
}

// CMCallGets mocks base method.
func (m *MockRequestHandler) CMCallGets(userID uint64, pageToken string, pageSize uint64) ([]call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallGets indicates an expected call of CMCallGets.
func (mr *MockRequestHandlerMockRecorder) CMCallGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallGets", reflect.TypeOf((*MockRequestHandler)(nil).CMCallGets), userID, pageToken, pageSize)
}

// CMRecordingGet mocks base method.
func (m *MockRequestHandler) CMRecordingGet(id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMRecordingGet", id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMRecordingGet indicates an expected call of CMRecordingGet.
func (mr *MockRequestHandlerMockRecorder) CMRecordingGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMRecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).CMRecordingGet), id)
}

// CMRecordingGets mocks base method.
func (m *MockRequestHandler) CMRecordingGets(userID, size uint64, token string) ([]recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMRecordingGets", userID, size, token)
	ret0, _ := ret[0].([]recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMRecordingGets indicates an expected call of CMRecordingGets.
func (mr *MockRequestHandlerMockRecorder) CMRecordingGets(userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMRecordingGets", reflect.TypeOf((*MockRequestHandler)(nil).CMRecordingGets), userID, size, token)
}

// FMFlowCreate mocks base method.
func (m *MockRequestHandler) FMFlowCreate(f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowCreate", f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowCreate indicates an expected call of FMFlowCreate.
func (mr *MockRequestHandlerMockRecorder) FMFlowCreate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowCreate), f)
}

// FMFlowDelete mocks base method.
func (m *MockRequestHandler) FMFlowDelete(flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowDelete", flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FMFlowDelete indicates an expected call of FMFlowDelete.
func (mr *MockRequestHandlerMockRecorder) FMFlowDelete(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowDelete), flowID)
}

// FMFlowGet mocks base method.
func (m *MockRequestHandler) FMFlowGet(flowID uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowGet", flowID)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowGet indicates an expected call of FMFlowGet.
func (mr *MockRequestHandlerMockRecorder) FMFlowGet(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowGet", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowGet), flowID)
}

// FMFlowGets mocks base method.
func (m *MockRequestHandler) FMFlowGets(userID uint64, pageToken string, pageSize uint64) ([]flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowGets indicates an expected call of FMFlowGets.
func (mr *MockRequestHandlerMockRecorder) FMFlowGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowGets", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowGets), userID, pageToken, pageSize)
}

// FMFlowUpdate mocks base method.
func (m *MockRequestHandler) FMFlowUpdate(f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowUpdate", f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowUpdate indicates an expected call of FMFlowUpdate.
func (mr *MockRequestHandlerMockRecorder) FMFlowUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowUpdate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowUpdate), f)
}

// NMAvailableNumbersGet mocks base method.
func (m *MockRequestHandler) NMAvailableNumbersGet(userID, pageSize uint64, countryCode string) ([]availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMAvailableNumbersGet", userID, pageSize, countryCode)
	ret0, _ := ret[0].([]availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMAvailableNumbersGet indicates an expected call of NMAvailableNumbersGet.
func (mr *MockRequestHandlerMockRecorder) NMAvailableNumbersGet(userID, pageSize, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMAvailableNumbersGet", reflect.TypeOf((*MockRequestHandler)(nil).NMAvailableNumbersGet), userID, pageSize, countryCode)
}

// NMNumberCreate mocks base method.
func (m *MockRequestHandler) NMNumberCreate(userID uint64, numb string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberCreate", userID, numb)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberCreate indicates an expected call of NMNumberCreate.
func (mr *MockRequestHandlerMockRecorder) NMNumberCreate(userID, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberCreate", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberCreate), userID, numb)
}

// NMNumberDelete mocks base method.
func (m *MockRequestHandler) NMNumberDelete(id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberDelete", id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberDelete indicates an expected call of NMNumberDelete.
func (mr *MockRequestHandlerMockRecorder) NMNumberDelete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberDelete", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberDelete), id)
}

// NMNumberGet mocks base method.
func (m *MockRequestHandler) NMNumberGet(numberID uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberGet", numberID)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberGet indicates an expected call of NMNumberGet.
func (mr *MockRequestHandlerMockRecorder) NMNumberGet(numberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberGet", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberGet), numberID)
}

// NMNumberGets mocks base method.
func (m *MockRequestHandler) NMNumberGets(userID uint64, pageToken string, pageSize uint64) ([]number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberGets indicates an expected call of NMNumberGets.
func (mr *MockRequestHandlerMockRecorder) NMNumberGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberGets), userID, pageToken, pageSize)
}

// NMNumberUpdate mocks base method.
func (m *MockRequestHandler) NMNumberUpdate(num *number.Number) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberUpdate", num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberUpdate indicates an expected call of NMNumberUpdate.
func (mr *MockRequestHandlerMockRecorder) NMNumberUpdate(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberUpdate", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberUpdate), num)
}

// RMDomainCreate mocks base method.
func (m *MockRequestHandler) RMDomainCreate(userID uint64, domainName, name, detail string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainCreate", userID, domainName, name, detail)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainCreate indicates an expected call of RMDomainCreate.
func (mr *MockRequestHandlerMockRecorder) RMDomainCreate(userID, domainName, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainCreate), userID, domainName, name, detail)
}

// RMDomainDelete mocks base method.
func (m *MockRequestHandler) RMDomainDelete(domainID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainDelete", domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMDomainDelete indicates an expected call of RMDomainDelete.
func (mr *MockRequestHandlerMockRecorder) RMDomainDelete(domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainDelete), domainID)
}

// RMDomainGet mocks base method.
func (m *MockRequestHandler) RMDomainGet(domainID uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainGet", domainID)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainGet indicates an expected call of RMDomainGet.
func (mr *MockRequestHandlerMockRecorder) RMDomainGet(domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainGet", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainGet), domainID)
}

// RMDomainGets mocks base method.
func (m *MockRequestHandler) RMDomainGets(userID uint64, pageToken string, pageSize uint64) ([]domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainGets indicates an expected call of RMDomainGets.
func (mr *MockRequestHandlerMockRecorder) RMDomainGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainGets", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainGets), userID, pageToken, pageSize)
}

// RMDomainUpdate mocks base method.
func (m *MockRequestHandler) RMDomainUpdate(f *domain.Domain) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainUpdate", f)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainUpdate indicates an expected call of RMDomainUpdate.
func (mr *MockRequestHandlerMockRecorder) RMDomainUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainUpdate), f)
}

// RMExtensionCreate mocks base method.
func (m *MockRequestHandler) RMExtensionCreate(e *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionCreate", e)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionCreate indicates an expected call of RMExtensionCreate.
func (mr *MockRequestHandlerMockRecorder) RMExtensionCreate(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionCreate), e)
}

// RMExtensionDelete mocks base method.
func (m *MockRequestHandler) RMExtensionDelete(extensionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionDelete", extensionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMExtensionDelete indicates an expected call of RMExtensionDelete.
func (mr *MockRequestHandlerMockRecorder) RMExtensionDelete(extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionDelete), extensionID)
}

// RMExtensionGet mocks base method.
func (m *MockRequestHandler) RMExtensionGet(extensionID uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionGet", extensionID)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionGet indicates an expected call of RMExtensionGet.
func (mr *MockRequestHandlerMockRecorder) RMExtensionGet(extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionGet", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionGet), extensionID)
}

// RMExtensionGets mocks base method.
func (m *MockRequestHandler) RMExtensionGets(domainID uuid.UUID, pageToken string, pageSize uint64) ([]extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionGets", domainID, pageToken, pageSize)
	ret0, _ := ret[0].([]extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionGets indicates an expected call of RMExtensionGets.
func (mr *MockRequestHandlerMockRecorder) RMExtensionGets(domainID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionGets", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionGets), domainID, pageToken, pageSize)
}

// RMExtensionUpdate mocks base method.
func (m *MockRequestHandler) RMExtensionUpdate(f *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionUpdate", f)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionUpdate indicates an expected call of RMExtensionUpdate.
func (mr *MockRequestHandlerMockRecorder) RMExtensionUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionUpdate), f)
}

// SMRecordingGet mocks base method.
func (m *MockRequestHandler) SMRecordingGet(id uuid.UUID) (*bucketrecording.BucketRecording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMRecordingGet", id)
	ret0, _ := ret[0].(*bucketrecording.BucketRecording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMRecordingGet indicates an expected call of SMRecordingGet.
func (mr *MockRequestHandlerMockRecorder) SMRecordingGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMRecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).SMRecordingGet), id)
}

// TMRecordingPost mocks base method.
func (m *MockRequestHandler) TMRecordingPost(id uuid.UUID, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TMRecordingPost", id, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TMRecordingPost indicates an expected call of TMRecordingPost.
func (mr *MockRequestHandlerMockRecorder) TMRecordingPost(id, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TMRecordingPost", reflect.TypeOf((*MockRequestHandler)(nil).TMRecordingPost), id, language)
}
