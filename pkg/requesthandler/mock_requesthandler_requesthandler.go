// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/voipbin/bin-manager/api-manager.git/models"
	cmcall "gitlab.com/voipbin/bin-manager/api-manager.git/pkg/requesthandler/models/cmcall"
	cmconference "gitlab.com/voipbin/bin-manager/api-manager.git/pkg/requesthandler/models/cmconference"
	cmrecording "gitlab.com/voipbin/bin-manager/api-manager.git/pkg/requesthandler/models/cmrecording"
	fmflow "gitlab.com/voipbin/bin-manager/api-manager.git/pkg/requesthandler/models/fmflow"
	nmnumber "gitlab.com/voipbin/bin-manager/api-manager.git/pkg/requesthandler/models/nmnumber"
	rmdomain "gitlab.com/voipbin/bin-manager/api-manager.git/pkg/requesthandler/models/rmdomain"
	rmextension "gitlab.com/voipbin/bin-manager/api-manager.git/pkg/requesthandler/models/rmextension"
	reflect "reflect"
)

// MockRequestHandler is a mock of RequestHandler interface
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// CMCallCreate mocks base method
func (m *MockRequestHandler) CMCallCreate(userID uint64, flowID uuid.UUID, source, destination cmcall.Address) (*cmcall.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallCreate", userID, flowID, source, destination)
	ret0, _ := ret[0].(*cmcall.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallCreate indicates an expected call of CMCallCreate
func (mr *MockRequestHandlerMockRecorder) CMCallCreate(userID, flowID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMCallCreate), userID, flowID, source, destination)
}

// CMCallDelete mocks base method
func (m *MockRequestHandler) CMCallDelete(callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallDelete", callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMCallDelete indicates an expected call of CMCallDelete
func (mr *MockRequestHandlerMockRecorder) CMCallDelete(callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMCallDelete), callID)
}

// CMCallGet mocks base method
func (m *MockRequestHandler) CMCallGet(callID uuid.UUID) (*cmcall.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallGet", callID)
	ret0, _ := ret[0].(*cmcall.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallGet indicates an expected call of CMCallGet
func (mr *MockRequestHandlerMockRecorder) CMCallGet(callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallGet", reflect.TypeOf((*MockRequestHandler)(nil).CMCallGet), callID)
}

// CMCallGets mocks base method
func (m *MockRequestHandler) CMCallGets(userID uint64, pageToken string, pageSize uint64) ([]cmcall.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]cmcall.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallGets indicates an expected call of CMCallGets
func (mr *MockRequestHandlerMockRecorder) CMCallGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallGets", reflect.TypeOf((*MockRequestHandler)(nil).CMCallGets), userID, pageToken, pageSize)
}

// CMConferenceCreate mocks base method
func (m *MockRequestHandler) CMConferenceCreate(userID uint64, conferenceType cmconference.Type, name, detail string) (*cmconference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConferenceCreate", userID, conferenceType, name, detail)
	ret0, _ := ret[0].(*cmconference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMConferenceCreate indicates an expected call of CMConferenceCreate
func (mr *MockRequestHandlerMockRecorder) CMConferenceCreate(userID, conferenceType, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConferenceCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMConferenceCreate), userID, conferenceType, name, detail)
}

// CMConferenceDelete mocks base method
func (m *MockRequestHandler) CMConferenceDelete(conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConferenceDelete", conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMConferenceDelete indicates an expected call of CMConferenceDelete
func (mr *MockRequestHandlerMockRecorder) CMConferenceDelete(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConferenceDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMConferenceDelete), conferenceID)
}

// CMConferenceGet mocks base method
func (m *MockRequestHandler) CMConferenceGet(conferenceID uuid.UUID) (*cmconference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConferenceGet", conferenceID)
	ret0, _ := ret[0].(*cmconference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMConferenceGet indicates an expected call of CMConferenceGet
func (mr *MockRequestHandlerMockRecorder) CMConferenceGet(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).CMConferenceGet), conferenceID)
}

// CMRecordingGet mocks base method
func (m *MockRequestHandler) CMRecordingGet(id uuid.UUID) (*cmrecording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMRecordingGet", id)
	ret0, _ := ret[0].(*cmrecording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMRecordingGet indicates an expected call of CMRecordingGet
func (mr *MockRequestHandlerMockRecorder) CMRecordingGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMRecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).CMRecordingGet), id)
}

// CMRecordingGets mocks base method
func (m *MockRequestHandler) CMRecordingGets(userID, size uint64, token string) ([]cmrecording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMRecordingGets", userID, size, token)
	ret0, _ := ret[0].([]cmrecording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMRecordingGets indicates an expected call of CMRecordingGets
func (mr *MockRequestHandlerMockRecorder) CMRecordingGets(userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMRecordingGets", reflect.TypeOf((*MockRequestHandler)(nil).CMRecordingGets), userID, size, token)
}

// FMFlowCreate mocks base method
func (m *MockRequestHandler) FMFlowCreate(userID uint64, id uuid.UUID, name, detail string, actions []models.Action, persist bool) (*fmflow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowCreate", userID, id, name, detail, actions, persist)
	ret0, _ := ret[0].(*fmflow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowCreate indicates an expected call of FMFlowCreate
func (mr *MockRequestHandlerMockRecorder) FMFlowCreate(userID, id, name, detail, actions, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowCreate), userID, id, name, detail, actions, persist)
}

// FMFlowDelete mocks base method
func (m *MockRequestHandler) FMFlowDelete(flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowDelete", flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FMFlowDelete indicates an expected call of FMFlowDelete
func (mr *MockRequestHandlerMockRecorder) FMFlowDelete(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowDelete), flowID)
}

// FMFlowGet mocks base method
func (m *MockRequestHandler) FMFlowGet(flowID uuid.UUID) (*fmflow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowGet", flowID)
	ret0, _ := ret[0].(*fmflow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowGet indicates an expected call of FMFlowGet
func (mr *MockRequestHandlerMockRecorder) FMFlowGet(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowGet", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowGet), flowID)
}

// FMFlowGets mocks base method
func (m *MockRequestHandler) FMFlowGets(userID uint64, pageToken string, pageSize uint64) ([]fmflow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]fmflow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowGets indicates an expected call of FMFlowGets
func (mr *MockRequestHandlerMockRecorder) FMFlowGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowGets", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowGets), userID, pageToken, pageSize)
}

// FMFlowUpdate mocks base method
func (m *MockRequestHandler) FMFlowUpdate(f *fmflow.Flow) (*fmflow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowUpdate", f)
	ret0, _ := ret[0].(*fmflow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowUpdate indicates an expected call of FMFlowUpdate
func (mr *MockRequestHandlerMockRecorder) FMFlowUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowUpdate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowUpdate), f)
}

// NMAvailableNumbersGet mocks base method
func (m *MockRequestHandler) NMAvailableNumbersGet(userID, pageSize uint64, countryCode string) ([]nmnumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMAvailableNumbersGet", userID, pageSize, countryCode)
	ret0, _ := ret[0].([]nmnumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMAvailableNumbersGet indicates an expected call of NMAvailableNumbersGet
func (mr *MockRequestHandlerMockRecorder) NMAvailableNumbersGet(userID, pageSize, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMAvailableNumbersGet", reflect.TypeOf((*MockRequestHandler)(nil).NMAvailableNumbersGet), userID, pageSize, countryCode)
}

// NMNumberCreate mocks base method
func (m *MockRequestHandler) NMNumberCreate(userID uint64, numb string) (*nmnumber.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberCreate", userID, numb)
	ret0, _ := ret[0].(*nmnumber.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberCreate indicates an expected call of NMNumberCreate
func (mr *MockRequestHandlerMockRecorder) NMNumberCreate(userID, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberCreate", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberCreate), userID, numb)
}

// NMNumberDelete mocks base method
func (m *MockRequestHandler) NMNumberDelete(id uuid.UUID) (*nmnumber.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberDelete", id)
	ret0, _ := ret[0].(*nmnumber.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberDelete indicates an expected call of NMNumberDelete
func (mr *MockRequestHandlerMockRecorder) NMNumberDelete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberDelete", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberDelete), id)
}

// NMNumberGet mocks base method
func (m *MockRequestHandler) NMNumberGet(numberID uuid.UUID) (*nmnumber.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberGet", numberID)
	ret0, _ := ret[0].(*nmnumber.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberGet indicates an expected call of NMNumberGet
func (mr *MockRequestHandlerMockRecorder) NMNumberGet(numberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberGet", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberGet), numberID)
}

// NMNumberGets mocks base method
func (m *MockRequestHandler) NMNumberGets(userID uint64, pageToken string, pageSize uint64) ([]nmnumber.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]nmnumber.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberGets indicates an expected call of NMNumberGets
func (mr *MockRequestHandlerMockRecorder) NMNumberGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberGets), userID, pageToken, pageSize)
}

// NMNumberUpdate mocks base method
func (m *MockRequestHandler) NMNumberUpdate(num *nmnumber.Number) (*nmnumber.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberUpdate", num)
	ret0, _ := ret[0].(*nmnumber.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMNumberUpdate indicates an expected call of NMNumberUpdate
func (mr *MockRequestHandlerMockRecorder) NMNumberUpdate(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberUpdate", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberUpdate), num)
}

// RMDomainCreate mocks base method
func (m *MockRequestHandler) RMDomainCreate(userID uint64, domainName, name, detail string) (*rmdomain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainCreate", userID, domainName, name, detail)
	ret0, _ := ret[0].(*rmdomain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainCreate indicates an expected call of RMDomainCreate
func (mr *MockRequestHandlerMockRecorder) RMDomainCreate(userID, domainName, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainCreate), userID, domainName, name, detail)
}

// RMDomainDelete mocks base method
func (m *MockRequestHandler) RMDomainDelete(domainID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainDelete", domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMDomainDelete indicates an expected call of RMDomainDelete
func (mr *MockRequestHandlerMockRecorder) RMDomainDelete(domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainDelete), domainID)
}

// RMDomainGet mocks base method
func (m *MockRequestHandler) RMDomainGet(domainID uuid.UUID) (*rmdomain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainGet", domainID)
	ret0, _ := ret[0].(*rmdomain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainGet indicates an expected call of RMDomainGet
func (mr *MockRequestHandlerMockRecorder) RMDomainGet(domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainGet", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainGet), domainID)
}

// RMDomainGets mocks base method
func (m *MockRequestHandler) RMDomainGets(userID uint64, pageToken string, pageSize uint64) ([]rmdomain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]rmdomain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainGets indicates an expected call of RMDomainGets
func (mr *MockRequestHandlerMockRecorder) RMDomainGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainGets", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainGets), userID, pageToken, pageSize)
}

// RMDomainUpdate mocks base method
func (m *MockRequestHandler) RMDomainUpdate(f *rmdomain.Domain) (*rmdomain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMDomainUpdate", f)
	ret0, _ := ret[0].(*rmdomain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMDomainUpdate indicates an expected call of RMDomainUpdate
func (mr *MockRequestHandlerMockRecorder) RMDomainUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMDomainUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMDomainUpdate), f)
}

// RMExtensionCreate mocks base method
func (m *MockRequestHandler) RMExtensionCreate(e *rmextension.Extension) (*rmextension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionCreate", e)
	ret0, _ := ret[0].(*rmextension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionCreate indicates an expected call of RMExtensionCreate
func (mr *MockRequestHandlerMockRecorder) RMExtensionCreate(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionCreate), e)
}

// RMExtensionDelete mocks base method
func (m *MockRequestHandler) RMExtensionDelete(extensionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionDelete", extensionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMExtensionDelete indicates an expected call of RMExtensionDelete
func (mr *MockRequestHandlerMockRecorder) RMExtensionDelete(extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionDelete), extensionID)
}

// RMExtensionGet mocks base method
func (m *MockRequestHandler) RMExtensionGet(extensionID uuid.UUID) (*rmextension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionGet", extensionID)
	ret0, _ := ret[0].(*rmextension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionGet indicates an expected call of RMExtensionGet
func (mr *MockRequestHandlerMockRecorder) RMExtensionGet(extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionGet", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionGet), extensionID)
}

// RMExtensionGets mocks base method
func (m *MockRequestHandler) RMExtensionGets(domainID uuid.UUID, pageToken string, pageSize uint64) ([]rmextension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionGets", domainID, pageToken, pageSize)
	ret0, _ := ret[0].([]rmextension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionGets indicates an expected call of RMExtensionGets
func (mr *MockRequestHandlerMockRecorder) RMExtensionGets(domainID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionGets", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionGets), domainID, pageToken, pageSize)
}

// RMExtensionUpdate mocks base method
func (m *MockRequestHandler) RMExtensionUpdate(f *rmextension.Extension) (*rmextension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMExtensionUpdate", f)
	ret0, _ := ret[0].(*rmextension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMExtensionUpdate indicates an expected call of RMExtensionUpdate
func (mr *MockRequestHandlerMockRecorder) RMExtensionUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMExtensionUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMExtensionUpdate), f)
}

// STRecordingGet mocks base method
func (m *MockRequestHandler) STRecordingGet(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "STRecordingGet", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// STRecordingGet indicates an expected call of STRecordingGet
func (mr *MockRequestHandlerMockRecorder) STRecordingGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "STRecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).STRecordingGet), id)
}
