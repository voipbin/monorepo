// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package servicehandler is a generated GoMock package.
package servicehandler

import (
	context "context"
	http "net/http"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	agent "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agent"
	tag "gitlab.com/voipbin/bin-manager/agent-manager.git/models/tag"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
	campaign "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/campaign"
	campaigncall "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/campaigncall"
	outplan "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/outplan"
	chat "gitlab.com/voipbin/bin-manager/chat-manager.git/models/chat"
	chatroom "gitlab.com/voipbin/bin-manager/chat-manager.git/models/chatroom"
	media "gitlab.com/voipbin/bin-manager/chat-manager.git/models/media"
	messagechat "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechat"
	messagechatroom "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechatroom"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
	conference "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conference"
	conferencecall "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conferencecall"
	conversation "gitlab.com/voipbin/bin-manager/conversation-manager.git/models/conversation"
	media0 "gitlab.com/voipbin/bin-manager/conversation-manager.git/models/media"
	message "gitlab.com/voipbin/bin-manager/conversation-manager.git/models/message"
	customer "gitlab.com/voipbin/bin-manager/customer-manager.git/models/customer"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
	message0 "gitlab.com/voipbin/bin-manager/message-manager.git/models/message"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
	outdial "gitlab.com/voipbin/bin-manager/outdial-manager.git/models/outdial"
	outdialtarget "gitlab.com/voipbin/bin-manager/outdial-manager.git/models/outdialtarget"
	queue "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queue"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
	domain "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/domain"
	extension "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/extension"
	provider "gitlab.com/voipbin/bin-manager/route-manager.git/models/provider"
	route "gitlab.com/voipbin/bin-manager/route-manager.git/models/route"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
	transcript "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcript"
)

// MockServiceHandler is a mock of ServiceHandler interface.
type MockServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceHandlerMockRecorder
}

// MockServiceHandlerMockRecorder is the mock recorder for MockServiceHandler.
type MockServiceHandlerMockRecorder struct {
	mock *MockServiceHandler
}

// NewMockServiceHandler creates a new mock instance.
func NewMockServiceHandler(ctrl *gomock.Controller) *MockServiceHandler {
	mock := &MockServiceHandler{ctrl: ctrl}
	mock.recorder = &MockServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceHandler) EXPECT() *MockServiceHandlerMockRecorder {
	return m.recorder
}

// AgentCreate mocks base method.
func (m *MockServiceHandler) AgentCreate(ctx context.Context, u *customer.Customer, username, password, name, detail string, ringMethod agent.RingMethod, permission agent.Permission, tagIDs []uuid.UUID, addresses []address.Address) (*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCreate", ctx, u, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
	ret0, _ := ret[0].(*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentCreate indicates an expected call of AgentCreate.
func (mr *MockServiceHandlerMockRecorder) AgentCreate(ctx, u, username, password, name, detail, ringMethod, permission, tagIDs, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCreate", reflect.TypeOf((*MockServiceHandler)(nil).AgentCreate), ctx, u, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
}

// AgentDelete mocks base method.
func (m *MockServiceHandler) AgentDelete(ctx context.Context, u *customer.Customer, agentID uuid.UUID) (*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDelete", ctx, u, agentID)
	ret0, _ := ret[0].(*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentDelete indicates an expected call of AgentDelete.
func (mr *MockServiceHandlerMockRecorder) AgentDelete(ctx, u, agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDelete", reflect.TypeOf((*MockServiceHandler)(nil).AgentDelete), ctx, u, agentID)
}

// AgentGet mocks base method.
func (m *MockServiceHandler) AgentGet(ctx context.Context, u *customer.Customer, agentID uuid.UUID) (*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGet", ctx, u, agentID)
	ret0, _ := ret[0].(*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGet indicates an expected call of AgentGet.
func (mr *MockServiceHandlerMockRecorder) AgentGet(ctx, u, agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGet", reflect.TypeOf((*MockServiceHandler)(nil).AgentGet), ctx, u, agentID)
}

// AgentGets mocks base method.
func (m *MockServiceHandler) AgentGets(ctx context.Context, u *customer.Customer, size uint64, token string, tagIDs []uuid.UUID, status agent.Status) ([]*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGets", ctx, u, size, token, tagIDs, status)
	ret0, _ := ret[0].([]*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGets indicates an expected call of AgentGets.
func (mr *MockServiceHandlerMockRecorder) AgentGets(ctx, u, size, token, tagIDs, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGets", reflect.TypeOf((*MockServiceHandler)(nil).AgentGets), ctx, u, size, token, tagIDs, status)
}

// AgentLogin mocks base method.
func (m *MockServiceHandler) AgentLogin(ctx context.Context, customerID uuid.UUID, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogin", ctx, customerID, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentLogin indicates an expected call of AgentLogin.
func (mr *MockServiceHandlerMockRecorder) AgentLogin(ctx, customerID, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogin", reflect.TypeOf((*MockServiceHandler)(nil).AgentLogin), ctx, customerID, username, password)
}

// AgentUpdate mocks base method.
func (m *MockServiceHandler) AgentUpdate(ctx context.Context, u *customer.Customer, agentID uuid.UUID, name, detail string, ringMethod agent.RingMethod) (*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdate", ctx, u, agentID, name, detail, ringMethod)
	ret0, _ := ret[0].(*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentUpdate indicates an expected call of AgentUpdate.
func (mr *MockServiceHandlerMockRecorder) AgentUpdate(ctx, u, agentID, name, detail, ringMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdate", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdate), ctx, u, agentID, name, detail, ringMethod)
}

// AgentUpdateAddresses mocks base method.
func (m *MockServiceHandler) AgentUpdateAddresses(ctx context.Context, u *customer.Customer, agentID uuid.UUID, addresses []address.Address) (*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateAddresses", ctx, u, agentID, addresses)
	ret0, _ := ret[0].(*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentUpdateAddresses indicates an expected call of AgentUpdateAddresses.
func (mr *MockServiceHandlerMockRecorder) AgentUpdateAddresses(ctx, u, agentID, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateAddresses", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdateAddresses), ctx, u, agentID, addresses)
}

// AgentUpdateStatus mocks base method.
func (m *MockServiceHandler) AgentUpdateStatus(ctx context.Context, u *customer.Customer, agentID uuid.UUID, status agent.Status) (*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateStatus", ctx, u, agentID, status)
	ret0, _ := ret[0].(*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentUpdateStatus indicates an expected call of AgentUpdateStatus.
func (mr *MockServiceHandlerMockRecorder) AgentUpdateStatus(ctx, u, agentID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateStatus", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdateStatus), ctx, u, agentID, status)
}

// AgentUpdateTagIDs mocks base method.
func (m *MockServiceHandler) AgentUpdateTagIDs(ctx context.Context, u *customer.Customer, agentID uuid.UUID, tagIDs []uuid.UUID) (*agent.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateTagIDs", ctx, u, agentID, tagIDs)
	ret0, _ := ret[0].(*agent.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentUpdateTagIDs indicates an expected call of AgentUpdateTagIDs.
func (mr *MockServiceHandlerMockRecorder) AgentUpdateTagIDs(ctx, u, agentID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateTagIDs", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdateTagIDs), ctx, u, agentID, tagIDs)
}

// AuthLogin mocks base method.
func (m *MockServiceHandler) AuthLogin(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthLogin", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthLogin indicates an expected call of AuthLogin.
func (mr *MockServiceHandlerMockRecorder) AuthLogin(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthLogin", reflect.TypeOf((*MockServiceHandler)(nil).AuthLogin), ctx, username, password)
}

// AvailableNumberGets mocks base method.
func (m *MockServiceHandler) AvailableNumberGets(ctx context.Context, u *customer.Customer, size uint64, countryCode string) ([]*availablenumber.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableNumberGets", ctx, u, size, countryCode)
	ret0, _ := ret[0].([]*availablenumber.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableNumberGets indicates an expected call of AvailableNumberGets.
func (mr *MockServiceHandlerMockRecorder) AvailableNumberGets(ctx, u, size, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableNumberGets", reflect.TypeOf((*MockServiceHandler)(nil).AvailableNumberGets), ctx, u, size, countryCode)
}

// CallCreate mocks base method.
func (m *MockServiceHandler) CallCreate(ctx context.Context, u *customer.Customer, flowID uuid.UUID, actions []action.Action, source *address.Address, destinations []address.Address) ([]*call.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCreate", ctx, u, flowID, actions, source, destinations)
	ret0, _ := ret[0].([]*call.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallCreate indicates an expected call of CallCreate.
func (mr *MockServiceHandlerMockRecorder) CallCreate(ctx, u, flowID, actions, source, destinations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCreate", reflect.TypeOf((*MockServiceHandler)(nil).CallCreate), ctx, u, flowID, actions, source, destinations)
}

// CallDelete mocks base method.
func (m *MockServiceHandler) CallDelete(ctx context.Context, u *customer.Customer, callID uuid.UUID) (*call.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallDelete", ctx, u, callID)
	ret0, _ := ret[0].(*call.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallDelete indicates an expected call of CallDelete.
func (mr *MockServiceHandlerMockRecorder) CallDelete(ctx, u, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDelete", reflect.TypeOf((*MockServiceHandler)(nil).CallDelete), ctx, u, callID)
}

// CallGet mocks base method.
func (m *MockServiceHandler) CallGet(ctx context.Context, u *customer.Customer, callID uuid.UUID) (*call.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", ctx, u, callID)
	ret0, _ := ret[0].(*call.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockServiceHandlerMockRecorder) CallGet(ctx, u, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockServiceHandler)(nil).CallGet), ctx, u, callID)
}

// CallGets mocks base method.
func (m *MockServiceHandler) CallGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*call.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*call.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGets indicates an expected call of CallGets.
func (mr *MockServiceHandlerMockRecorder) CallGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGets", reflect.TypeOf((*MockServiceHandler)(nil).CallGets), ctx, u, size, token)
}

// CallHangup mocks base method.
func (m *MockServiceHandler) CallHangup(ctx context.Context, u *customer.Customer, callID uuid.UUID) (*call.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallHangup", ctx, u, callID)
	ret0, _ := ret[0].(*call.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallHangup indicates an expected call of CallHangup.
func (mr *MockServiceHandlerMockRecorder) CallHangup(ctx, u, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallHangup", reflect.TypeOf((*MockServiceHandler)(nil).CallHangup), ctx, u, callID)
}

// CampaignCreate mocks base method.
func (m *MockServiceHandler) CampaignCreate(ctx context.Context, u *customer.Customer, name, detail string, campaignType campaign.Type, serviceLevel int, endHandle campaign.EndHandle, actions []action.Action, outplanID, outdialID, queueID, nextCampaignID uuid.UUID) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignCreate", ctx, u, name, detail, campaignType, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignCreate indicates an expected call of CampaignCreate.
func (mr *MockServiceHandlerMockRecorder) CampaignCreate(ctx, u, name, detail, campaignType, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignCreate", reflect.TypeOf((*MockServiceHandler)(nil).CampaignCreate), ctx, u, name, detail, campaignType, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID)
}

// CampaignDelete mocks base method.
func (m *MockServiceHandler) CampaignDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignDelete", ctx, u, id)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignDelete indicates an expected call of CampaignDelete.
func (mr *MockServiceHandlerMockRecorder) CampaignDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignDelete", reflect.TypeOf((*MockServiceHandler)(nil).CampaignDelete), ctx, u, id)
}

// CampaignGet mocks base method.
func (m *MockServiceHandler) CampaignGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignGet", ctx, u, id)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignGet indicates an expected call of CampaignGet.
func (mr *MockServiceHandlerMockRecorder) CampaignGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignGet", reflect.TypeOf((*MockServiceHandler)(nil).CampaignGet), ctx, u, id)
}

// CampaignGetsByCustomerID mocks base method.
func (m *MockServiceHandler) CampaignGetsByCustomerID(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignGetsByCustomerID", ctx, u, size, token)
	ret0, _ := ret[0].([]*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignGetsByCustomerID indicates an expected call of CampaignGetsByCustomerID.
func (mr *MockServiceHandlerMockRecorder) CampaignGetsByCustomerID(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignGetsByCustomerID", reflect.TypeOf((*MockServiceHandler)(nil).CampaignGetsByCustomerID), ctx, u, size, token)
}

// CampaignUpdateActions mocks base method.
func (m *MockServiceHandler) CampaignUpdateActions(ctx context.Context, u *customer.Customer, id uuid.UUID, actions []action.Action) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateActions", ctx, u, id, actions)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignUpdateActions indicates an expected call of CampaignUpdateActions.
func (mr *MockServiceHandlerMockRecorder) CampaignUpdateActions(ctx, u, id, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateActions", reflect.TypeOf((*MockServiceHandler)(nil).CampaignUpdateActions), ctx, u, id, actions)
}

// CampaignUpdateBasicInfo mocks base method.
func (m *MockServiceHandler) CampaignUpdateBasicInfo(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateBasicInfo", ctx, u, id, name, detail)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignUpdateBasicInfo indicates an expected call of CampaignUpdateBasicInfo.
func (mr *MockServiceHandlerMockRecorder) CampaignUpdateBasicInfo(ctx, u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateBasicInfo", reflect.TypeOf((*MockServiceHandler)(nil).CampaignUpdateBasicInfo), ctx, u, id, name, detail)
}

// CampaignUpdateNextCampaignID mocks base method.
func (m *MockServiceHandler) CampaignUpdateNextCampaignID(ctx context.Context, u *customer.Customer, id, nextCampaignID uuid.UUID) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateNextCampaignID", ctx, u, id, nextCampaignID)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignUpdateNextCampaignID indicates an expected call of CampaignUpdateNextCampaignID.
func (mr *MockServiceHandlerMockRecorder) CampaignUpdateNextCampaignID(ctx, u, id, nextCampaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateNextCampaignID", reflect.TypeOf((*MockServiceHandler)(nil).CampaignUpdateNextCampaignID), ctx, u, id, nextCampaignID)
}

// CampaignUpdateResourceInfo mocks base method.
func (m *MockServiceHandler) CampaignUpdateResourceInfo(ctx context.Context, u *customer.Customer, id, outplanID, outdialID, queueID uuid.UUID) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateResourceInfo", ctx, u, id, outplanID, outdialID, queueID)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignUpdateResourceInfo indicates an expected call of CampaignUpdateResourceInfo.
func (mr *MockServiceHandlerMockRecorder) CampaignUpdateResourceInfo(ctx, u, id, outplanID, outdialID, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateResourceInfo", reflect.TypeOf((*MockServiceHandler)(nil).CampaignUpdateResourceInfo), ctx, u, id, outplanID, outdialID, queueID)
}

// CampaignUpdateServiceLevel mocks base method.
func (m *MockServiceHandler) CampaignUpdateServiceLevel(ctx context.Context, u *customer.Customer, id uuid.UUID, serviceLevel int) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateServiceLevel", ctx, u, id, serviceLevel)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignUpdateServiceLevel indicates an expected call of CampaignUpdateServiceLevel.
func (mr *MockServiceHandlerMockRecorder) CampaignUpdateServiceLevel(ctx, u, id, serviceLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateServiceLevel", reflect.TypeOf((*MockServiceHandler)(nil).CampaignUpdateServiceLevel), ctx, u, id, serviceLevel)
}

// CampaignUpdateStatus mocks base method.
func (m *MockServiceHandler) CampaignUpdateStatus(ctx context.Context, u *customer.Customer, id uuid.UUID, status campaign.Status) (*campaign.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignUpdateStatus", ctx, u, id, status)
	ret0, _ := ret[0].(*campaign.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignUpdateStatus indicates an expected call of CampaignUpdateStatus.
func (mr *MockServiceHandlerMockRecorder) CampaignUpdateStatus(ctx, u, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignUpdateStatus", reflect.TypeOf((*MockServiceHandler)(nil).CampaignUpdateStatus), ctx, u, id, status)
}

// CampaigncallDelete mocks base method.
func (m *MockServiceHandler) CampaigncallDelete(ctx context.Context, u *customer.Customer, campaigncallID uuid.UUID) (*campaigncall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallDelete", ctx, u, campaigncallID)
	ret0, _ := ret[0].(*campaigncall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallDelete indicates an expected call of CampaigncallDelete.
func (mr *MockServiceHandlerMockRecorder) CampaigncallDelete(ctx, u, campaigncallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallDelete", reflect.TypeOf((*MockServiceHandler)(nil).CampaigncallDelete), ctx, u, campaigncallID)
}

// CampaigncallGet mocks base method.
func (m *MockServiceHandler) CampaigncallGet(ctx context.Context, u *customer.Customer, campaigncallID uuid.UUID) (*campaigncall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGet", ctx, u, campaigncallID)
	ret0, _ := ret[0].(*campaigncall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGet indicates an expected call of CampaigncallGet.
func (mr *MockServiceHandlerMockRecorder) CampaigncallGet(ctx, u, campaigncallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGet", reflect.TypeOf((*MockServiceHandler)(nil).CampaigncallGet), ctx, u, campaigncallID)
}

// CampaigncallGetsByCampaignID mocks base method.
func (m *MockServiceHandler) CampaigncallGetsByCampaignID(ctx context.Context, u *customer.Customer, campaignID uuid.UUID, size uint64, token string) ([]*campaigncall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaigncallGetsByCampaignID", ctx, u, campaignID, size, token)
	ret0, _ := ret[0].([]*campaigncall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaigncallGetsByCampaignID indicates an expected call of CampaigncallGetsByCampaignID.
func (mr *MockServiceHandlerMockRecorder) CampaigncallGetsByCampaignID(ctx, u, campaignID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaigncallGetsByCampaignID", reflect.TypeOf((*MockServiceHandler)(nil).CampaigncallGetsByCampaignID), ctx, u, campaignID, size, token)
}

// ChatAddParticipantID mocks base method.
func (m *MockServiceHandler) ChatAddParticipantID(ctx context.Context, u *customer.Customer, id, participantID uuid.UUID) (*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatAddParticipantID", ctx, u, id, participantID)
	ret0, _ := ret[0].(*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatAddParticipantID indicates an expected call of ChatAddParticipantID.
func (mr *MockServiceHandlerMockRecorder) ChatAddParticipantID(ctx, u, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatAddParticipantID", reflect.TypeOf((*MockServiceHandler)(nil).ChatAddParticipantID), ctx, u, id, participantID)
}

// ChatCreate mocks base method.
func (m *MockServiceHandler) ChatCreate(ctx context.Context, u *customer.Customer, chatType chat.Type, ownerID uuid.UUID, participantIDs []uuid.UUID, name, detail string) (*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCreate", ctx, u, chatType, ownerID, participantIDs, name, detail)
	ret0, _ := ret[0].(*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatCreate indicates an expected call of ChatCreate.
func (mr *MockServiceHandlerMockRecorder) ChatCreate(ctx, u, chatType, ownerID, participantIDs, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCreate", reflect.TypeOf((*MockServiceHandler)(nil).ChatCreate), ctx, u, chatType, ownerID, participantIDs, name, detail)
}

// ChatDelete mocks base method.
func (m *MockServiceHandler) ChatDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatDelete", ctx, u, id)
	ret0, _ := ret[0].(*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatDelete indicates an expected call of ChatDelete.
func (mr *MockServiceHandlerMockRecorder) ChatDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatDelete", reflect.TypeOf((*MockServiceHandler)(nil).ChatDelete), ctx, u, id)
}

// ChatGet mocks base method.
func (m *MockServiceHandler) ChatGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGet", ctx, u, id)
	ret0, _ := ret[0].(*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGet indicates an expected call of ChatGet.
func (mr *MockServiceHandlerMockRecorder) ChatGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGet", reflect.TypeOf((*MockServiceHandler)(nil).ChatGet), ctx, u, id)
}

// ChatGetsByCustomerID mocks base method.
func (m *MockServiceHandler) ChatGetsByCustomerID(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGetsByCustomerID", ctx, u, size, token)
	ret0, _ := ret[0].([]*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGetsByCustomerID indicates an expected call of ChatGetsByCustomerID.
func (mr *MockServiceHandlerMockRecorder) ChatGetsByCustomerID(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGetsByCustomerID", reflect.TypeOf((*MockServiceHandler)(nil).ChatGetsByCustomerID), ctx, u, size, token)
}

// ChatRemoveParticipantID mocks base method.
func (m *MockServiceHandler) ChatRemoveParticipantID(ctx context.Context, u *customer.Customer, id, participantID uuid.UUID) (*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatRemoveParticipantID", ctx, u, id, participantID)
	ret0, _ := ret[0].(*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatRemoveParticipantID indicates an expected call of ChatRemoveParticipantID.
func (mr *MockServiceHandlerMockRecorder) ChatRemoveParticipantID(ctx, u, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatRemoveParticipantID", reflect.TypeOf((*MockServiceHandler)(nil).ChatRemoveParticipantID), ctx, u, id, participantID)
}

// ChatUpdateBasicInfo mocks base method.
func (m *MockServiceHandler) ChatUpdateBasicInfo(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string) (*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatUpdateBasicInfo", ctx, u, id, name, detail)
	ret0, _ := ret[0].(*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatUpdateBasicInfo indicates an expected call of ChatUpdateBasicInfo.
func (mr *MockServiceHandlerMockRecorder) ChatUpdateBasicInfo(ctx, u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatUpdateBasicInfo", reflect.TypeOf((*MockServiceHandler)(nil).ChatUpdateBasicInfo), ctx, u, id, name, detail)
}

// ChatUpdateOwnerID mocks base method.
func (m *MockServiceHandler) ChatUpdateOwnerID(ctx context.Context, u *customer.Customer, id, ownerID uuid.UUID) (*chat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatUpdateOwnerID", ctx, u, id, ownerID)
	ret0, _ := ret[0].(*chat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatUpdateOwnerID indicates an expected call of ChatUpdateOwnerID.
func (mr *MockServiceHandlerMockRecorder) ChatUpdateOwnerID(ctx, u, id, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatUpdateOwnerID", reflect.TypeOf((*MockServiceHandler)(nil).ChatUpdateOwnerID), ctx, u, id, ownerID)
}

// ChatmessageCreate mocks base method.
func (m *MockServiceHandler) ChatmessageCreate(ctx context.Context, u *customer.Customer, chatID uuid.UUID, source address.Address, messageType messagechat.Type, text string, medias []media.Media) (*messagechat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatmessageCreate", ctx, u, chatID, source, messageType, text, medias)
	ret0, _ := ret[0].(*messagechat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatmessageCreate indicates an expected call of ChatmessageCreate.
func (mr *MockServiceHandlerMockRecorder) ChatmessageCreate(ctx, u, chatID, source, messageType, text, medias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatmessageCreate", reflect.TypeOf((*MockServiceHandler)(nil).ChatmessageCreate), ctx, u, chatID, source, messageType, text, medias)
}

// ChatmessageDelete mocks base method.
func (m *MockServiceHandler) ChatmessageDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*messagechat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatmessageDelete", ctx, u, id)
	ret0, _ := ret[0].(*messagechat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatmessageDelete indicates an expected call of ChatmessageDelete.
func (mr *MockServiceHandlerMockRecorder) ChatmessageDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatmessageDelete", reflect.TypeOf((*MockServiceHandler)(nil).ChatmessageDelete), ctx, u, id)
}

// ChatmessageGet mocks base method.
func (m *MockServiceHandler) ChatmessageGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*messagechat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatmessageGet", ctx, u, id)
	ret0, _ := ret[0].(*messagechat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatmessageGet indicates an expected call of ChatmessageGet.
func (mr *MockServiceHandlerMockRecorder) ChatmessageGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatmessageGet", reflect.TypeOf((*MockServiceHandler)(nil).ChatmessageGet), ctx, u, id)
}

// ChatmessageGetsByChatID mocks base method.
func (m *MockServiceHandler) ChatmessageGetsByChatID(ctx context.Context, u *customer.Customer, chatID uuid.UUID, size uint64, token string) ([]*messagechat.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatmessageGetsByChatID", ctx, u, chatID, size, token)
	ret0, _ := ret[0].([]*messagechat.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatmessageGetsByChatID indicates an expected call of ChatmessageGetsByChatID.
func (mr *MockServiceHandlerMockRecorder) ChatmessageGetsByChatID(ctx, u, chatID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatmessageGetsByChatID", reflect.TypeOf((*MockServiceHandler)(nil).ChatmessageGetsByChatID), ctx, u, chatID, size, token)
}

// ChatroomDelete mocks base method.
func (m *MockServiceHandler) ChatroomDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*chatroom.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomDelete", ctx, u, id)
	ret0, _ := ret[0].(*chatroom.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomDelete indicates an expected call of ChatroomDelete.
func (mr *MockServiceHandlerMockRecorder) ChatroomDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomDelete", reflect.TypeOf((*MockServiceHandler)(nil).ChatroomDelete), ctx, u, id)
}

// ChatroomGet mocks base method.
func (m *MockServiceHandler) ChatroomGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*chatroom.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGet", ctx, u, id)
	ret0, _ := ret[0].(*chatroom.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGet indicates an expected call of ChatroomGet.
func (mr *MockServiceHandlerMockRecorder) ChatroomGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGet", reflect.TypeOf((*MockServiceHandler)(nil).ChatroomGet), ctx, u, id)
}

// ChatroomGetsByOwnerID mocks base method.
func (m *MockServiceHandler) ChatroomGetsByOwnerID(ctx context.Context, u *customer.Customer, ownerID uuid.UUID, size uint64, token string) ([]*chatroom.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGetsByOwnerID", ctx, u, ownerID, size, token)
	ret0, _ := ret[0].([]*chatroom.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGetsByOwnerID indicates an expected call of ChatroomGetsByOwnerID.
func (mr *MockServiceHandlerMockRecorder) ChatroomGetsByOwnerID(ctx, u, ownerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGetsByOwnerID", reflect.TypeOf((*MockServiceHandler)(nil).ChatroomGetsByOwnerID), ctx, u, ownerID, size, token)
}

// ChatroommessageDelete mocks base method.
func (m *MockServiceHandler) ChatroommessageDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*messagechatroom.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroommessageDelete", ctx, u, id)
	ret0, _ := ret[0].(*messagechatroom.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroommessageDelete indicates an expected call of ChatroommessageDelete.
func (mr *MockServiceHandlerMockRecorder) ChatroommessageDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroommessageDelete", reflect.TypeOf((*MockServiceHandler)(nil).ChatroommessageDelete), ctx, u, id)
}

// ChatroommessageGet mocks base method.
func (m *MockServiceHandler) ChatroommessageGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*messagechatroom.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroommessageGet", ctx, u, id)
	ret0, _ := ret[0].(*messagechatroom.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroommessageGet indicates an expected call of ChatroommessageGet.
func (mr *MockServiceHandlerMockRecorder) ChatroommessageGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroommessageGet", reflect.TypeOf((*MockServiceHandler)(nil).ChatroommessageGet), ctx, u, id)
}

// ChatroommessageGetsByChatroomID mocks base method.
func (m *MockServiceHandler) ChatroommessageGetsByChatroomID(ctx context.Context, u *customer.Customer, chatroomID uuid.UUID, size uint64, token string) ([]*messagechatroom.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroommessageGetsByChatroomID", ctx, u, chatroomID, size, token)
	ret0, _ := ret[0].([]*messagechatroom.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroommessageGetsByChatroomID indicates an expected call of ChatroommessageGetsByChatroomID.
func (mr *MockServiceHandlerMockRecorder) ChatroommessageGetsByChatroomID(ctx, u, chatroomID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroommessageGetsByChatroomID", reflect.TypeOf((*MockServiceHandler)(nil).ChatroommessageGetsByChatroomID), ctx, u, chatroomID, size, token)
}

// ConferenceCreate mocks base method.
func (m *MockServiceHandler) ConferenceCreate(ctx context.Context, u *customer.Customer, confType conference.Type, name, detail string, preActions, postActions []action.Action) (*conference.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceCreate", ctx, u, confType, name, detail, preActions, postActions)
	ret0, _ := ret[0].(*conference.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceCreate indicates an expected call of ConferenceCreate.
func (mr *MockServiceHandlerMockRecorder) ConferenceCreate(ctx, u, confType, name, detail, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceCreate", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceCreate), ctx, u, confType, name, detail, preActions, postActions)
}

// ConferenceDelete mocks base method.
func (m *MockServiceHandler) ConferenceDelete(ctx context.Context, u *customer.Customer, confID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceDelete", ctx, u, confID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceDelete indicates an expected call of ConferenceDelete.
func (mr *MockServiceHandlerMockRecorder) ConferenceDelete(ctx, u, confID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceDelete", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceDelete), ctx, u, confID)
}

// ConferenceGet mocks base method.
func (m *MockServiceHandler) ConferenceGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*conference.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGet", ctx, u, id)
	ret0, _ := ret[0].(*conference.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGet indicates an expected call of ConferenceGet.
func (mr *MockServiceHandlerMockRecorder) ConferenceGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGet", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceGet), ctx, u, id)
}

// ConferenceGets mocks base method.
func (m *MockServiceHandler) ConferenceGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*conference.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*conference.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGets indicates an expected call of ConferenceGets.
func (mr *MockServiceHandlerMockRecorder) ConferenceGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGets", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceGets), ctx, u, size, token)
}

// ConferenceRecordingStart mocks base method.
func (m *MockServiceHandler) ConferenceRecordingStart(ctx context.Context, u *customer.Customer, confID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceRecordingStart", ctx, u, confID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceRecordingStart indicates an expected call of ConferenceRecordingStart.
func (mr *MockServiceHandlerMockRecorder) ConferenceRecordingStart(ctx, u, confID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceRecordingStart", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceRecordingStart), ctx, u, confID)
}

// ConferenceRecordingStop mocks base method.
func (m *MockServiceHandler) ConferenceRecordingStop(ctx context.Context, u *customer.Customer, confID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceRecordingStop", ctx, u, confID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceRecordingStop indicates an expected call of ConferenceRecordingStop.
func (mr *MockServiceHandlerMockRecorder) ConferenceRecordingStop(ctx, u, confID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceRecordingStop", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceRecordingStop), ctx, u, confID)
}

// ConferencecallCreate mocks base method.
func (m *MockServiceHandler) ConferencecallCreate(ctx context.Context, u *customer.Customer, conferenceID uuid.UUID, referenceType conferencecall.ReferenceType, referenceID uuid.UUID) (*conferencecall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferencecallCreate", ctx, u, conferenceID, referenceType, referenceID)
	ret0, _ := ret[0].(*conferencecall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferencecallCreate indicates an expected call of ConferencecallCreate.
func (mr *MockServiceHandlerMockRecorder) ConferencecallCreate(ctx, u, conferenceID, referenceType, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferencecallCreate", reflect.TypeOf((*MockServiceHandler)(nil).ConferencecallCreate), ctx, u, conferenceID, referenceType, referenceID)
}

// ConferencecallGet mocks base method.
func (m *MockServiceHandler) ConferencecallGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*conferencecall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferencecallGet", ctx, u, id)
	ret0, _ := ret[0].(*conferencecall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferencecallGet indicates an expected call of ConferencecallGet.
func (mr *MockServiceHandlerMockRecorder) ConferencecallGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferencecallGet", reflect.TypeOf((*MockServiceHandler)(nil).ConferencecallGet), ctx, u, id)
}

// ConferencecallKick mocks base method.
func (m *MockServiceHandler) ConferencecallKick(ctx context.Context, u *customer.Customer, conferencecallID uuid.UUID) (*conferencecall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferencecallKick", ctx, u, conferencecallID)
	ret0, _ := ret[0].(*conferencecall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferencecallKick indicates an expected call of ConferencecallKick.
func (mr *MockServiceHandlerMockRecorder) ConferencecallKick(ctx, u, conferencecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferencecallKick", reflect.TypeOf((*MockServiceHandler)(nil).ConferencecallKick), ctx, u, conferencecallID)
}

// ConversationGet mocks base method.
func (m *MockServiceHandler) ConversationGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*conversation.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGet", ctx, u, id)
	ret0, _ := ret[0].(*conversation.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGet indicates an expected call of ConversationGet.
func (mr *MockServiceHandlerMockRecorder) ConversationGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGet", reflect.TypeOf((*MockServiceHandler)(nil).ConversationGet), ctx, u, id)
}

// ConversationGetsByCustomerID mocks base method.
func (m *MockServiceHandler) ConversationGetsByCustomerID(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*conversation.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGetsByCustomerID", ctx, u, size, token)
	ret0, _ := ret[0].([]*conversation.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGetsByCustomerID indicates an expected call of ConversationGetsByCustomerID.
func (mr *MockServiceHandlerMockRecorder) ConversationGetsByCustomerID(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGetsByCustomerID", reflect.TypeOf((*MockServiceHandler)(nil).ConversationGetsByCustomerID), ctx, u, size, token)
}

// ConversationMessageGetsByConversationID mocks base method.
func (m *MockServiceHandler) ConversationMessageGetsByConversationID(ctx context.Context, u *customer.Customer, conversationID uuid.UUID, size uint64, token string) ([]*message.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationMessageGetsByConversationID", ctx, u, conversationID, size, token)
	ret0, _ := ret[0].([]*message.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationMessageGetsByConversationID indicates an expected call of ConversationMessageGetsByConversationID.
func (mr *MockServiceHandlerMockRecorder) ConversationMessageGetsByConversationID(ctx, u, conversationID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationMessageGetsByConversationID", reflect.TypeOf((*MockServiceHandler)(nil).ConversationMessageGetsByConversationID), ctx, u, conversationID, size, token)
}

// ConversationMessageSend mocks base method.
func (m *MockServiceHandler) ConversationMessageSend(ctx context.Context, u *customer.Customer, conversationID uuid.UUID, text string, medias []media0.Media) (*message.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationMessageSend", ctx, u, conversationID, text, medias)
	ret0, _ := ret[0].(*message.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationMessageSend indicates an expected call of ConversationMessageSend.
func (mr *MockServiceHandlerMockRecorder) ConversationMessageSend(ctx, u, conversationID, text, medias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationMessageSend", reflect.TypeOf((*MockServiceHandler)(nil).ConversationMessageSend), ctx, u, conversationID, text, medias)
}

// ConversationSetup mocks base method.
func (m *MockServiceHandler) ConversationSetup(ctx context.Context, u *customer.Customer, referenceType conversation.ReferenceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationSetup", ctx, u, referenceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConversationSetup indicates an expected call of ConversationSetup.
func (mr *MockServiceHandlerMockRecorder) ConversationSetup(ctx, u, referenceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationSetup", reflect.TypeOf((*MockServiceHandler)(nil).ConversationSetup), ctx, u, referenceType)
}

// CustomerCreate mocks base method.
func (m *MockServiceHandler) CustomerCreate(ctx context.Context, u *customer.Customer, username, password, name, detail string, webhookMethod customer.WebhookMethod, webhookURI, lineSecret, lineToken string, permissionIDs []uuid.UUID) (*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerCreate", ctx, u, username, password, name, detail, webhookMethod, webhookURI, lineSecret, lineToken, permissionIDs)
	ret0, _ := ret[0].(*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerCreate indicates an expected call of CustomerCreate.
func (mr *MockServiceHandlerMockRecorder) CustomerCreate(ctx, u, username, password, name, detail, webhookMethod, webhookURI, lineSecret, lineToken, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerCreate", reflect.TypeOf((*MockServiceHandler)(nil).CustomerCreate), ctx, u, username, password, name, detail, webhookMethod, webhookURI, lineSecret, lineToken, permissionIDs)
}

// CustomerDelete mocks base method.
func (m *MockServiceHandler) CustomerDelete(ctx context.Context, u *customer.Customer, customerID uuid.UUID) (*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerDelete", ctx, u, customerID)
	ret0, _ := ret[0].(*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerDelete indicates an expected call of CustomerDelete.
func (mr *MockServiceHandlerMockRecorder) CustomerDelete(ctx, u, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerDelete", reflect.TypeOf((*MockServiceHandler)(nil).CustomerDelete), ctx, u, customerID)
}

// CustomerGet mocks base method.
func (m *MockServiceHandler) CustomerGet(ctx context.Context, u *customer.Customer, customerID uuid.UUID) (*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGet", ctx, u, customerID)
	ret0, _ := ret[0].(*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGet indicates an expected call of CustomerGet.
func (mr *MockServiceHandlerMockRecorder) CustomerGet(ctx, u, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGet", reflect.TypeOf((*MockServiceHandler)(nil).CustomerGet), ctx, u, customerID)
}

// CustomerGets mocks base method.
func (m *MockServiceHandler) CustomerGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGets indicates an expected call of CustomerGets.
func (mr *MockServiceHandlerMockRecorder) CustomerGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGets", reflect.TypeOf((*MockServiceHandler)(nil).CustomerGets), ctx, u, size, token)
}

// CustomerUpdate mocks base method.
func (m *MockServiceHandler) CustomerUpdate(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string, webhookMethod customer.WebhookMethod, webhookURI string) (*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdate", ctx, u, id, name, detail, webhookMethod, webhookURI)
	ret0, _ := ret[0].(*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerUpdate indicates an expected call of CustomerUpdate.
func (mr *MockServiceHandlerMockRecorder) CustomerUpdate(ctx, u, id, name, detail, webhookMethod, webhookURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdate", reflect.TypeOf((*MockServiceHandler)(nil).CustomerUpdate), ctx, u, id, name, detail, webhookMethod, webhookURI)
}

// CustomerUpdateLineInfo mocks base method.
func (m *MockServiceHandler) CustomerUpdateLineInfo(ctx context.Context, u *customer.Customer, customerID uuid.UUID, lineSecret, lineToken string) (*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdateLineInfo", ctx, u, customerID, lineSecret, lineToken)
	ret0, _ := ret[0].(*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerUpdateLineInfo indicates an expected call of CustomerUpdateLineInfo.
func (mr *MockServiceHandlerMockRecorder) CustomerUpdateLineInfo(ctx, u, customerID, lineSecret, lineToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdateLineInfo", reflect.TypeOf((*MockServiceHandler)(nil).CustomerUpdateLineInfo), ctx, u, customerID, lineSecret, lineToken)
}

// CustomerUpdatePassword mocks base method.
func (m *MockServiceHandler) CustomerUpdatePassword(ctx context.Context, u *customer.Customer, customerID uuid.UUID, password string) (*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdatePassword", ctx, u, customerID, password)
	ret0, _ := ret[0].(*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerUpdatePassword indicates an expected call of CustomerUpdatePassword.
func (mr *MockServiceHandlerMockRecorder) CustomerUpdatePassword(ctx, u, customerID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdatePassword", reflect.TypeOf((*MockServiceHandler)(nil).CustomerUpdatePassword), ctx, u, customerID, password)
}

// CustomerUpdatePermissionIDs mocks base method.
func (m *MockServiceHandler) CustomerUpdatePermissionIDs(ctx context.Context, u *customer.Customer, customerID uuid.UUID, permissionIDs []uuid.UUID) (*customer.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdatePermissionIDs", ctx, u, customerID, permissionIDs)
	ret0, _ := ret[0].(*customer.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerUpdatePermissionIDs indicates an expected call of CustomerUpdatePermissionIDs.
func (mr *MockServiceHandlerMockRecorder) CustomerUpdatePermissionIDs(ctx, u, customerID, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdatePermissionIDs", reflect.TypeOf((*MockServiceHandler)(nil).CustomerUpdatePermissionIDs), ctx, u, customerID, permissionIDs)
}

// DomainCreate mocks base method.
func (m *MockServiceHandler) DomainCreate(ctx context.Context, u *customer.Customer, domainName, name, detail string) (*domain.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainCreate", ctx, u, domainName, name, detail)
	ret0, _ := ret[0].(*domain.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainCreate indicates an expected call of DomainCreate.
func (mr *MockServiceHandlerMockRecorder) DomainCreate(ctx, u, domainName, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainCreate", reflect.TypeOf((*MockServiceHandler)(nil).DomainCreate), ctx, u, domainName, name, detail)
}

// DomainDelete mocks base method.
func (m *MockServiceHandler) DomainDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*domain.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainDelete", ctx, u, id)
	ret0, _ := ret[0].(*domain.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainDelete indicates an expected call of DomainDelete.
func (mr *MockServiceHandlerMockRecorder) DomainDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainDelete", reflect.TypeOf((*MockServiceHandler)(nil).DomainDelete), ctx, u, id)
}

// DomainGet mocks base method.
func (m *MockServiceHandler) DomainGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*domain.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGet", ctx, u, id)
	ret0, _ := ret[0].(*domain.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGet indicates an expected call of DomainGet.
func (mr *MockServiceHandlerMockRecorder) DomainGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGet", reflect.TypeOf((*MockServiceHandler)(nil).DomainGet), ctx, u, id)
}

// DomainGets mocks base method.
func (m *MockServiceHandler) DomainGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*domain.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*domain.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGets indicates an expected call of DomainGets.
func (mr *MockServiceHandlerMockRecorder) DomainGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGets", reflect.TypeOf((*MockServiceHandler)(nil).DomainGets), ctx, u, size, token)
}

// DomainUpdate mocks base method.
func (m *MockServiceHandler) DomainUpdate(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string) (*domain.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainUpdate", ctx, u, id, name, detail)
	ret0, _ := ret[0].(*domain.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainUpdate indicates an expected call of DomainUpdate.
func (mr *MockServiceHandlerMockRecorder) DomainUpdate(ctx, u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainUpdate", reflect.TypeOf((*MockServiceHandler)(nil).DomainUpdate), ctx, u, id, name, detail)
}

// ExtensionCreate mocks base method.
func (m *MockServiceHandler) ExtensionCreate(ctx context.Context, u *customer.Customer, ext, password string, domainID uuid.UUID, name, detail string) (*extension.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionCreate", ctx, u, ext, password, domainID, name, detail)
	ret0, _ := ret[0].(*extension.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionCreate indicates an expected call of ExtensionCreate.
func (mr *MockServiceHandlerMockRecorder) ExtensionCreate(ctx, u, ext, password, domainID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionCreate", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionCreate), ctx, u, ext, password, domainID, name, detail)
}

// ExtensionDelete mocks base method.
func (m *MockServiceHandler) ExtensionDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*extension.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionDelete", ctx, u, id)
	ret0, _ := ret[0].(*extension.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionDelete indicates an expected call of ExtensionDelete.
func (mr *MockServiceHandlerMockRecorder) ExtensionDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionDelete", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionDelete), ctx, u, id)
}

// ExtensionGet mocks base method.
func (m *MockServiceHandler) ExtensionGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*extension.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGet", ctx, u, id)
	ret0, _ := ret[0].(*extension.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGet indicates an expected call of ExtensionGet.
func (mr *MockServiceHandlerMockRecorder) ExtensionGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGet", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionGet), ctx, u, id)
}

// ExtensionGets mocks base method.
func (m *MockServiceHandler) ExtensionGets(ctx context.Context, u *customer.Customer, domainID uuid.UUID, size uint64, token string) ([]*extension.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGets", ctx, u, domainID, size, token)
	ret0, _ := ret[0].([]*extension.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGets indicates an expected call of ExtensionGets.
func (mr *MockServiceHandlerMockRecorder) ExtensionGets(ctx, u, domainID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGets", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionGets), ctx, u, domainID, size, token)
}

// ExtensionUpdate mocks base method.
func (m *MockServiceHandler) ExtensionUpdate(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail, password string) (*extension.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionUpdate", ctx, u, id, name, detail, password)
	ret0, _ := ret[0].(*extension.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionUpdate indicates an expected call of ExtensionUpdate.
func (mr *MockServiceHandlerMockRecorder) ExtensionUpdate(ctx, u, id, name, detail, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionUpdate", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionUpdate), ctx, u, id, name, detail, password)
}

// FlowCreate mocks base method.
func (m *MockServiceHandler) FlowCreate(ctx context.Context, u *customer.Customer, name, detail string, actions []action.Action, persist bool) (*flow.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowCreate", ctx, u, name, detail, actions, persist)
	ret0, _ := ret[0].(*flow.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowCreate indicates an expected call of FlowCreate.
func (mr *MockServiceHandlerMockRecorder) FlowCreate(ctx, u, name, detail, actions, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowCreate", reflect.TypeOf((*MockServiceHandler)(nil).FlowCreate), ctx, u, name, detail, actions, persist)
}

// FlowDelete mocks base method.
func (m *MockServiceHandler) FlowDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*flow.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowDelete", ctx, u, id)
	ret0, _ := ret[0].(*flow.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowDelete indicates an expected call of FlowDelete.
func (mr *MockServiceHandlerMockRecorder) FlowDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowDelete", reflect.TypeOf((*MockServiceHandler)(nil).FlowDelete), ctx, u, id)
}

// FlowGet mocks base method.
func (m *MockServiceHandler) FlowGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*flow.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", ctx, u, id)
	ret0, _ := ret[0].(*flow.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet.
func (mr *MockServiceHandlerMockRecorder) FlowGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockServiceHandler)(nil).FlowGet), ctx, u, id)
}

// FlowGets mocks base method.
func (m *MockServiceHandler) FlowGets(ctx context.Context, u *customer.Customer, pageSize uint64, pageToken string) ([]*flow.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGets", ctx, u, pageSize, pageToken)
	ret0, _ := ret[0].([]*flow.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGets indicates an expected call of FlowGets.
func (mr *MockServiceHandlerMockRecorder) FlowGets(ctx, u, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGets", reflect.TypeOf((*MockServiceHandler)(nil).FlowGets), ctx, u, pageSize, pageToken)
}

// FlowUpdate mocks base method.
func (m *MockServiceHandler) FlowUpdate(ctx context.Context, u *customer.Customer, f *flow.Flow) (*flow.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowUpdate", ctx, u, f)
	ret0, _ := ret[0].(*flow.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowUpdate indicates an expected call of FlowUpdate.
func (mr *MockServiceHandlerMockRecorder) FlowUpdate(ctx, u, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowUpdate", reflect.TypeOf((*MockServiceHandler)(nil).FlowUpdate), ctx, u, f)
}

// MessageDelete mocks base method.
func (m *MockServiceHandler) MessageDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*message0.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDelete", ctx, u, id)
	ret0, _ := ret[0].(*message0.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageDelete indicates an expected call of MessageDelete.
func (mr *MockServiceHandlerMockRecorder) MessageDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDelete", reflect.TypeOf((*MockServiceHandler)(nil).MessageDelete), ctx, u, id)
}

// MessageGet mocks base method.
func (m *MockServiceHandler) MessageGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*message0.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGet", ctx, u, id)
	ret0, _ := ret[0].(*message0.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGet indicates an expected call of MessageGet.
func (mr *MockServiceHandlerMockRecorder) MessageGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGet", reflect.TypeOf((*MockServiceHandler)(nil).MessageGet), ctx, u, id)
}

// MessageGets mocks base method.
func (m *MockServiceHandler) MessageGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*message0.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*message0.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGets indicates an expected call of MessageGets.
func (mr *MockServiceHandlerMockRecorder) MessageGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGets", reflect.TypeOf((*MockServiceHandler)(nil).MessageGets), ctx, u, size, token)
}

// MessageSend mocks base method.
func (m *MockServiceHandler) MessageSend(ctx context.Context, u *customer.Customer, source *address.Address, destinations []address.Address, text string) (*message0.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSend", ctx, u, source, destinations, text)
	ret0, _ := ret[0].(*message0.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSend indicates an expected call of MessageSend.
func (mr *MockServiceHandlerMockRecorder) MessageSend(ctx, u, source, destinations, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSend", reflect.TypeOf((*MockServiceHandler)(nil).MessageSend), ctx, u, source, destinations, text)
}

// NumberCreate mocks base method.
func (m *MockServiceHandler) NumberCreate(ctx context.Context, u *customer.Customer, num string, callFlowID, messageFlowID uuid.UUID, name, detail string) (*number.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberCreate", ctx, u, num, callFlowID, messageFlowID, name, detail)
	ret0, _ := ret[0].(*number.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberCreate indicates an expected call of NumberCreate.
func (mr *MockServiceHandlerMockRecorder) NumberCreate(ctx, u, num, callFlowID, messageFlowID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberCreate", reflect.TypeOf((*MockServiceHandler)(nil).NumberCreate), ctx, u, num, callFlowID, messageFlowID, name, detail)
}

// NumberDelete mocks base method.
func (m *MockServiceHandler) NumberDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*number.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberDelete", ctx, u, id)
	ret0, _ := ret[0].(*number.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberDelete indicates an expected call of NumberDelete.
func (mr *MockServiceHandlerMockRecorder) NumberDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberDelete", reflect.TypeOf((*MockServiceHandler)(nil).NumberDelete), ctx, u, id)
}

// NumberGet mocks base method.
func (m *MockServiceHandler) NumberGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*number.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGet", ctx, u, id)
	ret0, _ := ret[0].(*number.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGet indicates an expected call of NumberGet.
func (mr *MockServiceHandlerMockRecorder) NumberGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGet", reflect.TypeOf((*MockServiceHandler)(nil).NumberGet), ctx, u, id)
}

// NumberGets mocks base method.
func (m *MockServiceHandler) NumberGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*number.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*number.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGets indicates an expected call of NumberGets.
func (mr *MockServiceHandlerMockRecorder) NumberGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGets", reflect.TypeOf((*MockServiceHandler)(nil).NumberGets), ctx, u, size, token)
}

// NumberUpdate mocks base method.
func (m *MockServiceHandler) NumberUpdate(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string) (*number.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdate", ctx, u, id, name, detail)
	ret0, _ := ret[0].(*number.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberUpdate indicates an expected call of NumberUpdate.
func (mr *MockServiceHandlerMockRecorder) NumberUpdate(ctx, u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdate", reflect.TypeOf((*MockServiceHandler)(nil).NumberUpdate), ctx, u, id, name, detail)
}

// NumberUpdateFlowIDs mocks base method.
func (m *MockServiceHandler) NumberUpdateFlowIDs(ctx context.Context, u *customer.Customer, id, callFlowID, messageFlowID uuid.UUID) (*number.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateFlowIDs", ctx, u, id, callFlowID, messageFlowID)
	ret0, _ := ret[0].(*number.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberUpdateFlowIDs indicates an expected call of NumberUpdateFlowIDs.
func (mr *MockServiceHandlerMockRecorder) NumberUpdateFlowIDs(ctx, u, id, callFlowID, messageFlowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateFlowIDs", reflect.TypeOf((*MockServiceHandler)(nil).NumberUpdateFlowIDs), ctx, u, id, callFlowID, messageFlowID)
}

// OutdialCreate mocks base method.
func (m *MockServiceHandler) OutdialCreate(ctx context.Context, u *customer.Customer, campaignID uuid.UUID, name, detail, data string) (*outdial.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialCreate", ctx, u, campaignID, name, detail, data)
	ret0, _ := ret[0].(*outdial.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialCreate indicates an expected call of OutdialCreate.
func (mr *MockServiceHandlerMockRecorder) OutdialCreate(ctx, u, campaignID, name, detail, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialCreate", reflect.TypeOf((*MockServiceHandler)(nil).OutdialCreate), ctx, u, campaignID, name, detail, data)
}

// OutdialDelete mocks base method.
func (m *MockServiceHandler) OutdialDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*outdial.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialDelete", ctx, u, id)
	ret0, _ := ret[0].(*outdial.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialDelete indicates an expected call of OutdialDelete.
func (mr *MockServiceHandlerMockRecorder) OutdialDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialDelete", reflect.TypeOf((*MockServiceHandler)(nil).OutdialDelete), ctx, u, id)
}

// OutdialGet mocks base method.
func (m *MockServiceHandler) OutdialGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*outdial.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialGet", ctx, u, id)
	ret0, _ := ret[0].(*outdial.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialGet indicates an expected call of OutdialGet.
func (mr *MockServiceHandlerMockRecorder) OutdialGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialGet", reflect.TypeOf((*MockServiceHandler)(nil).OutdialGet), ctx, u, id)
}

// OutdialGetsByCustomerID mocks base method.
func (m *MockServiceHandler) OutdialGetsByCustomerID(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*outdial.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialGetsByCustomerID", ctx, u, size, token)
	ret0, _ := ret[0].([]*outdial.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialGetsByCustomerID indicates an expected call of OutdialGetsByCustomerID.
func (mr *MockServiceHandlerMockRecorder) OutdialGetsByCustomerID(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialGetsByCustomerID", reflect.TypeOf((*MockServiceHandler)(nil).OutdialGetsByCustomerID), ctx, u, size, token)
}

// OutdialUpdateBasicInfo mocks base method.
func (m *MockServiceHandler) OutdialUpdateBasicInfo(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string) (*outdial.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialUpdateBasicInfo", ctx, u, id, name, detail)
	ret0, _ := ret[0].(*outdial.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialUpdateBasicInfo indicates an expected call of OutdialUpdateBasicInfo.
func (mr *MockServiceHandlerMockRecorder) OutdialUpdateBasicInfo(ctx, u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialUpdateBasicInfo", reflect.TypeOf((*MockServiceHandler)(nil).OutdialUpdateBasicInfo), ctx, u, id, name, detail)
}

// OutdialUpdateCampaignID mocks base method.
func (m *MockServiceHandler) OutdialUpdateCampaignID(ctx context.Context, u *customer.Customer, id, campaignID uuid.UUID) (*outdial.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialUpdateCampaignID", ctx, u, id, campaignID)
	ret0, _ := ret[0].(*outdial.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialUpdateCampaignID indicates an expected call of OutdialUpdateCampaignID.
func (mr *MockServiceHandlerMockRecorder) OutdialUpdateCampaignID(ctx, u, id, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialUpdateCampaignID", reflect.TypeOf((*MockServiceHandler)(nil).OutdialUpdateCampaignID), ctx, u, id, campaignID)
}

// OutdialUpdateData mocks base method.
func (m *MockServiceHandler) OutdialUpdateData(ctx context.Context, u *customer.Customer, id uuid.UUID, data string) (*outdial.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialUpdateData", ctx, u, id, data)
	ret0, _ := ret[0].(*outdial.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialUpdateData indicates an expected call of OutdialUpdateData.
func (mr *MockServiceHandlerMockRecorder) OutdialUpdateData(ctx, u, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialUpdateData", reflect.TypeOf((*MockServiceHandler)(nil).OutdialUpdateData), ctx, u, id, data)
}

// OutdialtargetCreate mocks base method.
func (m *MockServiceHandler) OutdialtargetCreate(ctx context.Context, u *customer.Customer, outdialID uuid.UUID, name, detail, data string, destination0, destination1, destination2, destination3, destination4 *address.Address) (*outdialtarget.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialtargetCreate", ctx, u, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
	ret0, _ := ret[0].(*outdialtarget.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialtargetCreate indicates an expected call of OutdialtargetCreate.
func (mr *MockServiceHandlerMockRecorder) OutdialtargetCreate(ctx, u, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialtargetCreate", reflect.TypeOf((*MockServiceHandler)(nil).OutdialtargetCreate), ctx, u, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
}

// OutdialtargetDelete mocks base method.
func (m *MockServiceHandler) OutdialtargetDelete(ctx context.Context, u *customer.Customer, outdialID, outdialtargetID uuid.UUID) (*outdialtarget.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialtargetDelete", ctx, u, outdialID, outdialtargetID)
	ret0, _ := ret[0].(*outdialtarget.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialtargetDelete indicates an expected call of OutdialtargetDelete.
func (mr *MockServiceHandlerMockRecorder) OutdialtargetDelete(ctx, u, outdialID, outdialtargetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialtargetDelete", reflect.TypeOf((*MockServiceHandler)(nil).OutdialtargetDelete), ctx, u, outdialID, outdialtargetID)
}

// OutdialtargetGet mocks base method.
func (m *MockServiceHandler) OutdialtargetGet(ctx context.Context, u *customer.Customer, outdialID, outdialtargetID uuid.UUID) (*outdialtarget.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialtargetGet", ctx, u, outdialID, outdialtargetID)
	ret0, _ := ret[0].(*outdialtarget.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialtargetGet indicates an expected call of OutdialtargetGet.
func (mr *MockServiceHandlerMockRecorder) OutdialtargetGet(ctx, u, outdialID, outdialtargetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialtargetGet", reflect.TypeOf((*MockServiceHandler)(nil).OutdialtargetGet), ctx, u, outdialID, outdialtargetID)
}

// OutdialtargetGetsByOutdialID mocks base method.
func (m *MockServiceHandler) OutdialtargetGetsByOutdialID(ctx context.Context, u *customer.Customer, outdialID uuid.UUID, size uint64, token string) ([]*outdialtarget.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialtargetGetsByOutdialID", ctx, u, outdialID, size, token)
	ret0, _ := ret[0].([]*outdialtarget.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialtargetGetsByOutdialID indicates an expected call of OutdialtargetGetsByOutdialID.
func (mr *MockServiceHandlerMockRecorder) OutdialtargetGetsByOutdialID(ctx, u, outdialID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialtargetGetsByOutdialID", reflect.TypeOf((*MockServiceHandler)(nil).OutdialtargetGetsByOutdialID), ctx, u, outdialID, size, token)
}

// OutplanCreate mocks base method.
func (m *MockServiceHandler) OutplanCreate(ctx context.Context, u *customer.Customer, name, detail string, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanCreate", ctx, u, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanCreate indicates an expected call of OutplanCreate.
func (mr *MockServiceHandlerMockRecorder) OutplanCreate(ctx, u, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanCreate", reflect.TypeOf((*MockServiceHandler)(nil).OutplanCreate), ctx, u, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}

// OutplanDelete mocks base method.
func (m *MockServiceHandler) OutplanDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*outplan.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanDelete", ctx, u, id)
	ret0, _ := ret[0].(*outplan.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanDelete indicates an expected call of OutplanDelete.
func (mr *MockServiceHandlerMockRecorder) OutplanDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanDelete", reflect.TypeOf((*MockServiceHandler)(nil).OutplanDelete), ctx, u, id)
}

// OutplanGet mocks base method.
func (m *MockServiceHandler) OutplanGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*outplan.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanGet", ctx, u, id)
	ret0, _ := ret[0].(*outplan.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanGet indicates an expected call of OutplanGet.
func (mr *MockServiceHandlerMockRecorder) OutplanGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanGet", reflect.TypeOf((*MockServiceHandler)(nil).OutplanGet), ctx, u, id)
}

// OutplanGetsByCustomerID mocks base method.
func (m *MockServiceHandler) OutplanGetsByCustomerID(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*outplan.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanGetsByCustomerID", ctx, u, size, token)
	ret0, _ := ret[0].([]*outplan.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanGetsByCustomerID indicates an expected call of OutplanGetsByCustomerID.
func (mr *MockServiceHandlerMockRecorder) OutplanGetsByCustomerID(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanGetsByCustomerID", reflect.TypeOf((*MockServiceHandler)(nil).OutplanGetsByCustomerID), ctx, u, size, token)
}

// OutplanUpdateBasicInfo mocks base method.
func (m *MockServiceHandler) OutplanUpdateBasicInfo(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string) (*outplan.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanUpdateBasicInfo", ctx, u, id, name, detail)
	ret0, _ := ret[0].(*outplan.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanUpdateBasicInfo indicates an expected call of OutplanUpdateBasicInfo.
func (mr *MockServiceHandlerMockRecorder) OutplanUpdateBasicInfo(ctx, u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanUpdateBasicInfo", reflect.TypeOf((*MockServiceHandler)(nil).OutplanUpdateBasicInfo), ctx, u, id, name, detail)
}

// OutplanUpdateDialInfo mocks base method.
func (m *MockServiceHandler) OutplanUpdateDialInfo(ctx context.Context, u *customer.Customer, id uuid.UUID, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutplanUpdateDialInfo", ctx, u, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutplanUpdateDialInfo indicates an expected call of OutplanUpdateDialInfo.
func (mr *MockServiceHandlerMockRecorder) OutplanUpdateDialInfo(ctx, u, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutplanUpdateDialInfo", reflect.TypeOf((*MockServiceHandler)(nil).OutplanUpdateDialInfo), ctx, u, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}

// ProviderCreate mocks base method.
func (m *MockServiceHandler) ProviderCreate(ctx context.Context, u *customer.Customer, providerType provider.Type, hostname, techPrefix, techPostfix string, techHeaders map[string]string, name, detail string) (*provider.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderCreate", ctx, u, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
	ret0, _ := ret[0].(*provider.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderCreate indicates an expected call of ProviderCreate.
func (mr *MockServiceHandlerMockRecorder) ProviderCreate(ctx, u, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderCreate", reflect.TypeOf((*MockServiceHandler)(nil).ProviderCreate), ctx, u, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
}

// ProviderDelete mocks base method.
func (m *MockServiceHandler) ProviderDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*provider.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderDelete", ctx, u, id)
	ret0, _ := ret[0].(*provider.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderDelete indicates an expected call of ProviderDelete.
func (mr *MockServiceHandlerMockRecorder) ProviderDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderDelete", reflect.TypeOf((*MockServiceHandler)(nil).ProviderDelete), ctx, u, id)
}

// ProviderGet mocks base method.
func (m *MockServiceHandler) ProviderGet(ctx context.Context, u *customer.Customer, providerID uuid.UUID) (*provider.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderGet", ctx, u, providerID)
	ret0, _ := ret[0].(*provider.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderGet indicates an expected call of ProviderGet.
func (mr *MockServiceHandlerMockRecorder) ProviderGet(ctx, u, providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderGet", reflect.TypeOf((*MockServiceHandler)(nil).ProviderGet), ctx, u, providerID)
}

// ProviderGets mocks base method.
func (m *MockServiceHandler) ProviderGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*provider.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*provider.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderGets indicates an expected call of ProviderGets.
func (mr *MockServiceHandlerMockRecorder) ProviderGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderGets", reflect.TypeOf((*MockServiceHandler)(nil).ProviderGets), ctx, u, size, token)
}

// ProviderUpdate mocks base method.
func (m *MockServiceHandler) ProviderUpdate(ctx context.Context, u *customer.Customer, providerID uuid.UUID, providerType provider.Type, hostname, techPrefix, techPostfix string, techHeaders map[string]string, name, detail string) (*provider.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderUpdate", ctx, u, providerID, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
	ret0, _ := ret[0].(*provider.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderUpdate indicates an expected call of ProviderUpdate.
func (mr *MockServiceHandlerMockRecorder) ProviderUpdate(ctx, u, providerID, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderUpdate", reflect.TypeOf((*MockServiceHandler)(nil).ProviderUpdate), ctx, u, providerID, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
}

// QueueCreate mocks base method.
func (m *MockServiceHandler) QueueCreate(ctx context.Context, u *customer.Customer, name, detail, routingMethod string, tagIDs []uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) (*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCreate", ctx, u, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueCreate indicates an expected call of QueueCreate.
func (mr *MockServiceHandlerMockRecorder) QueueCreate(ctx, u, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreate", reflect.TypeOf((*MockServiceHandler)(nil).QueueCreate), ctx, u, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
}

// QueueDelete mocks base method.
func (m *MockServiceHandler) QueueDelete(ctx context.Context, u *customer.Customer, queueID uuid.UUID) (*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDelete", ctx, u, queueID)
	ret0, _ := ret[0].(*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDelete indicates an expected call of QueueDelete.
func (mr *MockServiceHandlerMockRecorder) QueueDelete(ctx, u, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDelete", reflect.TypeOf((*MockServiceHandler)(nil).QueueDelete), ctx, u, queueID)
}

// QueueGet mocks base method.
func (m *MockServiceHandler) QueueGet(ctx context.Context, u *customer.Customer, queueID uuid.UUID) (*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueGet", ctx, u, queueID)
	ret0, _ := ret[0].(*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueGet indicates an expected call of QueueGet.
func (mr *MockServiceHandlerMockRecorder) QueueGet(ctx, u, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueGet", reflect.TypeOf((*MockServiceHandler)(nil).QueueGet), ctx, u, queueID)
}

// QueueGets mocks base method.
func (m *MockServiceHandler) QueueGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueGets indicates an expected call of QueueGets.
func (mr *MockServiceHandlerMockRecorder) QueueGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueGets", reflect.TypeOf((*MockServiceHandler)(nil).QueueGets), ctx, u, size, token)
}

// QueueUpdate mocks base method.
func (m *MockServiceHandler) QueueUpdate(ctx context.Context, u *customer.Customer, queueID uuid.UUID, name, detail string) (*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueUpdate", ctx, u, queueID, name, detail)
	ret0, _ := ret[0].(*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueUpdate indicates an expected call of QueueUpdate.
func (mr *MockServiceHandlerMockRecorder) QueueUpdate(ctx, u, queueID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueUpdate", reflect.TypeOf((*MockServiceHandler)(nil).QueueUpdate), ctx, u, queueID, name, detail)
}

// QueueUpdateActions mocks base method.
func (m *MockServiceHandler) QueueUpdateActions(ctx context.Context, u *customer.Customer, queueID uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) (*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueUpdateActions", ctx, u, queueID, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueUpdateActions indicates an expected call of QueueUpdateActions.
func (mr *MockServiceHandlerMockRecorder) QueueUpdateActions(ctx, u, queueID, waitActions, timeoutWait, timeoutService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueUpdateActions", reflect.TypeOf((*MockServiceHandler)(nil).QueueUpdateActions), ctx, u, queueID, waitActions, timeoutWait, timeoutService)
}

// QueueUpdateRoutingMethod mocks base method.
func (m *MockServiceHandler) QueueUpdateRoutingMethod(ctx context.Context, u *customer.Customer, queueID uuid.UUID, routingMethod queue.RoutingMethod) (*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueUpdateRoutingMethod", ctx, u, queueID, routingMethod)
	ret0, _ := ret[0].(*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueUpdateRoutingMethod indicates an expected call of QueueUpdateRoutingMethod.
func (mr *MockServiceHandlerMockRecorder) QueueUpdateRoutingMethod(ctx, u, queueID, routingMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueUpdateRoutingMethod", reflect.TypeOf((*MockServiceHandler)(nil).QueueUpdateRoutingMethod), ctx, u, queueID, routingMethod)
}

// QueueUpdateTagIDs mocks base method.
func (m *MockServiceHandler) QueueUpdateTagIDs(ctx context.Context, u *customer.Customer, queueID uuid.UUID, tagIDs []uuid.UUID) (*queue.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueUpdateTagIDs", ctx, u, queueID, tagIDs)
	ret0, _ := ret[0].(*queue.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueUpdateTagIDs indicates an expected call of QueueUpdateTagIDs.
func (mr *MockServiceHandlerMockRecorder) QueueUpdateTagIDs(ctx, u, queueID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueUpdateTagIDs", reflect.TypeOf((*MockServiceHandler)(nil).QueueUpdateTagIDs), ctx, u, queueID, tagIDs)
}

// QueuecallDelete mocks base method.
func (m *MockServiceHandler) QueuecallDelete(ctx context.Context, u *customer.Customer, queuecallID uuid.UUID) (*queuecall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallDelete", ctx, u, queuecallID)
	ret0, _ := ret[0].(*queuecall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallDelete indicates an expected call of QueuecallDelete.
func (mr *MockServiceHandlerMockRecorder) QueuecallDelete(ctx, u, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallDelete", reflect.TypeOf((*MockServiceHandler)(nil).QueuecallDelete), ctx, u, queuecallID)
}

// QueuecallDeleteByReferenceID mocks base method.
func (m *MockServiceHandler) QueuecallDeleteByReferenceID(ctx context.Context, u *customer.Customer, referenceID uuid.UUID) (*queuecall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallDeleteByReferenceID", ctx, u, referenceID)
	ret0, _ := ret[0].(*queuecall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallDeleteByReferenceID indicates an expected call of QueuecallDeleteByReferenceID.
func (mr *MockServiceHandlerMockRecorder) QueuecallDeleteByReferenceID(ctx, u, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallDeleteByReferenceID", reflect.TypeOf((*MockServiceHandler)(nil).QueuecallDeleteByReferenceID), ctx, u, referenceID)
}

// QueuecallGet mocks base method.
func (m *MockServiceHandler) QueuecallGet(ctx context.Context, u *customer.Customer, queueID uuid.UUID) (*queuecall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallGet", ctx, u, queueID)
	ret0, _ := ret[0].(*queuecall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallGet indicates an expected call of QueuecallGet.
func (mr *MockServiceHandlerMockRecorder) QueuecallGet(ctx, u, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallGet", reflect.TypeOf((*MockServiceHandler)(nil).QueuecallGet), ctx, u, queueID)
}

// QueuecallGets mocks base method.
func (m *MockServiceHandler) QueuecallGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*queuecall.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*queuecall.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallGets indicates an expected call of QueuecallGets.
func (mr *MockServiceHandlerMockRecorder) QueuecallGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallGets", reflect.TypeOf((*MockServiceHandler)(nil).QueuecallGets), ctx, u, size, token)
}

// RecordingDelete mocks base method.
func (m *MockServiceHandler) RecordingDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*recording.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingDelete", ctx, u, id)
	ret0, _ := ret[0].(*recording.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingDelete indicates an expected call of RecordingDelete.
func (mr *MockServiceHandlerMockRecorder) RecordingDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingDelete", reflect.TypeOf((*MockServiceHandler)(nil).RecordingDelete), ctx, u, id)
}

// RecordingGet mocks base method.
func (m *MockServiceHandler) RecordingGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*recording.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGet", ctx, u, id)
	ret0, _ := ret[0].(*recording.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGet indicates an expected call of RecordingGet.
func (mr *MockServiceHandlerMockRecorder) RecordingGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGet", reflect.TypeOf((*MockServiceHandler)(nil).RecordingGet), ctx, u, id)
}

// RecordingGets mocks base method.
func (m *MockServiceHandler) RecordingGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*recording.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*recording.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGets indicates an expected call of RecordingGets.
func (mr *MockServiceHandlerMockRecorder) RecordingGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGets", reflect.TypeOf((*MockServiceHandler)(nil).RecordingGets), ctx, u, size, token)
}

// RecordingfileGet mocks base method.
func (m *MockServiceHandler) RecordingfileGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingfileGet", ctx, u, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingfileGet indicates an expected call of RecordingfileGet.
func (mr *MockServiceHandlerMockRecorder) RecordingfileGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingfileGet", reflect.TypeOf((*MockServiceHandler)(nil).RecordingfileGet), ctx, u, id)
}

// RouteCreate mocks base method.
func (m *MockServiceHandler) RouteCreate(ctx context.Context, u *customer.Customer, customerID, providerID uuid.UUID, priority int, target string) (*route.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteCreate", ctx, u, customerID, providerID, priority, target)
	ret0, _ := ret[0].(*route.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteCreate indicates an expected call of RouteCreate.
func (mr *MockServiceHandlerMockRecorder) RouteCreate(ctx, u, customerID, providerID, priority, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteCreate", reflect.TypeOf((*MockServiceHandler)(nil).RouteCreate), ctx, u, customerID, providerID, priority, target)
}

// RouteDelete mocks base method.
func (m *MockServiceHandler) RouteDelete(ctx context.Context, u *customer.Customer, routeID uuid.UUID) (*route.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteDelete", ctx, u, routeID)
	ret0, _ := ret[0].(*route.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteDelete indicates an expected call of RouteDelete.
func (mr *MockServiceHandlerMockRecorder) RouteDelete(ctx, u, routeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteDelete", reflect.TypeOf((*MockServiceHandler)(nil).RouteDelete), ctx, u, routeID)
}

// RouteGet mocks base method.
func (m *MockServiceHandler) RouteGet(ctx context.Context, u *customer.Customer, routeID uuid.UUID) (*route.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteGet", ctx, u, routeID)
	ret0, _ := ret[0].(*route.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGet indicates an expected call of RouteGet.
func (mr *MockServiceHandlerMockRecorder) RouteGet(ctx, u, routeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGet", reflect.TypeOf((*MockServiceHandler)(nil).RouteGet), ctx, u, routeID)
}

// RouteGets mocks base method.
func (m *MockServiceHandler) RouteGets(ctx context.Context, u *customer.Customer, customerID uuid.UUID, size uint64, token string) ([]*route.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteGets", ctx, u, customerID, size, token)
	ret0, _ := ret[0].([]*route.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGets indicates an expected call of RouteGets.
func (mr *MockServiceHandlerMockRecorder) RouteGets(ctx, u, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGets", reflect.TypeOf((*MockServiceHandler)(nil).RouteGets), ctx, u, customerID, size, token)
}

// RouteUpdate mocks base method.
func (m *MockServiceHandler) RouteUpdate(ctx context.Context, u *customer.Customer, routeID, providerID uuid.UUID, priority int, target string) (*route.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteUpdate", ctx, u, routeID, providerID, priority, target)
	ret0, _ := ret[0].(*route.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteUpdate indicates an expected call of RouteUpdate.
func (mr *MockServiceHandlerMockRecorder) RouteUpdate(ctx, u, routeID, providerID, priority, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteUpdate", reflect.TypeOf((*MockServiceHandler)(nil).RouteUpdate), ctx, u, routeID, providerID, priority, target)
}

// TagCreate mocks base method.
func (m *MockServiceHandler) TagCreate(ctx context.Context, u *customer.Customer, name, detail string) (*tag.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCreate", ctx, u, name, detail)
	ret0, _ := ret[0].(*tag.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagCreate indicates an expected call of TagCreate.
func (mr *MockServiceHandlerMockRecorder) TagCreate(ctx, u, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCreate", reflect.TypeOf((*MockServiceHandler)(nil).TagCreate), ctx, u, name, detail)
}

// TagDelete mocks base method.
func (m *MockServiceHandler) TagDelete(ctx context.Context, u *customer.Customer, id uuid.UUID) (*tag.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", ctx, u, id)
	ret0, _ := ret[0].(*tag.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagDelete indicates an expected call of TagDelete.
func (mr *MockServiceHandlerMockRecorder) TagDelete(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockServiceHandler)(nil).TagDelete), ctx, u, id)
}

// TagGet mocks base method.
func (m *MockServiceHandler) TagGet(ctx context.Context, u *customer.Customer, id uuid.UUID) (*tag.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGet", ctx, u, id)
	ret0, _ := ret[0].(*tag.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGet indicates an expected call of TagGet.
func (mr *MockServiceHandlerMockRecorder) TagGet(ctx, u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGet", reflect.TypeOf((*MockServiceHandler)(nil).TagGet), ctx, u, id)
}

// TagGets mocks base method.
func (m *MockServiceHandler) TagGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*tag.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*tag.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGets indicates an expected call of TagGets.
func (mr *MockServiceHandlerMockRecorder) TagGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGets", reflect.TypeOf((*MockServiceHandler)(nil).TagGets), ctx, u, size, token)
}

// TagUpdate mocks base method.
func (m *MockServiceHandler) TagUpdate(ctx context.Context, u *customer.Customer, id uuid.UUID, name, detail string) (*tag.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagUpdate", ctx, u, id, name, detail)
	ret0, _ := ret[0].(*tag.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagUpdate indicates an expected call of TagUpdate.
func (mr *MockServiceHandlerMockRecorder) TagUpdate(ctx, u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagUpdate", reflect.TypeOf((*MockServiceHandler)(nil).TagUpdate), ctx, u, id, name, detail)
}

// TranscribeDelete mocks base method.
func (m *MockServiceHandler) TranscribeDelete(ctx context.Context, u *customer.Customer, transcribeID uuid.UUID) (*transcribe.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeDelete", ctx, u, transcribeID)
	ret0, _ := ret[0].(*transcribe.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeDelete indicates an expected call of TranscribeDelete.
func (mr *MockServiceHandlerMockRecorder) TranscribeDelete(ctx, u, transcribeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeDelete", reflect.TypeOf((*MockServiceHandler)(nil).TranscribeDelete), ctx, u, transcribeID)
}

// TranscribeGet mocks base method.
func (m *MockServiceHandler) TranscribeGet(ctx context.Context, u *customer.Customer, routeID uuid.UUID) (*transcribe.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeGet", ctx, u, routeID)
	ret0, _ := ret[0].(*transcribe.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeGet indicates an expected call of TranscribeGet.
func (mr *MockServiceHandlerMockRecorder) TranscribeGet(ctx, u, routeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeGet", reflect.TypeOf((*MockServiceHandler)(nil).TranscribeGet), ctx, u, routeID)
}

// TranscribeGets mocks base method.
func (m *MockServiceHandler) TranscribeGets(ctx context.Context, u *customer.Customer, size uint64, token string) ([]*transcribe.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeGets", ctx, u, size, token)
	ret0, _ := ret[0].([]*transcribe.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeGets indicates an expected call of TranscribeGets.
func (mr *MockServiceHandlerMockRecorder) TranscribeGets(ctx, u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeGets", reflect.TypeOf((*MockServiceHandler)(nil).TranscribeGets), ctx, u, size, token)
}

// TranscribeStart mocks base method.
func (m *MockServiceHandler) TranscribeStart(ctx context.Context, u *customer.Customer, referenceType transcribe.ReferenceType, referenceID uuid.UUID, language string, direction transcribe.Direction) (*transcribe.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeStart", ctx, u, referenceType, referenceID, language, direction)
	ret0, _ := ret[0].(*transcribe.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeStart indicates an expected call of TranscribeStart.
func (mr *MockServiceHandlerMockRecorder) TranscribeStart(ctx, u, referenceType, referenceID, language, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeStart", reflect.TypeOf((*MockServiceHandler)(nil).TranscribeStart), ctx, u, referenceType, referenceID, language, direction)
}

// TranscribeStop mocks base method.
func (m *MockServiceHandler) TranscribeStop(ctx context.Context, u *customer.Customer, transcribeID uuid.UUID) (*transcribe.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeStop", ctx, u, transcribeID)
	ret0, _ := ret[0].(*transcribe.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeStop indicates an expected call of TranscribeStop.
func (mr *MockServiceHandlerMockRecorder) TranscribeStop(ctx, u, transcribeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeStop", reflect.TypeOf((*MockServiceHandler)(nil).TranscribeStop), ctx, u, transcribeID)
}

// TranscriptGets mocks base method.
func (m *MockServiceHandler) TranscriptGets(ctx context.Context, u *customer.Customer, transcribeID uuid.UUID) ([]*transcript.WebhookMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscriptGets", ctx, u, transcribeID)
	ret0, _ := ret[0].([]*transcript.WebhookMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscriptGets indicates an expected call of TranscriptGets.
func (mr *MockServiceHandlerMockRecorder) TranscriptGets(ctx, u, transcribeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscriptGets", reflect.TypeOf((*MockServiceHandler)(nil).TranscriptGets), ctx, u, transcribeID)
}

// WebsockCreate mocks base method.
func (m *MockServiceHandler) WebsockCreate(ctx context.Context, u *customer.Customer, w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebsockCreate", ctx, u, w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebsockCreate indicates an expected call of WebsockCreate.
func (mr *MockServiceHandlerMockRecorder) WebsockCreate(ctx, u, w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebsockCreate", reflect.TypeOf((*MockServiceHandler)(nil).WebsockCreate), ctx, u, w, r)
}
