// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package servicehandler is a generated GoMock package.
package servicehandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/api-manager.git/models/action"
	address "gitlab.com/voipbin/bin-manager/api-manager.git/models/address"
	agent "gitlab.com/voipbin/bin-manager/api-manager.git/models/agent"
	availablenumber "gitlab.com/voipbin/bin-manager/api-manager.git/models/availablenumber"
	call "gitlab.com/voipbin/bin-manager/api-manager.git/models/call"
	conference "gitlab.com/voipbin/bin-manager/api-manager.git/models/conference"
	domain "gitlab.com/voipbin/bin-manager/api-manager.git/models/domain"
	extension "gitlab.com/voipbin/bin-manager/api-manager.git/models/extension"
	flow "gitlab.com/voipbin/bin-manager/api-manager.git/models/flow"
	number "gitlab.com/voipbin/bin-manager/api-manager.git/models/number"
	recording "gitlab.com/voipbin/bin-manager/api-manager.git/models/recording"
	tag "gitlab.com/voipbin/bin-manager/api-manager.git/models/tag"
	transcribe "gitlab.com/voipbin/bin-manager/api-manager.git/models/transcribe"
	user "gitlab.com/voipbin/bin-manager/api-manager.git/models/user"
)

// MockServiceHandler is a mock of ServiceHandler interface.
type MockServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceHandlerMockRecorder
}

// MockServiceHandlerMockRecorder is the mock recorder for MockServiceHandler.
type MockServiceHandlerMockRecorder struct {
	mock *MockServiceHandler
}

// NewMockServiceHandler creates a new mock instance.
func NewMockServiceHandler(ctrl *gomock.Controller) *MockServiceHandler {
	mock := &MockServiceHandler{ctrl: ctrl}
	mock.recorder = &MockServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceHandler) EXPECT() *MockServiceHandlerMockRecorder {
	return m.recorder
}

// AgentCreate mocks base method.
func (m *MockServiceHandler) AgentCreate(u *user.User, username, password, name, detail, ringMethod string, permission uint64, tagIDs []uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCreate", u, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentCreate indicates an expected call of AgentCreate.
func (mr *MockServiceHandlerMockRecorder) AgentCreate(u, username, password, name, detail, ringMethod, permission, tagIDs, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCreate", reflect.TypeOf((*MockServiceHandler)(nil).AgentCreate), u, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
}

// AgentDelete mocks base method.
func (m *MockServiceHandler) AgentDelete(u *user.User, agentID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDelete", u, agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentDelete indicates an expected call of AgentDelete.
func (mr *MockServiceHandlerMockRecorder) AgentDelete(u, agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDelete", reflect.TypeOf((*MockServiceHandler)(nil).AgentDelete), u, agentID)
}

// AgentGet mocks base method.
func (m *MockServiceHandler) AgentGet(u *user.User, agentID uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGet", u, agentID)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGet indicates an expected call of AgentGet.
func (mr *MockServiceHandlerMockRecorder) AgentGet(u, agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGet", reflect.TypeOf((*MockServiceHandler)(nil).AgentGet), u, agentID)
}

// AgentGets mocks base method.
func (m *MockServiceHandler) AgentGets(u *user.User, size uint64, token string, tagIDs []uuid.UUID, status agent.Status) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGets", u, size, token, tagIDs, status)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGets indicates an expected call of AgentGets.
func (mr *MockServiceHandlerMockRecorder) AgentGets(u, size, token, tagIDs, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGets", reflect.TypeOf((*MockServiceHandler)(nil).AgentGets), u, size, token, tagIDs, status)
}

// AgentLogin mocks base method.
func (m *MockServiceHandler) AgentLogin(userID uint64, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogin", userID, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentLogin indicates an expected call of AgentLogin.
func (mr *MockServiceHandlerMockRecorder) AgentLogin(userID, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogin", reflect.TypeOf((*MockServiceHandler)(nil).AgentLogin), userID, username, password)
}

// AgentUpdate mocks base method.
func (m *MockServiceHandler) AgentUpdate(u *user.User, agentID uuid.UUID, name, detail string, ringMethod agent.RingMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdate", u, agentID, name, detail, ringMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdate indicates an expected call of AgentUpdate.
func (mr *MockServiceHandlerMockRecorder) AgentUpdate(u, agentID, name, detail, ringMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdate", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdate), u, agentID, name, detail, ringMethod)
}

// AgentUpdateAddresses mocks base method.
func (m *MockServiceHandler) AgentUpdateAddresses(u *user.User, agentID uuid.UUID, addresses []address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateAddresses", u, agentID, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdateAddresses indicates an expected call of AgentUpdateAddresses.
func (mr *MockServiceHandlerMockRecorder) AgentUpdateAddresses(u, agentID, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateAddresses", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdateAddresses), u, agentID, addresses)
}

// AgentUpdateStatus mocks base method.
func (m *MockServiceHandler) AgentUpdateStatus(u *user.User, agentID uuid.UUID, status agent.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateStatus", u, agentID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdateStatus indicates an expected call of AgentUpdateStatus.
func (mr *MockServiceHandlerMockRecorder) AgentUpdateStatus(u, agentID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateStatus", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdateStatus), u, agentID, status)
}

// AgentUpdateTagIDs mocks base method.
func (m *MockServiceHandler) AgentUpdateTagIDs(u *user.User, agentID uuid.UUID, tagIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateTagIDs", u, agentID, tagIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdateTagIDs indicates an expected call of AgentUpdateTagIDs.
func (mr *MockServiceHandlerMockRecorder) AgentUpdateTagIDs(u, agentID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateTagIDs", reflect.TypeOf((*MockServiceHandler)(nil).AgentUpdateTagIDs), u, agentID, tagIDs)
}

// AuthLogin mocks base method.
func (m *MockServiceHandler) AuthLogin(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthLogin", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthLogin indicates an expected call of AuthLogin.
func (mr *MockServiceHandlerMockRecorder) AuthLogin(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthLogin", reflect.TypeOf((*MockServiceHandler)(nil).AuthLogin), username, password)
}

// AvailableNumberGets mocks base method.
func (m *MockServiceHandler) AvailableNumberGets(u *user.User, size uint64, countryCode string) ([]*availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableNumberGets", u, size, countryCode)
	ret0, _ := ret[0].([]*availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableNumberGets indicates an expected call of AvailableNumberGets.
func (mr *MockServiceHandlerMockRecorder) AvailableNumberGets(u, size, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableNumberGets", reflect.TypeOf((*MockServiceHandler)(nil).AvailableNumberGets), u, size, countryCode)
}

// CallCreate mocks base method.
func (m *MockServiceHandler) CallCreate(u *user.User, flowID uuid.UUID, source, destination *address.Address) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCreate", u, flowID, source, destination)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallCreate indicates an expected call of CallCreate.
func (mr *MockServiceHandlerMockRecorder) CallCreate(u, flowID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCreate", reflect.TypeOf((*MockServiceHandler)(nil).CallCreate), u, flowID, source, destination)
}

// CallDelete mocks base method.
func (m *MockServiceHandler) CallDelete(u *user.User, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallDelete", u, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallDelete indicates an expected call of CallDelete.
func (mr *MockServiceHandlerMockRecorder) CallDelete(u, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDelete", reflect.TypeOf((*MockServiceHandler)(nil).CallDelete), u, callID)
}

// CallGet mocks base method.
func (m *MockServiceHandler) CallGet(u *user.User, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", u, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockServiceHandlerMockRecorder) CallGet(u, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockServiceHandler)(nil).CallGet), u, callID)
}

// CallGets mocks base method.
func (m *MockServiceHandler) CallGets(u *user.User, size uint64, token string) ([]*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGets", u, size, token)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGets indicates an expected call of CallGets.
func (mr *MockServiceHandlerMockRecorder) CallGets(u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGets", reflect.TypeOf((*MockServiceHandler)(nil).CallGets), u, size, token)
}

// ConferenceCreate mocks base method.
func (m *MockServiceHandler) ConferenceCreate(u *user.User, confType conference.Type, name, detail, webhookURI string, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceCreate", u, confType, name, detail, webhookURI, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceCreate indicates an expected call of ConferenceCreate.
func (mr *MockServiceHandlerMockRecorder) ConferenceCreate(u, confType, name, detail, webhookURI, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceCreate", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceCreate), u, confType, name, detail, webhookURI, preActions, postActions)
}

// ConferenceDelete mocks base method.
func (m *MockServiceHandler) ConferenceDelete(u *user.User, confID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceDelete", u, confID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceDelete indicates an expected call of ConferenceDelete.
func (mr *MockServiceHandlerMockRecorder) ConferenceDelete(u, confID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceDelete", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceDelete), u, confID)
}

// ConferenceGet mocks base method.
func (m *MockServiceHandler) ConferenceGet(u *user.User, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGet", u, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGet indicates an expected call of ConferenceGet.
func (mr *MockServiceHandlerMockRecorder) ConferenceGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGet", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceGet), u, id)
}

// ConferenceGets mocks base method.
func (m *MockServiceHandler) ConferenceGets(u *user.User, size uint64, token string) ([]*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGets", u, size, token)
	ret0, _ := ret[0].([]*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGets indicates an expected call of ConferenceGets.
func (mr *MockServiceHandlerMockRecorder) ConferenceGets(u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGets", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceGets), u, size, token)
}

// ConferenceKick mocks base method.
func (m *MockServiceHandler) ConferenceKick(u *user.User, confID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceKick", u, confID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceKick indicates an expected call of ConferenceKick.
func (mr *MockServiceHandlerMockRecorder) ConferenceKick(u, confID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceKick", reflect.TypeOf((*MockServiceHandler)(nil).ConferenceKick), u, confID, callID)
}

// DomainCreate mocks base method.
func (m *MockServiceHandler) DomainCreate(u *user.User, domainName, name, detail string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainCreate", u, domainName, name, detail)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainCreate indicates an expected call of DomainCreate.
func (mr *MockServiceHandlerMockRecorder) DomainCreate(u, domainName, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainCreate", reflect.TypeOf((*MockServiceHandler)(nil).DomainCreate), u, domainName, name, detail)
}

// DomainDelete mocks base method.
func (m *MockServiceHandler) DomainDelete(u *user.User, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainDelete", u, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainDelete indicates an expected call of DomainDelete.
func (mr *MockServiceHandlerMockRecorder) DomainDelete(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainDelete", reflect.TypeOf((*MockServiceHandler)(nil).DomainDelete), u, id)
}

// DomainGet mocks base method.
func (m *MockServiceHandler) DomainGet(u *user.User, id uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGet", u, id)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGet indicates an expected call of DomainGet.
func (mr *MockServiceHandlerMockRecorder) DomainGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGet", reflect.TypeOf((*MockServiceHandler)(nil).DomainGet), u, id)
}

// DomainGets mocks base method.
func (m *MockServiceHandler) DomainGets(u *user.User, size uint64, token string) ([]*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGets", u, size, token)
	ret0, _ := ret[0].([]*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGets indicates an expected call of DomainGets.
func (mr *MockServiceHandlerMockRecorder) DomainGets(u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGets", reflect.TypeOf((*MockServiceHandler)(nil).DomainGets), u, size, token)
}

// DomainUpdate mocks base method.
func (m *MockServiceHandler) DomainUpdate(u *user.User, d *domain.Domain) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainUpdate", u, d)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainUpdate indicates an expected call of DomainUpdate.
func (mr *MockServiceHandlerMockRecorder) DomainUpdate(u, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainUpdate", reflect.TypeOf((*MockServiceHandler)(nil).DomainUpdate), u, d)
}

// ExtensionCreate mocks base method.
func (m *MockServiceHandler) ExtensionCreate(u *user.User, e *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionCreate", u, e)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionCreate indicates an expected call of ExtensionCreate.
func (mr *MockServiceHandlerMockRecorder) ExtensionCreate(u, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionCreate", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionCreate), u, e)
}

// ExtensionDelete mocks base method.
func (m *MockServiceHandler) ExtensionDelete(u *user.User, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionDelete", u, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionDelete indicates an expected call of ExtensionDelete.
func (mr *MockServiceHandlerMockRecorder) ExtensionDelete(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionDelete", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionDelete), u, id)
}

// ExtensionGet mocks base method.
func (m *MockServiceHandler) ExtensionGet(u *user.User, id uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGet", u, id)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGet indicates an expected call of ExtensionGet.
func (mr *MockServiceHandlerMockRecorder) ExtensionGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGet", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionGet), u, id)
}

// ExtensionGets mocks base method.
func (m *MockServiceHandler) ExtensionGets(u *user.User, domainID uuid.UUID, size uint64, token string) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGets", u, domainID, size, token)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGets indicates an expected call of ExtensionGets.
func (mr *MockServiceHandlerMockRecorder) ExtensionGets(u, domainID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGets", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionGets), u, domainID, size, token)
}

// ExtensionUpdate mocks base method.
func (m *MockServiceHandler) ExtensionUpdate(u *user.User, d *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionUpdate", u, d)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionUpdate indicates an expected call of ExtensionUpdate.
func (mr *MockServiceHandlerMockRecorder) ExtensionUpdate(u, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionUpdate", reflect.TypeOf((*MockServiceHandler)(nil).ExtensionUpdate), u, d)
}

// FlowCreate mocks base method.
func (m *MockServiceHandler) FlowCreate(u *user.User, name, detail, webhookURI string, actions []action.Action, persist bool) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowCreate", u, name, detail, webhookURI, actions, persist)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowCreate indicates an expected call of FlowCreate.
func (mr *MockServiceHandlerMockRecorder) FlowCreate(u, name, detail, webhookURI, actions, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowCreate", reflect.TypeOf((*MockServiceHandler)(nil).FlowCreate), u, name, detail, webhookURI, actions, persist)
}

// FlowDelete mocks base method.
func (m *MockServiceHandler) FlowDelete(u *user.User, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowDelete", u, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowDelete indicates an expected call of FlowDelete.
func (mr *MockServiceHandlerMockRecorder) FlowDelete(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowDelete", reflect.TypeOf((*MockServiceHandler)(nil).FlowDelete), u, id)
}

// FlowGet mocks base method.
func (m *MockServiceHandler) FlowGet(u *user.User, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", u, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet.
func (mr *MockServiceHandlerMockRecorder) FlowGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockServiceHandler)(nil).FlowGet), u, id)
}

// FlowGets mocks base method.
func (m *MockServiceHandler) FlowGets(u *user.User, pageSize uint64, pageToken string) ([]*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGets", u, pageSize, pageToken)
	ret0, _ := ret[0].([]*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGets indicates an expected call of FlowGets.
func (mr *MockServiceHandlerMockRecorder) FlowGets(u, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGets", reflect.TypeOf((*MockServiceHandler)(nil).FlowGets), u, pageSize, pageToken)
}

// FlowUpdate mocks base method.
func (m *MockServiceHandler) FlowUpdate(u *user.User, f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowUpdate", u, f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowUpdate indicates an expected call of FlowUpdate.
func (mr *MockServiceHandlerMockRecorder) FlowUpdate(u, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowUpdate", reflect.TypeOf((*MockServiceHandler)(nil).FlowUpdate), u, f)
}

// NumberCreate mocks base method.
func (m *MockServiceHandler) NumberCreate(u *user.User, num string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberCreate", u, num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberCreate indicates an expected call of NumberCreate.
func (mr *MockServiceHandlerMockRecorder) NumberCreate(u, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberCreate", reflect.TypeOf((*MockServiceHandler)(nil).NumberCreate), u, num)
}

// NumberDelete mocks base method.
func (m *MockServiceHandler) NumberDelete(u *user.User, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberDelete", u, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberDelete indicates an expected call of NumberDelete.
func (mr *MockServiceHandlerMockRecorder) NumberDelete(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberDelete", reflect.TypeOf((*MockServiceHandler)(nil).NumberDelete), u, id)
}

// NumberGet mocks base method.
func (m *MockServiceHandler) NumberGet(u *user.User, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGet", u, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGet indicates an expected call of NumberGet.
func (mr *MockServiceHandlerMockRecorder) NumberGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGet", reflect.TypeOf((*MockServiceHandler)(nil).NumberGet), u, id)
}

// NumberGets mocks base method.
func (m *MockServiceHandler) NumberGets(u *user.User, size uint64, token string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGets", u, size, token)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGets indicates an expected call of NumberGets.
func (mr *MockServiceHandlerMockRecorder) NumberGets(u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGets", reflect.TypeOf((*MockServiceHandler)(nil).NumberGets), u, size, token)
}

// NumberUpdate mocks base method.
func (m *MockServiceHandler) NumberUpdate(u *user.User, numb *number.Number) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdate", u, numb)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberUpdate indicates an expected call of NumberUpdate.
func (mr *MockServiceHandlerMockRecorder) NumberUpdate(u, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdate", reflect.TypeOf((*MockServiceHandler)(nil).NumberUpdate), u, numb)
}

// RecordingGet mocks base method.
func (m *MockServiceHandler) RecordingGet(u *user.User, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGet", u, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGet indicates an expected call of RecordingGet.
func (mr *MockServiceHandlerMockRecorder) RecordingGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGet", reflect.TypeOf((*MockServiceHandler)(nil).RecordingGet), u, id)
}

// RecordingGets mocks base method.
func (m *MockServiceHandler) RecordingGets(u *user.User, size uint64, token string) ([]*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGets", u, size, token)
	ret0, _ := ret[0].([]*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGets indicates an expected call of RecordingGets.
func (mr *MockServiceHandlerMockRecorder) RecordingGets(u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGets", reflect.TypeOf((*MockServiceHandler)(nil).RecordingGets), u, size, token)
}

// RecordingfileGet mocks base method.
func (m *MockServiceHandler) RecordingfileGet(u *user.User, id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingfileGet", u, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingfileGet indicates an expected call of RecordingfileGet.
func (mr *MockServiceHandlerMockRecorder) RecordingfileGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingfileGet", reflect.TypeOf((*MockServiceHandler)(nil).RecordingfileGet), u, id)
}

// TagCreate mocks base method.
func (m *MockServiceHandler) TagCreate(u *user.User, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCreate", u, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagCreate indicates an expected call of TagCreate.
func (mr *MockServiceHandlerMockRecorder) TagCreate(u, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCreate", reflect.TypeOf((*MockServiceHandler)(nil).TagCreate), u, name, detail)
}

// TagDelete mocks base method.
func (m *MockServiceHandler) TagDelete(u *user.User, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", u, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete.
func (mr *MockServiceHandlerMockRecorder) TagDelete(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockServiceHandler)(nil).TagDelete), u, id)
}

// TagGet mocks base method.
func (m *MockServiceHandler) TagGet(u *user.User, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGet", u, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGet indicates an expected call of TagGet.
func (mr *MockServiceHandlerMockRecorder) TagGet(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGet", reflect.TypeOf((*MockServiceHandler)(nil).TagGet), u, id)
}

// TagGets mocks base method.
func (m *MockServiceHandler) TagGets(u *user.User, size uint64, token string) ([]*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGets", u, size, token)
	ret0, _ := ret[0].([]*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGets indicates an expected call of TagGets.
func (mr *MockServiceHandlerMockRecorder) TagGets(u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGets", reflect.TypeOf((*MockServiceHandler)(nil).TagGets), u, size, token)
}

// TagUpdate mocks base method.
func (m *MockServiceHandler) TagUpdate(u *user.User, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagUpdate", u, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagUpdate indicates an expected call of TagUpdate.
func (mr *MockServiceHandlerMockRecorder) TagUpdate(u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagUpdate", reflect.TypeOf((*MockServiceHandler)(nil).TagUpdate), u, id, name, detail)
}

// TranscribeCreate mocks base method.
func (m *MockServiceHandler) TranscribeCreate(u *user.User, referencdID uuid.UUID, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeCreate", u, referencdID, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeCreate indicates an expected call of TranscribeCreate.
func (mr *MockServiceHandlerMockRecorder) TranscribeCreate(u, referencdID, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeCreate", reflect.TypeOf((*MockServiceHandler)(nil).TranscribeCreate), u, referencdID, language)
}

// UserCreate mocks base method.
func (m *MockServiceHandler) UserCreate(u *user.User, username, password, name, detail string, permission user.Permission) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", u, username, password, name, detail, permission)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockServiceHandlerMockRecorder) UserCreate(u, username, password, name, detail, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockServiceHandler)(nil).UserCreate), u, username, password, name, detail, permission)
}

// UserDelete mocks base method.
func (m *MockServiceHandler) UserDelete(u *user.User, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", u, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockServiceHandlerMockRecorder) UserDelete(u, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockServiceHandler)(nil).UserDelete), u, id)
}

// UserGet mocks base method.
func (m *MockServiceHandler) UserGet(u *user.User, userID uint64) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", u, userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockServiceHandlerMockRecorder) UserGet(u, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockServiceHandler)(nil).UserGet), u, userID)
}

// UserGets mocks base method.
func (m *MockServiceHandler) UserGets(u *user.User, size uint64, token string) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGets", u, size, token)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGets indicates an expected call of UserGets.
func (mr *MockServiceHandlerMockRecorder) UserGets(u, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGets", reflect.TypeOf((*MockServiceHandler)(nil).UserGets), u, size, token)
}

// UserUpdate mocks base method.
func (m *MockServiceHandler) UserUpdate(u *user.User, id uint64, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", u, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockServiceHandlerMockRecorder) UserUpdate(u, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockServiceHandler)(nil).UserUpdate), u, id, name, detail)
}

// UserUpdatePassword mocks base method.
func (m *MockServiceHandler) UserUpdatePassword(u *user.User, id uint64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdatePassword", u, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdatePassword indicates an expected call of UserUpdatePassword.
func (mr *MockServiceHandlerMockRecorder) UserUpdatePassword(u, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdatePassword", reflect.TypeOf((*MockServiceHandler)(nil).UserUpdatePassword), u, id, password)
}

// UserUpdatePermission mocks base method.
func (m *MockServiceHandler) UserUpdatePermission(u *user.User, id uint64, permission user.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdatePermission", u, id, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdatePermission indicates an expected call of UserUpdatePermission.
func (mr *MockServiceHandlerMockRecorder) UserUpdatePermission(u, id, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdatePermission", reflect.TypeOf((*MockServiceHandler)(nil).UserUpdatePermission), u, id, permission)
}
