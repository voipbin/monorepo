// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package zmq is a generated GoMock package.
package zmq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zmq4 "github.com/pebbe/zmq4"
)

// MockZMQ is a mock of ZMQ interface.
type MockZMQ struct {
	ctrl     *gomock.Controller
	recorder *MockZMQMockRecorder
}

// MockZMQMockRecorder is the mock recorder for MockZMQ.
type MockZMQMockRecorder struct {
	mock *MockZMQ
}

// NewMockZMQ creates a new mock instance.
func NewMockZMQ(ctrl *gomock.Controller) *MockZMQ {
	mock := &MockZMQ{ctrl: ctrl}
	mock.recorder = &MockZMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZMQ) EXPECT() *MockZMQMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockZMQ) Bind(t zmq4.Type, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", t, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockZMQMockRecorder) Bind(t, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockZMQ)(nil).Bind), t, addr)
}

// Connect mocks base method.
func (m *MockZMQ) Connect(t zmq4.Type, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", t, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockZMQMockRecorder) Connect(t, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockZMQ)(nil).Connect), t, addr)
}

// Publish mocks base method.
func (m_2 *MockZMQ) Publish(topic, m string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Publish", topic, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockZMQMockRecorder) Publish(topic, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockZMQ)(nil).Publish), topic, m)
}

// Receive mocks base method.
func (m *MockZMQ) Receive() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockZMQMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockZMQ)(nil).Receive))
}

// Subscribe mocks base method.
func (m *MockZMQ) Subscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockZMQMockRecorder) Subscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockZMQ)(nil).Subscribe), topic)
}

// Terminate mocks base method.
func (m *MockZMQ) Terminate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate")
}

// Terminate indicates an expected call of Terminate.
func (mr *MockZMQMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockZMQ)(nil).Terminate))
}

// Unsubscribe mocks base method.
func (m *MockZMQ) Unsubscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockZMQMockRecorder) Unsubscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockZMQ)(nil).Unsubscribe), topic)
}
