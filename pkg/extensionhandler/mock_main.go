// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package extensionhandler is a generated GoMock package.
package extensionhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	extension "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/extension"
)

// MockExtensionHandler is a mock of ExtensionHandler interface.
type MockExtensionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionHandlerMockRecorder
}

// MockExtensionHandlerMockRecorder is the mock recorder for MockExtensionHandler.
type MockExtensionHandlerMockRecorder struct {
	mock *MockExtensionHandler
}

// NewMockExtensionHandler creates a new mock instance.
func NewMockExtensionHandler(ctrl *gomock.Controller) *MockExtensionHandler {
	mock := &MockExtensionHandler{ctrl: ctrl}
	mock.recorder = &MockExtensionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionHandler) EXPECT() *MockExtensionHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExtensionHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, domainID uuid.UUID, ext, password string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, domainID, ext, password)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExtensionHandlerMockRecorder) Create(ctx, customerID, name, detail, domainID, ext, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExtensionHandler)(nil).Create), ctx, customerID, name, detail, domainID, ext, password)
}

// Delete mocks base method.
func (m *MockExtensionHandler) Delete(ctx context.Context, id uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockExtensionHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExtensionHandler)(nil).Delete), ctx, id)
}

// DeleteByDomainID mocks base method.
func (m *MockExtensionHandler) DeleteByDomainID(ctx context.Context, domainID uuid.UUID) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByDomainID", ctx, domainID)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByDomainID indicates an expected call of DeleteByDomainID.
func (mr *MockExtensionHandlerMockRecorder) DeleteByDomainID(ctx, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByDomainID", reflect.TypeOf((*MockExtensionHandler)(nil).DeleteByDomainID), ctx, domainID)
}

// Get mocks base method.
func (m *MockExtensionHandler) Get(ctx context.Context, id uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExtensionHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExtensionHandler)(nil).Get), ctx, id)
}

// GetByEndpoint mocks base method.
func (m *MockExtensionHandler) GetByEndpoint(ctx context.Context, endpoint string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEndpoint", ctx, endpoint)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEndpoint indicates an expected call of GetByEndpoint.
func (mr *MockExtensionHandlerMockRecorder) GetByEndpoint(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEndpoint", reflect.TypeOf((*MockExtensionHandler)(nil).GetByEndpoint), ctx, endpoint)
}

// GetsByCustomerID mocks base method.
func (m *MockExtensionHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockExtensionHandlerMockRecorder) GetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockExtensionHandler)(nil).GetsByCustomerID), ctx, customerID, token, limit)
}

// GetsByDomainID mocks base method.
func (m *MockExtensionHandler) GetsByDomainID(ctx context.Context, domainID uuid.UUID, token string, limit uint64) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByDomainID", ctx, domainID, token, limit)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByDomainID indicates an expected call of GetsByDomainID.
func (mr *MockExtensionHandlerMockRecorder) GetsByDomainID(ctx, domainID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByDomainID", reflect.TypeOf((*MockExtensionHandler)(nil).GetsByDomainID), ctx, domainID, token, limit)
}

// Update mocks base method.
func (m *MockExtensionHandler) Update(ctx context.Context, e *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, e)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExtensionHandlerMockRecorder) Update(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExtensionHandler)(nil).Update), ctx, e)
}
