// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package helphandler is a generated GoMock package.
package helphandler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelpHandler is a mock of HelpHandler interface.
type MockHelpHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHelpHandlerMockRecorder
}

// MockHelpHandlerMockRecorder is the mock recorder for MockHelpHandler.
type MockHelpHandlerMockRecorder struct {
	mock *MockHelpHandler
}

// NewMockHelpHandler creates a new mock instance.
func NewMockHelpHandler(ctrl *gomock.Controller) *MockHelpHandler {
	mock := &MockHelpHandler{ctrl: ctrl}
	mock.recorder = &MockHelpHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelpHandler) EXPECT() *MockHelpHandlerMockRecorder {
	return m.recorder
}

// HashCheck mocks base method.
func (m *MockHelpHandler) HashCheck(password, hashString string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashCheck", password, hashString)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HashCheck indicates an expected call of HashCheck.
func (mr *MockHelpHandlerMockRecorder) HashCheck(password, hashString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashCheck", reflect.TypeOf((*MockHelpHandler)(nil).HashCheck), password, hashString)
}

// HashGenerate mocks base method.
func (m *MockHelpHandler) HashGenerate(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashGenerate", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashGenerate indicates an expected call of HashGenerate.
func (mr *MockHelpHandlerMockRecorder) HashGenerate(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashGenerate", reflect.TypeOf((*MockHelpHandler)(nil).HashGenerate), password)
}
