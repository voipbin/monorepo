// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	astaor "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/astaor"
	astauth "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/astauth"
	astcontact "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/astcontact"
	astendpoint "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/astendpoint"
	domain "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/domain"
	extension "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/extension"
	trunk "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/trunk"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AstAORCreate mocks base method.
func (m *MockDBHandler) AstAORCreate(ctx context.Context, b *astaor.AstAOR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORCreate indicates an expected call of AstAORCreate.
func (mr *MockDBHandlerMockRecorder) AstAORCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORCreate", reflect.TypeOf((*MockDBHandler)(nil).AstAORCreate), ctx, b)
}

// AstAORDelete mocks base method.
func (m *MockDBHandler) AstAORDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORDelete indicates an expected call of AstAORDelete.
func (mr *MockDBHandlerMockRecorder) AstAORDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORDelete", reflect.TypeOf((*MockDBHandler)(nil).AstAORDelete), ctx, id)
}

// AstAORGet mocks base method.
func (m *MockDBHandler) AstAORGet(ctx context.Context, id string) (*astaor.AstAOR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORGet", ctx, id)
	ret0, _ := ret[0].(*astaor.AstAOR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAORGet indicates an expected call of AstAORGet.
func (mr *MockDBHandlerMockRecorder) AstAORGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORGet", reflect.TypeOf((*MockDBHandler)(nil).AstAORGet), ctx, id)
}

// AstAuthCreate mocks base method.
func (m *MockDBHandler) AstAuthCreate(ctx context.Context, b *astauth.AstAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthCreate indicates an expected call of AstAuthCreate.
func (mr *MockDBHandlerMockRecorder) AstAuthCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthCreate", reflect.TypeOf((*MockDBHandler)(nil).AstAuthCreate), ctx, b)
}

// AstAuthDelete mocks base method.
func (m *MockDBHandler) AstAuthDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthDelete indicates an expected call of AstAuthDelete.
func (mr *MockDBHandlerMockRecorder) AstAuthDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthDelete", reflect.TypeOf((*MockDBHandler)(nil).AstAuthDelete), ctx, id)
}

// AstAuthGet mocks base method.
func (m *MockDBHandler) AstAuthGet(ctx context.Context, id string) (*astauth.AstAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthGet", ctx, id)
	ret0, _ := ret[0].(*astauth.AstAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAuthGet indicates an expected call of AstAuthGet.
func (mr *MockDBHandlerMockRecorder) AstAuthGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthGet", reflect.TypeOf((*MockDBHandler)(nil).AstAuthGet), ctx, id)
}

// AstAuthUpdate mocks base method.
func (m *MockDBHandler) AstAuthUpdate(ctx context.Context, auth *astauth.AstAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthUpdate", ctx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthUpdate indicates an expected call of AstAuthUpdate.
func (mr *MockDBHandlerMockRecorder) AstAuthUpdate(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthUpdate", reflect.TypeOf((*MockDBHandler)(nil).AstAuthUpdate), ctx, auth)
}

// AstContactDeleteFromCache mocks base method.
func (m *MockDBHandler) AstContactDeleteFromCache(ctx context.Context, endpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstContactDeleteFromCache", ctx, endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstContactDeleteFromCache indicates an expected call of AstContactDeleteFromCache.
func (mr *MockDBHandlerMockRecorder) AstContactDeleteFromCache(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstContactDeleteFromCache", reflect.TypeOf((*MockDBHandler)(nil).AstContactDeleteFromCache), ctx, endpoint)
}

// AstContactGetsByEndpoint mocks base method.
func (m *MockDBHandler) AstContactGetsByEndpoint(ctx context.Context, endpoint string) ([]*astcontact.AstContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstContactGetsByEndpoint", ctx, endpoint)
	ret0, _ := ret[0].([]*astcontact.AstContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstContactGetsByEndpoint indicates an expected call of AstContactGetsByEndpoint.
func (mr *MockDBHandlerMockRecorder) AstContactGetsByEndpoint(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstContactGetsByEndpoint", reflect.TypeOf((*MockDBHandler)(nil).AstContactGetsByEndpoint), ctx, endpoint)
}

// AstContactGetsFromCache mocks base method.
func (m *MockDBHandler) AstContactGetsFromCache(ctx context.Context, endpoint string) ([]*astcontact.AstContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstContactGetsFromCache", ctx, endpoint)
	ret0, _ := ret[0].([]*astcontact.AstContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstContactGetsFromCache indicates an expected call of AstContactGetsFromCache.
func (mr *MockDBHandlerMockRecorder) AstContactGetsFromCache(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstContactGetsFromCache", reflect.TypeOf((*MockDBHandler)(nil).AstContactGetsFromCache), ctx, endpoint)
}

// AstContactsSetToCache mocks base method.
func (m *MockDBHandler) AstContactsSetToCache(ctx context.Context, ednpoint string, contacts []*astcontact.AstContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstContactsSetToCache", ctx, ednpoint, contacts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstContactsSetToCache indicates an expected call of AstContactsSetToCache.
func (mr *MockDBHandlerMockRecorder) AstContactsSetToCache(ctx, ednpoint, contacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstContactsSetToCache", reflect.TypeOf((*MockDBHandler)(nil).AstContactsSetToCache), ctx, ednpoint, contacts)
}

// AstEndpointCreate mocks base method.
func (m *MockDBHandler) AstEndpointCreate(ctx context.Context, b *astendpoint.AstEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointCreate indicates an expected call of AstEndpointCreate.
func (mr *MockDBHandlerMockRecorder) AstEndpointCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointCreate", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointCreate), ctx, b)
}

// AstEndpointDelete mocks base method.
func (m *MockDBHandler) AstEndpointDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointDelete indicates an expected call of AstEndpointDelete.
func (mr *MockDBHandlerMockRecorder) AstEndpointDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointDelete", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointDelete), ctx, id)
}

// AstEndpointGet mocks base method.
func (m *MockDBHandler) AstEndpointGet(ctx context.Context, id string) (*astendpoint.AstEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointGet", ctx, id)
	ret0, _ := ret[0].(*astendpoint.AstEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstEndpointGet indicates an expected call of AstEndpointGet.
func (mr *MockDBHandlerMockRecorder) AstEndpointGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointGet", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointGet), ctx, id)
}

// DomainCreate mocks base method.
func (m *MockDBHandler) DomainCreate(ctx context.Context, b *domain.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainCreate indicates an expected call of DomainCreate.
func (mr *MockDBHandlerMockRecorder) DomainCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainCreate", reflect.TypeOf((*MockDBHandler)(nil).DomainCreate), ctx, b)
}

// DomainDelete mocks base method.
func (m *MockDBHandler) DomainDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainDelete indicates an expected call of DomainDelete.
func (mr *MockDBHandlerMockRecorder) DomainDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainDelete", reflect.TypeOf((*MockDBHandler)(nil).DomainDelete), ctx, id)
}

// DomainGet mocks base method.
func (m *MockDBHandler) DomainGet(ctx context.Context, id uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGet", ctx, id)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGet indicates an expected call of DomainGet.
func (mr *MockDBHandlerMockRecorder) DomainGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGet", reflect.TypeOf((*MockDBHandler)(nil).DomainGet), ctx, id)
}

// DomainGetByDomainName mocks base method.
func (m *MockDBHandler) DomainGetByDomainName(ctx context.Context, domainName string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGetByDomainName", ctx, domainName)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGetByDomainName indicates an expected call of DomainGetByDomainName.
func (mr *MockDBHandlerMockRecorder) DomainGetByDomainName(ctx, domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGetByDomainName", reflect.TypeOf((*MockDBHandler)(nil).DomainGetByDomainName), ctx, domainName)
}

// DomainGetsByCustomerID mocks base method.
func (m *MockDBHandler) DomainGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGetsByCustomerID indicates an expected call of DomainGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) DomainGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).DomainGetsByCustomerID), ctx, customerID, token, limit)
}

// DomainUpdateBasicInfo mocks base method.
func (m *MockDBHandler) DomainUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainUpdateBasicInfo indicates an expected call of DomainUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) DomainUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).DomainUpdateBasicInfo), ctx, id, name, detail)
}

// ExtensionCreate mocks base method.
func (m *MockDBHandler) ExtensionCreate(ctx context.Context, b *extension.Extension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionCreate indicates an expected call of ExtensionCreate.
func (mr *MockDBHandlerMockRecorder) ExtensionCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionCreate", reflect.TypeOf((*MockDBHandler)(nil).ExtensionCreate), ctx, b)
}

// ExtensionDelete mocks base method.
func (m *MockDBHandler) ExtensionDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionDelete indicates an expected call of ExtensionDelete.
func (mr *MockDBHandlerMockRecorder) ExtensionDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionDelete", reflect.TypeOf((*MockDBHandler)(nil).ExtensionDelete), ctx, id)
}

// ExtensionGet mocks base method.
func (m *MockDBHandler) ExtensionGet(ctx context.Context, id uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGet", ctx, id)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGet indicates an expected call of ExtensionGet.
func (mr *MockDBHandlerMockRecorder) ExtensionGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGet", reflect.TypeOf((*MockDBHandler)(nil).ExtensionGet), ctx, id)
}

// ExtensionGetByEndpointID mocks base method.
func (m *MockDBHandler) ExtensionGetByEndpointID(ctx context.Context, endpoint string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetByEndpointID", ctx, endpoint)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetByEndpointID indicates an expected call of ExtensionGetByEndpointID.
func (mr *MockDBHandlerMockRecorder) ExtensionGetByEndpointID(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetByEndpointID", reflect.TypeOf((*MockDBHandler)(nil).ExtensionGetByEndpointID), ctx, endpoint)
}

// ExtensionGetsByCustomerID mocks base method.
func (m *MockDBHandler) ExtensionGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetsByCustomerID indicates an expected call of ExtensionGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) ExtensionGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).ExtensionGetsByCustomerID), ctx, customerID, token, limit)
}

// ExtensionGetsByDomainID mocks base method.
func (m *MockDBHandler) ExtensionGetsByDomainID(ctx context.Context, domainID uuid.UUID, token string, limit uint64) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetsByDomainID", ctx, domainID, token, limit)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetsByDomainID indicates an expected call of ExtensionGetsByDomainID.
func (mr *MockDBHandlerMockRecorder) ExtensionGetsByDomainID(ctx, domainID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetsByDomainID", reflect.TypeOf((*MockDBHandler)(nil).ExtensionGetsByDomainID), ctx, domainID, token, limit)
}

// ExtensionUpdate mocks base method.
func (m *MockDBHandler) ExtensionUpdate(ctx context.Context, b *extension.Extension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionUpdate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionUpdate indicates an expected call of ExtensionUpdate.
func (mr *MockDBHandlerMockRecorder) ExtensionUpdate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionUpdate", reflect.TypeOf((*MockDBHandler)(nil).ExtensionUpdate), ctx, b)
}

// TrunkCreate mocks base method.
func (m *MockDBHandler) TrunkCreate(ctx context.Context, t *trunk.Trunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrunkCreate indicates an expected call of TrunkCreate.
func (mr *MockDBHandlerMockRecorder) TrunkCreate(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkCreate", reflect.TypeOf((*MockDBHandler)(nil).TrunkCreate), ctx, t)
}

// TrunkDelete mocks base method.
func (m *MockDBHandler) TrunkDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrunkDelete indicates an expected call of TrunkDelete.
func (mr *MockDBHandlerMockRecorder) TrunkDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkDelete", reflect.TypeOf((*MockDBHandler)(nil).TrunkDelete), ctx, id)
}

// TrunkGet mocks base method.
func (m *MockDBHandler) TrunkGet(ctx context.Context, id uuid.UUID) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkGet", ctx, id)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrunkGet indicates an expected call of TrunkGet.
func (mr *MockDBHandlerMockRecorder) TrunkGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkGet", reflect.TypeOf((*MockDBHandler)(nil).TrunkGet), ctx, id)
}

// TrunkGetByDomainName mocks base method.
func (m *MockDBHandler) TrunkGetByDomainName(ctx context.Context, domainName string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkGetByDomainName", ctx, domainName)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrunkGetByDomainName indicates an expected call of TrunkGetByDomainName.
func (mr *MockDBHandlerMockRecorder) TrunkGetByDomainName(ctx, domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkGetByDomainName", reflect.TypeOf((*MockDBHandler)(nil).TrunkGetByDomainName), ctx, domainName)
}

// TrunkGetsByCustomerID mocks base method.
func (m *MockDBHandler) TrunkGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrunkGetsByCustomerID indicates an expected call of TrunkGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) TrunkGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).TrunkGetsByCustomerID), ctx, customerID, token, limit)
}

// TrunkUpdateBasicInfo mocks base method.
func (m *MockDBHandler) TrunkUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, authTypes []trunk.AuthType, username, password string, allowedIPs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrunkUpdateBasicInfo", ctx, id, name, detail, authTypes, username, password, allowedIPs)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrunkUpdateBasicInfo indicates an expected call of TrunkUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) TrunkUpdateBasicInfo(ctx, id, name, detail, authTypes, username, password, allowedIPs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrunkUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).TrunkUpdateBasicInfo), ctx, id, name, detail, authTypes, username, password, allowedIPs)
}
