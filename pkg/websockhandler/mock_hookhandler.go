// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package websockhandler is a generated GoMock package.
package websockhandler

import (
	context "context"
	http "net/http"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockWebsockHandler is a mock of WebsockHandler interface.
type MockWebsockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWebsockHandlerMockRecorder
}

// MockWebsockHandlerMockRecorder is the mock recorder for MockWebsockHandler.
type MockWebsockHandlerMockRecorder struct {
	mock *MockWebsockHandler
}

// NewMockWebsockHandler creates a new mock instance.
func NewMockWebsockHandler(ctrl *gomock.Controller) *MockWebsockHandler {
	mock := &MockWebsockHandler{ctrl: ctrl}
	mock.recorder = &MockWebsockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsockHandler) EXPECT() *MockWebsockHandlerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWebsockHandler) Run(ctx context.Context, w http.ResponseWriter, r *http.Request, customerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, w, r, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWebsockHandlerMockRecorder) Run(ctx, w, r, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWebsockHandler)(nil).Run), ctx, w, r, customerID)
}
