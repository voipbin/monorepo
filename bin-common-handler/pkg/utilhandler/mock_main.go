// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package utilhandler is a generated GoMock package.
package utilhandler

import (
	url "net/url"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockUtilHandler is a mock of UtilHandler interface.
type MockUtilHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUtilHandlerMockRecorder
}

// MockUtilHandlerMockRecorder is the mock recorder for MockUtilHandler.
type MockUtilHandlerMockRecorder struct {
	mock *MockUtilHandler
}

// NewMockUtilHandler creates a new mock instance.
func NewMockUtilHandler(ctrl *gomock.Controller) *MockUtilHandler {
	mock := &MockUtilHandler{ctrl: ctrl}
	mock.recorder = &MockUtilHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilHandler) EXPECT() *MockUtilHandlerMockRecorder {
	return m.recorder
}

// TimeGetCurTime mocks base method.
func (m *MockUtilHandler) TimeGetCurTime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeGetCurTime")
	ret0, _ := ret[0].(string)
	return ret0
}

// TimeGetCurTime indicates an expected call of TimeGetCurTime.
func (mr *MockUtilHandlerMockRecorder) TimeGetCurTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeGetCurTime", reflect.TypeOf((*MockUtilHandler)(nil).TimeGetCurTime))
}

// TimeGetCurTimeAdd mocks base method.
func (m *MockUtilHandler) TimeGetCurTimeAdd(duration time.Duration) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeGetCurTimeAdd", duration)
	ret0, _ := ret[0].(string)
	return ret0
}

// TimeGetCurTimeAdd indicates an expected call of TimeGetCurTimeAdd.
func (mr *MockUtilHandlerMockRecorder) TimeGetCurTimeAdd(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeGetCurTimeAdd", reflect.TypeOf((*MockUtilHandler)(nil).TimeGetCurTimeAdd), duration)
}

// TimeGetCurTimeRFC3339 mocks base method.
func (m *MockUtilHandler) TimeGetCurTimeRFC3339() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeGetCurTimeRFC3339")
	ret0, _ := ret[0].(string)
	return ret0
}

// TimeGetCurTimeRFC3339 indicates an expected call of TimeGetCurTimeRFC3339.
func (mr *MockUtilHandlerMockRecorder) TimeGetCurTimeRFC3339() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeGetCurTimeRFC3339", reflect.TypeOf((*MockUtilHandler)(nil).TimeGetCurTimeRFC3339))
}

// TimeParse mocks base method.
func (m *MockUtilHandler) TimeParse(timeString string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeParse", timeString)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// TimeParse indicates an expected call of TimeParse.
func (mr *MockUtilHandlerMockRecorder) TimeParse(timeString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeParse", reflect.TypeOf((*MockUtilHandler)(nil).TimeParse), timeString)
}

// URLParseFilters mocks base method.
func (m *MockUtilHandler) URLParseFilters(u *url.URL) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParseFilters", u)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// URLParseFilters indicates an expected call of URLParseFilters.
func (mr *MockUtilHandlerMockRecorder) URLParseFilters(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParseFilters", reflect.TypeOf((*MockUtilHandler)(nil).URLParseFilters), u)
}

// UUIDCreate mocks base method.
func (m *MockUtilHandler) UUIDCreate() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUIDCreate")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// UUIDCreate indicates an expected call of UUIDCreate.
func (mr *MockUtilHandlerMockRecorder) UUIDCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUIDCreate", reflect.TypeOf((*MockUtilHandler)(nil).UUIDCreate))
}
