// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package rabbitmqhandler is a generated GoMock package.
package rabbitmqhandler

import (
	context "context"
	sock "monorepo/bin-common-handler/models/sock"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp091_go "github.com/rabbitmq/amqp091-go"
)

// MockRabbit is a mock of Rabbit interface.
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit.
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance.
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRabbit) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRabbitMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbit)(nil).Close))
}

// Connect mocks base method.
func (m *MockRabbit) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockRabbitMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRabbit)(nil).Connect))
}

// ConsumeMessage mocks base method.
func (m *MockRabbit) ConsumeMessage(queueName, consumerName string, exclusive, noLocal, noWait bool, numWorkers int, messageConsume CbMsgConsume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessage", queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeMessage indicates an expected call of ConsumeMessage.
func (mr *MockRabbitMockRecorder) ConsumeMessage(queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockRabbit)(nil).ConsumeMessage), queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume)
}

// ConsumeRPC mocks base method.
func (m *MockRabbit) ConsumeRPC(queueName, consumerName string, exclusive, noLocal, noWait bool, workerNum int, cbConsume CbMsgRPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRPC", queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRPC indicates an expected call of ConsumeRPC.
func (mr *MockRabbitMockRecorder) ConsumeRPC(queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRPC", reflect.TypeOf((*MockRabbit)(nil).ConsumeRPC), queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume)
}

// ExchangeDeclare mocks base method.
func (m *MockRabbit) ExchangeDeclare(name, kind string, durable, autoDelete, internal, noWait bool, args amqp091_go.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockRabbitMockRecorder) ExchangeDeclare(name, kind, durable, autoDelete, internal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockRabbit)(nil).ExchangeDeclare), name, kind, durable, autoDelete, internal, noWait, args)
}

// ExchangeDeclareForDelay mocks base method.
func (m *MockRabbit) ExchangeDeclareForDelay(name string, durable, autoDelete, internal, noWait bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclareForDelay", name, durable, autoDelete, internal, noWait)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclareForDelay indicates an expected call of ExchangeDeclareForDelay.
func (mr *MockRabbitMockRecorder) ExchangeDeclareForDelay(name, durable, autoDelete, internal, noWait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclareForDelay", reflect.TypeOf((*MockRabbit)(nil).ExchangeDeclareForDelay), name, durable, autoDelete, internal, noWait)
}

// GetURL mocks base method.
func (m *MockRabbit) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockRabbitMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRabbit)(nil).GetURL))
}

// PublishEvent mocks base method.
func (m *MockRabbit) PublishEvent(queueName string, evt *sock.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", queueName, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockRabbitMockRecorder) PublishEvent(queueName, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockRabbit)(nil).PublishEvent), queueName, evt)
}

// PublishExchangeDelayedEvent mocks base method.
func (m *MockRabbit) PublishExchangeDelayedEvent(exchange, key string, evt *sock.Event, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExchangeDelayedEvent", exchange, key, evt, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExchangeDelayedEvent indicates an expected call of PublishExchangeDelayedEvent.
func (mr *MockRabbitMockRecorder) PublishExchangeDelayedEvent(exchange, key, evt, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExchangeDelayedEvent", reflect.TypeOf((*MockRabbit)(nil).PublishExchangeDelayedEvent), exchange, key, evt, delay)
}

// PublishExchangeDelayedRequest mocks base method.
func (m *MockRabbit) PublishExchangeDelayedRequest(exchange, key string, req *sock.Request, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExchangeDelayedRequest", exchange, key, req, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExchangeDelayedRequest indicates an expected call of PublishExchangeDelayedRequest.
func (mr *MockRabbitMockRecorder) PublishExchangeDelayedRequest(exchange, key, req, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExchangeDelayedRequest", reflect.TypeOf((*MockRabbit)(nil).PublishExchangeDelayedRequest), exchange, key, req, delay)
}

// PublishExchangeEvent mocks base method.
func (m *MockRabbit) PublishExchangeEvent(exchange, key string, evt *sock.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExchangeEvent", exchange, key, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExchangeEvent indicates an expected call of PublishExchangeEvent.
func (mr *MockRabbitMockRecorder) PublishExchangeEvent(exchange, key, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExchangeEvent", reflect.TypeOf((*MockRabbit)(nil).PublishExchangeEvent), exchange, key, evt)
}

// PublishExchangeRequest mocks base method.
func (m *MockRabbit) PublishExchangeRequest(exchange, key string, req *sock.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExchangeRequest", exchange, key, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExchangeRequest indicates an expected call of PublishExchangeRequest.
func (mr *MockRabbitMockRecorder) PublishExchangeRequest(exchange, key, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExchangeRequest", reflect.TypeOf((*MockRabbit)(nil).PublishExchangeRequest), exchange, key, req)
}

// PublishRPC mocks base method.
func (m *MockRabbit) PublishRPC(ctx context.Context, queueName string, req *sock.Request) (*sock.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRPC", ctx, queueName, req)
	ret0, _ := ret[0].(*sock.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishRPC indicates an expected call of PublishRPC.
func (mr *MockRabbitMockRecorder) PublishRPC(ctx, queueName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRPC", reflect.TypeOf((*MockRabbit)(nil).PublishRPC), ctx, queueName, req)
}

// PublishRequest mocks base method.
func (m *MockRabbit) PublishRequest(queueName string, req *sock.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRequest", queueName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRequest indicates an expected call of PublishRequest.
func (mr *MockRabbitMockRecorder) PublishRequest(queueName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRequest", reflect.TypeOf((*MockRabbit)(nil).PublishRequest), queueName, req)
}

// QueueBind mocks base method.
func (m *MockRabbit) QueueBind(name, key, exchange string, noWait bool, args amqp091_go.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", name, key, exchange, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind.
func (mr *MockRabbitMockRecorder) QueueBind(name, key, exchange, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockRabbit)(nil).QueueBind), name, key, exchange, noWait, args)
}

// QueueCreate mocks base method.
func (m *MockRabbit) QueueCreate(name, queueType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCreate", name, queueType)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueCreate indicates an expected call of QueueCreate.
func (mr *MockRabbitMockRecorder) QueueCreate(name, queueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreate", reflect.TypeOf((*MockRabbit)(nil).QueueCreate), name, queueType)
}

// QueueQoS mocks base method.
func (m *MockRabbit) QueueQoS(name string, prefetchCount, prefetchSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueQoS", name, prefetchCount, prefetchSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueQoS indicates an expected call of QueueQoS.
func (mr *MockRabbitMockRecorder) QueueQoS(name, prefetchCount, prefetchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueQoS", reflect.TypeOf((*MockRabbit)(nil).QueueQoS), name, prefetchCount, prefetchSize)
}
