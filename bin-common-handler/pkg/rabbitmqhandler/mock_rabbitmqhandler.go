// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package rabbitmqhandler is a generated GoMock package.
package rabbitmqhandler

import (
	context "context"
	sock "monorepo/bin-common-handler/models/sock"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbit is a mock of Rabbit interface.
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit.
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance.
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRabbit) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRabbitMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbit)(nil).Close))
}

// Connect mocks base method.
func (m *MockRabbit) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockRabbitMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRabbit)(nil).Connect))
}

// ConsumeMessage mocks base method.
func (m *MockRabbit) ConsumeMessage(queueName, consumerName string, exclusive, noLocal, noWait bool, numWorkers int, messageConsume sock.CbMsgConsume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessage", queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeMessage indicates an expected call of ConsumeMessage.
func (mr *MockRabbitMockRecorder) ConsumeMessage(queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockRabbit)(nil).ConsumeMessage), queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume)
}

// ConsumeRPC mocks base method.
func (m *MockRabbit) ConsumeRPC(queueName, consumerName string, exclusive, noLocal, noWait bool, workerNum int, cbConsume sock.CbMsgRPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRPC", queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRPC indicates an expected call of ConsumeRPC.
func (mr *MockRabbitMockRecorder) ConsumeRPC(queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRPC", reflect.TypeOf((*MockRabbit)(nil).ConsumeRPC), queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume)
}

// EventPublish mocks base method.
func (m *MockRabbit) EventPublish(topic, key string, evt *sock.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventPublish", topic, key, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventPublish indicates an expected call of EventPublish.
func (mr *MockRabbitMockRecorder) EventPublish(topic, key, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPublish", reflect.TypeOf((*MockRabbit)(nil).EventPublish), topic, key, evt)
}

// EventPublishWithDelay mocks base method.
func (m *MockRabbit) EventPublishWithDelay(topic, key string, evt *sock.Event, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventPublishWithDelay", topic, key, evt, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventPublishWithDelay indicates an expected call of EventPublishWithDelay.
func (mr *MockRabbitMockRecorder) EventPublishWithDelay(topic, key, evt, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPublishWithDelay", reflect.TypeOf((*MockRabbit)(nil).EventPublishWithDelay), topic, key, evt, delay)
}

// QueueCreate mocks base method.
func (m *MockRabbit) QueueCreate(name, queueType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCreate", name, queueType)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueCreate indicates an expected call of QueueCreate.
func (mr *MockRabbitMockRecorder) QueueCreate(name, queueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreate", reflect.TypeOf((*MockRabbit)(nil).QueueCreate), name, queueType)
}

// QueueSubscribe mocks base method.
func (m *MockRabbit) QueueSubscribe(name, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", name, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockRabbitMockRecorder) QueueSubscribe(name, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockRabbit)(nil).QueueSubscribe), name, topic)
}

// RequestPublish mocks base method.
func (m *MockRabbit) RequestPublish(ctx context.Context, queueName string, req *sock.Request) (*sock.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPublish", ctx, queueName, req)
	ret0, _ := ret[0].(*sock.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPublish indicates an expected call of RequestPublish.
func (mr *MockRabbitMockRecorder) RequestPublish(ctx, queueName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPublish", reflect.TypeOf((*MockRabbit)(nil).RequestPublish), ctx, queueName, req)
}

// RequestPublishWithDelay mocks base method.
func (m *MockRabbit) RequestPublishWithDelay(key string, req *sock.Request, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPublishWithDelay", key, req, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestPublishWithDelay indicates an expected call of RequestPublishWithDelay.
func (mr *MockRabbitMockRecorder) RequestPublishWithDelay(key, req, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPublishWithDelay", reflect.TypeOf((*MockRabbit)(nil).RequestPublishWithDelay), key, req, delay)
}

// TopicCreate mocks base method.
func (m *MockRabbit) TopicCreate(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicCreate", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicCreate indicates an expected call of TopicCreate.
func (mr *MockRabbitMockRecorder) TopicCreate(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicCreate", reflect.TypeOf((*MockRabbit)(nil).TopicCreate), name)
}
