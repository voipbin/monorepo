// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package requesthandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	context "context"
	json "encoding/json"
	agent "monorepo/bin-agent-manager/models/agent"
	ai "monorepo/bin-ai-manager/models/ai"
	aicall "monorepo/bin-ai-manager/models/aicall"
	message "monorepo/bin-ai-manager/models/message"
	account "monorepo/bin-billing-manager/models/account"
	billing "monorepo/bin-billing-manager/models/billing"
	ari "monorepo/bin-call-manager/models/ari"
	bridge "monorepo/bin-call-manager/models/bridge"
	call "monorepo/bin-call-manager/models/call"
	channel "monorepo/bin-call-manager/models/channel"
	confbridge "monorepo/bin-call-manager/models/confbridge"
	externalmedia "monorepo/bin-call-manager/models/externalmedia"
	groupcall "monorepo/bin-call-manager/models/groupcall"
	recording "monorepo/bin-call-manager/models/recording"
	campaign "monorepo/bin-campaign-manager/models/campaign"
	campaigncall "monorepo/bin-campaign-manager/models/campaigncall"
	outplan "monorepo/bin-campaign-manager/models/outplan"
	chat "monorepo/bin-chat-manager/models/chat"
	chatroom "monorepo/bin-chat-manager/models/chatroom"
	media "monorepo/bin-chat-manager/models/media"
	messagechat "monorepo/bin-chat-manager/models/messagechat"
	messagechatroom "monorepo/bin-chat-manager/models/messagechatroom"
	address "monorepo/bin-common-handler/models/address"
	outline "monorepo/bin-common-handler/models/outline"
	service "monorepo/bin-common-handler/models/service"
	sock "monorepo/bin-common-handler/models/sock"
	conference "monorepo/bin-conference-manager/models/conference"
	conferencecall "monorepo/bin-conference-manager/models/conferencecall"
	account0 "monorepo/bin-conversation-manager/models/account"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	media0 "monorepo/bin-conversation-manager/models/media"
	message0 "monorepo/bin-conversation-manager/models/message"
	accesskey "monorepo/bin-customer-manager/models/accesskey"
	customer "monorepo/bin-customer-manager/models/customer"
	email "monorepo/bin-email-manager/models/email"
	action "monorepo/bin-flow-manager/models/action"
	activeflow "monorepo/bin-flow-manager/models/activeflow"
	flow "monorepo/bin-flow-manager/models/flow"
	variable "monorepo/bin-flow-manager/models/variable"
	hook "monorepo/bin-hook-manager/models/hook"
	message1 "monorepo/bin-message-manager/models/message"
	availablenumber "monorepo/bin-number-manager/models/availablenumber"
	number "monorepo/bin-number-manager/models/number"
	outdial "monorepo/bin-outdial-manager/models/outdial"
	outdialtarget "monorepo/bin-outdial-manager/models/outdialtarget"
	queue "monorepo/bin-queue-manager/models/queue"
	queuecall "monorepo/bin-queue-manager/models/queuecall"
	astcontact "monorepo/bin-registrar-manager/models/astcontact"
	extension "monorepo/bin-registrar-manager/models/extension"
	sipauth "monorepo/bin-registrar-manager/models/sipauth"
	trunk "monorepo/bin-registrar-manager/models/trunk"
	provider "monorepo/bin-route-manager/models/provider"
	route "monorepo/bin-route-manager/models/route"
	account1 "monorepo/bin-storage-manager/models/account"
	bucketfile "monorepo/bin-storage-manager/models/bucketfile"
	compress_file "monorepo/bin-storage-manager/models/compressfile"
	file "monorepo/bin-storage-manager/models/file"
	tag "monorepo/bin-tag-manager/models/tag"
	transcribe "monorepo/bin-transcribe-manager/models/transcribe"
	transcript "monorepo/bin-transcribe-manager/models/transcript"
	transfer "monorepo/bin-transfer-manager/models/transfer"
	tts "monorepo/bin-tts-manager/models/tts"
	webhook "monorepo/bin-webhook-manager/models/webhook"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
	isgomock struct{}
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// AIV1AICreate mocks base method.
func (m *MockRequestHandler) AIV1AICreate(ctx context.Context, customerID uuid.UUID, name, detail string, engineType ai.EngineType, engineModel ai.EngineModel, engineData map[string]any, initPrompt string) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AICreate", ctx, customerID, name, detail, engineType, engineModel, engineData, initPrompt)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AICreate indicates an expected call of AIV1AICreate.
func (mr *MockRequestHandlerMockRecorder) AIV1AICreate(ctx, customerID, name, detail, engineType, engineModel, engineData, initPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AICreate", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AICreate), ctx, customerID, name, detail, engineType, engineModel, engineData, initPrompt)
}

// AIV1AIDelete mocks base method.
func (m *MockRequestHandler) AIV1AIDelete(ctx context.Context, aiID uuid.UUID) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIDelete", ctx, aiID)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIDelete indicates an expected call of AIV1AIDelete.
func (mr *MockRequestHandlerMockRecorder) AIV1AIDelete(ctx, aiID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIDelete", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIDelete), ctx, aiID)
}

// AIV1AIGet mocks base method.
func (m *MockRequestHandler) AIV1AIGet(ctx context.Context, aiID uuid.UUID) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIGet", ctx, aiID)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIGet indicates an expected call of AIV1AIGet.
func (mr *MockRequestHandlerMockRecorder) AIV1AIGet(ctx, aiID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIGet", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIGet), ctx, aiID)
}

// AIV1AIGetsByCustomerID mocks base method.
func (m *MockRequestHandler) AIV1AIGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64, filters map[string]string) ([]ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIGetsByCustomerID", ctx, customerID, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIGetsByCustomerID indicates an expected call of AIV1AIGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) AIV1AIGetsByCustomerID(ctx, customerID, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIGetsByCustomerID), ctx, customerID, pageToken, pageSize, filters)
}

// AIV1AIUpdate mocks base method.
func (m *MockRequestHandler) AIV1AIUpdate(ctx context.Context, aiID uuid.UUID, name, detail string, engineType ai.EngineType, engineModel ai.EngineModel, engineData map[string]any, initPrompt string) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIUpdate", ctx, aiID, name, detail, engineType, engineModel, engineData, initPrompt)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIUpdate indicates an expected call of AIV1AIUpdate.
func (mr *MockRequestHandlerMockRecorder) AIV1AIUpdate(ctx, aiID, name, detail, engineType, engineModel, engineData, initPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIUpdate", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIUpdate), ctx, aiID, name, detail, engineType, engineModel, engineData, initPrompt)
}

// AIV1AIcallDelete mocks base method.
func (m *MockRequestHandler) AIV1AIcallDelete(ctx context.Context, aicallID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIcallDelete", ctx, aicallID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIcallDelete indicates an expected call of AIV1AIcallDelete.
func (mr *MockRequestHandlerMockRecorder) AIV1AIcallDelete(ctx, aicallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIcallDelete", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIcallDelete), ctx, aicallID)
}

// AIV1AIcallGet mocks base method.
func (m *MockRequestHandler) AIV1AIcallGet(ctx context.Context, aicallID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIcallGet", ctx, aicallID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIcallGet indicates an expected call of AIV1AIcallGet.
func (mr *MockRequestHandlerMockRecorder) AIV1AIcallGet(ctx, aicallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIcallGet", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIcallGet), ctx, aicallID)
}

// AIV1AIcallGetsByCustomerID mocks base method.
func (m *MockRequestHandler) AIV1AIcallGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64, filters map[string]string) ([]aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIcallGetsByCustomerID", ctx, customerID, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIcallGetsByCustomerID indicates an expected call of AIV1AIcallGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) AIV1AIcallGetsByCustomerID(ctx, customerID, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIcallGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIcallGetsByCustomerID), ctx, customerID, pageToken, pageSize, filters)
}

// AIV1AIcallStart mocks base method.
func (m *MockRequestHandler) AIV1AIcallStart(ctx context.Context, aiID uuid.UUID, referenceType aicall.ReferenceType, referenceID uuid.UUID, gender aicall.Gender, language string) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1AIcallStart", ctx, aiID, referenceType, referenceID, gender, language)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1AIcallStart indicates an expected call of AIV1AIcallStart.
func (mr *MockRequestHandlerMockRecorder) AIV1AIcallStart(ctx, aiID, referenceType, referenceID, gender, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1AIcallStart", reflect.TypeOf((*MockRequestHandler)(nil).AIV1AIcallStart), ctx, aiID, referenceType, referenceID, gender, language)
}

// AIV1MessageDelete mocks base method.
func (m *MockRequestHandler) AIV1MessageDelete(ctx context.Context, messageID uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1MessageDelete", ctx, messageID)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1MessageDelete indicates an expected call of AIV1MessageDelete.
func (mr *MockRequestHandlerMockRecorder) AIV1MessageDelete(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1MessageDelete", reflect.TypeOf((*MockRequestHandler)(nil).AIV1MessageDelete), ctx, messageID)
}

// AIV1MessageGet mocks base method.
func (m *MockRequestHandler) AIV1MessageGet(ctx context.Context, messageID uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1MessageGet", ctx, messageID)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1MessageGet indicates an expected call of AIV1MessageGet.
func (mr *MockRequestHandlerMockRecorder) AIV1MessageGet(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1MessageGet", reflect.TypeOf((*MockRequestHandler)(nil).AIV1MessageGet), ctx, messageID)
}

// AIV1MessageGetsByAIcallID mocks base method.
func (m *MockRequestHandler) AIV1MessageGetsByAIcallID(ctx context.Context, aicallID uuid.UUID, pageToken string, pageSize uint64, filters map[string]string) ([]message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1MessageGetsByAIcallID", ctx, aicallID, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1MessageGetsByAIcallID indicates an expected call of AIV1MessageGetsByAIcallID.
func (mr *MockRequestHandlerMockRecorder) AIV1MessageGetsByAIcallID(ctx, aicallID, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1MessageGetsByAIcallID", reflect.TypeOf((*MockRequestHandler)(nil).AIV1MessageGetsByAIcallID), ctx, aicallID, pageToken, pageSize, filters)
}

// AIV1MessageSend mocks base method.
func (m *MockRequestHandler) AIV1MessageSend(ctx context.Context, aicallID uuid.UUID, role message.Role, content string, timeout int) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1MessageSend", ctx, aicallID, role, content, timeout)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1MessageSend indicates an expected call of AIV1MessageSend.
func (mr *MockRequestHandlerMockRecorder) AIV1MessageSend(ctx, aicallID, role, content, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1MessageSend", reflect.TypeOf((*MockRequestHandler)(nil).AIV1MessageSend), ctx, aicallID, role, content, timeout)
}

// AIV1ServiceTypeAIcallStart mocks base method.
func (m *MockRequestHandler) AIV1ServiceTypeAIcallStart(ctx context.Context, aiID, activeflowID uuid.UUID, referenceType aicall.ReferenceType, referenceID uuid.UUID, resume bool, gender aicall.Gender, language string, requestTimeout int) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIV1ServiceTypeAIcallStart", ctx, aiID, activeflowID, referenceType, referenceID, resume, gender, language, requestTimeout)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIV1ServiceTypeAIcallStart indicates an expected call of AIV1ServiceTypeAIcallStart.
func (mr *MockRequestHandlerMockRecorder) AIV1ServiceTypeAIcallStart(ctx, aiID, activeflowID, referenceType, referenceID, resume, gender, language, requestTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIV1ServiceTypeAIcallStart", reflect.TypeOf((*MockRequestHandler)(nil).AIV1ServiceTypeAIcallStart), ctx, aiID, activeflowID, referenceType, referenceID, resume, gender, language, requestTimeout)
}

// AgentV1AgentCreate mocks base method.
func (m *MockRequestHandler) AgentV1AgentCreate(ctx context.Context, timeout int, customerID uuid.UUID, username, password, name, detail string, ringMethod agent.RingMethod, permission agent.Permission, tagIDs []uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentCreate", ctx, timeout, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentCreate indicates an expected call of AgentV1AgentCreate.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentCreate(ctx, timeout, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentCreate", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentCreate), ctx, timeout, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
}

// AgentV1AgentDelete mocks base method.
func (m *MockRequestHandler) AgentV1AgentDelete(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentDelete", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentDelete indicates an expected call of AgentV1AgentDelete.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentDelete", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentDelete), ctx, id)
}

// AgentV1AgentGet mocks base method.
func (m *MockRequestHandler) AgentV1AgentGet(ctx context.Context, agentID uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentGet", ctx, agentID)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentGet indicates an expected call of AgentV1AgentGet.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentGet(ctx, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentGet", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentGet), ctx, agentID)
}

// AgentV1AgentGetByCustomerIDAndAddress mocks base method.
func (m *MockRequestHandler) AgentV1AgentGetByCustomerIDAndAddress(ctx context.Context, timeout int, customerID uuid.UUID, addr address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentGetByCustomerIDAndAddress", ctx, timeout, customerID, addr)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentGetByCustomerIDAndAddress indicates an expected call of AgentV1AgentGetByCustomerIDAndAddress.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentGetByCustomerIDAndAddress(ctx, timeout, customerID, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentGetByCustomerIDAndAddress", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentGetByCustomerIDAndAddress), ctx, timeout, customerID, addr)
}

// AgentV1AgentGets mocks base method.
func (m *MockRequestHandler) AgentV1AgentGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentGets indicates an expected call of AgentV1AgentGets.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentGets", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentGets), ctx, pageToken, pageSize, filters)
}

// AgentV1AgentUpdate mocks base method.
func (m *MockRequestHandler) AgentV1AgentUpdate(ctx context.Context, id uuid.UUID, name, detail string, ringMethod agent.RingMethod) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentUpdate", ctx, id, name, detail, ringMethod)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentUpdate indicates an expected call of AgentV1AgentUpdate.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentUpdate(ctx, id, name, detail, ringMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentUpdate", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentUpdate), ctx, id, name, detail, ringMethod)
}

// AgentV1AgentUpdateAddresses mocks base method.
func (m *MockRequestHandler) AgentV1AgentUpdateAddresses(ctx context.Context, id uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentUpdateAddresses", ctx, id, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentUpdateAddresses indicates an expected call of AgentV1AgentUpdateAddresses.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentUpdateAddresses(ctx, id, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentUpdateAddresses", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentUpdateAddresses), ctx, id, addresses)
}

// AgentV1AgentUpdatePassword mocks base method.
func (m *MockRequestHandler) AgentV1AgentUpdatePassword(ctx context.Context, timeout int, id uuid.UUID, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentUpdatePassword", ctx, timeout, id, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentUpdatePassword indicates an expected call of AgentV1AgentUpdatePassword.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentUpdatePassword(ctx, timeout, id, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentUpdatePassword", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentUpdatePassword), ctx, timeout, id, password)
}

// AgentV1AgentUpdatePermission mocks base method.
func (m *MockRequestHandler) AgentV1AgentUpdatePermission(ctx context.Context, id uuid.UUID, permission agent.Permission) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentUpdatePermission", ctx, id, permission)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentUpdatePermission indicates an expected call of AgentV1AgentUpdatePermission.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentUpdatePermission(ctx, id, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentUpdatePermission", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentUpdatePermission), ctx, id, permission)
}

// AgentV1AgentUpdateStatus mocks base method.
func (m *MockRequestHandler) AgentV1AgentUpdateStatus(ctx context.Context, id uuid.UUID, status agent.Status) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentUpdateStatus indicates an expected call of AgentV1AgentUpdateStatus.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentUpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentUpdateStatus", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentUpdateStatus), ctx, id, status)
}

// AgentV1AgentUpdateTagIDs mocks base method.
func (m *MockRequestHandler) AgentV1AgentUpdateTagIDs(ctx context.Context, id uuid.UUID, tagIDs []uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1AgentUpdateTagIDs", ctx, id, tagIDs)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1AgentUpdateTagIDs indicates an expected call of AgentV1AgentUpdateTagIDs.
func (mr *MockRequestHandlerMockRecorder) AgentV1AgentUpdateTagIDs(ctx, id, tagIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1AgentUpdateTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1AgentUpdateTagIDs), ctx, id, tagIDs)
}

// AgentV1Login mocks base method.
func (m *MockRequestHandler) AgentV1Login(ctx context.Context, timeout int, username, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentV1Login", ctx, timeout, username, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentV1Login indicates an expected call of AgentV1Login.
func (mr *MockRequestHandlerMockRecorder) AgentV1Login(ctx, timeout, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentV1Login", reflect.TypeOf((*MockRequestHandler)(nil).AgentV1Login), ctx, timeout, username, password)
}

// AstAMIRedirect mocks base method.
func (m *MockRequestHandler) AstAMIRedirect(ctx context.Context, asteriskID, channelID, context, exten, priority string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAMIRedirect", ctx, asteriskID, channelID, context, exten, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAMIRedirect indicates an expected call of AstAMIRedirect.
func (mr *MockRequestHandlerMockRecorder) AstAMIRedirect(ctx, asteriskID, channelID, context, exten, priority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAMIRedirect", reflect.TypeOf((*MockRequestHandler)(nil).AstAMIRedirect), ctx, asteriskID, channelID, context, exten, priority)
}

// AstBridgeAddChannel mocks base method.
func (m *MockRequestHandler) AstBridgeAddChannel(ctx context.Context, asteriskID, bridgeID, channelID, role string, absorbDTMF, mute bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeAddChannel", ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeAddChannel indicates an expected call of AstBridgeAddChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeAddChannel(ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeAddChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeAddChannel), ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute)
}

// AstBridgeCreate mocks base method.
func (m *MockRequestHandler) AstBridgeCreate(ctx context.Context, asteriskID, bridgeID, bridgeName string, bridgeType []bridge.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeCreate", ctx, asteriskID, bridgeID, bridgeName, bridgeType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeCreate indicates an expected call of AstBridgeCreate.
func (mr *MockRequestHandlerMockRecorder) AstBridgeCreate(ctx, asteriskID, bridgeID, bridgeName, bridgeType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeCreate), ctx, asteriskID, bridgeID, bridgeName, bridgeType)
}

// AstBridgeDelete mocks base method.
func (m *MockRequestHandler) AstBridgeDelete(ctx context.Context, asteriskID, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeDelete", ctx, asteriskID, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeDelete indicates an expected call of AstBridgeDelete.
func (mr *MockRequestHandlerMockRecorder) AstBridgeDelete(ctx, asteriskID, bridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeDelete", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeDelete), ctx, asteriskID, bridgeID)
}

// AstBridgeGet mocks base method.
func (m *MockRequestHandler) AstBridgeGet(ctx context.Context, asteriskID, bridgeID string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeGet", ctx, asteriskID, bridgeID)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstBridgeGet indicates an expected call of AstBridgeGet.
func (mr *MockRequestHandlerMockRecorder) AstBridgeGet(ctx, asteriskID, bridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeGet", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeGet), ctx, asteriskID, bridgeID)
}

// AstBridgeRecord mocks base method.
func (m *MockRequestHandler) AstBridgeRecord(ctx context.Context, asteriskID, bridgeID, filename, format string, duration, silence int, beep bool, endKey, ifExists string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeRecord", ctx, asteriskID, bridgeID, filename, format, duration, silence, beep, endKey, ifExists)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeRecord indicates an expected call of AstBridgeRecord.
func (mr *MockRequestHandlerMockRecorder) AstBridgeRecord(ctx, asteriskID, bridgeID, filename, format, duration, silence, beep, endKey, ifExists any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeRecord", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeRecord), ctx, asteriskID, bridgeID, filename, format, duration, silence, beep, endKey, ifExists)
}

// AstBridgeRemoveChannel mocks base method.
func (m *MockRequestHandler) AstBridgeRemoveChannel(ctx context.Context, asteriskID, bridgeID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeRemoveChannel", ctx, asteriskID, bridgeID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeRemoveChannel indicates an expected call of AstBridgeRemoveChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeRemoveChannel(ctx, asteriskID, bridgeID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeRemoveChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeRemoveChannel), ctx, asteriskID, bridgeID, channelID)
}

// AstChannelAnswer mocks base method.
func (m *MockRequestHandler) AstChannelAnswer(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelAnswer", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelAnswer indicates an expected call of AstChannelAnswer.
func (mr *MockRequestHandlerMockRecorder) AstChannelAnswer(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelAnswer", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelAnswer), ctx, asteriskID, channelID)
}

// AstChannelContinue mocks base method.
func (m *MockRequestHandler) AstChannelContinue(ctx context.Context, asteriskID, channelID, context, ext string, pri int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelContinue", ctx, asteriskID, channelID, context, ext, pri, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelContinue indicates an expected call of AstChannelContinue.
func (mr *MockRequestHandlerMockRecorder) AstChannelContinue(ctx, asteriskID, channelID, context, ext, pri, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelContinue", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelContinue), ctx, asteriskID, channelID, context, ext, pri, label)
}

// AstChannelCreate mocks base method.
func (m *MockRequestHandler) AstChannelCreate(ctx context.Context, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats string, variables map[string]string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreate", ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelCreate indicates an expected call of AstChannelCreate.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreate(ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreate), ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables)
}

// AstChannelCreateSnoop mocks base method.
func (m *MockRequestHandler) AstChannelCreateSnoop(ctx context.Context, asteriskID, channelID, snoopID, appArgs string, spy, whisper channel.SnoopDirection) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreateSnoop", ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelCreateSnoop indicates an expected call of AstChannelCreateSnoop.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreateSnoop(ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreateSnoop", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreateSnoop), ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper)
}

// AstChannelDTMF mocks base method.
func (m *MockRequestHandler) AstChannelDTMF(ctx context.Context, asteriskID, channelID, digit string, duration, before, between, after int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDTMF", ctx, asteriskID, channelID, digit, duration, before, between, after)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDTMF indicates an expected call of AstChannelDTMF.
func (mr *MockRequestHandlerMockRecorder) AstChannelDTMF(ctx, asteriskID, channelID, digit, duration, before, between, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDTMF", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDTMF), ctx, asteriskID, channelID, digit, duration, before, between, after)
}

// AstChannelDial mocks base method.
func (m *MockRequestHandler) AstChannelDial(ctx context.Context, asteriskID, channelID, caller string, timeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDial", ctx, asteriskID, channelID, caller, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDial indicates an expected call of AstChannelDial.
func (mr *MockRequestHandlerMockRecorder) AstChannelDial(ctx, asteriskID, channelID, caller, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDial", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDial), ctx, asteriskID, channelID, caller, timeout)
}

// AstChannelExternalMedia mocks base method.
func (m *MockRequestHandler) AstChannelExternalMedia(ctx context.Context, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data string, variables map[string]string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelExternalMedia", ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelExternalMedia indicates an expected call of AstChannelExternalMedia.
func (mr *MockRequestHandlerMockRecorder) AstChannelExternalMedia(ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelExternalMedia", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelExternalMedia), ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
}

// AstChannelGet mocks base method.
func (m *MockRequestHandler) AstChannelGet(ctx context.Context, asteriskID, channelID string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelGet", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelGet indicates an expected call of AstChannelGet.
func (mr *MockRequestHandlerMockRecorder) AstChannelGet(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelGet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelGet), ctx, asteriskID, channelID)
}

// AstChannelHangup mocks base method.
func (m *MockRequestHandler) AstChannelHangup(ctx context.Context, asteriskID, channelID string, code ari.ChannelCause, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelHangup", ctx, asteriskID, channelID, code, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelHangup indicates an expected call of AstChannelHangup.
func (mr *MockRequestHandlerMockRecorder) AstChannelHangup(ctx, asteriskID, channelID, code, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelHangup", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelHangup), ctx, asteriskID, channelID, code, delay)
}

// AstChannelHoldOff mocks base method.
func (m *MockRequestHandler) AstChannelHoldOff(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelHoldOff", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelHoldOff indicates an expected call of AstChannelHoldOff.
func (mr *MockRequestHandlerMockRecorder) AstChannelHoldOff(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelHoldOff", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelHoldOff), ctx, asteriskID, channelID)
}

// AstChannelHoldOn mocks base method.
func (m *MockRequestHandler) AstChannelHoldOn(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelHoldOn", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelHoldOn indicates an expected call of AstChannelHoldOn.
func (mr *MockRequestHandlerMockRecorder) AstChannelHoldOn(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelHoldOn", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelHoldOn), ctx, asteriskID, channelID)
}

// AstChannelMusicOnHoldOff mocks base method.
func (m *MockRequestHandler) AstChannelMusicOnHoldOff(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelMusicOnHoldOff", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelMusicOnHoldOff indicates an expected call of AstChannelMusicOnHoldOff.
func (mr *MockRequestHandlerMockRecorder) AstChannelMusicOnHoldOff(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelMusicOnHoldOff", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelMusicOnHoldOff), ctx, asteriskID, channelID)
}

// AstChannelMusicOnHoldOn mocks base method.
func (m *MockRequestHandler) AstChannelMusicOnHoldOn(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelMusicOnHoldOn", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelMusicOnHoldOn indicates an expected call of AstChannelMusicOnHoldOn.
func (mr *MockRequestHandlerMockRecorder) AstChannelMusicOnHoldOn(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelMusicOnHoldOn", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelMusicOnHoldOn), ctx, asteriskID, channelID)
}

// AstChannelMuteOff mocks base method.
func (m *MockRequestHandler) AstChannelMuteOff(ctx context.Context, asteriskID, channelID, direction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelMuteOff", ctx, asteriskID, channelID, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelMuteOff indicates an expected call of AstChannelMuteOff.
func (mr *MockRequestHandlerMockRecorder) AstChannelMuteOff(ctx, asteriskID, channelID, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelMuteOff", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelMuteOff), ctx, asteriskID, channelID, direction)
}

// AstChannelMuteOn mocks base method.
func (m *MockRequestHandler) AstChannelMuteOn(ctx context.Context, asteriskID, channelID, direction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelMuteOn", ctx, asteriskID, channelID, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelMuteOn indicates an expected call of AstChannelMuteOn.
func (mr *MockRequestHandlerMockRecorder) AstChannelMuteOn(ctx, asteriskID, channelID, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelMuteOn", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelMuteOn), ctx, asteriskID, channelID, direction)
}

// AstChannelPlay mocks base method.
func (m *MockRequestHandler) AstChannelPlay(ctx context.Context, asteriskID, channelID string, actionID uuid.UUID, medias []string, lang string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelPlay", ctx, asteriskID, channelID, actionID, medias, lang)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelPlay indicates an expected call of AstChannelPlay.
func (mr *MockRequestHandlerMockRecorder) AstChannelPlay(ctx, asteriskID, channelID, actionID, medias, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelPlay", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelPlay), ctx, asteriskID, channelID, actionID, medias, lang)
}

// AstChannelRecord mocks base method.
func (m *MockRequestHandler) AstChannelRecord(ctx context.Context, asteriskID, channelID, filename, format string, duration, silence int, beep bool, endKey, ifExists string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelRecord", ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelRecord indicates an expected call of AstChannelRecord.
func (mr *MockRequestHandlerMockRecorder) AstChannelRecord(ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelRecord", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelRecord), ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists)
}

// AstChannelRing mocks base method.
func (m *MockRequestHandler) AstChannelRing(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelRing", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelRing indicates an expected call of AstChannelRing.
func (mr *MockRequestHandlerMockRecorder) AstChannelRing(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelRing", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelRing), ctx, asteriskID, channelID)
}

// AstChannelSilenceOff mocks base method.
func (m *MockRequestHandler) AstChannelSilenceOff(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelSilenceOff", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelSilenceOff indicates an expected call of AstChannelSilenceOff.
func (mr *MockRequestHandlerMockRecorder) AstChannelSilenceOff(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelSilenceOff", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelSilenceOff), ctx, asteriskID, channelID)
}

// AstChannelSilenceOn mocks base method.
func (m *MockRequestHandler) AstChannelSilenceOn(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelSilenceOn", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelSilenceOn indicates an expected call of AstChannelSilenceOn.
func (mr *MockRequestHandlerMockRecorder) AstChannelSilenceOn(ctx, asteriskID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelSilenceOn", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelSilenceOn), ctx, asteriskID, channelID)
}

// AstChannelVariableGet mocks base method.
func (m *MockRequestHandler) AstChannelVariableGet(ctx context.Context, asteriskID, channelID, variable string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelVariableGet", ctx, asteriskID, channelID, variable)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelVariableGet indicates an expected call of AstChannelVariableGet.
func (mr *MockRequestHandlerMockRecorder) AstChannelVariableGet(ctx, asteriskID, channelID, variable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelVariableGet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelVariableGet), ctx, asteriskID, channelID, variable)
}

// AstChannelVariableSet mocks base method.
func (m *MockRequestHandler) AstChannelVariableSet(ctx context.Context, asteriskID, channelID, variable, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelVariableSet", ctx, asteriskID, channelID, variable, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelVariableSet indicates an expected call of AstChannelVariableSet.
func (mr *MockRequestHandlerMockRecorder) AstChannelVariableSet(ctx, asteriskID, channelID, variable, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelVariableSet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelVariableSet), ctx, asteriskID, channelID, variable, value)
}

// AstPlaybackStop mocks base method.
func (m *MockRequestHandler) AstPlaybackStop(ctx context.Context, asteriskID, playabckID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstPlaybackStop", ctx, asteriskID, playabckID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstPlaybackStop indicates an expected call of AstPlaybackStop.
func (mr *MockRequestHandlerMockRecorder) AstPlaybackStop(ctx, asteriskID, playabckID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstPlaybackStop", reflect.TypeOf((*MockRequestHandler)(nil).AstPlaybackStop), ctx, asteriskID, playabckID)
}

// AstProxyRecordingFileMove mocks base method.
func (m *MockRequestHandler) AstProxyRecordingFileMove(ctx context.Context, asteriskID string, filenames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstProxyRecordingFileMove", ctx, asteriskID, filenames)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstProxyRecordingFileMove indicates an expected call of AstProxyRecordingFileMove.
func (mr *MockRequestHandlerMockRecorder) AstProxyRecordingFileMove(ctx, asteriskID, filenames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstProxyRecordingFileMove", reflect.TypeOf((*MockRequestHandler)(nil).AstProxyRecordingFileMove), ctx, asteriskID, filenames)
}

// AstRecordingMute mocks base method.
func (m *MockRequestHandler) AstRecordingMute(ctx context.Context, asteriskID, recordingName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstRecordingMute", ctx, asteriskID, recordingName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstRecordingMute indicates an expected call of AstRecordingMute.
func (mr *MockRequestHandlerMockRecorder) AstRecordingMute(ctx, asteriskID, recordingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstRecordingMute", reflect.TypeOf((*MockRequestHandler)(nil).AstRecordingMute), ctx, asteriskID, recordingName)
}

// AstRecordingPause mocks base method.
func (m *MockRequestHandler) AstRecordingPause(ctx context.Context, asteriskID, recordingName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstRecordingPause", ctx, asteriskID, recordingName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstRecordingPause indicates an expected call of AstRecordingPause.
func (mr *MockRequestHandlerMockRecorder) AstRecordingPause(ctx, asteriskID, recordingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstRecordingPause", reflect.TypeOf((*MockRequestHandler)(nil).AstRecordingPause), ctx, asteriskID, recordingName)
}

// AstRecordingStop mocks base method.
func (m *MockRequestHandler) AstRecordingStop(ctx context.Context, asteriskID, recordingName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstRecordingStop", ctx, asteriskID, recordingName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstRecordingStop indicates an expected call of AstRecordingStop.
func (mr *MockRequestHandlerMockRecorder) AstRecordingStop(ctx, asteriskID, recordingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstRecordingStop", reflect.TypeOf((*MockRequestHandler)(nil).AstRecordingStop), ctx, asteriskID, recordingName)
}

// AstRecordingUnmute mocks base method.
func (m *MockRequestHandler) AstRecordingUnmute(ctx context.Context, asteriskID, recordingName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstRecordingUnmute", ctx, asteriskID, recordingName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstRecordingUnmute indicates an expected call of AstRecordingUnmute.
func (mr *MockRequestHandlerMockRecorder) AstRecordingUnmute(ctx, asteriskID, recordingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstRecordingUnmute", reflect.TypeOf((*MockRequestHandler)(nil).AstRecordingUnmute), ctx, asteriskID, recordingName)
}

// AstRecordingUnpause mocks base method.
func (m *MockRequestHandler) AstRecordingUnpause(ctx context.Context, asteriskID, recordingName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstRecordingUnpause", ctx, asteriskID, recordingName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstRecordingUnpause indicates an expected call of AstRecordingUnpause.
func (mr *MockRequestHandlerMockRecorder) AstRecordingUnpause(ctx, asteriskID, recordingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstRecordingUnpause", reflect.TypeOf((*MockRequestHandler)(nil).AstRecordingUnpause), ctx, asteriskID, recordingName)
}

// BillingV1AccountAddBalanceForce mocks base method.
func (m *MockRequestHandler) BillingV1AccountAddBalanceForce(ctx context.Context, accountID uuid.UUID, balance float32) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountAddBalanceForce", ctx, accountID, balance)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountAddBalanceForce indicates an expected call of BillingV1AccountAddBalanceForce.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountAddBalanceForce(ctx, accountID, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountAddBalanceForce", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountAddBalanceForce), ctx, accountID, balance)
}

// BillingV1AccountCreate mocks base method.
func (m *MockRequestHandler) BillingV1AccountCreate(ctx context.Context, custoerID uuid.UUID, name, detail string, paymentType account.PaymentType, paymentMethod account.PaymentMethod) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountCreate", ctx, custoerID, name, detail, paymentType, paymentMethod)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountCreate indicates an expected call of BillingV1AccountCreate.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountCreate(ctx, custoerID, name, detail, paymentType, paymentMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountCreate", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountCreate), ctx, custoerID, name, detail, paymentType, paymentMethod)
}

// BillingV1AccountDelete mocks base method.
func (m *MockRequestHandler) BillingV1AccountDelete(ctx context.Context, accountID uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountDelete", ctx, accountID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountDelete indicates an expected call of BillingV1AccountDelete.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountDelete(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountDelete", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountDelete), ctx, accountID)
}

// BillingV1AccountGet mocks base method.
func (m *MockRequestHandler) BillingV1AccountGet(ctx context.Context, accountID uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountGet", ctx, accountID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountGet indicates an expected call of BillingV1AccountGet.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountGet(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountGet", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountGet), ctx, accountID)
}

// BillingV1AccountGets mocks base method.
func (m *MockRequestHandler) BillingV1AccountGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountGets indicates an expected call of BillingV1AccountGets.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountGets", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountGets), ctx, pageToken, pageSize, filters)
}

// BillingV1AccountIsValidBalance mocks base method.
func (m *MockRequestHandler) BillingV1AccountIsValidBalance(ctx context.Context, accountID uuid.UUID, billingType billing.ReferenceType, country string, count int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountIsValidBalance", ctx, accountID, billingType, country, count)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountIsValidBalance indicates an expected call of BillingV1AccountIsValidBalance.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountIsValidBalance(ctx, accountID, billingType, country, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountIsValidBalance", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountIsValidBalance), ctx, accountID, billingType, country, count)
}

// BillingV1AccountSubtractBalanceForce mocks base method.
func (m *MockRequestHandler) BillingV1AccountSubtractBalanceForce(ctx context.Context, accountID uuid.UUID, balance float32) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountSubtractBalanceForce", ctx, accountID, balance)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountSubtractBalanceForce indicates an expected call of BillingV1AccountSubtractBalanceForce.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountSubtractBalanceForce(ctx, accountID, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountSubtractBalanceForce", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountSubtractBalanceForce), ctx, accountID, balance)
}

// BillingV1AccountUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) BillingV1AccountUpdateBasicInfo(ctx context.Context, accountID uuid.UUID, name, detail string) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountUpdateBasicInfo", ctx, accountID, name, detail)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountUpdateBasicInfo indicates an expected call of BillingV1AccountUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountUpdateBasicInfo(ctx, accountID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountUpdateBasicInfo), ctx, accountID, name, detail)
}

// BillingV1AccountUpdatePaymentInfo mocks base method.
func (m *MockRequestHandler) BillingV1AccountUpdatePaymentInfo(ctx context.Context, accountID uuid.UUID, paymentType account.PaymentType, paymentMethod account.PaymentMethod) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1AccountUpdatePaymentInfo", ctx, accountID, paymentType, paymentMethod)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1AccountUpdatePaymentInfo indicates an expected call of BillingV1AccountUpdatePaymentInfo.
func (mr *MockRequestHandlerMockRecorder) BillingV1AccountUpdatePaymentInfo(ctx, accountID, paymentType, paymentMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1AccountUpdatePaymentInfo", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1AccountUpdatePaymentInfo), ctx, accountID, paymentType, paymentMethod)
}

// BillingV1BillingGets mocks base method.
func (m *MockRequestHandler) BillingV1BillingGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingV1BillingGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingV1BillingGets indicates an expected call of BillingV1BillingGets.
func (mr *MockRequestHandlerMockRecorder) BillingV1BillingGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingV1BillingGets", reflect.TypeOf((*MockRequestHandler)(nil).BillingV1BillingGets), ctx, pageToken, pageSize, filters)
}

// CallPublishEvent mocks base method.
func (m *MockRequestHandler) CallPublishEvent(ctx context.Context, eventType, publisher, dataType string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallPublishEvent", ctx, eventType, publisher, dataType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallPublishEvent indicates an expected call of CallPublishEvent.
func (mr *MockRequestHandlerMockRecorder) CallPublishEvent(ctx, eventType, publisher, dataType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallPublishEvent", reflect.TypeOf((*MockRequestHandler)(nil).CallPublishEvent), ctx, eventType, publisher, dataType, data)
}

// CallV1CallActionNext mocks base method.
func (m *MockRequestHandler) CallV1CallActionNext(ctx context.Context, callID uuid.UUID, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallActionNext", ctx, callID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallActionNext indicates an expected call of CallV1CallActionNext.
func (mr *MockRequestHandlerMockRecorder) CallV1CallActionNext(ctx, callID, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallActionNext", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallActionNext), ctx, callID, force)
}

// CallV1CallActionTimeout mocks base method.
func (m *MockRequestHandler) CallV1CallActionTimeout(ctx context.Context, id uuid.UUID, delay int, a *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallActionTimeout", ctx, id, delay, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallActionTimeout indicates an expected call of CallV1CallActionTimeout.
func (mr *MockRequestHandlerMockRecorder) CallV1CallActionTimeout(ctx, id, delay, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallActionTimeout", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallActionTimeout), ctx, id, delay, a)
}

// CallV1CallAddChainedCall mocks base method.
func (m *MockRequestHandler) CallV1CallAddChainedCall(ctx context.Context, callID, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallAddChainedCall", ctx, callID, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallAddChainedCall indicates an expected call of CallV1CallAddChainedCall.
func (mr *MockRequestHandlerMockRecorder) CallV1CallAddChainedCall(ctx, callID, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallAddChainedCall", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallAddChainedCall), ctx, callID, chainedCallID)
}

// CallV1CallCreateWithID mocks base method.
func (m *MockRequestHandler) CallV1CallCreateWithID(ctx context.Context, id, customerID, flowID, activeflowID, masterCallID uuid.UUID, source, destination *address.Address, groupcallID uuid.UUID, ealryExecution, connect bool) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallCreateWithID", ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination, groupcallID, ealryExecution, connect)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallCreateWithID indicates an expected call of CallV1CallCreateWithID.
func (mr *MockRequestHandlerMockRecorder) CallV1CallCreateWithID(ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination, groupcallID, ealryExecution, connect any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallCreateWithID", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallCreateWithID), ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination, groupcallID, ealryExecution, connect)
}

// CallV1CallDelete mocks base method.
func (m *MockRequestHandler) CallV1CallDelete(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallDelete", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallDelete indicates an expected call of CallV1CallDelete.
func (mr *MockRequestHandlerMockRecorder) CallV1CallDelete(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallDelete", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallDelete), ctx, callID)
}

// CallV1CallExternalMediaStart mocks base method.
func (m *MockRequestHandler) CallV1CallExternalMediaStart(ctx context.Context, callID, externalMediaID uuid.UUID, externalHost, encapsulation, transport, connectionType, format, direction string) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallExternalMediaStart", ctx, callID, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallExternalMediaStart indicates an expected call of CallV1CallExternalMediaStart.
func (mr *MockRequestHandlerMockRecorder) CallV1CallExternalMediaStart(ctx, callID, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallExternalMediaStart", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallExternalMediaStart), ctx, callID, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction)
}

// CallV1CallExternalMediaStop mocks base method.
func (m *MockRequestHandler) CallV1CallExternalMediaStop(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallExternalMediaStop", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallExternalMediaStop indicates an expected call of CallV1CallExternalMediaStop.
func (mr *MockRequestHandlerMockRecorder) CallV1CallExternalMediaStop(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallExternalMediaStop", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallExternalMediaStop), ctx, callID)
}

// CallV1CallGet mocks base method.
func (m *MockRequestHandler) CallV1CallGet(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallGet", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallGet indicates an expected call of CallV1CallGet.
func (mr *MockRequestHandlerMockRecorder) CallV1CallGet(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallGet", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallGet), ctx, callID)
}

// CallV1CallGetDigits mocks base method.
func (m *MockRequestHandler) CallV1CallGetDigits(ctx context.Context, callID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallGetDigits", ctx, callID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallGetDigits indicates an expected call of CallV1CallGetDigits.
func (mr *MockRequestHandlerMockRecorder) CallV1CallGetDigits(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallGetDigits", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallGetDigits), ctx, callID)
}

// CallV1CallGets mocks base method.
func (m *MockRequestHandler) CallV1CallGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallGets indicates an expected call of CallV1CallGets.
func (mr *MockRequestHandlerMockRecorder) CallV1CallGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallGets", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallGets), ctx, pageToken, pageSize, filters)
}

// CallV1CallHangup mocks base method.
func (m *MockRequestHandler) CallV1CallHangup(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallHangup", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallHangup indicates an expected call of CallV1CallHangup.
func (mr *MockRequestHandlerMockRecorder) CallV1CallHangup(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallHangup", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallHangup), ctx, callID)
}

// CallV1CallHealth mocks base method.
func (m *MockRequestHandler) CallV1CallHealth(ctx context.Context, id uuid.UUID, delay, retryCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallHealth", ctx, id, delay, retryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallHealth indicates an expected call of CallV1CallHealth.
func (mr *MockRequestHandlerMockRecorder) CallV1CallHealth(ctx, id, delay, retryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallHealth", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallHealth), ctx, id, delay, retryCount)
}

// CallV1CallHoldOff mocks base method.
func (m *MockRequestHandler) CallV1CallHoldOff(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallHoldOff", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallHoldOff indicates an expected call of CallV1CallHoldOff.
func (mr *MockRequestHandlerMockRecorder) CallV1CallHoldOff(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallHoldOff", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallHoldOff), ctx, callID)
}

// CallV1CallHoldOn mocks base method.
func (m *MockRequestHandler) CallV1CallHoldOn(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallHoldOn", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallHoldOn indicates an expected call of CallV1CallHoldOn.
func (mr *MockRequestHandlerMockRecorder) CallV1CallHoldOn(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallHoldOn", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallHoldOn), ctx, callID)
}

// CallV1CallMediaStop mocks base method.
func (m *MockRequestHandler) CallV1CallMediaStop(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallMediaStop", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallMediaStop indicates an expected call of CallV1CallMediaStop.
func (mr *MockRequestHandlerMockRecorder) CallV1CallMediaStop(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallMediaStop", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallMediaStop), ctx, callID)
}

// CallV1CallMusicOnHoldOff mocks base method.
func (m *MockRequestHandler) CallV1CallMusicOnHoldOff(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallMusicOnHoldOff", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallMusicOnHoldOff indicates an expected call of CallV1CallMusicOnHoldOff.
func (mr *MockRequestHandlerMockRecorder) CallV1CallMusicOnHoldOff(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallMusicOnHoldOff", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallMusicOnHoldOff), ctx, callID)
}

// CallV1CallMusicOnHoldOn mocks base method.
func (m *MockRequestHandler) CallV1CallMusicOnHoldOn(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallMusicOnHoldOn", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallMusicOnHoldOn indicates an expected call of CallV1CallMusicOnHoldOn.
func (mr *MockRequestHandlerMockRecorder) CallV1CallMusicOnHoldOn(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallMusicOnHoldOn", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallMusicOnHoldOn), ctx, callID)
}

// CallV1CallMuteOff mocks base method.
func (m *MockRequestHandler) CallV1CallMuteOff(ctx context.Context, callID uuid.UUID, direction call.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallMuteOff", ctx, callID, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallMuteOff indicates an expected call of CallV1CallMuteOff.
func (mr *MockRequestHandlerMockRecorder) CallV1CallMuteOff(ctx, callID, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallMuteOff", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallMuteOff), ctx, callID, direction)
}

// CallV1CallMuteOn mocks base method.
func (m *MockRequestHandler) CallV1CallMuteOn(ctx context.Context, callID uuid.UUID, direction call.MuteDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallMuteOn", ctx, callID, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallMuteOn indicates an expected call of CallV1CallMuteOn.
func (mr *MockRequestHandlerMockRecorder) CallV1CallMuteOn(ctx, callID, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallMuteOn", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallMuteOn), ctx, callID, direction)
}

// CallV1CallPlay mocks base method.
func (m *MockRequestHandler) CallV1CallPlay(ctx context.Context, callID uuid.UUID, mediaURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallPlay", ctx, callID, mediaURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallPlay indicates an expected call of CallV1CallPlay.
func (mr *MockRequestHandlerMockRecorder) CallV1CallPlay(ctx, callID, mediaURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallPlay", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallPlay), ctx, callID, mediaURLs)
}

// CallV1CallRecordingStart mocks base method.
func (m *MockRequestHandler) CallV1CallRecordingStart(ctx context.Context, callID uuid.UUID, format recording.Format, endOfSilence int, endOfKey string, duration int, onEndFlowID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallRecordingStart", ctx, callID, format, endOfSilence, endOfKey, duration, onEndFlowID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallRecordingStart indicates an expected call of CallV1CallRecordingStart.
func (mr *MockRequestHandlerMockRecorder) CallV1CallRecordingStart(ctx, callID, format, endOfSilence, endOfKey, duration, onEndFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallRecordingStart", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallRecordingStart), ctx, callID, format, endOfSilence, endOfKey, duration, onEndFlowID)
}

// CallV1CallRecordingStop mocks base method.
func (m *MockRequestHandler) CallV1CallRecordingStop(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallRecordingStop", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallRecordingStop indicates an expected call of CallV1CallRecordingStop.
func (mr *MockRequestHandlerMockRecorder) CallV1CallRecordingStop(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallRecordingStop", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallRecordingStop), ctx, callID)
}

// CallV1CallRemoveChainedCall mocks base method.
func (m *MockRequestHandler) CallV1CallRemoveChainedCall(ctx context.Context, callID, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallRemoveChainedCall", ctx, callID, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallRemoveChainedCall indicates an expected call of CallV1CallRemoveChainedCall.
func (mr *MockRequestHandlerMockRecorder) CallV1CallRemoveChainedCall(ctx, callID, chainedCallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallRemoveChainedCall", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallRemoveChainedCall), ctx, callID, chainedCallID)
}

// CallV1CallSendDigits mocks base method.
func (m *MockRequestHandler) CallV1CallSendDigits(ctx context.Context, callID uuid.UUID, digits string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallSendDigits", ctx, callID, digits)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallSendDigits indicates an expected call of CallV1CallSendDigits.
func (mr *MockRequestHandlerMockRecorder) CallV1CallSendDigits(ctx, callID, digits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallSendDigits", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallSendDigits), ctx, callID, digits)
}

// CallV1CallSilenceOff mocks base method.
func (m *MockRequestHandler) CallV1CallSilenceOff(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallSilenceOff", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallSilenceOff indicates an expected call of CallV1CallSilenceOff.
func (mr *MockRequestHandlerMockRecorder) CallV1CallSilenceOff(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallSilenceOff", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallSilenceOff), ctx, callID)
}

// CallV1CallSilenceOn mocks base method.
func (m *MockRequestHandler) CallV1CallSilenceOn(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallSilenceOn", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallSilenceOn indicates an expected call of CallV1CallSilenceOn.
func (mr *MockRequestHandlerMockRecorder) CallV1CallSilenceOn(ctx, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallSilenceOn", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallSilenceOn), ctx, callID)
}

// CallV1CallTalk mocks base method.
func (m *MockRequestHandler) CallV1CallTalk(ctx context.Context, callID uuid.UUID, text, gender, language string, rqeuestTimeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallTalk", ctx, callID, text, gender, language, rqeuestTimeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1CallTalk indicates an expected call of CallV1CallTalk.
func (mr *MockRequestHandlerMockRecorder) CallV1CallTalk(ctx, callID, text, gender, language, rqeuestTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallTalk", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallTalk), ctx, callID, text, gender, language, rqeuestTimeout)
}

// CallV1CallUpdateConfbridgeID mocks base method.
func (m *MockRequestHandler) CallV1CallUpdateConfbridgeID(ctx context.Context, callID, confbirdgeID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallUpdateConfbridgeID", ctx, callID, confbirdgeID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1CallUpdateConfbridgeID indicates an expected call of CallV1CallUpdateConfbridgeID.
func (mr *MockRequestHandlerMockRecorder) CallV1CallUpdateConfbridgeID(ctx, callID, confbirdgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallUpdateConfbridgeID", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallUpdateConfbridgeID), ctx, callID, confbirdgeID)
}

// CallV1CallsCreate mocks base method.
func (m *MockRequestHandler) CallV1CallsCreate(ctx context.Context, customerID, flowID, masterCallID uuid.UUID, source *address.Address, destinations []address.Address, ealryExecution, connect bool) ([]*call.Call, []*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1CallsCreate", ctx, customerID, flowID, masterCallID, source, destinations, ealryExecution, connect)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].([]*groupcall.Groupcall)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CallV1CallsCreate indicates an expected call of CallV1CallsCreate.
func (mr *MockRequestHandlerMockRecorder) CallV1CallsCreate(ctx, customerID, flowID, masterCallID, source, destinations, ealryExecution, connect any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1CallsCreate", reflect.TypeOf((*MockRequestHandler)(nil).CallV1CallsCreate), ctx, customerID, flowID, masterCallID, source, destinations, ealryExecution, connect)
}

// CallV1ChannelHealth mocks base method.
func (m *MockRequestHandler) CallV1ChannelHealth(ctx context.Context, channelID string, delay, retryCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ChannelHealth", ctx, channelID, delay, retryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1ChannelHealth indicates an expected call of CallV1ChannelHealth.
func (mr *MockRequestHandlerMockRecorder) CallV1ChannelHealth(ctx, channelID, delay, retryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ChannelHealth", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ChannelHealth), ctx, channelID, delay, retryCount)
}

// CallV1ConfbridgeAnswer mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeAnswer(ctx context.Context, confbridgeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeAnswer", ctx, confbridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1ConfbridgeAnswer indicates an expected call of CallV1ConfbridgeAnswer.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeAnswer(ctx, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeAnswer", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeAnswer), ctx, confbridgeID)
}

// CallV1ConfbridgeCallAdd mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeCallAdd(ctx context.Context, confbridgeID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeCallAdd", ctx, confbridgeID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1ConfbridgeCallAdd indicates an expected call of CallV1ConfbridgeCallAdd.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeCallAdd(ctx, confbridgeID, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeCallAdd", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeCallAdd), ctx, confbridgeID, callID)
}

// CallV1ConfbridgeCallKick mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeCallKick(ctx context.Context, confbridgeID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeCallKick", ctx, confbridgeID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1ConfbridgeCallKick indicates an expected call of CallV1ConfbridgeCallKick.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeCallKick(ctx, confbridgeID, callID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeCallKick", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeCallKick), ctx, confbridgeID, callID)
}

// CallV1ConfbridgeCreate mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeCreate(ctx context.Context, customerID, activeflowID uuid.UUID, referenceType confbridge.ReferenceType, referenceID uuid.UUID, confbridgeType confbridge.Type) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeCreate", ctx, customerID, activeflowID, referenceType, referenceID, confbridgeType)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeCreate indicates an expected call of CallV1ConfbridgeCreate.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeCreate(ctx, customerID, activeflowID, referenceType, referenceID, confbridgeType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeCreate", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeCreate), ctx, customerID, activeflowID, referenceType, referenceID, confbridgeType)
}

// CallV1ConfbridgeDelete mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeDelete(ctx context.Context, confbridgeID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeDelete", ctx, confbridgeID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeDelete indicates an expected call of CallV1ConfbridgeDelete.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeDelete(ctx, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeDelete", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeDelete), ctx, confbridgeID)
}

// CallV1ConfbridgeExternalMediaStart mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeExternalMediaStart(ctx context.Context, confbridgeID, externalMediaID uuid.UUID, externalHost, encapsulation, transport, connectionType, format, direction string) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeExternalMediaStart", ctx, confbridgeID, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeExternalMediaStart indicates an expected call of CallV1ConfbridgeExternalMediaStart.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeExternalMediaStart(ctx, confbridgeID, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeExternalMediaStart", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeExternalMediaStart), ctx, confbridgeID, externalMediaID, externalHost, encapsulation, transport, connectionType, format, direction)
}

// CallV1ConfbridgeExternalMediaStop mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeExternalMediaStop(ctx context.Context, confbridgeID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeExternalMediaStop", ctx, confbridgeID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeExternalMediaStop indicates an expected call of CallV1ConfbridgeExternalMediaStop.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeExternalMediaStop(ctx, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeExternalMediaStop", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeExternalMediaStop), ctx, confbridgeID)
}

// CallV1ConfbridgeFlagAdd mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeFlagAdd(ctx context.Context, confbridgeID uuid.UUID, flag confbridge.Flag) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeFlagAdd", ctx, confbridgeID, flag)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeFlagAdd indicates an expected call of CallV1ConfbridgeFlagAdd.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeFlagAdd(ctx, confbridgeID, flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeFlagAdd", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeFlagAdd), ctx, confbridgeID, flag)
}

// CallV1ConfbridgeFlagRemove mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeFlagRemove(ctx context.Context, confbridgeID uuid.UUID, flag confbridge.Flag) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeFlagRemove", ctx, confbridgeID, flag)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeFlagRemove indicates an expected call of CallV1ConfbridgeFlagRemove.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeFlagRemove(ctx, confbridgeID, flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeFlagRemove", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeFlagRemove), ctx, confbridgeID, flag)
}

// CallV1ConfbridgeGet mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeGet(ctx context.Context, confbridgeID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeGet", ctx, confbridgeID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeGet indicates an expected call of CallV1ConfbridgeGet.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeGet(ctx, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeGet", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeGet), ctx, confbridgeID)
}

// CallV1ConfbridgeRecordingStart mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeRecordingStart(ctx context.Context, confbridgeID uuid.UUID, format recording.Format, endOfSilence int, endOfKey string, duration int, onEndFlowID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeRecordingStart", ctx, confbridgeID, format, endOfSilence, endOfKey, duration, onEndFlowID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeRecordingStart indicates an expected call of CallV1ConfbridgeRecordingStart.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeRecordingStart(ctx, confbridgeID, format, endOfSilence, endOfKey, duration, onEndFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeRecordingStart", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeRecordingStart), ctx, confbridgeID, format, endOfSilence, endOfKey, duration, onEndFlowID)
}

// CallV1ConfbridgeRecordingStop mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeRecordingStop(ctx context.Context, confbridgeID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeRecordingStop", ctx, confbridgeID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeRecordingStop indicates an expected call of CallV1ConfbridgeRecordingStop.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeRecordingStop(ctx, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeRecordingStop", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeRecordingStop), ctx, confbridgeID)
}

// CallV1ConfbridgeRing mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeRing(ctx context.Context, confbridgeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeRing", ctx, confbridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1ConfbridgeRing indicates an expected call of CallV1ConfbridgeRing.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeRing(ctx, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeRing", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeRing), ctx, confbridgeID)
}

// CallV1ConfbridgeTerminate mocks base method.
func (m *MockRequestHandler) CallV1ConfbridgeTerminate(ctx context.Context, confbridgeID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ConfbridgeTerminate", ctx, confbridgeID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ConfbridgeTerminate indicates an expected call of CallV1ConfbridgeTerminate.
func (mr *MockRequestHandlerMockRecorder) CallV1ConfbridgeTerminate(ctx, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ConfbridgeTerminate", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ConfbridgeTerminate), ctx, confbridgeID)
}

// CallV1ExternalMediaGet mocks base method.
func (m *MockRequestHandler) CallV1ExternalMediaGet(ctx context.Context, externalMediaID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ExternalMediaGet", ctx, externalMediaID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ExternalMediaGet indicates an expected call of CallV1ExternalMediaGet.
func (mr *MockRequestHandlerMockRecorder) CallV1ExternalMediaGet(ctx, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ExternalMediaGet", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ExternalMediaGet), ctx, externalMediaID)
}

// CallV1ExternalMediaGets mocks base method.
func (m *MockRequestHandler) CallV1ExternalMediaGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ExternalMediaGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ExternalMediaGets indicates an expected call of CallV1ExternalMediaGets.
func (mr *MockRequestHandlerMockRecorder) CallV1ExternalMediaGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ExternalMediaGets", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ExternalMediaGets), ctx, pageToken, pageSize, filters)
}

// CallV1ExternalMediaStart mocks base method.
func (m *MockRequestHandler) CallV1ExternalMediaStart(ctx context.Context, externalMediaID uuid.UUID, referenceType externalmedia.ReferenceType, referenceID uuid.UUID, noInsertMedia bool, externalHost, encapsulation, transport, connectionType, format, direction string) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ExternalMediaStart", ctx, externalMediaID, referenceType, referenceID, noInsertMedia, externalHost, encapsulation, transport, connectionType, format, direction)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ExternalMediaStart indicates an expected call of CallV1ExternalMediaStart.
func (mr *MockRequestHandlerMockRecorder) CallV1ExternalMediaStart(ctx, externalMediaID, referenceType, referenceID, noInsertMedia, externalHost, encapsulation, transport, connectionType, format, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ExternalMediaStart", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ExternalMediaStart), ctx, externalMediaID, referenceType, referenceID, noInsertMedia, externalHost, encapsulation, transport, connectionType, format, direction)
}

// CallV1ExternalMediaStop mocks base method.
func (m *MockRequestHandler) CallV1ExternalMediaStop(ctx context.Context, externalMediaID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1ExternalMediaStop", ctx, externalMediaID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1ExternalMediaStop indicates an expected call of CallV1ExternalMediaStop.
func (mr *MockRequestHandlerMockRecorder) CallV1ExternalMediaStop(ctx, externalMediaID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1ExternalMediaStop", reflect.TypeOf((*MockRequestHandler)(nil).CallV1ExternalMediaStop), ctx, externalMediaID)
}

// CallV1GroupcallCreate mocks base method.
func (m *MockRequestHandler) CallV1GroupcallCreate(ctx context.Context, id, customerID, flowID uuid.UUID, source address.Address, destinations []address.Address, masterCallID, masterGroupcallID uuid.UUID, ringMethod groupcall.RingMethod, answerMethod groupcall.AnswerMethod) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallCreate", ctx, id, customerID, flowID, source, destinations, masterCallID, masterGroupcallID, ringMethod, answerMethod)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1GroupcallCreate indicates an expected call of CallV1GroupcallCreate.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallCreate(ctx, id, customerID, flowID, source, destinations, masterCallID, masterGroupcallID, ringMethod, answerMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallCreate", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallCreate), ctx, id, customerID, flowID, source, destinations, masterCallID, masterGroupcallID, ringMethod, answerMethod)
}

// CallV1GroupcallDelete mocks base method.
func (m *MockRequestHandler) CallV1GroupcallDelete(ctx context.Context, groupcallID uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallDelete", ctx, groupcallID)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1GroupcallDelete indicates an expected call of CallV1GroupcallDelete.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallDelete(ctx, groupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallDelete", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallDelete), ctx, groupcallID)
}

// CallV1GroupcallGet mocks base method.
func (m *MockRequestHandler) CallV1GroupcallGet(ctx context.Context, groupcallID uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallGet", ctx, groupcallID)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1GroupcallGet indicates an expected call of CallV1GroupcallGet.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallGet(ctx, groupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallGet", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallGet), ctx, groupcallID)
}

// CallV1GroupcallGets mocks base method.
func (m *MockRequestHandler) CallV1GroupcallGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1GroupcallGets indicates an expected call of CallV1GroupcallGets.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallGets", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallGets), ctx, pageToken, pageSize, filters)
}

// CallV1GroupcallHangup mocks base method.
func (m *MockRequestHandler) CallV1GroupcallHangup(ctx context.Context, groupcallID uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallHangup", ctx, groupcallID)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1GroupcallHangup indicates an expected call of CallV1GroupcallHangup.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallHangup(ctx, groupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallHangup", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallHangup), ctx, groupcallID)
}

// CallV1GroupcallHangupCall mocks base method.
func (m *MockRequestHandler) CallV1GroupcallHangupCall(ctx context.Context, groupcallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallHangupCall", ctx, groupcallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1GroupcallHangupCall indicates an expected call of CallV1GroupcallHangupCall.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallHangupCall(ctx, groupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallHangupCall", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallHangupCall), ctx, groupcallID)
}

// CallV1GroupcallHangupGroupcall mocks base method.
func (m *MockRequestHandler) CallV1GroupcallHangupGroupcall(ctx context.Context, groupcallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallHangupGroupcall", ctx, groupcallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1GroupcallHangupGroupcall indicates an expected call of CallV1GroupcallHangupGroupcall.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallHangupGroupcall(ctx, groupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallHangupGroupcall", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallHangupGroupcall), ctx, groupcallID)
}

// CallV1GroupcallHangupOthers mocks base method.
func (m *MockRequestHandler) CallV1GroupcallHangupOthers(ctx context.Context, groupcallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallHangupOthers", ctx, groupcallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallV1GroupcallHangupOthers indicates an expected call of CallV1GroupcallHangupOthers.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallHangupOthers(ctx, groupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallHangupOthers", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallHangupOthers), ctx, groupcallID)
}

// CallV1GroupcallUpdateAnswerGroupcallID mocks base method.
func (m *MockRequestHandler) CallV1GroupcallUpdateAnswerGroupcallID(ctx context.Context, groupcallID, answerGroupcallID uuid.UUID) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1GroupcallUpdateAnswerGroupcallID", ctx, groupcallID, answerGroupcallID)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1GroupcallUpdateAnswerGroupcallID indicates an expected call of CallV1GroupcallUpdateAnswerGroupcallID.
func (mr *MockRequestHandlerMockRecorder) CallV1GroupcallUpdateAnswerGroupcallID(ctx, groupcallID, answerGroupcallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1GroupcallUpdateAnswerGroupcallID", reflect.TypeOf((*MockRequestHandler)(nil).CallV1GroupcallUpdateAnswerGroupcallID), ctx, groupcallID, answerGroupcallID)
}

// CallV1RecordingDelete mocks base method.
func (m *MockRequestHandler) CallV1RecordingDelete(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1RecordingDelete", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1RecordingDelete indicates an expected call of CallV1RecordingDelete.
func (mr *MockRequestHandlerMockRecorder) CallV1RecordingDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1RecordingDelete", reflect.TypeOf((*MockRequestHandler)(nil).CallV1RecordingDelete), ctx, id)
}

// CallV1RecordingGet mocks base method.
func (m *MockRequestHandler) CallV1RecordingGet(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1RecordingGet", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1RecordingGet indicates an expected call of CallV1RecordingGet.
func (mr *MockRequestHandlerMockRecorder) CallV1RecordingGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1RecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).CallV1RecordingGet), ctx, id)
}

// CallV1RecordingGets mocks base method.
func (m *MockRequestHandler) CallV1RecordingGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1RecordingGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1RecordingGets indicates an expected call of CallV1RecordingGets.
func (mr *MockRequestHandlerMockRecorder) CallV1RecordingGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1RecordingGets", reflect.TypeOf((*MockRequestHandler)(nil).CallV1RecordingGets), ctx, pageToken, pageSize, filters)
}

// CallV1RecordingStart mocks base method.
func (m *MockRequestHandler) CallV1RecordingStart(ctx context.Context, activeflowID uuid.UUID, referenceType recording.ReferenceType, referenceID uuid.UUID, format recording.Format, endOfSilence int, endOfKey string, duration int, onEndFlowID uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1RecordingStart", ctx, activeflowID, referenceType, referenceID, format, endOfSilence, endOfKey, duration, onEndFlowID)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1RecordingStart indicates an expected call of CallV1RecordingStart.
func (mr *MockRequestHandlerMockRecorder) CallV1RecordingStart(ctx, activeflowID, referenceType, referenceID, format, endOfSilence, endOfKey, duration, onEndFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1RecordingStart", reflect.TypeOf((*MockRequestHandler)(nil).CallV1RecordingStart), ctx, activeflowID, referenceType, referenceID, format, endOfSilence, endOfKey, duration, onEndFlowID)
}

// CallV1RecordingStop mocks base method.
func (m *MockRequestHandler) CallV1RecordingStop(ctx context.Context, recordingID uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallV1RecordingStop", ctx, recordingID)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallV1RecordingStop indicates an expected call of CallV1RecordingStop.
func (mr *MockRequestHandlerMockRecorder) CallV1RecordingStop(ctx, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallV1RecordingStop", reflect.TypeOf((*MockRequestHandler)(nil).CallV1RecordingStop), ctx, recordingID)
}

// CampaignV1CampaignCreate mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignCreate(ctx context.Context, id, customerID uuid.UUID, campaignType campaign.Type, name, detail string, serviceLevel int, endHandle campaign.EndHandle, actions []action.Action, outplanID, outdialID, queueID, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignCreate", ctx, id, customerID, campaignType, name, detail, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignCreate indicates an expected call of CampaignV1CampaignCreate.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignCreate(ctx, id, customerID, campaignType, name, detail, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignCreate", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignCreate), ctx, id, customerID, campaignType, name, detail, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID)
}

// CampaignV1CampaignDelete mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignDelete(ctx context.Context, campaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignDelete", ctx, campaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignDelete indicates an expected call of CampaignV1CampaignDelete.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignDelete(ctx, campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignDelete", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignDelete), ctx, campaignID)
}

// CampaignV1CampaignExecute mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignExecute(ctx context.Context, id uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignExecute", ctx, id, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// CampaignV1CampaignExecute indicates an expected call of CampaignV1CampaignExecute.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignExecute(ctx, id, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignExecute", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignExecute), ctx, id, delay)
}

// CampaignV1CampaignGet mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignGet(ctx context.Context, id uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignGet", ctx, id)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignGet indicates an expected call of CampaignV1CampaignGet.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignGet", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignGet), ctx, id)
}

// CampaignV1CampaignGetsByCustomerID mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignGetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignGetsByCustomerID indicates an expected call of CampaignV1CampaignGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignGetsByCustomerID(ctx, customerID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignGetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// CampaignV1CampaignUpdateActions mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignUpdateActions(ctx context.Context, id uuid.UUID, actions []action.Action) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignUpdateActions", ctx, id, actions)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignUpdateActions indicates an expected call of CampaignV1CampaignUpdateActions.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignUpdateActions(ctx, id, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignUpdateActions", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignUpdateActions), ctx, id, actions)
}

// CampaignV1CampaignUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, campaignType campaign.Type, serviceLevel int, endHandle campaign.EndHandle) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignUpdateBasicInfo", ctx, id, name, detail, campaignType, serviceLevel, endHandle)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignUpdateBasicInfo indicates an expected call of CampaignV1CampaignUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignUpdateBasicInfo(ctx, id, name, detail, campaignType, serviceLevel, endHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignUpdateBasicInfo), ctx, id, name, detail, campaignType, serviceLevel, endHandle)
}

// CampaignV1CampaignUpdateNextCampaignID mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignUpdateNextCampaignID(ctx context.Context, id, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignUpdateNextCampaignID", ctx, id, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignUpdateNextCampaignID indicates an expected call of CampaignV1CampaignUpdateNextCampaignID.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignUpdateNextCampaignID(ctx, id, nextCampaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignUpdateNextCampaignID", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignUpdateNextCampaignID), ctx, id, nextCampaignID)
}

// CampaignV1CampaignUpdateResourceInfo mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignUpdateResourceInfo(ctx context.Context, id, outplanID, outdialID, queueID, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignUpdateResourceInfo", ctx, id, outplanID, outdialID, queueID, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignUpdateResourceInfo indicates an expected call of CampaignV1CampaignUpdateResourceInfo.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignUpdateResourceInfo(ctx, id, outplanID, outdialID, queueID, nextCampaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignUpdateResourceInfo", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignUpdateResourceInfo), ctx, id, outplanID, outdialID, queueID, nextCampaignID)
}

// CampaignV1CampaignUpdateServiceLevel mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignUpdateServiceLevel(ctx context.Context, id uuid.UUID, serviceLevel int) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignUpdateServiceLevel", ctx, id, serviceLevel)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignUpdateServiceLevel indicates an expected call of CampaignV1CampaignUpdateServiceLevel.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignUpdateServiceLevel(ctx, id, serviceLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignUpdateServiceLevel", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignUpdateServiceLevel), ctx, id, serviceLevel)
}

// CampaignV1CampaignUpdateStatus mocks base method.
func (m *MockRequestHandler) CampaignV1CampaignUpdateStatus(ctx context.Context, id uuid.UUID, status campaign.Status) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaignUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaignUpdateStatus indicates an expected call of CampaignV1CampaignUpdateStatus.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaignUpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaignUpdateStatus", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaignUpdateStatus), ctx, id, status)
}

// CampaignV1CampaigncallDelete mocks base method.
func (m *MockRequestHandler) CampaignV1CampaigncallDelete(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaigncallDelete", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaigncallDelete indicates an expected call of CampaignV1CampaigncallDelete.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaigncallDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaigncallDelete", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaigncallDelete), ctx, id)
}

// CampaignV1CampaigncallGet mocks base method.
func (m *MockRequestHandler) CampaignV1CampaigncallGet(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaigncallGet", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaigncallGet indicates an expected call of CampaignV1CampaigncallGet.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaigncallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaigncallGet", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaigncallGet), ctx, id)
}

// CampaignV1CampaigncallGets mocks base method.
func (m *MockRequestHandler) CampaignV1CampaigncallGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaigncallGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaigncallGets indicates an expected call of CampaignV1CampaigncallGets.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaigncallGets(ctx, customerID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaigncallGets", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaigncallGets), ctx, customerID, pageToken, pageSize)
}

// CampaignV1CampaigncallGetsByCampaignID mocks base method.
func (m *MockRequestHandler) CampaignV1CampaigncallGetsByCampaignID(ctx context.Context, campaignID uuid.UUID, pageToken string, pageSize uint64) ([]campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1CampaigncallGetsByCampaignID", ctx, campaignID, pageToken, pageSize)
	ret0, _ := ret[0].([]campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1CampaigncallGetsByCampaignID indicates an expected call of CampaignV1CampaigncallGetsByCampaignID.
func (mr *MockRequestHandlerMockRecorder) CampaignV1CampaigncallGetsByCampaignID(ctx, campaignID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1CampaigncallGetsByCampaignID", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1CampaigncallGetsByCampaignID), ctx, campaignID, pageToken, pageSize)
}

// CampaignV1OutplanCreate mocks base method.
func (m *MockRequestHandler) CampaignV1OutplanCreate(ctx context.Context, customerID uuid.UUID, name, detail string, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1OutplanCreate", ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1OutplanCreate indicates an expected call of CampaignV1OutplanCreate.
func (mr *MockRequestHandlerMockRecorder) CampaignV1OutplanCreate(ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1OutplanCreate", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1OutplanCreate), ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}

// CampaignV1OutplanDelete mocks base method.
func (m *MockRequestHandler) CampaignV1OutplanDelete(ctx context.Context, outplanID uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1OutplanDelete", ctx, outplanID)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1OutplanDelete indicates an expected call of CampaignV1OutplanDelete.
func (mr *MockRequestHandlerMockRecorder) CampaignV1OutplanDelete(ctx, outplanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1OutplanDelete", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1OutplanDelete), ctx, outplanID)
}

// CampaignV1OutplanGet mocks base method.
func (m *MockRequestHandler) CampaignV1OutplanGet(ctx context.Context, id uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1OutplanGet", ctx, id)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1OutplanGet indicates an expected call of CampaignV1OutplanGet.
func (mr *MockRequestHandlerMockRecorder) CampaignV1OutplanGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1OutplanGet", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1OutplanGet), ctx, id)
}

// CampaignV1OutplanGetsByCustomerID mocks base method.
func (m *MockRequestHandler) CampaignV1OutplanGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1OutplanGetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1OutplanGetsByCustomerID indicates an expected call of CampaignV1OutplanGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) CampaignV1OutplanGetsByCustomerID(ctx, customerID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1OutplanGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1OutplanGetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// CampaignV1OutplanUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) CampaignV1OutplanUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1OutplanUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1OutplanUpdateBasicInfo indicates an expected call of CampaignV1OutplanUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) CampaignV1OutplanUpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1OutplanUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1OutplanUpdateBasicInfo), ctx, id, name, detail)
}

// CampaignV1OutplanUpdateDialInfo mocks base method.
func (m *MockRequestHandler) CampaignV1OutplanUpdateDialInfo(ctx context.Context, id uuid.UUID, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CampaignV1OutplanUpdateDialInfo", ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CampaignV1OutplanUpdateDialInfo indicates an expected call of CampaignV1OutplanUpdateDialInfo.
func (mr *MockRequestHandlerMockRecorder) CampaignV1OutplanUpdateDialInfo(ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignV1OutplanUpdateDialInfo", reflect.TypeOf((*MockRequestHandler)(nil).CampaignV1OutplanUpdateDialInfo), ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}

// ChatV1ChatAddParticipantID mocks base method.
func (m *MockRequestHandler) ChatV1ChatAddParticipantID(ctx context.Context, id, participantID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatAddParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatAddParticipantID indicates an expected call of ChatV1ChatAddParticipantID.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatAddParticipantID(ctx, id, participantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatAddParticipantID", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatAddParticipantID), ctx, id, participantID)
}

// ChatV1ChatCreate mocks base method.
func (m *MockRequestHandler) ChatV1ChatCreate(ctx context.Context, customerID uuid.UUID, chatType chat.Type, roomOwnerID uuid.UUID, participantIDs []uuid.UUID, name, detail string) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatCreate", ctx, customerID, chatType, roomOwnerID, participantIDs, name, detail)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatCreate indicates an expected call of ChatV1ChatCreate.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatCreate(ctx, customerID, chatType, roomOwnerID, participantIDs, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatCreate", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatCreate), ctx, customerID, chatType, roomOwnerID, participantIDs, name, detail)
}

// ChatV1ChatDelete mocks base method.
func (m *MockRequestHandler) ChatV1ChatDelete(ctx context.Context, chatID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatDelete", ctx, chatID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatDelete indicates an expected call of ChatV1ChatDelete.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatDelete(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatDelete", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatDelete), ctx, chatID)
}

// ChatV1ChatGet mocks base method.
func (m *MockRequestHandler) ChatV1ChatGet(ctx context.Context, chatID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatGet", ctx, chatID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatGet indicates an expected call of ChatV1ChatGet.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatGet(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatGet", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatGet), ctx, chatID)
}

// ChatV1ChatGets mocks base method.
func (m *MockRequestHandler) ChatV1ChatGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatGets indicates an expected call of ChatV1ChatGets.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatGets", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatGets), ctx, pageToken, pageSize, filters)
}

// ChatV1ChatRemoveParticipantID mocks base method.
func (m *MockRequestHandler) ChatV1ChatRemoveParticipantID(ctx context.Context, id, participantID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatRemoveParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatRemoveParticipantID indicates an expected call of ChatV1ChatRemoveParticipantID.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatRemoveParticipantID(ctx, id, participantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatRemoveParticipantID", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatRemoveParticipantID), ctx, id, participantID)
}

// ChatV1ChatUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) ChatV1ChatUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatUpdateBasicInfo indicates an expected call of ChatV1ChatUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatUpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatUpdateBasicInfo), ctx, id, name, detail)
}

// ChatV1ChatUpdateRoomOwnerID mocks base method.
func (m *MockRequestHandler) ChatV1ChatUpdateRoomOwnerID(ctx context.Context, id, roomOwnerID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatUpdateRoomOwnerID", ctx, id, roomOwnerID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatUpdateRoomOwnerID indicates an expected call of ChatV1ChatUpdateRoomOwnerID.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatUpdateRoomOwnerID(ctx, id, roomOwnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatUpdateRoomOwnerID", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatUpdateRoomOwnerID), ctx, id, roomOwnerID)
}

// ChatV1ChatroomDelete mocks base method.
func (m *MockRequestHandler) ChatV1ChatroomDelete(ctx context.Context, chatroomID uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatroomDelete", ctx, chatroomID)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatroomDelete indicates an expected call of ChatV1ChatroomDelete.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatroomDelete(ctx, chatroomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatroomDelete", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatroomDelete), ctx, chatroomID)
}

// ChatV1ChatroomGet mocks base method.
func (m *MockRequestHandler) ChatV1ChatroomGet(ctx context.Context, chatroomID uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatroomGet", ctx, chatroomID)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatroomGet indicates an expected call of ChatV1ChatroomGet.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatroomGet(ctx, chatroomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatroomGet", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatroomGet), ctx, chatroomID)
}

// ChatV1ChatroomGets mocks base method.
func (m *MockRequestHandler) ChatV1ChatroomGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatroomGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatroomGets indicates an expected call of ChatV1ChatroomGets.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatroomGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatroomGets", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatroomGets), ctx, pageToken, pageSize, filters)
}

// ChatV1ChatroomUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) ChatV1ChatroomUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1ChatroomUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1ChatroomUpdateBasicInfo indicates an expected call of ChatV1ChatroomUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) ChatV1ChatroomUpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1ChatroomUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1ChatroomUpdateBasicInfo), ctx, id, name, detail)
}

// ChatV1MessagechatCreate mocks base method.
func (m *MockRequestHandler) ChatV1MessagechatCreate(ctx context.Context, customerID, chatID uuid.UUID, source address.Address, messageType messagechat.Type, text string, medias []media.Media) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1MessagechatCreate", ctx, customerID, chatID, source, messageType, text, medias)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1MessagechatCreate indicates an expected call of ChatV1MessagechatCreate.
func (mr *MockRequestHandlerMockRecorder) ChatV1MessagechatCreate(ctx, customerID, chatID, source, messageType, text, medias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1MessagechatCreate", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1MessagechatCreate), ctx, customerID, chatID, source, messageType, text, medias)
}

// ChatV1MessagechatDelete mocks base method.
func (m *MockRequestHandler) ChatV1MessagechatDelete(ctx context.Context, chatID uuid.UUID) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1MessagechatDelete", ctx, chatID)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1MessagechatDelete indicates an expected call of ChatV1MessagechatDelete.
func (mr *MockRequestHandlerMockRecorder) ChatV1MessagechatDelete(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1MessagechatDelete", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1MessagechatDelete), ctx, chatID)
}

// ChatV1MessagechatGet mocks base method.
func (m *MockRequestHandler) ChatV1MessagechatGet(ctx context.Context, messagechatID uuid.UUID) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1MessagechatGet", ctx, messagechatID)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1MessagechatGet indicates an expected call of ChatV1MessagechatGet.
func (mr *MockRequestHandlerMockRecorder) ChatV1MessagechatGet(ctx, messagechatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1MessagechatGet", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1MessagechatGet), ctx, messagechatID)
}

// ChatV1MessagechatGets mocks base method.
func (m *MockRequestHandler) ChatV1MessagechatGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1MessagechatGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1MessagechatGets indicates an expected call of ChatV1MessagechatGets.
func (mr *MockRequestHandlerMockRecorder) ChatV1MessagechatGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1MessagechatGets", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1MessagechatGets), ctx, pageToken, pageSize, filters)
}

// ChatV1MessagechatroomDelete mocks base method.
func (m *MockRequestHandler) ChatV1MessagechatroomDelete(ctx context.Context, messagechatroomID uuid.UUID) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1MessagechatroomDelete", ctx, messagechatroomID)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1MessagechatroomDelete indicates an expected call of ChatV1MessagechatroomDelete.
func (mr *MockRequestHandlerMockRecorder) ChatV1MessagechatroomDelete(ctx, messagechatroomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1MessagechatroomDelete", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1MessagechatroomDelete), ctx, messagechatroomID)
}

// ChatV1MessagechatroomGet mocks base method.
func (m *MockRequestHandler) ChatV1MessagechatroomGet(ctx context.Context, messagechatroomID uuid.UUID) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1MessagechatroomGet", ctx, messagechatroomID)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1MessagechatroomGet indicates an expected call of ChatV1MessagechatroomGet.
func (mr *MockRequestHandlerMockRecorder) ChatV1MessagechatroomGet(ctx, messagechatroomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1MessagechatroomGet", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1MessagechatroomGet), ctx, messagechatroomID)
}

// ChatV1MessagechatroomGets mocks base method.
func (m *MockRequestHandler) ChatV1MessagechatroomGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatV1MessagechatroomGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatV1MessagechatroomGets indicates an expected call of ChatV1MessagechatroomGets.
func (mr *MockRequestHandlerMockRecorder) ChatV1MessagechatroomGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatV1MessagechatroomGets", reflect.TypeOf((*MockRequestHandler)(nil).ChatV1MessagechatroomGets), ctx, pageToken, pageSize, filters)
}

// ConferenceV1ConferenceCreate mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceCreate(ctx context.Context, customerID uuid.UUID, conferenceType conference.Type, name, detail string, timeout int, data map[string]any, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceCreate", ctx, customerID, conferenceType, name, detail, timeout, data, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceCreate indicates an expected call of ConferenceV1ConferenceCreate.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceCreate(ctx, customerID, conferenceType, name, detail, timeout, data, preActions, postActions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceCreate", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceCreate), ctx, customerID, conferenceType, name, detail, timeout, data, preActions, postActions)
}

// ConferenceV1ConferenceDelete mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceDelete(ctx context.Context, conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceDelete", ctx, conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceDelete indicates an expected call of ConferenceV1ConferenceDelete.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceDelete(ctx, conferenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceDelete", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceDelete), ctx, conferenceID)
}

// ConferenceV1ConferenceDeleteDelay mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceDeleteDelay(ctx context.Context, conferenceID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceDeleteDelay", ctx, conferenceID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceV1ConferenceDeleteDelay indicates an expected call of ConferenceV1ConferenceDeleteDelay.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceDeleteDelay(ctx, conferenceID, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceDeleteDelay", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceDeleteDelay), ctx, conferenceID, delay)
}

// ConferenceV1ConferenceGet mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceGet(ctx context.Context, conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceGet", ctx, conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceGet indicates an expected call of ConferenceV1ConferenceGet.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceGet(ctx, conferenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceGet), ctx, conferenceID)
}

// ConferenceV1ConferenceGets mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceGets indicates an expected call of ConferenceV1ConferenceGets.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceGets", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceGets), ctx, pageToken, pageSize, filters)
}

// ConferenceV1ConferenceRecordingStart mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceRecordingStart(ctx context.Context, conferenceID, activeflowID uuid.UUID, format recording.Format, duration int, onEndFlowID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceRecordingStart", ctx, conferenceID, activeflowID, format, duration, onEndFlowID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceRecordingStart indicates an expected call of ConferenceV1ConferenceRecordingStart.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceRecordingStart(ctx, conferenceID, activeflowID, format, duration, onEndFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceRecordingStart", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceRecordingStart), ctx, conferenceID, activeflowID, format, duration, onEndFlowID)
}

// ConferenceV1ConferenceRecordingStop mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceRecordingStop(ctx context.Context, conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceRecordingStop", ctx, conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceRecordingStop indicates an expected call of ConferenceV1ConferenceRecordingStop.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceRecordingStop(ctx, conferenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceRecordingStop", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceRecordingStop), ctx, conferenceID)
}

// ConferenceV1ConferenceStop mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceStop(ctx context.Context, conferenceID uuid.UUID, delay int) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceStop", ctx, conferenceID, delay)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceStop indicates an expected call of ConferenceV1ConferenceStop.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceStop(ctx, conferenceID, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceStop", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceStop), ctx, conferenceID, delay)
}

// ConferenceV1ConferenceTranscribeStart mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceTranscribeStart(ctx context.Context, conferenceID uuid.UUID, language string) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceTranscribeStart", ctx, conferenceID, language)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceTranscribeStart indicates an expected call of ConferenceV1ConferenceTranscribeStart.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceTranscribeStart(ctx, conferenceID, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceTranscribeStart", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceTranscribeStart), ctx, conferenceID, language)
}

// ConferenceV1ConferenceTranscribeStop mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceTranscribeStop(ctx context.Context, conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceTranscribeStop", ctx, conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceTranscribeStop indicates an expected call of ConferenceV1ConferenceTranscribeStop.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceTranscribeStop(ctx, conferenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceTranscribeStop", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceTranscribeStop), ctx, conferenceID)
}

// ConferenceV1ConferenceUpdate mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceUpdate(ctx context.Context, id uuid.UUID, name, detail string, timeout int, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceUpdate", ctx, id, name, detail, timeout, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceUpdate indicates an expected call of ConferenceV1ConferenceUpdate.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceUpdate(ctx, id, name, detail, timeout, preActions, postActions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceUpdate", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceUpdate), ctx, id, name, detail, timeout, preActions, postActions)
}

// ConferenceV1ConferenceUpdateRecordingID mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferenceUpdateRecordingID(ctx context.Context, id, recordingID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferenceUpdateRecordingID", ctx, id, recordingID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferenceUpdateRecordingID indicates an expected call of ConferenceV1ConferenceUpdateRecordingID.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferenceUpdateRecordingID(ctx, id, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferenceUpdateRecordingID", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferenceUpdateRecordingID), ctx, id, recordingID)
}

// ConferenceV1ConferencecallGet mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferencecallGet(ctx context.Context, conferencecallID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferencecallGet", ctx, conferencecallID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferencecallGet indicates an expected call of ConferenceV1ConferencecallGet.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferencecallGet(ctx, conferencecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferencecallGet", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferencecallGet), ctx, conferencecallID)
}

// ConferenceV1ConferencecallGets mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferencecallGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferencecallGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferencecallGets indicates an expected call of ConferenceV1ConferencecallGets.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferencecallGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferencecallGets", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferencecallGets), ctx, pageToken, pageSize, filters)
}

// ConferenceV1ConferencecallHealthCheck mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferencecallHealthCheck(ctx context.Context, conferencecallID uuid.UUID, retryCount, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferencecallHealthCheck", ctx, conferencecallID, retryCount, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceV1ConferencecallHealthCheck indicates an expected call of ConferenceV1ConferencecallHealthCheck.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferencecallHealthCheck(ctx, conferencecallID, retryCount, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferencecallHealthCheck", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferencecallHealthCheck), ctx, conferencecallID, retryCount, delay)
}

// ConferenceV1ConferencecallKick mocks base method.
func (m *MockRequestHandler) ConferenceV1ConferencecallKick(ctx context.Context, conferencecallID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ConferencecallKick", ctx, conferencecallID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ConferencecallKick indicates an expected call of ConferenceV1ConferencecallKick.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ConferencecallKick(ctx, conferencecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ConferencecallKick", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ConferencecallKick), ctx, conferencecallID)
}

// ConferenceV1ServiceTypeConferencecallStart mocks base method.
func (m *MockRequestHandler) ConferenceV1ServiceTypeConferencecallStart(ctx context.Context, conferenceID uuid.UUID, referenceType conferencecall.ReferenceType, referenceID uuid.UUID) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceV1ServiceTypeConferencecallStart", ctx, conferenceID, referenceType, referenceID)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceV1ServiceTypeConferencecallStart indicates an expected call of ConferenceV1ServiceTypeConferencecallStart.
func (mr *MockRequestHandlerMockRecorder) ConferenceV1ServiceTypeConferencecallStart(ctx, conferenceID, referenceType, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceV1ServiceTypeConferencecallStart", reflect.TypeOf((*MockRequestHandler)(nil).ConferenceV1ServiceTypeConferencecallStart), ctx, conferenceID, referenceType, referenceID)
}

// ConversationV1AccountCreate mocks base method.
func (m *MockRequestHandler) ConversationV1AccountCreate(ctx context.Context, customerID uuid.UUID, accountType account0.Type, name, detail, secret, token string) (*account0.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1AccountCreate", ctx, customerID, accountType, name, detail, secret, token)
	ret0, _ := ret[0].(*account0.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1AccountCreate indicates an expected call of ConversationV1AccountCreate.
func (mr *MockRequestHandlerMockRecorder) ConversationV1AccountCreate(ctx, customerID, accountType, name, detail, secret, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1AccountCreate", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1AccountCreate), ctx, customerID, accountType, name, detail, secret, token)
}

// ConversationV1AccountDelete mocks base method.
func (m *MockRequestHandler) ConversationV1AccountDelete(ctx context.Context, accountID uuid.UUID) (*account0.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1AccountDelete", ctx, accountID)
	ret0, _ := ret[0].(*account0.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1AccountDelete indicates an expected call of ConversationV1AccountDelete.
func (mr *MockRequestHandlerMockRecorder) ConversationV1AccountDelete(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1AccountDelete", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1AccountDelete), ctx, accountID)
}

// ConversationV1AccountGet mocks base method.
func (m *MockRequestHandler) ConversationV1AccountGet(ctx context.Context, accountID uuid.UUID) (*account0.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1AccountGet", ctx, accountID)
	ret0, _ := ret[0].(*account0.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1AccountGet indicates an expected call of ConversationV1AccountGet.
func (mr *MockRequestHandlerMockRecorder) ConversationV1AccountGet(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1AccountGet", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1AccountGet), ctx, accountID)
}

// ConversationV1AccountGets mocks base method.
func (m *MockRequestHandler) ConversationV1AccountGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]account0.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1AccountGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]account0.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1AccountGets indicates an expected call of ConversationV1AccountGets.
func (mr *MockRequestHandlerMockRecorder) ConversationV1AccountGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1AccountGets", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1AccountGets), ctx, pageToken, pageSize, filters)
}

// ConversationV1AccountUpdate mocks base method.
func (m *MockRequestHandler) ConversationV1AccountUpdate(ctx context.Context, accountID uuid.UUID, name, detail, secret, token string) (*account0.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1AccountUpdate", ctx, accountID, name, detail, secret, token)
	ret0, _ := ret[0].(*account0.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1AccountUpdate indicates an expected call of ConversationV1AccountUpdate.
func (mr *MockRequestHandlerMockRecorder) ConversationV1AccountUpdate(ctx, accountID, name, detail, secret, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1AccountUpdate", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1AccountUpdate), ctx, accountID, name, detail, secret, token)
}

// ConversationV1ConversationGet mocks base method.
func (m *MockRequestHandler) ConversationV1ConversationGet(ctx context.Context, conversationID uuid.UUID) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1ConversationGet", ctx, conversationID)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1ConversationGet indicates an expected call of ConversationV1ConversationGet.
func (mr *MockRequestHandlerMockRecorder) ConversationV1ConversationGet(ctx, conversationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1ConversationGet", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1ConversationGet), ctx, conversationID)
}

// ConversationV1ConversationGets mocks base method.
func (m *MockRequestHandler) ConversationV1ConversationGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1ConversationGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1ConversationGets indicates an expected call of ConversationV1ConversationGets.
func (mr *MockRequestHandlerMockRecorder) ConversationV1ConversationGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1ConversationGets", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1ConversationGets), ctx, pageToken, pageSize, filters)
}

// ConversationV1ConversationMessageGetsByConversationID mocks base method.
func (m *MockRequestHandler) ConversationV1ConversationMessageGetsByConversationID(ctx context.Context, conversationID uuid.UUID, pageToken string, pageSize uint64) ([]message0.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1ConversationMessageGetsByConversationID", ctx, conversationID, pageToken, pageSize)
	ret0, _ := ret[0].([]message0.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1ConversationMessageGetsByConversationID indicates an expected call of ConversationV1ConversationMessageGetsByConversationID.
func (mr *MockRequestHandlerMockRecorder) ConversationV1ConversationMessageGetsByConversationID(ctx, conversationID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1ConversationMessageGetsByConversationID", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1ConversationMessageGetsByConversationID), ctx, conversationID, pageToken, pageSize)
}

// ConversationV1ConversationUpdate mocks base method.
func (m *MockRequestHandler) ConversationV1ConversationUpdate(ctx context.Context, conversationID uuid.UUID, name, detail string) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1ConversationUpdate", ctx, conversationID, name, detail)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1ConversationUpdate indicates an expected call of ConversationV1ConversationUpdate.
func (mr *MockRequestHandlerMockRecorder) ConversationV1ConversationUpdate(ctx, conversationID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1ConversationUpdate", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1ConversationUpdate), ctx, conversationID, name, detail)
}

// ConversationV1Hook mocks base method.
func (m *MockRequestHandler) ConversationV1Hook(ctx context.Context, hm *hook.Hook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1Hook", ctx, hm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConversationV1Hook indicates an expected call of ConversationV1Hook.
func (mr *MockRequestHandlerMockRecorder) ConversationV1Hook(ctx, hm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1Hook", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1Hook), ctx, hm)
}

// ConversationV1MessageSend mocks base method.
func (m *MockRequestHandler) ConversationV1MessageSend(ctx context.Context, conversationID uuid.UUID, text string, medias []media0.Media) (*message0.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationV1MessageSend", ctx, conversationID, text, medias)
	ret0, _ := ret[0].(*message0.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationV1MessageSend indicates an expected call of ConversationV1MessageSend.
func (mr *MockRequestHandlerMockRecorder) ConversationV1MessageSend(ctx, conversationID, text, medias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationV1MessageSend", reflect.TypeOf((*MockRequestHandler)(nil).ConversationV1MessageSend), ctx, conversationID, text, medias)
}

// CustomerV1AccesskeyCreate mocks base method.
func (m *MockRequestHandler) CustomerV1AccesskeyCreate(ctx context.Context, customerID uuid.UUID, name, detail string, expire int32) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1AccesskeyCreate", ctx, customerID, name, detail, expire)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1AccesskeyCreate indicates an expected call of CustomerV1AccesskeyCreate.
func (mr *MockRequestHandlerMockRecorder) CustomerV1AccesskeyCreate(ctx, customerID, name, detail, expire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1AccesskeyCreate", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1AccesskeyCreate), ctx, customerID, name, detail, expire)
}

// CustomerV1AccesskeyDelete mocks base method.
func (m *MockRequestHandler) CustomerV1AccesskeyDelete(ctx context.Context, accesskeyID uuid.UUID) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1AccesskeyDelete", ctx, accesskeyID)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1AccesskeyDelete indicates an expected call of CustomerV1AccesskeyDelete.
func (mr *MockRequestHandlerMockRecorder) CustomerV1AccesskeyDelete(ctx, accesskeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1AccesskeyDelete", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1AccesskeyDelete), ctx, accesskeyID)
}

// CustomerV1AccesskeyGet mocks base method.
func (m *MockRequestHandler) CustomerV1AccesskeyGet(ctx context.Context, accesskeyID uuid.UUID) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1AccesskeyGet", ctx, accesskeyID)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1AccesskeyGet indicates an expected call of CustomerV1AccesskeyGet.
func (mr *MockRequestHandlerMockRecorder) CustomerV1AccesskeyGet(ctx, accesskeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1AccesskeyGet", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1AccesskeyGet), ctx, accesskeyID)
}

// CustomerV1AccesskeyGets mocks base method.
func (m *MockRequestHandler) CustomerV1AccesskeyGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1AccesskeyGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1AccesskeyGets indicates an expected call of CustomerV1AccesskeyGets.
func (mr *MockRequestHandlerMockRecorder) CustomerV1AccesskeyGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1AccesskeyGets", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1AccesskeyGets), ctx, pageToken, pageSize, filters)
}

// CustomerV1AccesskeyUpdate mocks base method.
func (m *MockRequestHandler) CustomerV1AccesskeyUpdate(ctx context.Context, accesskeyID uuid.UUID, name, detail string) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1AccesskeyUpdate", ctx, accesskeyID, name, detail)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1AccesskeyUpdate indicates an expected call of CustomerV1AccesskeyUpdate.
func (mr *MockRequestHandlerMockRecorder) CustomerV1AccesskeyUpdate(ctx, accesskeyID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1AccesskeyUpdate", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1AccesskeyUpdate), ctx, accesskeyID, name, detail)
}

// CustomerV1CustomerCreate mocks base method.
func (m *MockRequestHandler) CustomerV1CustomerCreate(ctx context.Context, requestTimeout int, name, detail, email, phoneNumber, address string, webhookMethod customer.WebhookMethod, webhookURI string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1CustomerCreate", ctx, requestTimeout, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1CustomerCreate indicates an expected call of CustomerV1CustomerCreate.
func (mr *MockRequestHandlerMockRecorder) CustomerV1CustomerCreate(ctx, requestTimeout, name, detail, email, phoneNumber, address, webhookMethod, webhookURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1CustomerCreate", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1CustomerCreate), ctx, requestTimeout, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
}

// CustomerV1CustomerDelete mocks base method.
func (m *MockRequestHandler) CustomerV1CustomerDelete(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1CustomerDelete", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1CustomerDelete indicates an expected call of CustomerV1CustomerDelete.
func (mr *MockRequestHandlerMockRecorder) CustomerV1CustomerDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1CustomerDelete", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1CustomerDelete), ctx, id)
}

// CustomerV1CustomerGet mocks base method.
func (m *MockRequestHandler) CustomerV1CustomerGet(ctx context.Context, customerID uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1CustomerGet", ctx, customerID)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1CustomerGet indicates an expected call of CustomerV1CustomerGet.
func (mr *MockRequestHandlerMockRecorder) CustomerV1CustomerGet(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1CustomerGet", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1CustomerGet), ctx, customerID)
}

// CustomerV1CustomerGets mocks base method.
func (m *MockRequestHandler) CustomerV1CustomerGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1CustomerGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1CustomerGets indicates an expected call of CustomerV1CustomerGets.
func (mr *MockRequestHandlerMockRecorder) CustomerV1CustomerGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1CustomerGets", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1CustomerGets), ctx, pageToken, pageSize, filters)
}

// CustomerV1CustomerIsValidBalance mocks base method.
func (m *MockRequestHandler) CustomerV1CustomerIsValidBalance(ctx context.Context, customerID uuid.UUID, referenceType billing.ReferenceType, country string, count int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1CustomerIsValidBalance", ctx, customerID, referenceType, country, count)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1CustomerIsValidBalance indicates an expected call of CustomerV1CustomerIsValidBalance.
func (mr *MockRequestHandlerMockRecorder) CustomerV1CustomerIsValidBalance(ctx, customerID, referenceType, country, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1CustomerIsValidBalance", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1CustomerIsValidBalance), ctx, customerID, referenceType, country, count)
}

// CustomerV1CustomerUpdate mocks base method.
func (m *MockRequestHandler) CustomerV1CustomerUpdate(ctx context.Context, id uuid.UUID, name, detail, email, phoneNumber, address string, webhookMethod customer.WebhookMethod, webhookURI string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1CustomerUpdate", ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1CustomerUpdate indicates an expected call of CustomerV1CustomerUpdate.
func (mr *MockRequestHandlerMockRecorder) CustomerV1CustomerUpdate(ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1CustomerUpdate", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1CustomerUpdate), ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
}

// CustomerV1CustomerUpdateBillingAccountID mocks base method.
func (m *MockRequestHandler) CustomerV1CustomerUpdateBillingAccountID(ctx context.Context, customerID, biillingAccountID uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerV1CustomerUpdateBillingAccountID", ctx, customerID, biillingAccountID)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerV1CustomerUpdateBillingAccountID indicates an expected call of CustomerV1CustomerUpdateBillingAccountID.
func (mr *MockRequestHandlerMockRecorder) CustomerV1CustomerUpdateBillingAccountID(ctx, customerID, biillingAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerV1CustomerUpdateBillingAccountID", reflect.TypeOf((*MockRequestHandler)(nil).CustomerV1CustomerUpdateBillingAccountID), ctx, customerID, biillingAccountID)
}

// EmailV1EmailDelete mocks base method.
func (m *MockRequestHandler) EmailV1EmailDelete(ctx context.Context, id uuid.UUID) (*email.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailV1EmailDelete", ctx, id)
	ret0, _ := ret[0].(*email.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailV1EmailDelete indicates an expected call of EmailV1EmailDelete.
func (mr *MockRequestHandlerMockRecorder) EmailV1EmailDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailV1EmailDelete", reflect.TypeOf((*MockRequestHandler)(nil).EmailV1EmailDelete), ctx, id)
}

// EmailV1EmailGet mocks base method.
func (m *MockRequestHandler) EmailV1EmailGet(ctx context.Context, emailID uuid.UUID) (*email.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailV1EmailGet", ctx, emailID)
	ret0, _ := ret[0].(*email.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailV1EmailGet indicates an expected call of EmailV1EmailGet.
func (mr *MockRequestHandlerMockRecorder) EmailV1EmailGet(ctx, emailID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailV1EmailGet", reflect.TypeOf((*MockRequestHandler)(nil).EmailV1EmailGet), ctx, emailID)
}

// EmailV1EmailGets mocks base method.
func (m *MockRequestHandler) EmailV1EmailGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]email.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailV1EmailGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]email.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailV1EmailGets indicates an expected call of EmailV1EmailGets.
func (mr *MockRequestHandlerMockRecorder) EmailV1EmailGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailV1EmailGets", reflect.TypeOf((*MockRequestHandler)(nil).EmailV1EmailGets), ctx, pageToken, pageSize, filters)
}

// EmailV1EmailSend mocks base method.
func (m *MockRequestHandler) EmailV1EmailSend(ctx context.Context, customerID, activeflowID uuid.UUID, destinations []address.Address, subject, content string, attachments []email.Attachment) (*email.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailV1EmailSend", ctx, customerID, activeflowID, destinations, subject, content, attachments)
	ret0, _ := ret[0].(*email.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailV1EmailSend indicates an expected call of EmailV1EmailSend.
func (mr *MockRequestHandlerMockRecorder) EmailV1EmailSend(ctx, customerID, activeflowID, destinations, subject, content, attachments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailV1EmailSend", reflect.TypeOf((*MockRequestHandler)(nil).EmailV1EmailSend), ctx, customerID, activeflowID, destinations, subject, content, attachments)
}

// EmailV1Hooks mocks base method.
func (m *MockRequestHandler) EmailV1Hooks(ctx context.Context, hm *hook.Hook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailV1Hooks", ctx, hm)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmailV1Hooks indicates an expected call of EmailV1Hooks.
func (mr *MockRequestHandlerMockRecorder) EmailV1Hooks(ctx, hm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailV1Hooks", reflect.TypeOf((*MockRequestHandler)(nil).EmailV1Hooks), ctx, hm)
}

// FlowV1ActionGet mocks base method.
func (m *MockRequestHandler) FlowV1ActionGet(ctx context.Context, flowID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActionGet", ctx, flowID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActionGet indicates an expected call of FlowV1ActionGet.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActionGet(ctx, flowID, actionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActionGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActionGet), ctx, flowID, actionID)
}

// FlowV1ActiveflowAddActions mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowAddActions(ctx context.Context, activeflowID uuid.UUID, actions []action.Action) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowAddActions", ctx, activeflowID, actions)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowAddActions indicates an expected call of FlowV1ActiveflowAddActions.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowAddActions(ctx, activeflowID, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowAddActions", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowAddActions), ctx, activeflowID, actions)
}

// FlowV1ActiveflowCreate mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowCreate(ctx context.Context, activeflowID, customerID, flowID uuid.UUID, referenceType activeflow.ReferenceType, referenceID, referenceActiveflowID uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowCreate", ctx, activeflowID, customerID, flowID, referenceType, referenceID, referenceActiveflowID)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowCreate indicates an expected call of FlowV1ActiveflowCreate.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowCreate(ctx, activeflowID, customerID, flowID, referenceType, referenceID, referenceActiveflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowCreate), ctx, activeflowID, customerID, flowID, referenceType, referenceID, referenceActiveflowID)
}

// FlowV1ActiveflowDelete mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowDelete(ctx context.Context, activeflowID uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowDelete", ctx, activeflowID)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowDelete indicates an expected call of FlowV1ActiveflowDelete.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowDelete(ctx, activeflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowDelete), ctx, activeflowID)
}

// FlowV1ActiveflowExecute mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowExecute(ctx context.Context, activeflowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowExecute", ctx, activeflowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowV1ActiveflowExecute indicates an expected call of FlowV1ActiveflowExecute.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowExecute(ctx, activeflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowExecute", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowExecute), ctx, activeflowID)
}

// FlowV1ActiveflowGet mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowGet(ctx context.Context, activeflowID uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowGet", ctx, activeflowID)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowGet indicates an expected call of FlowV1ActiveflowGet.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowGet(ctx, activeflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowGet), ctx, activeflowID)
}

// FlowV1ActiveflowGetNextAction mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowGetNextAction(ctx context.Context, activeflowID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowGetNextAction", ctx, activeflowID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowGetNextAction indicates an expected call of FlowV1ActiveflowGetNextAction.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowGetNextAction(ctx, activeflowID, actionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowGetNextAction", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowGetNextAction), ctx, activeflowID, actionID)
}

// FlowV1ActiveflowGets mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowGets indicates an expected call of FlowV1ActiveflowGets.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowGets", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowGets), ctx, pageToken, pageSize, filters)
}

// FlowV1ActiveflowPushActions mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowPushActions(ctx context.Context, activeflowID uuid.UUID, actions []action.Action) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowPushActions", ctx, activeflowID, actions)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowPushActions indicates an expected call of FlowV1ActiveflowPushActions.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowPushActions(ctx, activeflowID, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowPushActions", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowPushActions), ctx, activeflowID, actions)
}

// FlowV1ActiveflowServiceStop mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowServiceStop(ctx context.Context, activeflowID, serviceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowServiceStop", ctx, activeflowID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowV1ActiveflowServiceStop indicates an expected call of FlowV1ActiveflowServiceStop.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowServiceStop(ctx, activeflowID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowServiceStop", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowServiceStop), ctx, activeflowID, serviceID)
}

// FlowV1ActiveflowStop mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowStop(ctx context.Context, activeflowID uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowStop", ctx, activeflowID)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1ActiveflowStop indicates an expected call of FlowV1ActiveflowStop.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowStop(ctx, activeflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowStop", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowStop), ctx, activeflowID)
}

// FlowV1ActiveflowUpdateForwardActionID mocks base method.
func (m *MockRequestHandler) FlowV1ActiveflowUpdateForwardActionID(ctx context.Context, activeflowID, forwardActionID uuid.UUID, forwardNow bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1ActiveflowUpdateForwardActionID", ctx, activeflowID, forwardActionID, forwardNow)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowV1ActiveflowUpdateForwardActionID indicates an expected call of FlowV1ActiveflowUpdateForwardActionID.
func (mr *MockRequestHandlerMockRecorder) FlowV1ActiveflowUpdateForwardActionID(ctx, activeflowID, forwardActionID, forwardNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1ActiveflowUpdateForwardActionID", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1ActiveflowUpdateForwardActionID), ctx, activeflowID, forwardActionID, forwardNow)
}

// FlowV1FlowCreate mocks base method.
func (m *MockRequestHandler) FlowV1FlowCreate(ctx context.Context, customerID uuid.UUID, flowType flow.Type, name, detail string, actions []action.Action, persist bool) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1FlowCreate", ctx, customerID, flowType, name, detail, actions, persist)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1FlowCreate indicates an expected call of FlowV1FlowCreate.
func (mr *MockRequestHandlerMockRecorder) FlowV1FlowCreate(ctx, customerID, flowType, name, detail, actions, persist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1FlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1FlowCreate), ctx, customerID, flowType, name, detail, actions, persist)
}

// FlowV1FlowDelete mocks base method.
func (m *MockRequestHandler) FlowV1FlowDelete(ctx context.Context, flowID uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1FlowDelete", ctx, flowID)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1FlowDelete indicates an expected call of FlowV1FlowDelete.
func (mr *MockRequestHandlerMockRecorder) FlowV1FlowDelete(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1FlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1FlowDelete), ctx, flowID)
}

// FlowV1FlowGet mocks base method.
func (m *MockRequestHandler) FlowV1FlowGet(ctx context.Context, flowID uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1FlowGet", ctx, flowID)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1FlowGet indicates an expected call of FlowV1FlowGet.
func (mr *MockRequestHandlerMockRecorder) FlowV1FlowGet(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1FlowGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1FlowGet), ctx, flowID)
}

// FlowV1FlowGets mocks base method.
func (m *MockRequestHandler) FlowV1FlowGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1FlowGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1FlowGets indicates an expected call of FlowV1FlowGets.
func (mr *MockRequestHandlerMockRecorder) FlowV1FlowGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1FlowGets", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1FlowGets), ctx, pageToken, pageSize, filters)
}

// FlowV1FlowUpdate mocks base method.
func (m *MockRequestHandler) FlowV1FlowUpdate(ctx context.Context, f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1FlowUpdate", ctx, f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1FlowUpdate indicates an expected call of FlowV1FlowUpdate.
func (mr *MockRequestHandlerMockRecorder) FlowV1FlowUpdate(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1FlowUpdate", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1FlowUpdate), ctx, f)
}

// FlowV1FlowUpdateActions mocks base method.
func (m *MockRequestHandler) FlowV1FlowUpdateActions(ctx context.Context, flowID uuid.UUID, actions []action.Action) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1FlowUpdateActions", ctx, flowID, actions)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1FlowUpdateActions indicates an expected call of FlowV1FlowUpdateActions.
func (mr *MockRequestHandlerMockRecorder) FlowV1FlowUpdateActions(ctx, flowID, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1FlowUpdateActions", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1FlowUpdateActions), ctx, flowID, actions)
}

// FlowV1VariableDeleteVariable mocks base method.
func (m *MockRequestHandler) FlowV1VariableDeleteVariable(ctx context.Context, variableID uuid.UUID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1VariableDeleteVariable", ctx, variableID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowV1VariableDeleteVariable indicates an expected call of FlowV1VariableDeleteVariable.
func (mr *MockRequestHandlerMockRecorder) FlowV1VariableDeleteVariable(ctx, variableID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1VariableDeleteVariable", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1VariableDeleteVariable), ctx, variableID, key)
}

// FlowV1VariableGet mocks base method.
func (m *MockRequestHandler) FlowV1VariableGet(ctx context.Context, variableID uuid.UUID) (*variable.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1VariableGet", ctx, variableID)
	ret0, _ := ret[0].(*variable.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1VariableGet indicates an expected call of FlowV1VariableGet.
func (mr *MockRequestHandlerMockRecorder) FlowV1VariableGet(ctx, variableID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1VariableGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1VariableGet), ctx, variableID)
}

// FlowV1VariableSetVariable mocks base method.
func (m *MockRequestHandler) FlowV1VariableSetVariable(ctx context.Context, variableID uuid.UUID, variables map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1VariableSetVariable", ctx, variableID, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowV1VariableSetVariable indicates an expected call of FlowV1VariableSetVariable.
func (mr *MockRequestHandlerMockRecorder) FlowV1VariableSetVariable(ctx, variableID, variables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1VariableSetVariable", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1VariableSetVariable), ctx, variableID, variables)
}

// FlowV1VariableSubstitute mocks base method.
func (m *MockRequestHandler) FlowV1VariableSubstitute(ctx context.Context, variableID uuid.UUID, dataString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowV1VariableSubstitute", ctx, variableID, dataString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowV1VariableSubstitute indicates an expected call of FlowV1VariableSubstitute.
func (mr *MockRequestHandlerMockRecorder) FlowV1VariableSubstitute(ctx, variableID, dataString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowV1VariableSubstitute", reflect.TypeOf((*MockRequestHandler)(nil).FlowV1VariableSubstitute), ctx, variableID, dataString)
}

// MessageV1Hook mocks base method.
func (m *MockRequestHandler) MessageV1Hook(ctx context.Context, hm *hook.Hook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageV1Hook", ctx, hm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageV1Hook indicates an expected call of MessageV1Hook.
func (mr *MockRequestHandlerMockRecorder) MessageV1Hook(ctx, hm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageV1Hook", reflect.TypeOf((*MockRequestHandler)(nil).MessageV1Hook), ctx, hm)
}

// MessageV1MessageDelete mocks base method.
func (m *MockRequestHandler) MessageV1MessageDelete(ctx context.Context, id uuid.UUID) (*message1.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageV1MessageDelete", ctx, id)
	ret0, _ := ret[0].(*message1.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageV1MessageDelete indicates an expected call of MessageV1MessageDelete.
func (mr *MockRequestHandlerMockRecorder) MessageV1MessageDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageV1MessageDelete", reflect.TypeOf((*MockRequestHandler)(nil).MessageV1MessageDelete), ctx, id)
}

// MessageV1MessageGet mocks base method.
func (m *MockRequestHandler) MessageV1MessageGet(ctx context.Context, id uuid.UUID) (*message1.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageV1MessageGet", ctx, id)
	ret0, _ := ret[0].(*message1.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageV1MessageGet indicates an expected call of MessageV1MessageGet.
func (mr *MockRequestHandlerMockRecorder) MessageV1MessageGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageV1MessageGet", reflect.TypeOf((*MockRequestHandler)(nil).MessageV1MessageGet), ctx, id)
}

// MessageV1MessageGets mocks base method.
func (m *MockRequestHandler) MessageV1MessageGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]message1.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageV1MessageGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]message1.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageV1MessageGets indicates an expected call of MessageV1MessageGets.
func (mr *MockRequestHandlerMockRecorder) MessageV1MessageGets(ctx, customerID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageV1MessageGets", reflect.TypeOf((*MockRequestHandler)(nil).MessageV1MessageGets), ctx, customerID, pageToken, pageSize)
}

// MessageV1MessageSend mocks base method.
func (m *MockRequestHandler) MessageV1MessageSend(ctx context.Context, id, customerID uuid.UUID, source *address.Address, destinations []address.Address, text string) (*message1.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageV1MessageSend", ctx, id, customerID, source, destinations, text)
	ret0, _ := ret[0].(*message1.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageV1MessageSend indicates an expected call of MessageV1MessageSend.
func (mr *MockRequestHandlerMockRecorder) MessageV1MessageSend(ctx, id, customerID, source, destinations, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageV1MessageSend", reflect.TypeOf((*MockRequestHandler)(nil).MessageV1MessageSend), ctx, id, customerID, source, destinations, text)
}

// NumberV1AvailableNumberGets mocks base method.
func (m *MockRequestHandler) NumberV1AvailableNumberGets(ctx context.Context, customerID uuid.UUID, pageSize uint64, countryCode string) ([]availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1AvailableNumberGets", ctx, customerID, pageSize, countryCode)
	ret0, _ := ret[0].([]availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1AvailableNumberGets indicates an expected call of NumberV1AvailableNumberGets.
func (mr *MockRequestHandlerMockRecorder) NumberV1AvailableNumberGets(ctx, customerID, pageSize, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1AvailableNumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1AvailableNumberGets), ctx, customerID, pageSize, countryCode)
}

// NumberV1NumberCreate mocks base method.
func (m *MockRequestHandler) NumberV1NumberCreate(ctx context.Context, customerID uuid.UUID, num string, callFlowID, messageFlowID uuid.UUID, name, detail string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberCreate", ctx, customerID, num, callFlowID, messageFlowID, name, detail)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberCreate indicates an expected call of NumberV1NumberCreate.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberCreate(ctx, customerID, num, callFlowID, messageFlowID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberCreate", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberCreate), ctx, customerID, num, callFlowID, messageFlowID, name, detail)
}

// NumberV1NumberDelete mocks base method.
func (m *MockRequestHandler) NumberV1NumberDelete(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberDelete", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberDelete indicates an expected call of NumberV1NumberDelete.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberDelete", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberDelete), ctx, id)
}

// NumberV1NumberGet mocks base method.
func (m *MockRequestHandler) NumberV1NumberGet(ctx context.Context, numberID uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberGet", ctx, numberID)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberGet indicates an expected call of NumberV1NumberGet.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberGet(ctx, numberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberGet", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberGet), ctx, numberID)
}

// NumberV1NumberGets mocks base method.
func (m *MockRequestHandler) NumberV1NumberGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberGets indicates an expected call of NumberV1NumberGets.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberGets), ctx, pageToken, pageSize, filters)
}

// NumberV1NumberRenewByDays mocks base method.
func (m *MockRequestHandler) NumberV1NumberRenewByDays(ctx context.Context, days int) ([]number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberRenewByDays", ctx, days)
	ret0, _ := ret[0].([]number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberRenewByDays indicates an expected call of NumberV1NumberRenewByDays.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberRenewByDays(ctx, days any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberRenewByDays", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberRenewByDays), ctx, days)
}

// NumberV1NumberRenewByHours mocks base method.
func (m *MockRequestHandler) NumberV1NumberRenewByHours(ctx context.Context, hours int) ([]number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberRenewByHours", ctx, hours)
	ret0, _ := ret[0].([]number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberRenewByHours indicates an expected call of NumberV1NumberRenewByHours.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberRenewByHours(ctx, hours any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberRenewByHours", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberRenewByHours), ctx, hours)
}

// NumberV1NumberRenewByTmRenew mocks base method.
func (m *MockRequestHandler) NumberV1NumberRenewByTmRenew(ctx context.Context, tmRenew string) ([]number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberRenewByTmRenew", ctx, tmRenew)
	ret0, _ := ret[0].([]number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberRenewByTmRenew indicates an expected call of NumberV1NumberRenewByTmRenew.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberRenewByTmRenew(ctx, tmRenew any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberRenewByTmRenew", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberRenewByTmRenew), ctx, tmRenew)
}

// NumberV1NumberUpdate mocks base method.
func (m *MockRequestHandler) NumberV1NumberUpdate(ctx context.Context, id, callFlowID, messageFlowID uuid.UUID, name, detail string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberUpdate", ctx, id, callFlowID, messageFlowID, name, detail)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberUpdate indicates an expected call of NumberV1NumberUpdate.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberUpdate(ctx, id, callFlowID, messageFlowID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberUpdate", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberUpdate), ctx, id, callFlowID, messageFlowID, name, detail)
}

// NumberV1NumberUpdateFlowID mocks base method.
func (m *MockRequestHandler) NumberV1NumberUpdateFlowID(ctx context.Context, id, callFlowID, messageFlowID uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberV1NumberUpdateFlowID", ctx, id, callFlowID, messageFlowID)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberV1NumberUpdateFlowID indicates an expected call of NumberV1NumberUpdateFlowID.
func (mr *MockRequestHandlerMockRecorder) NumberV1NumberUpdateFlowID(ctx, id, callFlowID, messageFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberV1NumberUpdateFlowID", reflect.TypeOf((*MockRequestHandler)(nil).NumberV1NumberUpdateFlowID), ctx, id, callFlowID, messageFlowID)
}

// OutdialV1OutdialCreate mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialCreate(ctx context.Context, customerID, campaignID uuid.UUID, name, detail, data string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialCreate", ctx, customerID, campaignID, name, detail, data)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialCreate indicates an expected call of OutdialV1OutdialCreate.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialCreate(ctx, customerID, campaignID, name, detail, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialCreate", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialCreate), ctx, customerID, campaignID, name, detail, data)
}

// OutdialV1OutdialDelete mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialDelete(ctx context.Context, outdialID uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialDelete", ctx, outdialID)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialDelete indicates an expected call of OutdialV1OutdialDelete.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialDelete(ctx, outdialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialDelete", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialDelete), ctx, outdialID)
}

// OutdialV1OutdialGet mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialGet(ctx context.Context, id uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialGet", ctx, id)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialGet indicates an expected call of OutdialV1OutdialGet.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialGet", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialGet), ctx, id)
}

// OutdialV1OutdialGetsByCustomerID mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialGetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialGetsByCustomerID indicates an expected call of OutdialV1OutdialGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialGetsByCustomerID(ctx, customerID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialGetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// OutdialV1OutdialUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialUpdateBasicInfo(ctx context.Context, outdialID uuid.UUID, name, detail string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialUpdateBasicInfo", ctx, outdialID, name, detail)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialUpdateBasicInfo indicates an expected call of OutdialV1OutdialUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialUpdateBasicInfo(ctx, outdialID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialUpdateBasicInfo), ctx, outdialID, name, detail)
}

// OutdialV1OutdialUpdateCampaignID mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialUpdateCampaignID(ctx context.Context, outdialID, campaignID uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialUpdateCampaignID", ctx, outdialID, campaignID)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialUpdateCampaignID indicates an expected call of OutdialV1OutdialUpdateCampaignID.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialUpdateCampaignID(ctx, outdialID, campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialUpdateCampaignID", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialUpdateCampaignID), ctx, outdialID, campaignID)
}

// OutdialV1OutdialUpdateData mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialUpdateData(ctx context.Context, outdialID uuid.UUID, data string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialUpdateData", ctx, outdialID, data)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialUpdateData indicates an expected call of OutdialV1OutdialUpdateData.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialUpdateData(ctx, outdialID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialUpdateData", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialUpdateData), ctx, outdialID, data)
}

// OutdialV1OutdialtargetCreate mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialtargetCreate(ctx context.Context, outdialID uuid.UUID, name, detail, data string, destination0, destination1, destination2, destination3, destination4 *address.Address) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialtargetCreate", ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialtargetCreate indicates an expected call of OutdialV1OutdialtargetCreate.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialtargetCreate(ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialtargetCreate", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialtargetCreate), ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
}

// OutdialV1OutdialtargetDelete mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialtargetDelete(ctx context.Context, outdialtargetID uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialtargetDelete", ctx, outdialtargetID)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialtargetDelete indicates an expected call of OutdialV1OutdialtargetDelete.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialtargetDelete(ctx, outdialtargetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialtargetDelete", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialtargetDelete), ctx, outdialtargetID)
}

// OutdialV1OutdialtargetGet mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialtargetGet(ctx context.Context, outdialtargetID uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialtargetGet", ctx, outdialtargetID)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialtargetGet indicates an expected call of OutdialV1OutdialtargetGet.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialtargetGet(ctx, outdialtargetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialtargetGet", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialtargetGet), ctx, outdialtargetID)
}

// OutdialV1OutdialtargetGetsAvailable mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialtargetGetsAvailable(ctx context.Context, outdialID uuid.UUID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit int) ([]outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialtargetGetsAvailable", ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit)
	ret0, _ := ret[0].([]outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialtargetGetsAvailable indicates an expected call of OutdialV1OutdialtargetGetsAvailable.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialtargetGetsAvailable(ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialtargetGetsAvailable", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialtargetGetsAvailable), ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit)
}

// OutdialV1OutdialtargetGetsByOutdialID mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialtargetGetsByOutdialID(ctx context.Context, outdialID uuid.UUID, pageToken string, pageSize uint64) ([]outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialtargetGetsByOutdialID", ctx, outdialID, pageToken, pageSize)
	ret0, _ := ret[0].([]outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialtargetGetsByOutdialID indicates an expected call of OutdialV1OutdialtargetGetsByOutdialID.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialtargetGetsByOutdialID(ctx, outdialID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialtargetGetsByOutdialID", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialtargetGetsByOutdialID), ctx, outdialID, pageToken, pageSize)
}

// OutdialV1OutdialtargetUpdateStatus mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialtargetUpdateStatus(ctx context.Context, outdialtargetID uuid.UUID, status outdialtarget.Status) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialtargetUpdateStatus", ctx, outdialtargetID, status)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialtargetUpdateStatus indicates an expected call of OutdialV1OutdialtargetUpdateStatus.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialtargetUpdateStatus(ctx, outdialtargetID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialtargetUpdateStatus", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialtargetUpdateStatus), ctx, outdialtargetID, status)
}

// OutdialV1OutdialtargetUpdateStatusProgressing mocks base method.
func (m *MockRequestHandler) OutdialV1OutdialtargetUpdateStatusProgressing(ctx context.Context, outdialtargetID uuid.UUID, destinationIndex int) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialV1OutdialtargetUpdateStatusProgressing", ctx, outdialtargetID, destinationIndex)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialV1OutdialtargetUpdateStatusProgressing indicates an expected call of OutdialV1OutdialtargetUpdateStatusProgressing.
func (mr *MockRequestHandlerMockRecorder) OutdialV1OutdialtargetUpdateStatusProgressing(ctx, outdialtargetID, destinationIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialV1OutdialtargetUpdateStatusProgressing", reflect.TypeOf((*MockRequestHandler)(nil).OutdialV1OutdialtargetUpdateStatusProgressing), ctx, outdialtargetID, destinationIndex)
}

// QueueV1QueueCreate mocks base method.
func (m *MockRequestHandler) QueueV1QueueCreate(ctx context.Context, customerID uuid.UUID, name, detail string, routingMethod queue.RoutingMethod, tagIDs []uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueCreate", ctx, customerID, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueCreate indicates an expected call of QueueV1QueueCreate.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueCreate(ctx, customerID, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueCreate", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueCreate), ctx, customerID, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
}

// QueueV1QueueCreateQueuecall mocks base method.
func (m *MockRequestHandler) QueueV1QueueCreateQueuecall(ctx context.Context, queueID uuid.UUID, referenceType queuecall.ReferenceType, referenceID, referenceActiveflowID, exitActionID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueCreateQueuecall", ctx, queueID, referenceType, referenceID, referenceActiveflowID, exitActionID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueCreateQueuecall indicates an expected call of QueueV1QueueCreateQueuecall.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueCreateQueuecall(ctx, queueID, referenceType, referenceID, referenceActiveflowID, exitActionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueCreateQueuecall", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueCreateQueuecall), ctx, queueID, referenceType, referenceID, referenceActiveflowID, exitActionID)
}

// QueueV1QueueDelete mocks base method.
func (m *MockRequestHandler) QueueV1QueueDelete(ctx context.Context, queueID uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueDelete", ctx, queueID)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueDelete indicates an expected call of QueueV1QueueDelete.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueDelete(ctx, queueID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueDelete", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueDelete), ctx, queueID)
}

// QueueV1QueueExecuteRun mocks base method.
func (m *MockRequestHandler) QueueV1QueueExecuteRun(ctx context.Context, queueID uuid.UUID, executeDelay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueExecuteRun", ctx, queueID, executeDelay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueV1QueueExecuteRun indicates an expected call of QueueV1QueueExecuteRun.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueExecuteRun(ctx, queueID, executeDelay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueExecuteRun", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueExecuteRun), ctx, queueID, executeDelay)
}

// QueueV1QueueGet mocks base method.
func (m *MockRequestHandler) QueueV1QueueGet(ctx context.Context, queueID uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueGet", ctx, queueID)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueGet indicates an expected call of QueueV1QueueGet.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueGet(ctx, queueID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueGet", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueGet), ctx, queueID)
}

// QueueV1QueueGetAgents mocks base method.
func (m *MockRequestHandler) QueueV1QueueGetAgents(ctx context.Context, queueID uuid.UUID, status agent.Status) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueGetAgents", ctx, queueID, status)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueGetAgents indicates an expected call of QueueV1QueueGetAgents.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueGetAgents(ctx, queueID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueGetAgents", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueGetAgents), ctx, queueID, status)
}

// QueueV1QueueGets mocks base method.
func (m *MockRequestHandler) QueueV1QueueGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueGets indicates an expected call of QueueV1QueueGets.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueGets", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueGets), ctx, pageToken, pageSize, filters)
}

// QueueV1QueueUpdate mocks base method.
func (m *MockRequestHandler) QueueV1QueueUpdate(ctx context.Context, queueID uuid.UUID, name, detail string, routingMethod queue.RoutingMethod, tagIDs []uuid.UUID, waitActions []action.Action, waitTimeout, serviceTimeout int) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueUpdate", ctx, queueID, name, detail, routingMethod, tagIDs, waitActions, waitTimeout, serviceTimeout)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueUpdate indicates an expected call of QueueV1QueueUpdate.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueUpdate(ctx, queueID, name, detail, routingMethod, tagIDs, waitActions, waitTimeout, serviceTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueUpdate", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueUpdate), ctx, queueID, name, detail, routingMethod, tagIDs, waitActions, waitTimeout, serviceTimeout)
}

// QueueV1QueueUpdateActions mocks base method.
func (m *MockRequestHandler) QueueV1QueueUpdateActions(ctx context.Context, queueID uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueUpdateActions", ctx, queueID, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueUpdateActions indicates an expected call of QueueV1QueueUpdateActions.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueUpdateActions(ctx, queueID, waitActions, timeoutWait, timeoutService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueUpdateActions", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueUpdateActions), ctx, queueID, waitActions, timeoutWait, timeoutService)
}

// QueueV1QueueUpdateExecute mocks base method.
func (m *MockRequestHandler) QueueV1QueueUpdateExecute(ctx context.Context, queueID uuid.UUID, execute queue.Execute) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueUpdateExecute", ctx, queueID, execute)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueUpdateExecute indicates an expected call of QueueV1QueueUpdateExecute.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueUpdateExecute(ctx, queueID, execute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueUpdateExecute", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueUpdateExecute), ctx, queueID, execute)
}

// QueueV1QueueUpdateRoutingMethod mocks base method.
func (m *MockRequestHandler) QueueV1QueueUpdateRoutingMethod(ctx context.Context, queueID uuid.UUID, routingMethod queue.RoutingMethod) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueUpdateRoutingMethod", ctx, queueID, routingMethod)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueUpdateRoutingMethod indicates an expected call of QueueV1QueueUpdateRoutingMethod.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueUpdateRoutingMethod(ctx, queueID, routingMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueUpdateRoutingMethod", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueUpdateRoutingMethod), ctx, queueID, routingMethod)
}

// QueueV1QueueUpdateTagIDs mocks base method.
func (m *MockRequestHandler) QueueV1QueueUpdateTagIDs(ctx context.Context, queueID uuid.UUID, tagIDs []uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueueUpdateTagIDs", ctx, queueID, tagIDs)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueueUpdateTagIDs indicates an expected call of QueueV1QueueUpdateTagIDs.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueueUpdateTagIDs(ctx, queueID, tagIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueueUpdateTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueueUpdateTagIDs), ctx, queueID, tagIDs)
}

// QueueV1QueuecallDelete mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallDelete(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallDelete", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallDelete indicates an expected call of QueueV1QueuecallDelete.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallDelete(ctx, queuecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallDelete", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallDelete), ctx, queuecallID)
}

// QueueV1QueuecallExecute mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallExecute(ctx context.Context, queuecallID, agentID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallExecute", ctx, queuecallID, agentID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallExecute indicates an expected call of QueueV1QueuecallExecute.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallExecute(ctx, queuecallID, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallExecute", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallExecute), ctx, queuecallID, agentID)
}

// QueueV1QueuecallGet mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallGet(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallGet", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallGet indicates an expected call of QueueV1QueuecallGet.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallGet(ctx, queuecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallGet", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallGet), ctx, queuecallID)
}

// QueueV1QueuecallGetByReferenceID mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallGetByReferenceID indicates an expected call of QueueV1QueuecallGetByReferenceID.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallGetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallGetByReferenceID", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallGetByReferenceID), ctx, referenceID)
}

// QueueV1QueuecallGets mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallGets indicates an expected call of QueueV1QueuecallGets.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallGets", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallGets), ctx, pageToken, pageSize, filters)
}

// QueueV1QueuecallHealthCheck mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallHealthCheck(ctx context.Context, id uuid.UUID, delay, retryCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallHealthCheck", ctx, id, delay, retryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueV1QueuecallHealthCheck indicates an expected call of QueueV1QueuecallHealthCheck.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallHealthCheck(ctx, id, delay, retryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallHealthCheck", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallHealthCheck), ctx, id, delay, retryCount)
}

// QueueV1QueuecallKick mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallKick(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallKick", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallKick indicates an expected call of QueueV1QueuecallKick.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallKick(ctx, queuecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallKick", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallKick), ctx, queuecallID)
}

// QueueV1QueuecallKickByReferenceID mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallKickByReferenceID(ctx context.Context, referenceID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallKickByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallKickByReferenceID indicates an expected call of QueueV1QueuecallKickByReferenceID.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallKickByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallKickByReferenceID", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallKickByReferenceID), ctx, referenceID)
}

// QueueV1QueuecallTimeoutService mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallTimeoutService(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallTimeoutService", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueV1QueuecallTimeoutService indicates an expected call of QueueV1QueuecallTimeoutService.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallTimeoutService(ctx, queuecallID, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallTimeoutService", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallTimeoutService), ctx, queuecallID, delay)
}

// QueueV1QueuecallTimeoutWait mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallTimeoutWait(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallTimeoutWait", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueV1QueuecallTimeoutWait indicates an expected call of QueueV1QueuecallTimeoutWait.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallTimeoutWait(ctx, queuecallID, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallTimeoutWait", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallTimeoutWait), ctx, queuecallID, delay)
}

// QueueV1QueuecallUpdateStatusWaiting mocks base method.
func (m *MockRequestHandler) QueueV1QueuecallUpdateStatusWaiting(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1QueuecallUpdateStatusWaiting", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1QueuecallUpdateStatusWaiting indicates an expected call of QueueV1QueuecallUpdateStatusWaiting.
func (mr *MockRequestHandlerMockRecorder) QueueV1QueuecallUpdateStatusWaiting(ctx, queuecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1QueuecallUpdateStatusWaiting", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1QueuecallUpdateStatusWaiting), ctx, queuecallID)
}

// QueueV1ServiceTypeQueuecallStart mocks base method.
func (m *MockRequestHandler) QueueV1ServiceTypeQueuecallStart(ctx context.Context, queueID, activeflowID uuid.UUID, referenceType queuecall.ReferenceType, referenceID uuid.UUID) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueV1ServiceTypeQueuecallStart", ctx, queueID, activeflowID, referenceType, referenceID)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueV1ServiceTypeQueuecallStart indicates an expected call of QueueV1ServiceTypeQueuecallStart.
func (mr *MockRequestHandlerMockRecorder) QueueV1ServiceTypeQueuecallStart(ctx, queueID, activeflowID, referenceType, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueV1ServiceTypeQueuecallStart", reflect.TypeOf((*MockRequestHandler)(nil).QueueV1ServiceTypeQueuecallStart), ctx, queueID, activeflowID, referenceType, referenceID)
}

// RegistrarV1ContactGets mocks base method.
func (m *MockRequestHandler) RegistrarV1ContactGets(ctx context.Context, customerID uuid.UUID, extension string) ([]astcontact.AstContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1ContactGets", ctx, customerID, extension)
	ret0, _ := ret[0].([]astcontact.AstContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1ContactGets indicates an expected call of RegistrarV1ContactGets.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1ContactGets(ctx, customerID, extension any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1ContactGets", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1ContactGets), ctx, customerID, extension)
}

// RegistrarV1ContactRefresh mocks base method.
func (m *MockRequestHandler) RegistrarV1ContactRefresh(ctx context.Context, customerID uuid.UUID, extension string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1ContactRefresh", ctx, customerID, extension)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistrarV1ContactRefresh indicates an expected call of RegistrarV1ContactRefresh.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1ContactRefresh(ctx, customerID, extension any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1ContactRefresh", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1ContactRefresh), ctx, customerID, extension)
}

// RegistrarV1ExtensionCreate mocks base method.
func (m *MockRequestHandler) RegistrarV1ExtensionCreate(ctx context.Context, customerID uuid.UUID, ext, password, name, detail string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1ExtensionCreate", ctx, customerID, ext, password, name, detail)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1ExtensionCreate indicates an expected call of RegistrarV1ExtensionCreate.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1ExtensionCreate(ctx, customerID, ext, password, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1ExtensionCreate", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1ExtensionCreate), ctx, customerID, ext, password, name, detail)
}

// RegistrarV1ExtensionDelete mocks base method.
func (m *MockRequestHandler) RegistrarV1ExtensionDelete(ctx context.Context, extensionID uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1ExtensionDelete", ctx, extensionID)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1ExtensionDelete indicates an expected call of RegistrarV1ExtensionDelete.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1ExtensionDelete(ctx, extensionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1ExtensionDelete", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1ExtensionDelete), ctx, extensionID)
}

// RegistrarV1ExtensionGet mocks base method.
func (m *MockRequestHandler) RegistrarV1ExtensionGet(ctx context.Context, extensionID uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1ExtensionGet", ctx, extensionID)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1ExtensionGet indicates an expected call of RegistrarV1ExtensionGet.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1ExtensionGet(ctx, extensionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1ExtensionGet", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1ExtensionGet), ctx, extensionID)
}

// RegistrarV1ExtensionGets mocks base method.
func (m *MockRequestHandler) RegistrarV1ExtensionGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1ExtensionGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1ExtensionGets indicates an expected call of RegistrarV1ExtensionGets.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1ExtensionGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1ExtensionGets", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1ExtensionGets), ctx, pageToken, pageSize, filters)
}

// RegistrarV1ExtensionUpdate mocks base method.
func (m *MockRequestHandler) RegistrarV1ExtensionUpdate(ctx context.Context, id uuid.UUID, name, detail, password string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1ExtensionUpdate", ctx, id, name, detail, password)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1ExtensionUpdate indicates an expected call of RegistrarV1ExtensionUpdate.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1ExtensionUpdate(ctx, id, name, detail, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1ExtensionUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1ExtensionUpdate), ctx, id, name, detail, password)
}

// RegistrarV1TrunkCreate mocks base method.
func (m *MockRequestHandler) RegistrarV1TrunkCreate(ctx context.Context, customerID uuid.UUID, name, detail, domainName string, authTypes []sipauth.AuthType, username, password string, allowedIPs []string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1TrunkCreate", ctx, customerID, name, detail, domainName, authTypes, username, password, allowedIPs)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1TrunkCreate indicates an expected call of RegistrarV1TrunkCreate.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1TrunkCreate(ctx, customerID, name, detail, domainName, authTypes, username, password, allowedIPs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1TrunkCreate", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1TrunkCreate), ctx, customerID, name, detail, domainName, authTypes, username, password, allowedIPs)
}

// RegistrarV1TrunkDelete mocks base method.
func (m *MockRequestHandler) RegistrarV1TrunkDelete(ctx context.Context, trunkID uuid.UUID) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1TrunkDelete", ctx, trunkID)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1TrunkDelete indicates an expected call of RegistrarV1TrunkDelete.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1TrunkDelete(ctx, trunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1TrunkDelete", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1TrunkDelete), ctx, trunkID)
}

// RegistrarV1TrunkGet mocks base method.
func (m *MockRequestHandler) RegistrarV1TrunkGet(ctx context.Context, trunkID uuid.UUID) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1TrunkGet", ctx, trunkID)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1TrunkGet indicates an expected call of RegistrarV1TrunkGet.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1TrunkGet(ctx, trunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1TrunkGet", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1TrunkGet), ctx, trunkID)
}

// RegistrarV1TrunkGetByDomainName mocks base method.
func (m *MockRequestHandler) RegistrarV1TrunkGetByDomainName(ctx context.Context, domainName string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1TrunkGetByDomainName", ctx, domainName)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1TrunkGetByDomainName indicates an expected call of RegistrarV1TrunkGetByDomainName.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1TrunkGetByDomainName(ctx, domainName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1TrunkGetByDomainName", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1TrunkGetByDomainName), ctx, domainName)
}

// RegistrarV1TrunkGets mocks base method.
func (m *MockRequestHandler) RegistrarV1TrunkGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1TrunkGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1TrunkGets indicates an expected call of RegistrarV1TrunkGets.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1TrunkGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1TrunkGets", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1TrunkGets), ctx, pageToken, pageSize, filters)
}

// RegistrarV1TrunkUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) RegistrarV1TrunkUpdateBasicInfo(ctx context.Context, trunkID uuid.UUID, name, detail string, authTypes []sipauth.AuthType, username, password string, allowedIPs []string) (*trunk.Trunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrarV1TrunkUpdateBasicInfo", ctx, trunkID, name, detail, authTypes, username, password, allowedIPs)
	ret0, _ := ret[0].(*trunk.Trunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistrarV1TrunkUpdateBasicInfo indicates an expected call of RegistrarV1TrunkUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) RegistrarV1TrunkUpdateBasicInfo(ctx, trunkID, name, detail, authTypes, username, password, allowedIPs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrarV1TrunkUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).RegistrarV1TrunkUpdateBasicInfo), ctx, trunkID, name, detail, authTypes, username, password, allowedIPs)
}

// RouteV1DialrouteGets mocks base method.
func (m *MockRequestHandler) RouteV1DialrouteGets(ctx context.Context, customerID uuid.UUID, target string) ([]route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1DialrouteGets", ctx, customerID, target)
	ret0, _ := ret[0].([]route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1DialrouteGets indicates an expected call of RouteV1DialrouteGets.
func (mr *MockRequestHandlerMockRecorder) RouteV1DialrouteGets(ctx, customerID, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1DialrouteGets", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1DialrouteGets), ctx, customerID, target)
}

// RouteV1ProviderCreate mocks base method.
func (m *MockRequestHandler) RouteV1ProviderCreate(ctx context.Context, provierType provider.Type, hostname, techPrefix, techPostfix string, techHeaders map[string]string, name, detail string) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1ProviderCreate", ctx, provierType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1ProviderCreate indicates an expected call of RouteV1ProviderCreate.
func (mr *MockRequestHandlerMockRecorder) RouteV1ProviderCreate(ctx, provierType, hostname, techPrefix, techPostfix, techHeaders, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1ProviderCreate", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1ProviderCreate), ctx, provierType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
}

// RouteV1ProviderDelete mocks base method.
func (m *MockRequestHandler) RouteV1ProviderDelete(ctx context.Context, providerID uuid.UUID) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1ProviderDelete", ctx, providerID)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1ProviderDelete indicates an expected call of RouteV1ProviderDelete.
func (mr *MockRequestHandlerMockRecorder) RouteV1ProviderDelete(ctx, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1ProviderDelete", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1ProviderDelete), ctx, providerID)
}

// RouteV1ProviderGet mocks base method.
func (m *MockRequestHandler) RouteV1ProviderGet(ctx context.Context, providerID uuid.UUID) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1ProviderGet", ctx, providerID)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1ProviderGet indicates an expected call of RouteV1ProviderGet.
func (mr *MockRequestHandlerMockRecorder) RouteV1ProviderGet(ctx, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1ProviderGet", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1ProviderGet), ctx, providerID)
}

// RouteV1ProviderGets mocks base method.
func (m *MockRequestHandler) RouteV1ProviderGets(ctx context.Context, pageToken string, pageSize uint64) ([]provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1ProviderGets", ctx, pageToken, pageSize)
	ret0, _ := ret[0].([]provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1ProviderGets indicates an expected call of RouteV1ProviderGets.
func (mr *MockRequestHandlerMockRecorder) RouteV1ProviderGets(ctx, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1ProviderGets", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1ProviderGets), ctx, pageToken, pageSize)
}

// RouteV1ProviderUpdate mocks base method.
func (m *MockRequestHandler) RouteV1ProviderUpdate(ctx context.Context, providerID uuid.UUID, providerType provider.Type, hostname, techPrefix, techPostfix string, techHeaders map[string]string, name, detail string) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1ProviderUpdate", ctx, providerID, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1ProviderUpdate indicates an expected call of RouteV1ProviderUpdate.
func (mr *MockRequestHandlerMockRecorder) RouteV1ProviderUpdate(ctx, providerID, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1ProviderUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1ProviderUpdate), ctx, providerID, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
}

// RouteV1RouteCreate mocks base method.
func (m *MockRequestHandler) RouteV1RouteCreate(ctx context.Context, customerID uuid.UUID, name, detail string, providerID uuid.UUID, priority int, target string) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1RouteCreate", ctx, customerID, name, detail, providerID, priority, target)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1RouteCreate indicates an expected call of RouteV1RouteCreate.
func (mr *MockRequestHandlerMockRecorder) RouteV1RouteCreate(ctx, customerID, name, detail, providerID, priority, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1RouteCreate", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1RouteCreate), ctx, customerID, name, detail, providerID, priority, target)
}

// RouteV1RouteDelete mocks base method.
func (m *MockRequestHandler) RouteV1RouteDelete(ctx context.Context, routeID uuid.UUID) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1RouteDelete", ctx, routeID)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1RouteDelete indicates an expected call of RouteV1RouteDelete.
func (mr *MockRequestHandlerMockRecorder) RouteV1RouteDelete(ctx, routeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1RouteDelete", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1RouteDelete), ctx, routeID)
}

// RouteV1RouteGet mocks base method.
func (m *MockRequestHandler) RouteV1RouteGet(ctx context.Context, routeID uuid.UUID) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1RouteGet", ctx, routeID)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1RouteGet indicates an expected call of RouteV1RouteGet.
func (mr *MockRequestHandlerMockRecorder) RouteV1RouteGet(ctx, routeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1RouteGet", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1RouteGet), ctx, routeID)
}

// RouteV1RouteGets mocks base method.
func (m *MockRequestHandler) RouteV1RouteGets(ctx context.Context, pageToken string, pageSize uint64) ([]route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1RouteGets", ctx, pageToken, pageSize)
	ret0, _ := ret[0].([]route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1RouteGets indicates an expected call of RouteV1RouteGets.
func (mr *MockRequestHandlerMockRecorder) RouteV1RouteGets(ctx, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1RouteGets", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1RouteGets), ctx, pageToken, pageSize)
}

// RouteV1RouteGetsByCustomerID mocks base method.
func (m *MockRequestHandler) RouteV1RouteGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1RouteGetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1RouteGetsByCustomerID indicates an expected call of RouteV1RouteGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) RouteV1RouteGetsByCustomerID(ctx, customerID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1RouteGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1RouteGetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// RouteV1RouteUpdate mocks base method.
func (m *MockRequestHandler) RouteV1RouteUpdate(ctx context.Context, routeID uuid.UUID, name, detail string, providerID uuid.UUID, priority int, target string) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteV1RouteUpdate", ctx, routeID, name, detail, providerID, priority, target)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteV1RouteUpdate indicates an expected call of RouteV1RouteUpdate.
func (mr *MockRequestHandlerMockRecorder) RouteV1RouteUpdate(ctx, routeID, name, detail, providerID, priority, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteV1RouteUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RouteV1RouteUpdate), ctx, routeID, name, detail, providerID, priority, target)
}

// SendRequest mocks base method.
func (m *MockRequestHandler) SendRequest(ctx context.Context, queue outline.QueueName, uri string, method sock.RequestMethod, timeout, delay int, dataType string, data json.RawMessage) (*sock.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, queue, uri, method, timeout, delay, dataType, data)
	ret0, _ := ret[0].(*sock.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockRequestHandlerMockRecorder) SendRequest(ctx, queue, uri, method, timeout, delay, dataType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockRequestHandler)(nil).SendRequest), ctx, queue, uri, method, timeout, delay, dataType, data)
}

// StorageV1AccountCreate mocks base method.
func (m *MockRequestHandler) StorageV1AccountCreate(ctx context.Context, customerID uuid.UUID) (*account1.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1AccountCreate", ctx, customerID)
	ret0, _ := ret[0].(*account1.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1AccountCreate indicates an expected call of StorageV1AccountCreate.
func (mr *MockRequestHandlerMockRecorder) StorageV1AccountCreate(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1AccountCreate", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1AccountCreate), ctx, customerID)
}

// StorageV1AccountDelete mocks base method.
func (m *MockRequestHandler) StorageV1AccountDelete(ctx context.Context, fileID uuid.UUID, requestTimeout int) (*account1.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1AccountDelete", ctx, fileID, requestTimeout)
	ret0, _ := ret[0].(*account1.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1AccountDelete indicates an expected call of StorageV1AccountDelete.
func (mr *MockRequestHandlerMockRecorder) StorageV1AccountDelete(ctx, fileID, requestTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1AccountDelete", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1AccountDelete), ctx, fileID, requestTimeout)
}

// StorageV1AccountGet mocks base method.
func (m *MockRequestHandler) StorageV1AccountGet(ctx context.Context, accountID uuid.UUID) (*account1.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1AccountGet", ctx, accountID)
	ret0, _ := ret[0].(*account1.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1AccountGet indicates an expected call of StorageV1AccountGet.
func (mr *MockRequestHandlerMockRecorder) StorageV1AccountGet(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1AccountGet", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1AccountGet), ctx, accountID)
}

// StorageV1AccountGets mocks base method.
func (m *MockRequestHandler) StorageV1AccountGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]account1.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1AccountGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]account1.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1AccountGets indicates an expected call of StorageV1AccountGets.
func (mr *MockRequestHandlerMockRecorder) StorageV1AccountGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1AccountGets", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1AccountGets), ctx, pageToken, pageSize, filters)
}

// StorageV1CompressfileCreate mocks base method.
func (m *MockRequestHandler) StorageV1CompressfileCreate(ctx context.Context, referenceIDs, fileIDs []uuid.UUID, requestTimeout int) (*compress_file.CompressFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1CompressfileCreate", ctx, referenceIDs, fileIDs, requestTimeout)
	ret0, _ := ret[0].(*compress_file.CompressFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1CompressfileCreate indicates an expected call of StorageV1CompressfileCreate.
func (mr *MockRequestHandlerMockRecorder) StorageV1CompressfileCreate(ctx, referenceIDs, fileIDs, requestTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1CompressfileCreate", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1CompressfileCreate), ctx, referenceIDs, fileIDs, requestTimeout)
}

// StorageV1FileCreate mocks base method.
func (m *MockRequestHandler) StorageV1FileCreate(ctx context.Context, customerID, ownerID uuid.UUID, referenceType file.ReferenceType, referenceID uuid.UUID, name, detail, filename, bucketName, filepath string, requestTimeout int) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1FileCreate", ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath, requestTimeout)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1FileCreate indicates an expected call of StorageV1FileCreate.
func (mr *MockRequestHandlerMockRecorder) StorageV1FileCreate(ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath, requestTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1FileCreate", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1FileCreate), ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath, requestTimeout)
}

// StorageV1FileCreateWithDelay mocks base method.
func (m *MockRequestHandler) StorageV1FileCreateWithDelay(ctx context.Context, customerID, ownerID uuid.UUID, referenceType file.ReferenceType, referenceID uuid.UUID, name, detail, filename, bucketName, filepath string, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1FileCreateWithDelay", ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageV1FileCreateWithDelay indicates an expected call of StorageV1FileCreateWithDelay.
func (mr *MockRequestHandlerMockRecorder) StorageV1FileCreateWithDelay(ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1FileCreateWithDelay", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1FileCreateWithDelay), ctx, customerID, ownerID, referenceType, referenceID, name, detail, filename, bucketName, filepath, delay)
}

// StorageV1FileDelete mocks base method.
func (m *MockRequestHandler) StorageV1FileDelete(ctx context.Context, fileID uuid.UUID, requestTimeout int) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1FileDelete", ctx, fileID, requestTimeout)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1FileDelete indicates an expected call of StorageV1FileDelete.
func (mr *MockRequestHandlerMockRecorder) StorageV1FileDelete(ctx, fileID, requestTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1FileDelete", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1FileDelete), ctx, fileID, requestTimeout)
}

// StorageV1FileGet mocks base method.
func (m *MockRequestHandler) StorageV1FileGet(ctx context.Context, fileID uuid.UUID) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1FileGet", ctx, fileID)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1FileGet indicates an expected call of StorageV1FileGet.
func (mr *MockRequestHandlerMockRecorder) StorageV1FileGet(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1FileGet", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1FileGet), ctx, fileID)
}

// StorageV1FileGets mocks base method.
func (m *MockRequestHandler) StorageV1FileGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1FileGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1FileGets indicates an expected call of StorageV1FileGets.
func (mr *MockRequestHandlerMockRecorder) StorageV1FileGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1FileGets", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1FileGets), ctx, pageToken, pageSize, filters)
}

// StorageV1RecordingDelete mocks base method.
func (m *MockRequestHandler) StorageV1RecordingDelete(ctx context.Context, recordingID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1RecordingDelete", ctx, recordingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageV1RecordingDelete indicates an expected call of StorageV1RecordingDelete.
func (mr *MockRequestHandlerMockRecorder) StorageV1RecordingDelete(ctx, recordingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1RecordingDelete", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1RecordingDelete), ctx, recordingID)
}

// StorageV1RecordingGet mocks base method.
func (m *MockRequestHandler) StorageV1RecordingGet(ctx context.Context, id uuid.UUID, requestTimeout int) (*bucketfile.BucketFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1RecordingGet", ctx, id, requestTimeout)
	ret0, _ := ret[0].(*bucketfile.BucketFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageV1RecordingGet indicates an expected call of StorageV1RecordingGet.
func (mr *MockRequestHandlerMockRecorder) StorageV1RecordingGet(ctx, id, requestTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1RecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).StorageV1RecordingGet), ctx, id, requestTimeout)
}

// TTSV1SpeecheCreate mocks base method.
func (m *MockRequestHandler) TTSV1SpeecheCreate(ctx context.Context, callID uuid.UUID, text string, gender tts.Gender, language string, timeout int) (*tts.TTS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTSV1SpeecheCreate", ctx, callID, text, gender, language, timeout)
	ret0, _ := ret[0].(*tts.TTS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTSV1SpeecheCreate indicates an expected call of TTSV1SpeecheCreate.
func (mr *MockRequestHandlerMockRecorder) TTSV1SpeecheCreate(ctx, callID, text, gender, language, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTSV1SpeecheCreate", reflect.TypeOf((*MockRequestHandler)(nil).TTSV1SpeecheCreate), ctx, callID, text, gender, language, timeout)
}

// TagV1TagCreate mocks base method.
func (m *MockRequestHandler) TagV1TagCreate(ctx context.Context, customerID uuid.UUID, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagV1TagCreate", ctx, customerID, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagV1TagCreate indicates an expected call of TagV1TagCreate.
func (mr *MockRequestHandlerMockRecorder) TagV1TagCreate(ctx, customerID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagV1TagCreate", reflect.TypeOf((*MockRequestHandler)(nil).TagV1TagCreate), ctx, customerID, name, detail)
}

// TagV1TagDelete mocks base method.
func (m *MockRequestHandler) TagV1TagDelete(ctx context.Context, tagID uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagV1TagDelete", ctx, tagID)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagV1TagDelete indicates an expected call of TagV1TagDelete.
func (mr *MockRequestHandlerMockRecorder) TagV1TagDelete(ctx, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagV1TagDelete", reflect.TypeOf((*MockRequestHandler)(nil).TagV1TagDelete), ctx, tagID)
}

// TagV1TagGet mocks base method.
func (m *MockRequestHandler) TagV1TagGet(ctx context.Context, tagID uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagV1TagGet", ctx, tagID)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagV1TagGet indicates an expected call of TagV1TagGet.
func (mr *MockRequestHandlerMockRecorder) TagV1TagGet(ctx, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagV1TagGet", reflect.TypeOf((*MockRequestHandler)(nil).TagV1TagGet), ctx, tagID)
}

// TagV1TagGets mocks base method.
func (m *MockRequestHandler) TagV1TagGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagV1TagGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagV1TagGets indicates an expected call of TagV1TagGets.
func (mr *MockRequestHandlerMockRecorder) TagV1TagGets(ctx, customerID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagV1TagGets", reflect.TypeOf((*MockRequestHandler)(nil).TagV1TagGets), ctx, customerID, pageToken, pageSize)
}

// TagV1TagUpdate mocks base method.
func (m *MockRequestHandler) TagV1TagUpdate(ctx context.Context, tagID uuid.UUID, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagV1TagUpdate", ctx, tagID, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagV1TagUpdate indicates an expected call of TagV1TagUpdate.
func (mr *MockRequestHandlerMockRecorder) TagV1TagUpdate(ctx, tagID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagV1TagUpdate", reflect.TypeOf((*MockRequestHandler)(nil).TagV1TagUpdate), ctx, tagID, name, detail)
}

// TranscribeV1TranscribeDelete mocks base method.
func (m *MockRequestHandler) TranscribeV1TranscribeDelete(ctx context.Context, transcribeID uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeV1TranscribeDelete", ctx, transcribeID)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeV1TranscribeDelete indicates an expected call of TranscribeV1TranscribeDelete.
func (mr *MockRequestHandlerMockRecorder) TranscribeV1TranscribeDelete(ctx, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeV1TranscribeDelete", reflect.TypeOf((*MockRequestHandler)(nil).TranscribeV1TranscribeDelete), ctx, transcribeID)
}

// TranscribeV1TranscribeGet mocks base method.
func (m *MockRequestHandler) TranscribeV1TranscribeGet(ctx context.Context, transcribeID uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeV1TranscribeGet", ctx, transcribeID)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeV1TranscribeGet indicates an expected call of TranscribeV1TranscribeGet.
func (mr *MockRequestHandlerMockRecorder) TranscribeV1TranscribeGet(ctx, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeV1TranscribeGet", reflect.TypeOf((*MockRequestHandler)(nil).TranscribeV1TranscribeGet), ctx, transcribeID)
}

// TranscribeV1TranscribeGets mocks base method.
func (m *MockRequestHandler) TranscribeV1TranscribeGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeV1TranscribeGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeV1TranscribeGets indicates an expected call of TranscribeV1TranscribeGets.
func (mr *MockRequestHandlerMockRecorder) TranscribeV1TranscribeGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeV1TranscribeGets", reflect.TypeOf((*MockRequestHandler)(nil).TranscribeV1TranscribeGets), ctx, pageToken, pageSize, filters)
}

// TranscribeV1TranscribeHealthCheck mocks base method.
func (m *MockRequestHandler) TranscribeV1TranscribeHealthCheck(ctx context.Context, id uuid.UUID, delay, retryCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeV1TranscribeHealthCheck", ctx, id, delay, retryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeV1TranscribeHealthCheck indicates an expected call of TranscribeV1TranscribeHealthCheck.
func (mr *MockRequestHandlerMockRecorder) TranscribeV1TranscribeHealthCheck(ctx, id, delay, retryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeV1TranscribeHealthCheck", reflect.TypeOf((*MockRequestHandler)(nil).TranscribeV1TranscribeHealthCheck), ctx, id, delay, retryCount)
}

// TranscribeV1TranscribeStart mocks base method.
func (m *MockRequestHandler) TranscribeV1TranscribeStart(ctx context.Context, customerID uuid.UUID, referenceType transcribe.ReferenceType, referenceID uuid.UUID, language string, direction transcribe.Direction) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeV1TranscribeStart", ctx, customerID, referenceType, referenceID, language, direction)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeV1TranscribeStart indicates an expected call of TranscribeV1TranscribeStart.
func (mr *MockRequestHandlerMockRecorder) TranscribeV1TranscribeStart(ctx, customerID, referenceType, referenceID, language, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeV1TranscribeStart", reflect.TypeOf((*MockRequestHandler)(nil).TranscribeV1TranscribeStart), ctx, customerID, referenceType, referenceID, language, direction)
}

// TranscribeV1TranscribeStop mocks base method.
func (m *MockRequestHandler) TranscribeV1TranscribeStop(ctx context.Context, transcribeID uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeV1TranscribeStop", ctx, transcribeID)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeV1TranscribeStop indicates an expected call of TranscribeV1TranscribeStop.
func (mr *MockRequestHandlerMockRecorder) TranscribeV1TranscribeStop(ctx, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeV1TranscribeStop", reflect.TypeOf((*MockRequestHandler)(nil).TranscribeV1TranscribeStop), ctx, transcribeID)
}

// TranscribeV1TranscriptGets mocks base method.
func (m *MockRequestHandler) TranscribeV1TranscriptGets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]transcript.Transcript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeV1TranscriptGets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]transcript.Transcript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeV1TranscriptGets indicates an expected call of TranscribeV1TranscriptGets.
func (mr *MockRequestHandlerMockRecorder) TranscribeV1TranscriptGets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeV1TranscriptGets", reflect.TypeOf((*MockRequestHandler)(nil).TranscribeV1TranscriptGets), ctx, pageToken, pageSize, filters)
}

// TransferV1TransferStart mocks base method.
func (m *MockRequestHandler) TransferV1TransferStart(ctx context.Context, transferType transfer.Type, transfererCallID uuid.UUID, transfereeAddresses []address.Address) (*transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferV1TransferStart", ctx, transferType, transfererCallID, transfereeAddresses)
	ret0, _ := ret[0].(*transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferV1TransferStart indicates an expected call of TransferV1TransferStart.
func (mr *MockRequestHandlerMockRecorder) TransferV1TransferStart(ctx, transferType, transfererCallID, transfereeAddresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferV1TransferStart", reflect.TypeOf((*MockRequestHandler)(nil).TransferV1TransferStart), ctx, transferType, transfererCallID, transfereeAddresses)
}

// WebhookV1WebhookSend mocks base method.
func (m *MockRequestHandler) WebhookV1WebhookSend(ctx context.Context, customerID uuid.UUID, dataType webhook.DataType, messageType string, messageData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookV1WebhookSend", ctx, customerID, dataType, messageType, messageData)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebhookV1WebhookSend indicates an expected call of WebhookV1WebhookSend.
func (mr *MockRequestHandlerMockRecorder) WebhookV1WebhookSend(ctx, customerID, dataType, messageType, messageData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookV1WebhookSend", reflect.TypeOf((*MockRequestHandler)(nil).WebhookV1WebhookSend), ctx, customerID, dataType, messageType, messageData)
}

// WebhookV1WebhookSendToDestination mocks base method.
func (m *MockRequestHandler) WebhookV1WebhookSendToDestination(ctx context.Context, customerID uuid.UUID, destination string, method webhook.MethodType, dataType webhook.DataType, messageData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookV1WebhookSendToDestination", ctx, customerID, destination, method, dataType, messageData)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebhookV1WebhookSendToDestination indicates an expected call of WebhookV1WebhookSendToDestination.
func (mr *MockRequestHandlerMockRecorder) WebhookV1WebhookSendToDestination(ctx, customerID, destination, method, dataType, messageData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookV1WebhookSendToDestination", reflect.TypeOf((*MockRequestHandler)(nil).WebhookV1WebhookSendToDestination), ctx, customerID, destination, method, dataType, messageData)
}
