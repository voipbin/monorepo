// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go
//
// Generated by this command:
//
//	mockgen -destination ./mock_sockhandler.go -package sockhandler -source ./main.go
//

// Package sockhandler is a generated GoMock package.
package sockhandler

import (
	context "context"
	sock "monorepo/bin-common-handler/models/sock"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSockHandler is a mock of SockHandler interface.
type MockSockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSockHandlerMockRecorder
	isgomock struct{}
}

// MockSockHandlerMockRecorder is the mock recorder for MockSockHandler.
type MockSockHandlerMockRecorder struct {
	mock *MockSockHandler
}

// NewMockSockHandler creates a new mock instance.
func NewMockSockHandler(ctrl *gomock.Controller) *MockSockHandler {
	mock := &MockSockHandler{ctrl: ctrl}
	mock.recorder = &MockSockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSockHandler) EXPECT() *MockSockHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSockHandler) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSockHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSockHandler)(nil).Close))
}

// Connect mocks base method.
func (m *MockSockHandler) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockSockHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSockHandler)(nil).Connect))
}

// ConsumeMessage mocks base method.
func (m *MockSockHandler) ConsumeMessage(ctx context.Context, queueName, consumerName string, exclusive, noLocal, noWait bool, numWorkers int, messageConsume sock.CbMsgConsume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessage", ctx, queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeMessage indicates an expected call of ConsumeMessage.
func (mr *MockSockHandlerMockRecorder) ConsumeMessage(ctx, queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockSockHandler)(nil).ConsumeMessage), ctx, queueName, consumerName, exclusive, noLocal, noWait, numWorkers, messageConsume)
}

// ConsumeRPC mocks base method.
func (m *MockSockHandler) ConsumeRPC(ctx context.Context, queueName, consumerName string, exclusive, noLocal, noWait bool, workerNum int, cbConsume sock.CbMsgRPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRPC", ctx, queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRPC indicates an expected call of ConsumeRPC.
func (mr *MockSockHandlerMockRecorder) ConsumeRPC(ctx, queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRPC", reflect.TypeOf((*MockSockHandler)(nil).ConsumeRPC), ctx, queueName, consumerName, exclusive, noLocal, noWait, workerNum, cbConsume)
}

// EventPublish mocks base method.
func (m *MockSockHandler) EventPublish(topic, key string, evt *sock.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventPublish", topic, key, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventPublish indicates an expected call of EventPublish.
func (mr *MockSockHandlerMockRecorder) EventPublish(topic, key, evt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPublish", reflect.TypeOf((*MockSockHandler)(nil).EventPublish), topic, key, evt)
}

// EventPublishWithDelay mocks base method.
func (m *MockSockHandler) EventPublishWithDelay(topic, key string, evt *sock.Event, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventPublishWithDelay", topic, key, evt, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventPublishWithDelay indicates an expected call of EventPublishWithDelay.
func (mr *MockSockHandlerMockRecorder) EventPublishWithDelay(topic, key, evt, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPublishWithDelay", reflect.TypeOf((*MockSockHandler)(nil).EventPublishWithDelay), topic, key, evt, delay)
}

// QueueCreate mocks base method.
func (m *MockSockHandler) QueueCreate(name, queueType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCreate", name, queueType)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueCreate indicates an expected call of QueueCreate.
func (mr *MockSockHandlerMockRecorder) QueueCreate(name, queueType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreate", reflect.TypeOf((*MockSockHandler)(nil).QueueCreate), name, queueType)
}

// QueueSubscribe mocks base method.
func (m *MockSockHandler) QueueSubscribe(name, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", name, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockSockHandlerMockRecorder) QueueSubscribe(name, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockSockHandler)(nil).QueueSubscribe), name, topic)
}

// RequestPublish mocks base method.
func (m *MockSockHandler) RequestPublish(ctx context.Context, queueName string, req *sock.Request) (*sock.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPublish", ctx, queueName, req)
	ret0, _ := ret[0].(*sock.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPublish indicates an expected call of RequestPublish.
func (mr *MockSockHandlerMockRecorder) RequestPublish(ctx, queueName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPublish", reflect.TypeOf((*MockSockHandler)(nil).RequestPublish), ctx, queueName, req)
}

// RequestPublishWithDelay mocks base method.
func (m *MockSockHandler) RequestPublishWithDelay(queueName string, req *sock.Request, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPublishWithDelay", queueName, req, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestPublishWithDelay indicates an expected call of RequestPublishWithDelay.
func (mr *MockSockHandlerMockRecorder) RequestPublishWithDelay(queueName, req, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPublishWithDelay", reflect.TypeOf((*MockSockHandler)(nil).RequestPublishWithDelay), queueName, req, delay)
}

// TopicCreate mocks base method.
func (m *MockSockHandler) TopicCreate(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicCreate", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopicCreate indicates an expected call of TopicCreate.
func (mr *MockSockHandlerMockRecorder) TopicCreate(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicCreate", reflect.TypeOf((*MockSockHandler)(nil).TopicCreate), name)
}
