// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package notifyhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package notifyhandler is a generated GoMock package.
package notifyhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookMessage is a mock of WebhookMessage interface.
type MockWebhookMessage struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookMessageMockRecorder
	isgomock struct{}
}

// MockWebhookMessageMockRecorder is the mock recorder for MockWebhookMessage.
type MockWebhookMessageMockRecorder struct {
	mock *MockWebhookMessage
}

// NewMockWebhookMessage creates a new mock instance.
func NewMockWebhookMessage(ctrl *gomock.Controller) *MockWebhookMessage {
	mock := &MockWebhookMessage{ctrl: ctrl}
	mock.recorder = &MockWebhookMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookMessage) EXPECT() *MockWebhookMessageMockRecorder {
	return m.recorder
}

// CreateWebhookEvent mocks base method.
func (m *MockWebhookMessage) CreateWebhookEvent() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhookEvent")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhookEvent indicates an expected call of CreateWebhookEvent.
func (mr *MockWebhookMessageMockRecorder) CreateWebhookEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookEvent", reflect.TypeOf((*MockWebhookMessage)(nil).CreateWebhookEvent))
}

// MockNotifyHandler is a mock of NotifyHandler interface.
type MockNotifyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyHandlerMockRecorder
	isgomock struct{}
}

// MockNotifyHandlerMockRecorder is the mock recorder for MockNotifyHandler.
type MockNotifyHandlerMockRecorder struct {
	mock *MockNotifyHandler
}

// NewMockNotifyHandler creates a new mock instance.
func NewMockNotifyHandler(ctrl *gomock.Controller) *MockNotifyHandler {
	mock := &MockNotifyHandler{ctrl: ctrl}
	mock.recorder = &MockNotifyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyHandler) EXPECT() *MockNotifyHandlerMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method.
func (m *MockNotifyHandler) PublishEvent(ctx context.Context, eventType string, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishEvent", ctx, eventType, data)
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockNotifyHandlerMockRecorder) PublishEvent(ctx, eventType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockNotifyHandler)(nil).PublishEvent), ctx, eventType, data)
}

// PublishEventRaw mocks base method.
func (m *MockNotifyHandler) PublishEventRaw(ctx context.Context, eventType, dataType string, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishEventRaw", ctx, eventType, dataType, data)
}

// PublishEventRaw indicates an expected call of PublishEventRaw.
func (mr *MockNotifyHandlerMockRecorder) PublishEventRaw(ctx, eventType, dataType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventRaw", reflect.TypeOf((*MockNotifyHandler)(nil).PublishEventRaw), ctx, eventType, dataType, data)
}

// PublishWebhook mocks base method.
func (m *MockNotifyHandler) PublishWebhook(ctx context.Context, customerID uuid.UUID, eventType string, data WebhookMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebhook", ctx, customerID, eventType, data)
}

// PublishWebhook indicates an expected call of PublishWebhook.
func (mr *MockNotifyHandlerMockRecorder) PublishWebhook(ctx, customerID, eventType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebhook", reflect.TypeOf((*MockNotifyHandler)(nil).PublishWebhook), ctx, customerID, eventType, data)
}

// PublishWebhookEvent mocks base method.
func (m *MockNotifyHandler) PublishWebhookEvent(ctx context.Context, customerID uuid.UUID, eventType string, data WebhookMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebhookEvent", ctx, customerID, eventType, data)
}

// PublishWebhookEvent indicates an expected call of PublishWebhookEvent.
func (mr *MockNotifyHandlerMockRecorder) PublishWebhookEvent(ctx, customerID, eventType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebhookEvent", reflect.TypeOf((*MockNotifyHandler)(nil).PublishWebhookEvent), ctx, customerID, eventType, data)
}
