// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package transferhandler is a generated GoMock package.
package transferhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	groupcall "gitlab.com/voipbin/bin-manager/call-manager.git/models/groupcall"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
	transfer "gitlab.com/voipbin/bin-manager/transfer-manager.git/models/transfer"
)

// MockTransferHandler is a mock of TransferHandler interface.
type MockTransferHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTransferHandlerMockRecorder
}

// MockTransferHandlerMockRecorder is the mock recorder for MockTransferHandler.
type MockTransferHandlerMockRecorder struct {
	mock *MockTransferHandler
}

// NewMockTransferHandler creates a new mock instance.
func NewMockTransferHandler(ctrl *gomock.Controller) *MockTransferHandler {
	mock := &MockTransferHandler{ctrl: ctrl}
	mock.recorder = &MockTransferHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferHandler) EXPECT() *MockTransferHandlerMockRecorder {
	return m.recorder
}

// GetByGroupcallID mocks base method.
func (m *MockTransferHandler) GetByGroupcallID(ctx context.Context, groupcallID uuid.UUID) (*transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupcallID", ctx, groupcallID)
	ret0, _ := ret[0].(*transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupcallID indicates an expected call of GetByGroupcallID.
func (mr *MockTransferHandlerMockRecorder) GetByGroupcallID(ctx, groupcallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupcallID", reflect.TypeOf((*MockTransferHandler)(nil).GetByGroupcallID), ctx, groupcallID)
}

// GetByTransfererCallID mocks base method.
func (m *MockTransferHandler) GetByTransfererCallID(ctx context.Context, transfererCallID uuid.UUID) (*transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransfererCallID", ctx, transfererCallID)
	ret0, _ := ret[0].(*transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransfererCallID indicates an expected call of GetByTransfererCallID.
func (mr *MockTransferHandlerMockRecorder) GetByTransfererCallID(ctx, transfererCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransfererCallID", reflect.TypeOf((*MockTransferHandler)(nil).GetByTransfererCallID), ctx, transfererCallID)
}

// ServiceStart mocks base method.
func (m *MockTransferHandler) ServiceStart(ctx context.Context, transferType transfer.Type, TransfererCallID uuid.UUID, transfereeAddresses []address.Address) (*transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStart", ctx, transferType, TransfererCallID, transfereeAddresses)
	ret0, _ := ret[0].(*transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStart indicates an expected call of ServiceStart.
func (mr *MockTransferHandlerMockRecorder) ServiceStart(ctx, transferType, TransfererCallID, transfereeAddresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStart", reflect.TypeOf((*MockTransferHandler)(nil).ServiceStart), ctx, transferType, TransfererCallID, transfereeAddresses)
}

// TransfereeAnswer mocks base method.
func (m *MockTransferHandler) TransfereeAnswer(ctx context.Context, tr *transfer.Transfer, groupcall *groupcall.Groupcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransfereeAnswer", ctx, tr, groupcall)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransfereeAnswer indicates an expected call of TransfereeAnswer.
func (mr *MockTransferHandlerMockRecorder) TransfereeAnswer(ctx, tr, groupcall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransfereeAnswer", reflect.TypeOf((*MockTransferHandler)(nil).TransfereeAnswer), ctx, tr, groupcall)
}

// TransfereeHangup mocks base method.
func (m *MockTransferHandler) TransfereeHangup(ctx context.Context, tr *transfer.Transfer, gc *groupcall.Groupcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransfereeHangup", ctx, tr, gc)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransfereeHangup indicates an expected call of TransfereeHangup.
func (mr *MockTransferHandlerMockRecorder) TransfereeHangup(ctx, tr, gc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransfereeHangup", reflect.TypeOf((*MockTransferHandler)(nil).TransfereeHangup), ctx, tr, gc)
}

// TransfererHangup mocks base method.
func (m *MockTransferHandler) TransfererHangup(ctx context.Context, tr *transfer.Transfer, transfererCall *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransfererHangup", ctx, tr, transfererCall)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransfererHangup indicates an expected call of TransfererHangup.
func (mr *MockTransferHandlerMockRecorder) TransfererHangup(ctx, tr, transfererCall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransfererHangup", reflect.TypeOf((*MockTransferHandler)(nil).TransfererHangup), ctx, tr, transfererCall)
}
