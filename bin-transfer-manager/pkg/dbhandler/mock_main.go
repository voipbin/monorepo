// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	transfer "gitlab.com/voipbin/bin-manager/transfer-manager.git/models/transfer"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// TransferCreate mocks base method.
func (m *MockDBHandler) TransferCreate(ctx context.Context, tr *transfer.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferCreate", ctx, tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferCreate indicates an expected call of TransferCreate.
func (mr *MockDBHandlerMockRecorder) TransferCreate(ctx, tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferCreate", reflect.TypeOf((*MockDBHandler)(nil).TransferCreate), ctx, tr)
}

// TransferGet mocks base method.
func (m *MockDBHandler) TransferGet(ctx context.Context, id uuid.UUID) (*transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferGet", ctx, id)
	ret0, _ := ret[0].(*transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferGet indicates an expected call of TransferGet.
func (mr *MockDBHandlerMockRecorder) TransferGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferGet", reflect.TypeOf((*MockDBHandler)(nil).TransferGet), ctx, id)
}

// TransferGetByGroupcallID mocks base method.
func (m *MockDBHandler) TransferGetByGroupcallID(ctx context.Context, groupcallID uuid.UUID) (*transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferGetByGroupcallID", ctx, groupcallID)
	ret0, _ := ret[0].(*transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferGetByGroupcallID indicates an expected call of TransferGetByGroupcallID.
func (mr *MockDBHandlerMockRecorder) TransferGetByGroupcallID(ctx, groupcallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferGetByGroupcallID", reflect.TypeOf((*MockDBHandler)(nil).TransferGetByGroupcallID), ctx, groupcallID)
}

// TransferGetByTransfererCallID mocks base method.
func (m *MockDBHandler) TransferGetByTransfererCallID(ctx context.Context, transfererCallID uuid.UUID) (*transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferGetByTransfererCallID", ctx, transfererCallID)
	ret0, _ := ret[0].(*transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferGetByTransfererCallID indicates an expected call of TransferGetByTransfererCallID.
func (mr *MockDBHandlerMockRecorder) TransferGetByTransfererCallID(ctx, transfererCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferGetByTransfererCallID", reflect.TypeOf((*MockDBHandler)(nil).TransferGetByTransfererCallID), ctx, transfererCallID)
}

// TransferUpdate mocks base method.
func (m *MockDBHandler) TransferUpdate(ctx context.Context, tr *transfer.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferUpdate", ctx, tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferUpdate indicates an expected call of TransferUpdate.
func (mr *MockDBHandlerMockRecorder) TransferUpdate(ctx, tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferUpdate", reflect.TypeOf((*MockDBHandler)(nil).TransferUpdate), ctx, tr)
}
