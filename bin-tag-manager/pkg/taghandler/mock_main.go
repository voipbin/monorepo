// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package taghandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package taghandler is a generated GoMock package.
package taghandler

import (
	context "context"
	customer "monorepo/bin-customer-manager/models/customer"
	tag "monorepo/bin-tag-manager/models/tag"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTagHandler is a mock of TagHandler interface.
type MockTagHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTagHandlerMockRecorder
	isgomock struct{}
}

// MockTagHandlerMockRecorder is the mock recorder for MockTagHandler.
type MockTagHandlerMockRecorder struct {
	mock *MockTagHandler
}

// NewMockTagHandler creates a new mock instance.
func NewMockTagHandler(ctrl *gomock.Controller) *MockTagHandler {
	mock := &MockTagHandler{ctrl: ctrl}
	mock.recorder = &MockTagHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagHandler) EXPECT() *MockTagHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTagHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTagHandlerMockRecorder) Create(ctx, customerID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagHandler)(nil).Create), ctx, customerID, name, detail)
}

// Delete mocks base method.
func (m *MockTagHandler) Delete(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTagHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTagHandler)(nil).Delete), ctx, id)
}

// EventCustomerDeleted mocks base method.
func (m *MockTagHandler) EventCustomerDeleted(ctx context.Context, c *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCustomerDeleted", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCustomerDeleted indicates an expected call of EventCustomerDeleted.
func (mr *MockTagHandlerMockRecorder) EventCustomerDeleted(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCustomerDeleted", reflect.TypeOf((*MockTagHandler)(nil).EventCustomerDeleted), ctx, c)
}

// Get mocks base method.
func (m *MockTagHandler) Get(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTagHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTagHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockTagHandler) Gets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockTagHandlerMockRecorder) Gets(ctx, customerID, size, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockTagHandler)(nil).Gets), ctx, customerID, size, token)
}

// UpdateBasicInfo mocks base method.
func (m *MockTagHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockTagHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockTagHandler)(nil).UpdateBasicInfo), ctx, id, name, detail)
}
