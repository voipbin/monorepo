// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	tag "monorepo/bin-tag-manager/models/tag"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// TagCreate mocks base method.
func (m *MockDBHandler) TagCreate(ctx context.Context, a *tag.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagCreate indicates an expected call of TagCreate.
func (mr *MockDBHandlerMockRecorder) TagCreate(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCreate", reflect.TypeOf((*MockDBHandler)(nil).TagCreate), ctx, a)
}

// TagDelete mocks base method.
func (m *MockDBHandler) TagDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete.
func (mr *MockDBHandlerMockRecorder) TagDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockDBHandler)(nil).TagDelete), ctx, id)
}

// TagGet mocks base method.
func (m *MockDBHandler) TagGet(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGet", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGet indicates an expected call of TagGet.
func (mr *MockDBHandlerMockRecorder) TagGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGet", reflect.TypeOf((*MockDBHandler)(nil).TagGet), ctx, id)
}

// TagGets mocks base method.
func (m *MockDBHandler) TagGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGets indicates an expected call of TagGets.
func (mr *MockDBHandlerMockRecorder) TagGets(ctx, customerID, size, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGets", reflect.TypeOf((*MockDBHandler)(nil).TagGets), ctx, customerID, size, token)
}

// TagSetBasicInfo mocks base method.
func (m *MockDBHandler) TagSetBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagSetBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagSetBasicInfo indicates an expected call of TagSetBasicInfo.
func (mr *MockDBHandlerMockRecorder) TagSetBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagSetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).TagSetBasicInfo), ctx, id, name, detail)
}
