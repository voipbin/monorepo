// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package queuecallhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package queuecallhandler is a generated GoMock package.
package queuecallhandler

import (
	context "context"
	address "monorepo/bin-common-handler/models/address"
	service "monorepo/bin-common-handler/models/service"
	customer "monorepo/bin-customer-manager/models/customer"
	queue "monorepo/bin-queue-manager/models/queue"
	queuecall "monorepo/bin-queue-manager/models/queuecall"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockQueuecallHandler is a mock of QueuecallHandler interface.
type MockQueuecallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueuecallHandlerMockRecorder
	isgomock struct{}
}

// MockQueuecallHandlerMockRecorder is the mock recorder for MockQueuecallHandler.
type MockQueuecallHandlerMockRecorder struct {
	mock *MockQueuecallHandler
}

// NewMockQueuecallHandler creates a new mock instance.
func NewMockQueuecallHandler(ctrl *gomock.Controller) *MockQueuecallHandler {
	mock := &MockQueuecallHandler{ctrl: ctrl}
	mock.recorder = &MockQueuecallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuecallHandler) EXPECT() *MockQueuecallHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQueuecallHandler) Create(ctx context.Context, q *queue.Queue, id uuid.UUID, referenceType queuecall.ReferenceType, referenceID, referenceActiveflowID, forwardActionID, conferenceID uuid.UUID, source address.Address) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, q, id, referenceType, referenceID, referenceActiveflowID, forwardActionID, conferenceID, source)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQueuecallHandlerMockRecorder) Create(ctx, q, id, referenceType, referenceID, referenceActiveflowID, forwardActionID, conferenceID, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQueuecallHandler)(nil).Create), ctx, q, id, referenceType, referenceID, referenceActiveflowID, forwardActionID, conferenceID, source)
}

// Delete mocks base method.
func (m *MockQueuecallHandler) Delete(ctx context.Context, id uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockQueuecallHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQueuecallHandler)(nil).Delete), ctx, id)
}

// EventCUCustomerDeleted mocks base method.
func (m *MockQueuecallHandler) EventCUCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCUCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCUCustomerDeleted indicates an expected call of EventCUCustomerDeleted.
func (mr *MockQueuecallHandlerMockRecorder) EventCUCustomerDeleted(ctx, cu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCUCustomerDeleted", reflect.TypeOf((*MockQueuecallHandler)(nil).EventCUCustomerDeleted), ctx, cu)
}

// EventCallCallHangup mocks base method.
func (m *MockQueuecallHandler) EventCallCallHangup(ctx context.Context, referenceID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventCallCallHangup", ctx, referenceID)
}

// EventCallCallHangup indicates an expected call of EventCallCallHangup.
func (mr *MockQueuecallHandlerMockRecorder) EventCallCallHangup(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCallCallHangup", reflect.TypeOf((*MockQueuecallHandler)(nil).EventCallCallHangup), ctx, referenceID)
}

// EventCallConfbridgeJoined mocks base method.
func (m *MockQueuecallHandler) EventCallConfbridgeJoined(ctx context.Context, referenceID, confbridgeID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventCallConfbridgeJoined", ctx, referenceID, confbridgeID)
}

// EventCallConfbridgeJoined indicates an expected call of EventCallConfbridgeJoined.
func (mr *MockQueuecallHandlerMockRecorder) EventCallConfbridgeJoined(ctx, referenceID, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCallConfbridgeJoined", reflect.TypeOf((*MockQueuecallHandler)(nil).EventCallConfbridgeJoined), ctx, referenceID, confbridgeID)
}

// EventCallConfbridgeLeaved mocks base method.
func (m *MockQueuecallHandler) EventCallConfbridgeLeaved(ctx context.Context, referenceID, confbridgeID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventCallConfbridgeLeaved", ctx, referenceID, confbridgeID)
}

// EventCallConfbridgeLeaved indicates an expected call of EventCallConfbridgeLeaved.
func (mr *MockQueuecallHandlerMockRecorder) EventCallConfbridgeLeaved(ctx, referenceID, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCallConfbridgeLeaved", reflect.TypeOf((*MockQueuecallHandler)(nil).EventCallConfbridgeLeaved), ctx, referenceID, confbridgeID)
}

// Execute mocks base method.
func (m *MockQueuecallHandler) Execute(ctx context.Context, queuecallID, agentID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, queuecallID, agentID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockQueuecallHandlerMockRecorder) Execute(ctx, queuecallID, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockQueuecallHandler)(nil).Execute), ctx, queuecallID, agentID)
}

// Get mocks base method.
func (m *MockQueuecallHandler) Get(ctx context.Context, id uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueuecallHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueuecallHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockQueuecallHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockQueuecallHandlerMockRecorder) GetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockQueuecallHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// Gets mocks base method.
func (m *MockQueuecallHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockQueuecallHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockQueuecallHandler)(nil).Gets), ctx, size, token, filters)
}

// HealthCheck mocks base method.
func (m *MockQueuecallHandler) HealthCheck(ctx context.Context, id uuid.UUID, retryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", ctx, id, retryCount)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockQueuecallHandlerMockRecorder) HealthCheck(ctx, id, retryCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockQueuecallHandler)(nil).HealthCheck), ctx, id, retryCount)
}

// Kick mocks base method.
func (m *MockQueuecallHandler) Kick(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kick", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kick indicates an expected call of Kick.
func (mr *MockQueuecallHandlerMockRecorder) Kick(ctx, queuecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kick", reflect.TypeOf((*MockQueuecallHandler)(nil).Kick), ctx, queuecallID)
}

// KickByReferenceID mocks base method.
func (m *MockQueuecallHandler) KickByReferenceID(ctx context.Context, referenceID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickByReferenceID indicates an expected call of KickByReferenceID.
func (mr *MockQueuecallHandlerMockRecorder) KickByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickByReferenceID", reflect.TypeOf((*MockQueuecallHandler)(nil).KickByReferenceID), ctx, referenceID)
}

// ServiceStart mocks base method.
func (m *MockQueuecallHandler) ServiceStart(ctx context.Context, queueID, activeflowID uuid.UUID, referenceType queuecall.ReferenceType, referenceID uuid.UUID) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStart", ctx, queueID, activeflowID, referenceType, referenceID)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStart indicates an expected call of ServiceStart.
func (mr *MockQueuecallHandlerMockRecorder) ServiceStart(ctx, queueID, activeflowID, referenceType, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStart", reflect.TypeOf((*MockQueuecallHandler)(nil).ServiceStart), ctx, queueID, activeflowID, referenceType, referenceID)
}

// TimeoutService mocks base method.
func (m *MockQueuecallHandler) TimeoutService(ctx context.Context, queuecallID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutService", ctx, queuecallID)
}

// TimeoutService indicates an expected call of TimeoutService.
func (mr *MockQueuecallHandlerMockRecorder) TimeoutService(ctx, queuecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutService", reflect.TypeOf((*MockQueuecallHandler)(nil).TimeoutService), ctx, queuecallID)
}

// TimeoutWait mocks base method.
func (m *MockQueuecallHandler) TimeoutWait(ctx context.Context, queuecallID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutWait", ctx, queuecallID)
}

// TimeoutWait indicates an expected call of TimeoutWait.
func (mr *MockQueuecallHandlerMockRecorder) TimeoutWait(ctx, queuecallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutWait", reflect.TypeOf((*MockQueuecallHandler)(nil).TimeoutWait), ctx, queuecallID)
}

// UpdateStatusWaiting mocks base method.
func (m *MockQueuecallHandler) UpdateStatusWaiting(ctx context.Context, id uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusWaiting", ctx, id)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusWaiting indicates an expected call of UpdateStatusWaiting.
func (mr *MockQueuecallHandlerMockRecorder) UpdateStatusWaiting(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusWaiting", reflect.TypeOf((*MockQueuecallHandler)(nil).UpdateStatusWaiting), ctx, id)
}
