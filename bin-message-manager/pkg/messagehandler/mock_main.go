// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package messagehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package messagehandler is a generated GoMock package.
package messagehandler

import (
	context "context"
	address "monorepo/bin-common-handler/models/address"
	message "monorepo/bin-message-manager/models/message"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMessageHandler) Delete(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockMessageHandler) Get(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockMessageHandler) Gets(ctx context.Context, customerID uuid.UUID, pageSize uint64, pageToken string) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, pageSize, pageToken)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockMessageHandlerMockRecorder) Gets(ctx, customerID, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockMessageHandler)(nil).Gets), ctx, customerID, pageSize, pageToken)
}

// Hook mocks base method.
func (m_2 *MockMessageHandler) Hook(ctx context.Context, uri string, m []byte) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Hook", ctx, uri, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hook indicates an expected call of Hook.
func (mr *MockMessageHandlerMockRecorder) Hook(ctx, uri, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hook", reflect.TypeOf((*MockMessageHandler)(nil).Hook), ctx, uri, m)
}

// Send mocks base method.
func (m *MockMessageHandler) Send(ctx context.Context, id, customerID uuid.UUID, source *address.Address, destinations []address.Address, text string) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, id, customerID, source, destinations, text)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageHandlerMockRecorder) Send(ctx, id, customerID, source, destinations, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageHandler)(nil).Send), ctx, id, customerID, source, destinations, text)
}
