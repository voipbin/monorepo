// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	message "monorepo/bin-message-manager/models/message"
	target "monorepo/bin-message-manager/models/target"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// MessageCreate mocks base method.
func (m *MockDBHandler) MessageCreate(ctx context.Context, n *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageCreate", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageCreate indicates an expected call of MessageCreate.
func (mr *MockDBHandlerMockRecorder) MessageCreate(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageCreate", reflect.TypeOf((*MockDBHandler)(nil).MessageCreate), ctx, n)
}

// MessageDelete mocks base method.
func (m *MockDBHandler) MessageDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageDelete indicates an expected call of MessageDelete.
func (mr *MockDBHandlerMockRecorder) MessageDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDelete", reflect.TypeOf((*MockDBHandler)(nil).MessageDelete), ctx, id)
}

// MessageGet mocks base method.
func (m *MockDBHandler) MessageGet(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGet", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGet indicates an expected call of MessageGet.
func (mr *MockDBHandlerMockRecorder) MessageGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGet", reflect.TypeOf((*MockDBHandler)(nil).MessageGet), ctx, id)
}

// MessageGets mocks base method.
func (m *MockDBHandler) MessageGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGets indicates an expected call of MessageGets.
func (mr *MockDBHandlerMockRecorder) MessageGets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGets", reflect.TypeOf((*MockDBHandler)(nil).MessageGets), ctx, customerID, size, token)
}

// MessageUpdateTargets mocks base method.
func (m *MockDBHandler) MessageUpdateTargets(ctx context.Context, id uuid.UUID, targets []target.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageUpdateTargets", ctx, id, targets)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageUpdateTargets indicates an expected call of MessageUpdateTargets.
func (mr *MockDBHandlerMockRecorder) MessageUpdateTargets(ctx, id, targets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageUpdateTargets", reflect.TypeOf((*MockDBHandler)(nil).MessageUpdateTargets), ctx, id, targets)
}
