// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package ttshandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package ttshandler is a generated GoMock package.
package ttshandler

import (
	context "context"
	tts "monorepo/bin-tts-manager/models/tts"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTTSHandler is a mock of TTSHandler interface.
type MockTTSHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTTSHandlerMockRecorder
	isgomock struct{}
}

// MockTTSHandlerMockRecorder is the mock recorder for MockTTSHandler.
type MockTTSHandlerMockRecorder struct {
	mock *MockTTSHandler
}

// NewMockTTSHandler creates a new mock instance.
func NewMockTTSHandler(ctrl *gomock.Controller) *MockTTSHandler {
	mock := &MockTTSHandler{ctrl: ctrl}
	mock.recorder = &MockTTSHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTTSHandler) EXPECT() *MockTTSHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTTSHandler) Create(ctx context.Context, callID uuid.UUID, text, lang string, gender tts.Gender) (*tts.TTS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, callID, text, lang, gender)
	ret0, _ := ret[0].(*tts.TTS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTTSHandlerMockRecorder) Create(ctx, callID, text, lang, gender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTTSHandler)(nil).Create), ctx, callID, text, lang, gender)
}
