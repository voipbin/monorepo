// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package streaminghandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package streaminghandler is a generated GoMock package.
package streaminghandler

import (
	context "context"
	streaming "monorepo/bin-tts-manager/models/streaming"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamingHandler is a mock of StreamingHandler interface.
type MockStreamingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingHandlerMockRecorder
	isgomock struct{}
}

// MockStreamingHandlerMockRecorder is the mock recorder for MockStreamingHandler.
type MockStreamingHandlerMockRecorder struct {
	mock *MockStreamingHandler
}

// NewMockStreamingHandler creates a new mock instance.
func NewMockStreamingHandler(ctrl *gomock.Controller) *MockStreamingHandler {
	mock := &MockStreamingHandler{ctrl: ctrl}
	mock.recorder = &MockStreamingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingHandler) EXPECT() *MockStreamingHandlerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockStreamingHandler) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockStreamingHandlerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStreamingHandler)(nil).Run))
}

// Say mocks base method.
func (m *MockStreamingHandler) Say(ctx context.Context, id, messageID uuid.UUID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Say", ctx, id, messageID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Say indicates an expected call of Say.
func (mr *MockStreamingHandlerMockRecorder) Say(ctx, id, messageID, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Say", reflect.TypeOf((*MockStreamingHandler)(nil).Say), ctx, id, messageID, text)
}

// SayAdd mocks base method.
func (m *MockStreamingHandler) SayAdd(ctx context.Context, id, messageID uuid.UUID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayAdd", ctx, id, messageID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SayAdd indicates an expected call of SayAdd.
func (mr *MockStreamingHandlerMockRecorder) SayAdd(ctx, id, messageID, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayAdd", reflect.TypeOf((*MockStreamingHandler)(nil).SayAdd), ctx, id, messageID, text)
}

// SayStop mocks base method.
func (m *MockStreamingHandler) SayStop(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayStop", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SayStop indicates an expected call of SayStop.
func (mr *MockStreamingHandlerMockRecorder) SayStop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayStop", reflect.TypeOf((*MockStreamingHandler)(nil).SayStop), ctx, id)
}

// Start mocks base method.
func (m *MockStreamingHandler) Start(ctx context.Context, customerID uuid.UUID, referenceType streaming.ReferenceType, referenceID uuid.UUID, language string, gender streaming.Gender, direction streaming.Direction) (*streaming.Streaming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, customerID, referenceType, referenceID, language, gender, direction)
	ret0, _ := ret[0].(*streaming.Streaming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockStreamingHandlerMockRecorder) Start(ctx, customerID, referenceType, referenceID, language, gender, direction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStreamingHandler)(nil).Start), ctx, customerID, referenceType, referenceID, language, gender, direction)
}

// Stop mocks base method.
func (m *MockStreamingHandler) Stop(ctx context.Context, id uuid.UUID) (*streaming.Streaming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(*streaming.Streaming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockStreamingHandlerMockRecorder) Stop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStreamingHandler)(nil).Stop), ctx, id)
}

// Mockstreamer is a mock of streamer interface.
type Mockstreamer struct {
	ctrl     *gomock.Controller
	recorder *MockstreamerMockRecorder
	isgomock struct{}
}

// MockstreamerMockRecorder is the mock recorder for Mockstreamer.
type MockstreamerMockRecorder struct {
	mock *Mockstreamer
}

// NewMockstreamer creates a new mock instance.
func NewMockstreamer(ctrl *gomock.Controller) *Mockstreamer {
	mock := &Mockstreamer{ctrl: ctrl}
	mock.recorder = &MockstreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstreamer) EXPECT() *MockstreamerMockRecorder {
	return m.recorder
}

// AddText mocks base method.
func (m *Mockstreamer) AddText(vendorConfig any, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddText", vendorConfig, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddText indicates an expected call of AddText.
func (mr *MockstreamerMockRecorder) AddText(vendorConfig, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddText", reflect.TypeOf((*Mockstreamer)(nil).AddText), vendorConfig, text)
}

// Init mocks base method.
func (m *Mockstreamer) Init(st *streaming.Streaming) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", st)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockstreamerMockRecorder) Init(st any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*Mockstreamer)(nil).Init), st)
}

// Run mocks base method.
func (m *Mockstreamer) Run(vendorConfig any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", vendorConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockstreamerMockRecorder) Run(vendorConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockstreamer)(nil).Run), vendorConfig)
}

// SayStop mocks base method.
func (m *Mockstreamer) SayStop(vendorConfig any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SayStop", vendorConfig)
}

// SayStop indicates an expected call of SayStop.
func (mr *MockstreamerMockRecorder) SayStop(vendorConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayStop", reflect.TypeOf((*Mockstreamer)(nil).SayStop), vendorConfig)
}
