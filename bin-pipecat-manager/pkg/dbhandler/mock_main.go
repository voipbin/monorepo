// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	pipecatcall "monorepo/bin-pipecat-manager/models/pipecatcall"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// PipecatcallCreate mocks base method.
func (m *MockDBHandler) PipecatcallCreate(ctx context.Context, pc *pipecatcall.Pipecatcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipecatcallCreate", ctx, pc)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipecatcallCreate indicates an expected call of PipecatcallCreate.
func (mr *MockDBHandlerMockRecorder) PipecatcallCreate(ctx, pc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipecatcallCreate", reflect.TypeOf((*MockDBHandler)(nil).PipecatcallCreate), ctx, pc)
}

// PipecatcallDelete mocks base method.
func (m *MockDBHandler) PipecatcallDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipecatcallDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipecatcallDelete indicates an expected call of PipecatcallDelete.
func (mr *MockDBHandlerMockRecorder) PipecatcallDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipecatcallDelete", reflect.TypeOf((*MockDBHandler)(nil).PipecatcallDelete), ctx, id)
}

// PipecatcallGet mocks base method.
func (m *MockDBHandler) PipecatcallGet(ctx context.Context, id uuid.UUID) (*pipecatcall.Pipecatcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipecatcallGet", ctx, id)
	ret0, _ := ret[0].(*pipecatcall.Pipecatcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipecatcallGet indicates an expected call of PipecatcallGet.
func (mr *MockDBHandlerMockRecorder) PipecatcallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipecatcallGet", reflect.TypeOf((*MockDBHandler)(nil).PipecatcallGet), ctx, id)
}

// PipecatcallUpdate mocks base method.
func (m *MockDBHandler) PipecatcallUpdate(ctx context.Context, id uuid.UUID, fields map[pipecatcall.Field]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipecatcallUpdate", ctx, id, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipecatcallUpdate indicates an expected call of PipecatcallUpdate.
func (mr *MockDBHandlerMockRecorder) PipecatcallUpdate(ctx, id, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipecatcallUpdate", reflect.TypeOf((*MockDBHandler)(nil).PipecatcallUpdate), ctx, id, fields)
}
