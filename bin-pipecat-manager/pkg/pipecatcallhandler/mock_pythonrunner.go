// Code generated by MockGen. DO NOT EDIT.
// Source: pythonrunner.go
//
// Generated by this command:
//
//	mockgen -package pipecatcallhandler -destination ./mock_pythonrunner.go -source pythonrunner.go -build_flags=-mod=mod
//

// Package pipecatcallhandler is a generated GoMock package.
package pipecatcallhandler

import (
	exec "os/exec"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPythonRunner is a mock of PythonRunner interface.
type MockPythonRunner struct {
	ctrl     *gomock.Controller
	recorder *MockPythonRunnerMockRecorder
	isgomock struct{}
}

// MockPythonRunnerMockRecorder is the mock recorder for MockPythonRunner.
type MockPythonRunnerMockRecorder struct {
	mock *MockPythonRunner
}

// NewMockPythonRunner creates a new mock instance.
func NewMockPythonRunner(ctrl *gomock.Controller) *MockPythonRunner {
	mock := &MockPythonRunner{ctrl: ctrl}
	mock.recorder = &MockPythonRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPythonRunner) EXPECT() *MockPythonRunnerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockPythonRunner) Start(interpreter string, args []string) (*exec.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", interpreter, args)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockPythonRunnerMockRecorder) Start(interpreter, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPythonRunner)(nil).Start), interpreter, args)
}
