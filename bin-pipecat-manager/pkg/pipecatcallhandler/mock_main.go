// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package pipecatcallhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package pipecatcallhandler is a generated GoMock package.
package pipecatcallhandler

import (
	context "context"
	message "monorepo/bin-pipecat-manager/models/message"
	pipecatcall "monorepo/bin-pipecat-manager/models/pipecatcall"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPipecatcallHandler is a mock of PipecatcallHandler interface.
type MockPipecatcallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPipecatcallHandlerMockRecorder
	isgomock struct{}
}

// MockPipecatcallHandlerMockRecorder is the mock recorder for MockPipecatcallHandler.
type MockPipecatcallHandlerMockRecorder struct {
	mock *MockPipecatcallHandler
}

// NewMockPipecatcallHandler creates a new mock instance.
func NewMockPipecatcallHandler(ctrl *gomock.Controller) *MockPipecatcallHandler {
	mock := &MockPipecatcallHandler{ctrl: ctrl}
	mock.recorder = &MockPipecatcallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipecatcallHandler) EXPECT() *MockPipecatcallHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPipecatcallHandler) Get(ctx context.Context, id uuid.UUID) (*pipecatcall.Pipecatcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*pipecatcall.Pipecatcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPipecatcallHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipecatcallHandler)(nil).Get), ctx, id)
}

// Run mocks base method.
func (m *MockPipecatcallHandler) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockPipecatcallHandlerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPipecatcallHandler)(nil).Run))
}

// SendMessage mocks base method.
func (m *MockPipecatcallHandler) SendMessage(ctx context.Context, id uuid.UUID, messageID, messageText string, runImmediately, audioResponse bool) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, id, messageID, messageText, runImmediately, audioResponse)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockPipecatcallHandlerMockRecorder) SendMessage(ctx, id, messageID, messageText, runImmediately, audioResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockPipecatcallHandler)(nil).SendMessage), ctx, id, messageID, messageText, runImmediately, audioResponse)
}

// Start mocks base method.
func (m *MockPipecatcallHandler) Start(ctx context.Context, id, customerID, activeflowID uuid.UUID, referenceType pipecatcall.ReferenceType, referenceID uuid.UUID, llm pipecatcall.LLM, stt pipecatcall.STT, tts pipecatcall.TTS, voiceID string, messages []map[string]any) (*pipecatcall.Pipecatcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, id, customerID, activeflowID, referenceType, referenceID, llm, stt, tts, voiceID, messages)
	ret0, _ := ret[0].(*pipecatcall.Pipecatcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockPipecatcallHandlerMockRecorder) Start(ctx, id, customerID, activeflowID, referenceType, referenceID, llm, stt, tts, voiceID, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPipecatcallHandler)(nil).Start), ctx, id, customerID, activeflowID, referenceType, referenceID, llm, stt, tts, voiceID, messages)
}

// Stop mocks base method.
func (m *MockPipecatcallHandler) Stop(ctx context.Context, id uuid.UUID) (*pipecatcall.Pipecatcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(*pipecatcall.Pipecatcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockPipecatcallHandlerMockRecorder) Stop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPipecatcallHandler)(nil).Stop), ctx, id)
}
