// Code generated by MockGen. DO NOT EDIT.
// Source: pipecatframe.go
//
// Generated by this command:
//
//	mockgen -package pipecatcallhandler -destination ./mock_pipecatframe.go -source pipecatframe.go -build_flags=-mod=mod
//

// Package pipecatcallhandler is a generated GoMock package.
package pipecatcallhandler

import (
	pipecatcall "monorepo/bin-pipecat-manager/models/pipecatcall"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPipecatframeHandler is a mock of PipecatframeHandler interface.
type MockPipecatframeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPipecatframeHandlerMockRecorder
	isgomock struct{}
}

// MockPipecatframeHandlerMockRecorder is the mock recorder for MockPipecatframeHandler.
type MockPipecatframeHandlerMockRecorder struct {
	mock *MockPipecatframeHandler
}

// NewMockPipecatframeHandler creates a new mock instance.
func NewMockPipecatframeHandler(ctrl *gomock.Controller) *MockPipecatframeHandler {
	mock := &MockPipecatframeHandler{ctrl: ctrl}
	mock.recorder = &MockPipecatframeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipecatframeHandler) EXPECT() *MockPipecatframeHandlerMockRecorder {
	return m.recorder
}

// RunSender mocks base method.
func (m *MockPipecatframeHandler) RunSender(pc *pipecatcall.Pipecatcall) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSender", pc)
}

// RunSender indicates an expected call of RunSender.
func (mr *MockPipecatframeHandlerMockRecorder) RunSender(pc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSender", reflect.TypeOf((*MockPipecatframeHandler)(nil).RunSender), pc)
}

// SendAudio mocks base method.
func (m *MockPipecatframeHandler) SendAudio(pc *pipecatcall.Pipecatcall, packetID uint64, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAudio", pc, packetID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAudio indicates an expected call of SendAudio.
func (mr *MockPipecatframeHandlerMockRecorder) SendAudio(pc, packetID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAudio", reflect.TypeOf((*MockPipecatframeHandler)(nil).SendAudio), pc, packetID, data)
}

// SendRTVIText mocks base method.
func (m *MockPipecatframeHandler) SendRTVIText(pc *pipecatcall.Pipecatcall, id, text string, runImmediately, audioResponse bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRTVIText", pc, id, text, runImmediately, audioResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRTVIText indicates an expected call of SendRTVIText.
func (mr *MockPipecatframeHandlerMockRecorder) SendRTVIText(pc, id, text, runImmediately, audioResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRTVIText", reflect.TypeOf((*MockPipecatframeHandler)(nil).SendRTVIText), pc, id, text, runImmediately, audioResponse)
}
