// Code generated by MockGen. DO NOT EDIT.
// Source: websocket.go
//
// Generated by this command:
//
//	mockgen -package pipecatcallhandler -destination ./mock_websocket.go -source websocket.go -build_flags=-mod=mod
//

// Package pipecatcallhandler is a generated GoMock package.
package pipecatcallhandler

import (
	http "net/http"
	reflect "reflect"

	websocket "github.com/gorilla/websocket"
	gomock "go.uber.org/mock/gomock"
)

// MockWebsocketHandler is a mock of WebsocketHandler interface.
type MockWebsocketHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketHandlerMockRecorder
	isgomock struct{}
}

// MockWebsocketHandlerMockRecorder is the mock recorder for MockWebsocketHandler.
type MockWebsocketHandlerMockRecorder struct {
	mock *MockWebsocketHandler
}

// NewMockWebsocketHandler creates a new mock instance.
func NewMockWebsocketHandler(ctrl *gomock.Controller) *MockWebsocketHandler {
	mock := &MockWebsocketHandler{ctrl: ctrl}
	mock.recorder = &MockWebsocketHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketHandler) EXPECT() *MockWebsocketHandlerMockRecorder {
	return m.recorder
}

// ReadMessage mocks base method.
func (m *MockWebsocketHandler) ReadMessage(conn *websocket.Conn) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", conn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockWebsocketHandlerMockRecorder) ReadMessage(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWebsocketHandler)(nil).ReadMessage), conn)
}

// Upgrade mocks base method.
func (m *MockWebsocketHandler) Upgrade(w http.ResponseWriter, r *http.Request, responseHeader http.Header) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", w, r, responseHeader)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockWebsocketHandlerMockRecorder) Upgrade(w, r, responseHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockWebsocketHandler)(nil).Upgrade), w, r, responseHeader)
}

// WriteMessage mocks base method.
func (m *MockWebsocketHandler) WriteMessage(conn *websocket.Conn, messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", conn, messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWebsocketHandlerMockRecorder) WriteMessage(conn, messageType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebsocketHandler)(nil).WriteMessage), conn, messageType, data)
}
