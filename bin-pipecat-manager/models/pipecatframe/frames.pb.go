//
// Copyright (c) 2024â€“2025, Daily
//
// SPDX-License-Identifier: BSD 2-Clause License
//

// Generate frames_pb2.py with:
//
//   python -m grpc_tools.protoc --proto_path=./ --python_out=./protobufs frames.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: frames.proto

package pipecatframe

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TextFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextFrame) Reset() {
	*x = TextFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextFrame) ProtoMessage() {}

func (x *TextFrame) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextFrame.ProtoReflect.Descriptor instead.
func (*TextFrame) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{0}
}

func (x *TextFrame) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TextFrame) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TextFrame) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type AudioRawFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Audio       []byte  `protobuf:"bytes,3,opt,name=audio,proto3" json:"audio,omitempty"`
	SampleRate  uint32  `protobuf:"varint,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	NumChannels uint32  `protobuf:"varint,5,opt,name=num_channels,json=numChannels,proto3" json:"num_channels,omitempty"`
	Pts         *uint64 `protobuf:"varint,6,opt,name=pts,proto3,oneof" json:"pts,omitempty"`
}

func (x *AudioRawFrame) Reset() {
	*x = AudioRawFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioRawFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRawFrame) ProtoMessage() {}

func (x *AudioRawFrame) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRawFrame.ProtoReflect.Descriptor instead.
func (*AudioRawFrame) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{1}
}

func (x *AudioRawFrame) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AudioRawFrame) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AudioRawFrame) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *AudioRawFrame) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioRawFrame) GetNumChannels() uint32 {
	if x != nil {
		return x.NumChannels
	}
	return 0
}

func (x *AudioRawFrame) GetPts() uint64 {
	if x != nil && x.Pts != nil {
		return *x.Pts
	}
	return 0
}

type TranscriptionFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TranscriptionFrame) Reset() {
	*x = TranscriptionFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionFrame) ProtoMessage() {}

func (x *TranscriptionFrame) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionFrame.ProtoReflect.Descriptor instead.
func (*TranscriptionFrame) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{2}
}

func (x *TranscriptionFrame) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TranscriptionFrame) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TranscriptionFrame) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TranscriptionFrame) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TranscriptionFrame) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type MessageFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MessageFrame) Reset() {
	*x = MessageFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFrame) ProtoMessage() {}

func (x *MessageFrame) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFrame.ProtoReflect.Descriptor instead.
func (*MessageFrame) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{3}
}

func (x *MessageFrame) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Frame:
	//
	//	*Frame_Text
	//	*Frame_Audio
	//	*Frame_Transcription
	//	*Frame_Message
	Frame isFrame_Frame `protobuf_oneof:"frame"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frames_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_frames_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_frames_proto_rawDescGZIP(), []int{4}
}

func (m *Frame) GetFrame() isFrame_Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (x *Frame) GetText() *TextFrame {
	if x, ok := x.GetFrame().(*Frame_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Frame) GetAudio() *AudioRawFrame {
	if x, ok := x.GetFrame().(*Frame_Audio); ok {
		return x.Audio
	}
	return nil
}

func (x *Frame) GetTranscription() *TranscriptionFrame {
	if x, ok := x.GetFrame().(*Frame_Transcription); ok {
		return x.Transcription
	}
	return nil
}

func (x *Frame) GetMessage() *MessageFrame {
	if x, ok := x.GetFrame().(*Frame_Message); ok {
		return x.Message
	}
	return nil
}

type isFrame_Frame interface {
	isFrame_Frame()
}

type Frame_Text struct {
	Text *TextFrame `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Frame_Audio struct {
	Audio *AudioRawFrame `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

type Frame_Transcription struct {
	Transcription *TranscriptionFrame `protobuf:"bytes,3,opt,name=transcription,proto3,oneof"`
}

type Frame_Message struct {
	Message *MessageFrame `protobuf:"bytes,4,opt,name=message,proto3,oneof"`
}

func (*Frame_Text) isFrame_Frame() {}

func (*Frame_Audio) isFrame_Frame() {}

func (*Frame_Transcription) isFrame_Frame() {}

func (*Frame_Message) isFrame_Frame() {}

var File_frames_proto protoreflect.FileDescriptor

var file_frames_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x70, 0x69, 0x70, 0x65, 0x63, 0x61, 0x74, 0x22, 0x43, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xac, 0x01, 0x0a,
	0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x03,
	0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x70, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x01, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x63, 0x61, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x63,
	0x61, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x63, 0x61, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x63, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x63, 0x61, 0x74, 0x3b, 0x70, 0x69, 0x70,
	0x65, 0x63, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frames_proto_rawDescOnce sync.Once
	file_frames_proto_rawDescData = file_frames_proto_rawDesc
)

func file_frames_proto_rawDescGZIP() []byte {
	file_frames_proto_rawDescOnce.Do(func() {
		file_frames_proto_rawDescData = protoimpl.X.CompressGZIP(file_frames_proto_rawDescData)
	})
	return file_frames_proto_rawDescData
}

var file_frames_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_frames_proto_goTypes = []interface{}{
	(*TextFrame)(nil),          // 0: pipecat.TextFrame
	(*AudioRawFrame)(nil),      // 1: pipecat.AudioRawFrame
	(*TranscriptionFrame)(nil), // 2: pipecat.TranscriptionFrame
	(*MessageFrame)(nil),       // 3: pipecat.MessageFrame
	(*Frame)(nil),              // 4: pipecat.Frame
}
var file_frames_proto_depIdxs = []int32{
	0, // 0: pipecat.Frame.text:type_name -> pipecat.TextFrame
	1, // 1: pipecat.Frame.audio:type_name -> pipecat.AudioRawFrame
	2, // 2: pipecat.Frame.transcription:type_name -> pipecat.TranscriptionFrame
	3, // 3: pipecat.Frame.message:type_name -> pipecat.MessageFrame
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_frames_proto_init() }
func file_frames_proto_init() {
	if File_frames_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frames_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioRawFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frames_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_frames_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_frames_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Frame_Text)(nil),
		(*Frame_Audio)(nil),
		(*Frame_Transcription)(nil),
		(*Frame_Message)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frames_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_frames_proto_goTypes,
		DependencyIndexes: file_frames_proto_depIdxs,
		MessageInfos:      file_frames_proto_msgTypes,
	}.Build()
	File_frames_proto = out.File
	file_frames_proto_rawDesc = nil
	file_frames_proto_goTypes = nil
	file_frames_proto_depIdxs = nil
}
