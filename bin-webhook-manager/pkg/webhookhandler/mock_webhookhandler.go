// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package webhookhandler is a generated GoMock package.
package webhookhandler

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	webhook "monorepo/bin-webhook-manager/models/webhook"
)

// MockWebhookHandler is a mock of WebhookHandler interface.
type MockWebhookHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookHandlerMockRecorder
}

// MockWebhookHandlerMockRecorder is the mock recorder for MockWebhookHandler.
type MockWebhookHandlerMockRecorder struct {
	mock *MockWebhookHandler
}

// NewMockWebhookHandler creates a new mock instance.
func NewMockWebhookHandler(ctrl *gomock.Controller) *MockWebhookHandler {
	mock := &MockWebhookHandler{ctrl: ctrl}
	mock.recorder = &MockWebhookHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookHandler) EXPECT() *MockWebhookHandlerMockRecorder {
	return m.recorder
}

// SendWebhookToCustomer mocks base method.
func (m *MockWebhookHandler) SendWebhookToCustomer(ctx context.Context, customerID uuid.UUID, dataType webhook.DataType, data json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWebhookToCustomer", ctx, customerID, dataType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWebhookToCustomer indicates an expected call of SendWebhookToCustomer.
func (mr *MockWebhookHandlerMockRecorder) SendWebhookToCustomer(ctx, customerID, dataType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWebhookToCustomer", reflect.TypeOf((*MockWebhookHandler)(nil).SendWebhookToCustomer), ctx, customerID, dataType, data)
}

// SendWebhookToURI mocks base method.
func (m *MockWebhookHandler) SendWebhookToURI(ctx context.Context, customerID uuid.UUID, uri string, method webhook.MethodType, dataType webhook.DataType, data json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWebhookToURI", ctx, customerID, uri, method, dataType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWebhookToURI indicates an expected call of SendWebhookToURI.
func (mr *MockWebhookHandlerMockRecorder) SendWebhookToURI(ctx, customerID, uri, method, dataType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWebhookToURI", reflect.TypeOf((*MockWebhookHandler)(nil).SendWebhookToURI), ctx, customerID, uri, method, dataType, data)
}
