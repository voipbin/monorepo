// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package accounthandler is a generated GoMock package.
package accounthandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	account "monorepo/bin-billing-manager/models/account"
	billing "monorepo/bin-billing-manager/models/billing"
	customer "monorepo/bin-customer-manager/models/customer"
)

// MockAccountHandler is a mock of AccountHandler interface.
type MockAccountHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccountHandlerMockRecorder
}

// MockAccountHandlerMockRecorder is the mock recorder for MockAccountHandler.
type MockAccountHandlerMockRecorder struct {
	mock *MockAccountHandler
}

// NewMockAccountHandler creates a new mock instance.
func NewMockAccountHandler(ctrl *gomock.Controller) *MockAccountHandler {
	mock := &MockAccountHandler{ctrl: ctrl}
	mock.recorder = &MockAccountHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountHandler) EXPECT() *MockAccountHandlerMockRecorder {
	return m.recorder
}

// AddBalance mocks base method.
func (m *MockAccountHandler) AddBalance(ctx context.Context, accountID uuid.UUID, balance float32) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", ctx, accountID, balance)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockAccountHandlerMockRecorder) AddBalance(ctx, accountID, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockAccountHandler)(nil).AddBalance), ctx, accountID, balance)
}

// Create mocks base method.
func (m *MockAccountHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, paymentType account.PaymentType, payemntMethod account.PaymentMethod) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, paymentType, payemntMethod)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountHandlerMockRecorder) Create(ctx, customerID, name, detail, paymentType, payemntMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountHandler)(nil).Create), ctx, customerID, name, detail, paymentType, payemntMethod)
}

// Delete mocks base method.
func (m *MockAccountHandler) Delete(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountHandler)(nil).Delete), ctx, id)
}

// EventCUCustomerDeleted mocks base method.
func (m *MockAccountHandler) EventCUCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCUCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCUCustomerDeleted indicates an expected call of EventCUCustomerDeleted.
func (mr *MockAccountHandlerMockRecorder) EventCUCustomerDeleted(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCUCustomerDeleted", reflect.TypeOf((*MockAccountHandler)(nil).EventCUCustomerDeleted), ctx, cu)
}

// Get mocks base method.
func (m *MockAccountHandler) Get(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountHandler)(nil).Get), ctx, id)
}

// GetByCustomerID mocks base method.
func (m *MockAccountHandler) GetByCustomerID(ctx context.Context, customerID uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCustomerID", ctx, customerID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomerID indicates an expected call of GetByCustomerID.
func (mr *MockAccountHandlerMockRecorder) GetByCustomerID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomerID", reflect.TypeOf((*MockAccountHandler)(nil).GetByCustomerID), ctx, customerID)
}

// Gets mocks base method.
func (m *MockAccountHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockAccountHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockAccountHandler)(nil).Gets), ctx, size, token, filters)
}

// IsValidBalance mocks base method.
func (m *MockAccountHandler) IsValidBalance(ctx context.Context, accountID uuid.UUID, billingType billing.ReferenceType, country string, count int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidBalance", ctx, accountID, billingType, country, count)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidBalance indicates an expected call of IsValidBalance.
func (mr *MockAccountHandlerMockRecorder) IsValidBalance(ctx, accountID, billingType, country, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidBalance", reflect.TypeOf((*MockAccountHandler)(nil).IsValidBalance), ctx, accountID, billingType, country, count)
}

// SubtractBalance mocks base method.
func (m *MockAccountHandler) SubtractBalance(ctx context.Context, accountID uuid.UUID, balance float32) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractBalance", ctx, accountID, balance)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubtractBalance indicates an expected call of SubtractBalance.
func (mr *MockAccountHandlerMockRecorder) SubtractBalance(ctx, accountID, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractBalance", reflect.TypeOf((*MockAccountHandler)(nil).SubtractBalance), ctx, accountID, balance)
}

// UpdateBasicInfo mocks base method.
func (m *MockAccountHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockAccountHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockAccountHandler)(nil).UpdateBasicInfo), ctx, id, name, detail)
}

// UpdatePaymentInfo mocks base method.
func (m *MockAccountHandler) UpdatePaymentInfo(ctx context.Context, id uuid.UUID, paymentType account.PaymentType, paymentMethod account.PaymentMethod) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentInfo", ctx, id, paymentType, paymentMethod)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentInfo indicates an expected call of UpdatePaymentInfo.
func (mr *MockAccountHandlerMockRecorder) UpdatePaymentInfo(ctx, id, paymentType, paymentMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentInfo", reflect.TypeOf((*MockAccountHandler)(nil).UpdatePaymentInfo), ctx, id, paymentType, paymentMethod)
}
