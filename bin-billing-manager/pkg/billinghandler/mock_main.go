// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package billinghandler is a generated GoMock package.
package billinghandler

import (
	context "context"
	billing "monorepo/bin-billing-manager/models/billing"
	call "monorepo/bin-call-manager/models/call"
	message "monorepo/bin-message-manager/models/message"
	number "monorepo/bin-number-manager/models/number"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockBillingHandler is a mock of BillingHandler interface.
type MockBillingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBillingHandlerMockRecorder
}

// MockBillingHandlerMockRecorder is the mock recorder for MockBillingHandler.
type MockBillingHandlerMockRecorder struct {
	mock *MockBillingHandler
}

// NewMockBillingHandler creates a new mock instance.
func NewMockBillingHandler(ctrl *gomock.Controller) *MockBillingHandler {
	mock := &MockBillingHandler{ctrl: ctrl}
	mock.recorder = &MockBillingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingHandler) EXPECT() *MockBillingHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBillingHandler) Create(ctx context.Context, customerID, accountID uuid.UUID, referenceType billing.ReferenceType, referenceID uuid.UUID, costPerUnit float32, tmBillingStart string) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, accountID, referenceType, referenceID, costPerUnit, tmBillingStart)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingHandlerMockRecorder) Create(ctx, customerID, accountID, referenceType, referenceID, costPerUnit, tmBillingStart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingHandler)(nil).Create), ctx, customerID, accountID, referenceType, referenceID, costPerUnit, tmBillingStart)
}

// EventCMCallHangup mocks base method.
func (m *MockBillingHandler) EventCMCallHangup(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCMCallHangup", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCMCallHangup indicates an expected call of EventCMCallHangup.
func (mr *MockBillingHandlerMockRecorder) EventCMCallHangup(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCMCallHangup", reflect.TypeOf((*MockBillingHandler)(nil).EventCMCallHangup), ctx, c)
}

// EventCMCallProgressing mocks base method.
func (m *MockBillingHandler) EventCMCallProgressing(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCMCallProgressing", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCMCallProgressing indicates an expected call of EventCMCallProgressing.
func (mr *MockBillingHandlerMockRecorder) EventCMCallProgressing(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCMCallProgressing", reflect.TypeOf((*MockBillingHandler)(nil).EventCMCallProgressing), ctx, c)
}

// EventMMMessageCreated mocks base method.
func (m_2 *MockBillingHandler) EventMMMessageCreated(ctx context.Context, m *message.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "EventMMMessageCreated", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventMMMessageCreated indicates an expected call of EventMMMessageCreated.
func (mr *MockBillingHandlerMockRecorder) EventMMMessageCreated(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventMMMessageCreated", reflect.TypeOf((*MockBillingHandler)(nil).EventMMMessageCreated), ctx, m)
}

// EventNMNumberCreated mocks base method.
func (m *MockBillingHandler) EventNMNumberCreated(ctx context.Context, n *number.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventNMNumberCreated", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventNMNumberCreated indicates an expected call of EventNMNumberCreated.
func (mr *MockBillingHandlerMockRecorder) EventNMNumberCreated(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventNMNumberCreated", reflect.TypeOf((*MockBillingHandler)(nil).EventNMNumberCreated), ctx, n)
}

// EventNMNumberRenewed mocks base method.
func (m *MockBillingHandler) EventNMNumberRenewed(ctx context.Context, n *number.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventNMNumberRenewed", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventNMNumberRenewed indicates an expected call of EventNMNumberRenewed.
func (mr *MockBillingHandlerMockRecorder) EventNMNumberRenewed(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventNMNumberRenewed", reflect.TypeOf((*MockBillingHandler)(nil).EventNMNumberRenewed), ctx, n)
}

// Get mocks base method.
func (m *MockBillingHandler) Get(ctx context.Context, id uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBillingHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBillingHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockBillingHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockBillingHandlerMockRecorder) GetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockBillingHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// Gets mocks base method.
func (m *MockBillingHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockBillingHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockBillingHandler)(nil).Gets), ctx, size, token, filters)
}

// UpdateStatusEnd mocks base method.
func (m *MockBillingHandler) UpdateStatusEnd(ctx context.Context, id uuid.UUID, billingDuration float32, tmBillingEnd string) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusEnd", ctx, id, billingDuration, tmBillingEnd)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusEnd indicates an expected call of UpdateStatusEnd.
func (mr *MockBillingHandlerMockRecorder) UpdateStatusEnd(ctx, id, billingDuration, tmBillingEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusEnd", reflect.TypeOf((*MockBillingHandler)(nil).UpdateStatusEnd), ctx, id, billingDuration, tmBillingEnd)
}
