// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	account "monorepo/bin-billing-manager/models/account"
	billing "monorepo/bin-billing-manager/models/billing"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AccountAddBalance mocks base method.
func (m *MockDBHandler) AccountAddBalance(ctx context.Context, accountID uuid.UUID, balance float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountAddBalance", ctx, accountID, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountAddBalance indicates an expected call of AccountAddBalance.
func (mr *MockDBHandlerMockRecorder) AccountAddBalance(ctx, accountID, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAddBalance", reflect.TypeOf((*MockDBHandler)(nil).AccountAddBalance), ctx, accountID, balance)
}

// AccountCreate mocks base method.
func (m *MockDBHandler) AccountCreate(ctx context.Context, c *account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountCreate indicates an expected call of AccountCreate.
func (mr *MockDBHandlerMockRecorder) AccountCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountCreate", reflect.TypeOf((*MockDBHandler)(nil).AccountCreate), ctx, c)
}

// AccountDelete mocks base method.
func (m *MockDBHandler) AccountDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountDelete indicates an expected call of AccountDelete.
func (mr *MockDBHandlerMockRecorder) AccountDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountDelete", reflect.TypeOf((*MockDBHandler)(nil).AccountDelete), ctx, id)
}

// AccountGet mocks base method.
func (m *MockDBHandler) AccountGet(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGet", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGet indicates an expected call of AccountGet.
func (mr *MockDBHandlerMockRecorder) AccountGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGet", reflect.TypeOf((*MockDBHandler)(nil).AccountGet), ctx, id)
}

// AccountGets mocks base method.
func (m *MockDBHandler) AccountGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGets indicates an expected call of AccountGets.
func (mr *MockDBHandlerMockRecorder) AccountGets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGets", reflect.TypeOf((*MockDBHandler)(nil).AccountGets), ctx, size, token, filters)
}

// AccountSet mocks base method.
func (m *MockDBHandler) AccountSet(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSet", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountSet indicates an expected call of AccountSet.
func (mr *MockDBHandlerMockRecorder) AccountSet(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSet", reflect.TypeOf((*MockDBHandler)(nil).AccountSet), ctx, id, name, detail)
}

// AccountSetPaymentInfo mocks base method.
func (m *MockDBHandler) AccountSetPaymentInfo(ctx context.Context, id uuid.UUID, paymentType account.PaymentType, paymentMethod account.PaymentMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSetPaymentInfo", ctx, id, paymentType, paymentMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountSetPaymentInfo indicates an expected call of AccountSetPaymentInfo.
func (mr *MockDBHandlerMockRecorder) AccountSetPaymentInfo(ctx, id, paymentType, paymentMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSetPaymentInfo", reflect.TypeOf((*MockDBHandler)(nil).AccountSetPaymentInfo), ctx, id, paymentType, paymentMethod)
}

// AccountSubtractBalance mocks base method.
func (m *MockDBHandler) AccountSubtractBalance(ctx context.Context, accountID uuid.UUID, balance float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSubtractBalance", ctx, accountID, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountSubtractBalance indicates an expected call of AccountSubtractBalance.
func (mr *MockDBHandlerMockRecorder) AccountSubtractBalance(ctx, accountID, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSubtractBalance", reflect.TypeOf((*MockDBHandler)(nil).AccountSubtractBalance), ctx, accountID, balance)
}

// BillingCreate mocks base method.
func (m *MockDBHandler) BillingCreate(ctx context.Context, c *billing.Billing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillingCreate indicates an expected call of BillingCreate.
func (mr *MockDBHandlerMockRecorder) BillingCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingCreate", reflect.TypeOf((*MockDBHandler)(nil).BillingCreate), ctx, c)
}

// BillingDelete mocks base method.
func (m *MockDBHandler) BillingDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillingDelete indicates an expected call of BillingDelete.
func (mr *MockDBHandlerMockRecorder) BillingDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingDelete", reflect.TypeOf((*MockDBHandler)(nil).BillingDelete), ctx, id)
}

// BillingGet mocks base method.
func (m *MockDBHandler) BillingGet(ctx context.Context, id uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingGet", ctx, id)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingGet indicates an expected call of BillingGet.
func (mr *MockDBHandlerMockRecorder) BillingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingGet", reflect.TypeOf((*MockDBHandler)(nil).BillingGet), ctx, id)
}

// BillingGetByReferenceID mocks base method.
func (m *MockDBHandler) BillingGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingGetByReferenceID indicates an expected call of BillingGetByReferenceID.
func (mr *MockDBHandlerMockRecorder) BillingGetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingGetByReferenceID", reflect.TypeOf((*MockDBHandler)(nil).BillingGetByReferenceID), ctx, referenceID)
}

// BillingGets mocks base method.
func (m *MockDBHandler) BillingGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingGets indicates an expected call of BillingGets.
func (mr *MockDBHandlerMockRecorder) BillingGets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingGets", reflect.TypeOf((*MockDBHandler)(nil).BillingGets), ctx, size, token, filters)
}

// BillingSetStatus mocks base method.
func (m *MockDBHandler) BillingSetStatus(ctx context.Context, id uuid.UUID, status billing.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillingSetStatus indicates an expected call of BillingSetStatus.
func (mr *MockDBHandlerMockRecorder) BillingSetStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingSetStatus", reflect.TypeOf((*MockDBHandler)(nil).BillingSetStatus), ctx, id, status)
}

// BillingSetStatusEnd mocks base method.
func (m *MockDBHandler) BillingSetStatusEnd(ctx context.Context, id uuid.UUID, billingDuration float32, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingSetStatusEnd", ctx, id, billingDuration, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillingSetStatusEnd indicates an expected call of BillingSetStatusEnd.
func (mr *MockDBHandlerMockRecorder) BillingSetStatusEnd(ctx, id, billingDuration, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingSetStatusEnd", reflect.TypeOf((*MockDBHandler)(nil).BillingSetStatusEnd), ctx, id, billingDuration, timestamp)
}
