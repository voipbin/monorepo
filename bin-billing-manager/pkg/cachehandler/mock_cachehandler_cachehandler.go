// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	account "gitlab.com/voipbin/bin-manager/billing-manager.git/models/account"
	billing "gitlab.com/voipbin/bin-manager/billing-manager.git/models/billing"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// AccountGet mocks base method.
func (m *MockCacheHandler) AccountGet(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGet", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGet indicates an expected call of AccountGet.
func (mr *MockCacheHandlerMockRecorder) AccountGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGet", reflect.TypeOf((*MockCacheHandler)(nil).AccountGet), ctx, id)
}

// AccountGetByCustomerID mocks base method.
func (m *MockCacheHandler) AccountGetByCustomerID(ctx context.Context, customerID uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGetByCustomerID", ctx, customerID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGetByCustomerID indicates an expected call of AccountGetByCustomerID.
func (mr *MockCacheHandlerMockRecorder) AccountGetByCustomerID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGetByCustomerID", reflect.TypeOf((*MockCacheHandler)(nil).AccountGetByCustomerID), ctx, customerID)
}

// AccountSet mocks base method.
func (m *MockCacheHandler) AccountSet(ctx context.Context, data *account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountSet indicates an expected call of AccountSet.
func (mr *MockCacheHandlerMockRecorder) AccountSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSet", reflect.TypeOf((*MockCacheHandler)(nil).AccountSet), ctx, data)
}

// BillingGet mocks base method.
func (m *MockCacheHandler) BillingGet(ctx context.Context, id uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingGet", ctx, id)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingGet indicates an expected call of BillingGet.
func (mr *MockCacheHandlerMockRecorder) BillingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingGet", reflect.TypeOf((*MockCacheHandler)(nil).BillingGet), ctx, id)
}

// BillingGetByReferenceID mocks base method.
func (m *MockCacheHandler) BillingGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingGetByReferenceID indicates an expected call of BillingGetByReferenceID.
func (mr *MockCacheHandlerMockRecorder) BillingGetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingGetByReferenceID", reflect.TypeOf((*MockCacheHandler)(nil).BillingGetByReferenceID), ctx, referenceID)
}

// BillingSet mocks base method.
func (m *MockCacheHandler) BillingSet(ctx context.Context, data *billing.Billing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillingSet indicates an expected call of BillingSet.
func (mr *MockCacheHandlerMockRecorder) BillingSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingSet", reflect.TypeOf((*MockCacheHandler)(nil).BillingSet), ctx, data)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}
