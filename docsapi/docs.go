// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docsapi

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "VoIPBIN Project",
            "email": "pchero21@gmail.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ping": {
            "get": {
                "description": "Used to check the server is alive",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns message pong",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"pong\"}"
                    }
                }
            }
        },
        "/v1.0/available_numbers": {
            "get": {
                "description": "get available numbers of the country",
                "produces": [
                    "application/json"
                ],
                "summary": "List available numbers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The size of results. Max 100",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The ISO country code",
                        "name": "country_code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BodyAvailableNumbersGET"
                        }
                    }
                }
            }
        },
        "/v1.0/calls": {
            "get": {
                "description": "get calls of the user",
                "produces": [
                    "application/json"
                ],
                "summary": "List calls",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The size of results. Max 100",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The token. tm_create",
                        "name": "page_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BodyCallsGET"
                        }
                    }
                }
            },
            "post": {
                "description": "dialing to destination",
                "produces": [
                    "application/json"
                ],
                "summary": "Make an outbound call",
                "parameters": [
                    {
                        "description": "The call detail",
                        "name": "call",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.BodyCallsPOST"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/call.Call"
                        }
                    }
                }
            }
        },
        "/v1.0/calls/{id}": {
            "get": {
                "description": "Returns detail call info of the given call id.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns detail call info.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the call",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/call.Call"
                        }
                    }
                }
            },
            "delete": {
                "description": "Hangup the call of the given id",
                "produces": [
                    "application/json"
                ],
                "summary": "Hangup the call",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the call",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/call.Call"
                        }
                    }
                }
            }
        },
        "/v1.0/conferences": {
            "get": {
                "description": "get conferences of the user",
                "produces": [
                    "application/json"
                ],
                "summary": "Get list of conferences",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The size of results. Max 100",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The token. tm_create",
                        "name": "page_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BodyCallsGET"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new conference with the given information.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new conferences",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "The conference detail",
                        "name": "call",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.BodyConferencesPOST"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/conference.Conference"
                        }
                    }
                }
            }
        },
        "/v1.0/conferences/{id}": {
            "get": {
                "description": "Returns detail conference info of the given conference id.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns detail conference info.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the conference",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/conference.Conference"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the conference. All the participants in the conference will be kicked out.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete the confernce.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the conference",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {}
                }
            }
        },
        "/v1.0/domains": {
            "get": {
                "description": "Gets a list of domains",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a list of domains.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Domain"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new domain and returns detail created domain info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new domain and returns detail created domain info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Domain"
                        }
                    }
                }
            }
        },
        "/v1.0/domains/{id}": {
            "get": {
                "description": "Returns detail flow info of the given domain id.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns detail domain info.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the domain",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Domain"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a domain and returns detail updated domain info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update a domain and reuturns updated domain info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Domain"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a existing domain.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a existing domain.",
                "responses": {
                    "200": {}
                }
            }
        },
        "/v1.0/extension/{id}": {
            "get": {
                "description": "Returns detail extension info of the given extension id.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns detail extension info.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the extension",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/extension.Extension"
                        }
                    }
                }
            }
        },
        "/v1.0/extensions": {
            "get": {
                "description": "Gets a list of extensions",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a list of extensions.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/extension.Extension"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new extension and returns detail created extension info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new domain and returns detail created extension info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/extension.Extension"
                        }
                    }
                }
            }
        },
        "/v1.0/extensions/{id}": {
            "put": {
                "description": "Update a extension and returns detail updated extension info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update a extension and reuturns updated extension info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/extension.Extension"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a existing extension.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a existing extension.",
                "responses": {
                    "200": {}
                }
            }
        },
        "/v1.0/flows": {
            "get": {
                "description": "Gets a list of flows",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a list of flows.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/flow.Flow"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new flow and returns detail created flow info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new flow and returns detail created flow info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/flow.Flow"
                        }
                    }
                }
            }
        },
        "/v1.0/flows/{id}": {
            "get": {
                "description": "Returns detail flow info of the given flow id.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns detail flow info.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the flow",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/flow.Flow"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a flow and returns detail updated flow info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update a flow and reuturns updated flow info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/flow.Flow"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a existing flow.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a existing flow.",
                "responses": {
                    "200": {}
                }
            }
        },
        "/v1.0/numbers": {
            "get": {
                "description": "get order numbers of the country",
                "produces": [
                    "application/json"
                ],
                "summary": "List order numbers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The size of results. Max 100",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The ISO country code",
                        "name": "country_code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BodyNumbersGET"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new number and returns detail created number info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new number and returns detail created number info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/number.Number"
                        }
                    }
                }
            }
        },
        "/v1.0/numbers/{id}": {
            "get": {
                "description": "get order number of the given id",
                "produces": [
                    "application/json"
                ],
                "summary": "Get order number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the order number",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/number.Number"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new number and returns detail created number info.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new number and returns detail created number info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/number.Number"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete order number of the given id and returns deleted item.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete order number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the order number",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/number.Number"
                        }
                    }
                }
            }
        },
        "/v1.0/recordingfiles/{id}": {
            "get": {
                "description": "Download the recording file",
                "produces": [
                    "application/json"
                ],
                "summary": "Download the recording file",
                "responses": {
                    "200": {}
                }
            }
        },
        "/v1.0/recordings": {
            "get": {
                "description": "get recordings of the user",
                "produces": [
                    "application/json"
                ],
                "summary": "List recordings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The size of results. Max 100",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The token. tm_create",
                        "name": "page_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BodyRecordingsGET"
                        }
                    }
                }
            }
        },
        "/v1.0/recordings/{id}": {
            "get": {
                "description": "Returns a detial recording information of the given recording id.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns a detail recording information.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/recording.Recording"
                        }
                    }
                }
            }
        },
        "/v1.0/transcribes": {
            "post": {
                "description": "transcribe a recording",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a transcribe",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/transcribe.Transcribe"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "action.Action": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "option": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "availablenumber.AvailableNumber": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "number": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "call.Address": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name.",
                    "type": "string"
                },
                "target": {
                    "description": "Destination. If the type is 'tel' type, the terget must follow the E.164 format(https://www.itu.int/rec/T-REC-E.164/en).",
                    "type": "string"
                },
                "type": {
                    "description": "Type of address. must be one of [\"sip\", \"tel\"].",
                    "type": "string"
                }
            }
        },
        "call.Call": {
            "type": "object",
            "properties": {
                "chained_call_ids": {
                    "description": "Chained call ids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conf_id": {
                    "description": "Currently joined conference id.",
                    "type": "string"
                },
                "destination": {
                    "description": "Destination info",
                    "type": "object",
                    "$ref": "#/definitions/call.Address"
                },
                "direction": {
                    "description": "Call's direction.",
                    "type": "string"
                },
                "flow_id": {
                    "description": "Attached flow id",
                    "type": "string"
                },
                "hangup_by": {
                    "description": "Describe which endpoint sent the hangup request first.",
                    "type": "string"
                },
                "hangup_reason": {
                    "description": "Desribe detail of hangup reason.",
                    "type": "string"
                },
                "id": {
                    "description": "Call's ID.",
                    "type": "string"
                },
                "master_call_id": {
                    "description": "Master call id",
                    "type": "string"
                },
                "recording_id": {
                    "description": "Recording id(current)",
                    "type": "string"
                },
                "recording_ids": {
                    "description": "Recording ids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "description": "Source info",
                    "type": "object",
                    "$ref": "#/definitions/call.Address"
                },
                "status": {
                    "description": "Call's status.",
                    "type": "string"
                },
                "tm_create": {
                    "description": "Timestamp. Created time.",
                    "type": "string"
                },
                "tm_hangup": {
                    "description": "Timestamp. Hangup time.",
                    "type": "string"
                },
                "tm_progressing": {
                    "description": "Timestamp. Progressing time.",
                    "type": "string"
                },
                "tm_ringing": {
                    "description": "Timestamp. Ringing time.",
                    "type": "string"
                },
                "tm_update": {
                    "description": "Timestamp. Updated time.",
                    "type": "string"
                },
                "type": {
                    "description": "Call's type.",
                    "type": "string"
                },
                "user_id": {
                    "description": "Call owner's ID.",
                    "type": "integer"
                },
                "webhook_uri": {
                    "description": "Webhook destination uri",
                    "type": "string"
                }
            }
        },
        "conference.Conference": {
            "type": "object",
            "properties": {
                "call_ids": {
                    "description": "Currently joined call IDs.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "detail": {
                    "description": "Detail.",
                    "type": "string"
                },
                "id": {
                    "description": "Conference's ID.",
                    "type": "string"
                },
                "name": {
                    "description": "Name.",
                    "type": "string"
                },
                "recording_id": {
                    "description": "Currently recording ID.",
                    "type": "string"
                },
                "recording_ids": {
                    "description": "Recorded recording IDs.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Status.",
                    "type": "string"
                },
                "tm_create": {
                    "description": "Created timestamp.",
                    "type": "string"
                },
                "tm_delete": {
                    "description": "Deleted timestamp.",
                    "type": "string"
                },
                "tm_update": {
                    "description": "Updated timestamp.",
                    "type": "string"
                },
                "type": {
                    "description": "Conference's type.",
                    "type": "string"
                },
                "user_id": {
                    "description": "Conference owner's ID.",
                    "type": "integer"
                }
            }
        },
        "domain.Domain": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "Detail",
                    "type": "string"
                },
                "domain_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Name",
                    "type": "string"
                },
                "tm_create": {
                    "description": "Created timestamp.",
                    "type": "string"
                },
                "tm_delete": {
                    "description": "Deleted timestamp.",
                    "type": "string"
                },
                "tm_update": {
                    "description": "Updated timestamp.",
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "extension.Extension": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "domain_id": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "tm_create": {
                    "type": "string"
                },
                "tm_delete": {
                    "type": "string"
                },
                "tm_update": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "flow.Flow": {
            "type": "object",
            "properties": {
                "actions": {
                    "description": "Actions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/action.Action"
                    }
                },
                "detail": {
                    "description": "Detail",
                    "type": "string"
                },
                "id": {
                    "description": "Flow's ID",
                    "type": "string"
                },
                "name": {
                    "description": "Name",
                    "type": "string"
                },
                "tm_create": {
                    "description": "Created timestamp.",
                    "type": "string"
                },
                "tm_delete": {
                    "description": "Deleted timestamp.",
                    "type": "string"
                },
                "tm_update": {
                    "description": "Updated timestamp.",
                    "type": "string"
                },
                "webhook_uri": {
                    "type": "string"
                }
            }
        },
        "number.Number": {
            "type": "object",
            "properties": {
                "emergency_enabled": {
                    "type": "boolean"
                },
                "flow_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "t38_enabled": {
                    "type": "boolean"
                },
                "tm_create": {
                    "type": "string"
                },
                "tm_delete": {
                    "type": "string"
                },
                "tm_purchase": {
                    "description": "timestamp",
                    "type": "string"
                },
                "tm_update": {
                    "type": "string"
                }
            }
        },
        "recording.Recording": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tm_create": {
                    "type": "string"
                },
                "tm_delete": {
                    "type": "string"
                },
                "tm_end": {
                    "type": "string"
                },
                "tm_start": {
                    "type": "string"
                },
                "tm_update": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.BodyCallsPOST": {
            "type": "object",
            "required": [
                "destination",
                "source"
            ],
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/action.Action"
                    }
                },
                "destination": {
                    "type": "object",
                    "$ref": "#/definitions/call.Address"
                },
                "source": {
                    "type": "object",
                    "$ref": "#/definitions/call.Address"
                },
                "webhook_uri": {
                    "type": "string"
                }
            }
        },
        "request.BodyConferencesPOST": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "detail": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.BodyAvailableNumbersGET": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/availablenumber.AvailableNumber"
                    }
                }
            }
        },
        "response.BodyCallsGET": {
            "type": "object",
            "properties": {
                "next_page_token": {
                    "type": "string"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/call.Call"
                    }
                }
            }
        },
        "response.BodyNumbersGET": {
            "type": "object",
            "properties": {
                "next_page_token": {
                    "type": "string"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/number.Number"
                    }
                }
            }
        },
        "response.BodyRecordingsGET": {
            "type": "object",
            "properties": {
                "next_page_token": {
                    "type": "string"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/recording.Recording"
                    }
                }
            }
        },
        "transcribe.Transcribe": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Transcribe id",
                    "type": "string"
                },
                "language": {
                    "description": "BCP47 type's language code. en-US",
                    "type": "string"
                },
                "reference_id": {
                    "description": "recording's id",
                    "type": "string"
                },
                "transcription": {
                    "description": "transcription",
                    "type": "string"
                },
                "type": {
                    "description": "type",
                    "type": "string"
                },
                "webhook_method": {
                    "description": "webhook method",
                    "type": "string"
                },
                "webhook_uri": {
                    "description": "webhook destination uri",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "api.voipbin.net",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "VoIPBIN project API",
	Description: "RESTful API documents for VoIPBIN project.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
