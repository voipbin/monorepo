// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	address "monorepo/bin-common-handler/models/address"
	account "monorepo/bin-conversation-manager/models/account"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	media "monorepo/bin-conversation-manager/models/media"
	message "monorepo/bin-conversation-manager/models/message"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AccountCreate mocks base method.
func (m *MockDBHandler) AccountCreate(ctx context.Context, ac *account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountCreate", ctx, ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountCreate indicates an expected call of AccountCreate.
func (mr *MockDBHandlerMockRecorder) AccountCreate(ctx, ac any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountCreate", reflect.TypeOf((*MockDBHandler)(nil).AccountCreate), ctx, ac)
}

// AccountDelete mocks base method.
func (m *MockDBHandler) AccountDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountDelete indicates an expected call of AccountDelete.
func (mr *MockDBHandlerMockRecorder) AccountDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountDelete", reflect.TypeOf((*MockDBHandler)(nil).AccountDelete), ctx, id)
}

// AccountGet mocks base method.
func (m *MockDBHandler) AccountGet(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGet", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGet indicates an expected call of AccountGet.
func (mr *MockDBHandlerMockRecorder) AccountGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGet", reflect.TypeOf((*MockDBHandler)(nil).AccountGet), ctx, id)
}

// AccountGets mocks base method.
func (m *MockDBHandler) AccountGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGets indicates an expected call of AccountGets.
func (mr *MockDBHandlerMockRecorder) AccountGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGets", reflect.TypeOf((*MockDBHandler)(nil).AccountGets), ctx, size, token, filters)
}

// AccountSet mocks base method.
func (m *MockDBHandler) AccountSet(ctx context.Context, id uuid.UUID, name, detail, secret, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSet", ctx, id, name, detail, secret, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountSet indicates an expected call of AccountSet.
func (mr *MockDBHandlerMockRecorder) AccountSet(ctx, id, name, detail, secret, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSet", reflect.TypeOf((*MockDBHandler)(nil).AccountSet), ctx, id, name, detail, secret, token)
}

// ConversationCreate mocks base method.
func (m *MockDBHandler) ConversationCreate(ctx context.Context, cv *conversation.Conversation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationCreate", ctx, cv)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConversationCreate indicates an expected call of ConversationCreate.
func (mr *MockDBHandlerMockRecorder) ConversationCreate(ctx, cv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationCreate", reflect.TypeOf((*MockDBHandler)(nil).ConversationCreate), ctx, cv)
}

// ConversationGet mocks base method.
func (m *MockDBHandler) ConversationGet(ctx context.Context, id uuid.UUID) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGet", ctx, id)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGet indicates an expected call of ConversationGet.
func (mr *MockDBHandlerMockRecorder) ConversationGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGet", reflect.TypeOf((*MockDBHandler)(nil).ConversationGet), ctx, id)
}

// ConversationGetBySelfAndPeer mocks base method.
func (m *MockDBHandler) ConversationGetBySelfAndPeer(ctx context.Context, self, peer address.Address) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGetBySelfAndPeer", ctx, self, peer)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGetBySelfAndPeer indicates an expected call of ConversationGetBySelfAndPeer.
func (mr *MockDBHandlerMockRecorder) ConversationGetBySelfAndPeer(ctx, self, peer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGetBySelfAndPeer", reflect.TypeOf((*MockDBHandler)(nil).ConversationGetBySelfAndPeer), ctx, self, peer)
}

// ConversationGets mocks base method.
func (m *MockDBHandler) ConversationGets(ctx context.Context, size uint64, token string, filters map[conversation.Field]any) ([]*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGets indicates an expected call of ConversationGets.
func (mr *MockDBHandlerMockRecorder) ConversationGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGets", reflect.TypeOf((*MockDBHandler)(nil).ConversationGets), ctx, size, token, filters)
}

// ConversationUpdate mocks base method.
func (m *MockDBHandler) ConversationUpdate(ctx context.Context, id uuid.UUID, fields map[conversation.Field]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationUpdate", ctx, id, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConversationUpdate indicates an expected call of ConversationUpdate.
func (mr *MockDBHandlerMockRecorder) ConversationUpdate(ctx, id, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationUpdate", reflect.TypeOf((*MockDBHandler)(nil).ConversationUpdate), ctx, id, fields)
}

// MediaCreate mocks base method.
func (m_2 *MockDBHandler) MediaCreate(ctx context.Context, m *media.Media) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MediaCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MediaCreate indicates an expected call of MediaCreate.
func (mr *MockDBHandlerMockRecorder) MediaCreate(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MediaCreate", reflect.TypeOf((*MockDBHandler)(nil).MediaCreate), ctx, m)
}

// MediaGet mocks base method.
func (m *MockDBHandler) MediaGet(ctx context.Context, id uuid.UUID) (*media.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MediaGet", ctx, id)
	ret0, _ := ret[0].(*media.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MediaGet indicates an expected call of MediaGet.
func (mr *MockDBHandlerMockRecorder) MediaGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MediaGet", reflect.TypeOf((*MockDBHandler)(nil).MediaGet), ctx, id)
}

// MessageCreate mocks base method.
func (m_2 *MockDBHandler) MessageCreate(ctx context.Context, m *message.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MessageCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageCreate indicates an expected call of MessageCreate.
func (mr *MockDBHandlerMockRecorder) MessageCreate(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageCreate", reflect.TypeOf((*MockDBHandler)(nil).MessageCreate), ctx, m)
}

// MessageDelete mocks base method.
func (m *MockDBHandler) MessageDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageDelete indicates an expected call of MessageDelete.
func (mr *MockDBHandlerMockRecorder) MessageDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDelete", reflect.TypeOf((*MockDBHandler)(nil).MessageDelete), ctx, id)
}

// MessageGet mocks base method.
func (m *MockDBHandler) MessageGet(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGet", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGet indicates an expected call of MessageGet.
func (mr *MockDBHandlerMockRecorder) MessageGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGet", reflect.TypeOf((*MockDBHandler)(nil).MessageGet), ctx, id)
}

// MessageGets mocks base method.
func (m *MockDBHandler) MessageGets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGets indicates an expected call of MessageGets.
func (mr *MockDBHandlerMockRecorder) MessageGets(ctx, token, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGets", reflect.TypeOf((*MockDBHandler)(nil).MessageGets), ctx, token, size, filters)
}

// MessageGetsByTransactionID mocks base method.
func (m *MockDBHandler) MessageGetsByTransactionID(ctx context.Context, transactionID, token string, limit uint64) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGetsByTransactionID", ctx, transactionID, token, limit)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGetsByTransactionID indicates an expected call of MessageGetsByTransactionID.
func (mr *MockDBHandlerMockRecorder) MessageGetsByTransactionID(ctx, transactionID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGetsByTransactionID", reflect.TypeOf((*MockDBHandler)(nil).MessageGetsByTransactionID), ctx, transactionID, token, limit)
}

// MessageUpdateStatus mocks base method.
func (m *MockDBHandler) MessageUpdateStatus(ctx context.Context, id uuid.UUID, status message.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageUpdateStatus indicates an expected call of MessageUpdateStatus.
func (mr *MockDBHandlerMockRecorder) MessageUpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageUpdateStatus", reflect.TypeOf((*MockDBHandler)(nil).MessageUpdateStatus), ctx, id, status)
}
