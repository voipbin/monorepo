// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	account "monorepo/bin-conversation-manager/models/account"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	media "monorepo/bin-conversation-manager/models/media"
	message "monorepo/bin-conversation-manager/models/message"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AccountCreate mocks base method.
func (m *MockDBHandler) AccountCreate(ctx context.Context, ac *account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountCreate", ctx, ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountCreate indicates an expected call of AccountCreate.
func (mr *MockDBHandlerMockRecorder) AccountCreate(ctx, ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountCreate", reflect.TypeOf((*MockDBHandler)(nil).AccountCreate), ctx, ac)
}

// AccountDelete mocks base method.
func (m *MockDBHandler) AccountDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountDelete indicates an expected call of AccountDelete.
func (mr *MockDBHandlerMockRecorder) AccountDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountDelete", reflect.TypeOf((*MockDBHandler)(nil).AccountDelete), ctx, id)
}

// AccountGet mocks base method.
func (m *MockDBHandler) AccountGet(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGet", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGet indicates an expected call of AccountGet.
func (mr *MockDBHandlerMockRecorder) AccountGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGet", reflect.TypeOf((*MockDBHandler)(nil).AccountGet), ctx, id)
}

// AccountGetsByCustomerID mocks base method.
func (m *MockDBHandler) AccountGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGetsByCustomerID indicates an expected call of AccountGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) AccountGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).AccountGetsByCustomerID), ctx, customerID, token, limit)
}

// AccountSet mocks base method.
func (m *MockDBHandler) AccountSet(ctx context.Context, id uuid.UUID, name, detail, secret, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSet", ctx, id, name, detail, secret, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountSet indicates an expected call of AccountSet.
func (mr *MockDBHandlerMockRecorder) AccountSet(ctx, id, name, detail, secret, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSet", reflect.TypeOf((*MockDBHandler)(nil).AccountSet), ctx, id, name, detail, secret, token)
}

// ConversationCreate mocks base method.
func (m *MockDBHandler) ConversationCreate(ctx context.Context, cv *conversation.Conversation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationCreate", ctx, cv)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConversationCreate indicates an expected call of ConversationCreate.
func (mr *MockDBHandlerMockRecorder) ConversationCreate(ctx, cv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationCreate", reflect.TypeOf((*MockDBHandler)(nil).ConversationCreate), ctx, cv)
}

// ConversationGet mocks base method.
func (m *MockDBHandler) ConversationGet(ctx context.Context, id uuid.UUID) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGet", ctx, id)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGet indicates an expected call of ConversationGet.
func (mr *MockDBHandlerMockRecorder) ConversationGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGet", reflect.TypeOf((*MockDBHandler)(nil).ConversationGet), ctx, id)
}

// ConversationGetByReferenceInfo mocks base method.
func (m *MockDBHandler) ConversationGetByReferenceInfo(ctx context.Context, customerID uuid.UUID, referenceType conversation.ReferenceType, referenceID string) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGetByReferenceInfo", ctx, customerID, referenceType, referenceID)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGetByReferenceInfo indicates an expected call of ConversationGetByReferenceInfo.
func (mr *MockDBHandlerMockRecorder) ConversationGetByReferenceInfo(ctx, customerID, referenceType, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGetByReferenceInfo", reflect.TypeOf((*MockDBHandler)(nil).ConversationGetByReferenceInfo), ctx, customerID, referenceType, referenceID)
}

// ConversationGetsByCustomerID mocks base method.
func (m *MockDBHandler) ConversationGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationGetsByCustomerID indicates an expected call of ConversationGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) ConversationGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).ConversationGetsByCustomerID), ctx, customerID, token, limit)
}

// ConversationSet mocks base method.
func (m *MockDBHandler) ConversationSet(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationSet", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConversationSet indicates an expected call of ConversationSet.
func (mr *MockDBHandlerMockRecorder) ConversationSet(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationSet", reflect.TypeOf((*MockDBHandler)(nil).ConversationSet), ctx, id, name, detail)
}

// MediaCreate mocks base method.
func (m_2 *MockDBHandler) MediaCreate(ctx context.Context, m *media.Media) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MediaCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MediaCreate indicates an expected call of MediaCreate.
func (mr *MockDBHandlerMockRecorder) MediaCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MediaCreate", reflect.TypeOf((*MockDBHandler)(nil).MediaCreate), ctx, m)
}

// MediaGet mocks base method.
func (m *MockDBHandler) MediaGet(ctx context.Context, id uuid.UUID) (*media.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MediaGet", ctx, id)
	ret0, _ := ret[0].(*media.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MediaGet indicates an expected call of MediaGet.
func (mr *MockDBHandlerMockRecorder) MediaGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MediaGet", reflect.TypeOf((*MockDBHandler)(nil).MediaGet), ctx, id)
}

// MessageCreate mocks base method.
func (m_2 *MockDBHandler) MessageCreate(ctx context.Context, m *message.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MessageCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageCreate indicates an expected call of MessageCreate.
func (mr *MockDBHandlerMockRecorder) MessageCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageCreate", reflect.TypeOf((*MockDBHandler)(nil).MessageCreate), ctx, m)
}

// MessageDelete mocks base method.
func (m *MockDBHandler) MessageDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageDelete indicates an expected call of MessageDelete.
func (mr *MockDBHandlerMockRecorder) MessageDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDelete", reflect.TypeOf((*MockDBHandler)(nil).MessageDelete), ctx, id)
}

// MessageGet mocks base method.
func (m *MockDBHandler) MessageGet(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGet", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGet indicates an expected call of MessageGet.
func (mr *MockDBHandlerMockRecorder) MessageGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGet", reflect.TypeOf((*MockDBHandler)(nil).MessageGet), ctx, id)
}

// MessageGetsByConversationID mocks base method.
func (m *MockDBHandler) MessageGetsByConversationID(ctx context.Context, conversationID uuid.UUID, token string, limit uint64) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGetsByConversationID", ctx, conversationID, token, limit)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGetsByConversationID indicates an expected call of MessageGetsByConversationID.
func (mr *MockDBHandlerMockRecorder) MessageGetsByConversationID(ctx, conversationID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGetsByConversationID", reflect.TypeOf((*MockDBHandler)(nil).MessageGetsByConversationID), ctx, conversationID, token, limit)
}

// MessageGetsByTransactionID mocks base method.
func (m *MockDBHandler) MessageGetsByTransactionID(ctx context.Context, transactionID, token string, limit uint64) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGetsByTransactionID", ctx, transactionID, token, limit)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGetsByTransactionID indicates an expected call of MessageGetsByTransactionID.
func (mr *MockDBHandlerMockRecorder) MessageGetsByTransactionID(ctx, transactionID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGetsByTransactionID", reflect.TypeOf((*MockDBHandler)(nil).MessageGetsByTransactionID), ctx, transactionID, token, limit)
}

// MessageUpdateStatus mocks base method.
func (m *MockDBHandler) MessageUpdateStatus(ctx context.Context, id uuid.UUID, status message.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageUpdateStatus indicates an expected call of MessageUpdateStatus.
func (mr *MockDBHandlerMockRecorder) MessageUpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageUpdateStatus", reflect.TypeOf((*MockDBHandler)(nil).MessageUpdateStatus), ctx, id, status)
}
