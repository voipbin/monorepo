// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package messagehandler -destination ./mock_messagehandler.go -source main.go -build_flags=-mod=mod
//

// Package messagehandler is a generated GoMock package.
package messagehandler

import (
	context "context"
	address "monorepo/bin-common-handler/models/address"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	media "monorepo/bin-conversation-manager/models/media"
	message "monorepo/bin-conversation-manager/models/message"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageHandler) Create(ctx context.Context, customerID, conversationID uuid.UUID, direction message.Direction, status message.Status, referenceType conversation.ReferenceType, referenceID, transactionID string, source *address.Address, text string, medias []media.Media) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, conversationID, direction, status, referenceType, referenceID, transactionID, source, text, medias)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageHandlerMockRecorder) Create(ctx, customerID, conversationID, direction, status, referenceType, referenceID, transactionID, source, text, medias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageHandler)(nil).Create), ctx, customerID, conversationID, direction, status, referenceType, referenceID, transactionID, source, text, medias)
}

// Delete mocks base method.
func (m *MockMessageHandler) Delete(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageHandler)(nil).Delete), ctx, id)
}

// GetsByConversationID mocks base method.
func (m *MockMessageHandler) GetsByConversationID(ctx context.Context, conversationID uuid.UUID, pageToken string, pageSize uint64) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByConversationID", ctx, conversationID, pageToken, pageSize)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByConversationID indicates an expected call of GetsByConversationID.
func (mr *MockMessageHandlerMockRecorder) GetsByConversationID(ctx, conversationID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByConversationID", reflect.TypeOf((*MockMessageHandler)(nil).GetsByConversationID), ctx, conversationID, pageToken, pageSize)
}

// GetsByTransactionID mocks base method.
func (m *MockMessageHandler) GetsByTransactionID(ctx context.Context, transactionID, pageToken string, pageSize uint64) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByTransactionID", ctx, transactionID, pageToken, pageSize)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByTransactionID indicates an expected call of GetsByTransactionID.
func (mr *MockMessageHandlerMockRecorder) GetsByTransactionID(ctx, transactionID, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByTransactionID", reflect.TypeOf((*MockMessageHandler)(nil).GetsByTransactionID), ctx, transactionID, pageToken, pageSize)
}

// Send mocks base method.
func (m *MockMessageHandler) Send(ctx context.Context, cv *conversation.Conversation, text string, medias []media.Media) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, cv, text, medias)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageHandlerMockRecorder) Send(ctx, cv, text, medias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageHandler)(nil).Send), ctx, cv, text, medias)
}

// UpdateStatus mocks base method.
func (m *MockMessageHandler) UpdateStatus(ctx context.Context, id uuid.UUID, status message.Status) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockMessageHandlerMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMessageHandler)(nil).UpdateStatus), ctx, id, status)
}
