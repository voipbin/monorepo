// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package accounthandler is a generated GoMock package.
package accounthandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	account "monorepo/bin-conversation-manager/models/account"
)

// MockAccountHandler is a mock of AccountHandler interface.
type MockAccountHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccountHandlerMockRecorder
}

// MockAccountHandlerMockRecorder is the mock recorder for MockAccountHandler.
type MockAccountHandlerMockRecorder struct {
	mock *MockAccountHandler
}

// NewMockAccountHandler creates a new mock instance.
func NewMockAccountHandler(ctrl *gomock.Controller) *MockAccountHandler {
	mock := &MockAccountHandler{ctrl: ctrl}
	mock.recorder = &MockAccountHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountHandler) EXPECT() *MockAccountHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountHandler) Create(ctx context.Context, customerID uuid.UUID, accountType account.Type, name, detail, secret, token string) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, accountType, name, detail, secret, token)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountHandlerMockRecorder) Create(ctx, customerID, accountType, name, detail, secret, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountHandler)(nil).Create), ctx, customerID, accountType, name, detail, secret, token)
}

// Delete mocks base method.
func (m *MockAccountHandler) Delete(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockAccountHandler) Get(ctx context.Context, id uuid.UUID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountHandler)(nil).Get), ctx, id)
}

// GetsByCustomerID mocks base method.
func (m *MockAccountHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockAccountHandlerMockRecorder) GetsByCustomerID(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockAccountHandler)(nil).GetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// Update mocks base method.
func (m *MockAccountHandler) Update(ctx context.Context, id uuid.UUID, name, detail, secret, token string) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail, secret, token)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountHandlerMockRecorder) Update(ctx, id, name, detail, secret, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountHandler)(nil).Update), ctx, id, name, detail, secret, token)
}
