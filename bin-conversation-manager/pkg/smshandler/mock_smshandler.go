// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package smshandler is a generated GoMock package.
package smshandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	address "monorepo/bin-common-handler/models/address"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	message "monorepo/bin-conversation-manager/models/message"
)

// MockSMSHandler is a mock of SMSHandler interface.
type MockSMSHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSMSHandlerMockRecorder
}

// MockSMSHandlerMockRecorder is the mock recorder for MockSMSHandler.
type MockSMSHandlerMockRecorder struct {
	mock *MockSMSHandler
}

// NewMockSMSHandler creates a new mock instance.
func NewMockSMSHandler(ctrl *gomock.Controller) *MockSMSHandler {
	mock := &MockSMSHandler{ctrl: ctrl}
	mock.recorder = &MockSMSHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSHandler) EXPECT() *MockSMSHandlerMockRecorder {
	return m.recorder
}

// Event mocks base method.
func (m *MockSMSHandler) Event(ctx context.Context, data []byte) ([]*message.Message, *address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event", ctx, data)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(*address.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Event indicates an expected call of Event.
func (mr *MockSMSHandlerMockRecorder) Event(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockSMSHandler)(nil).Event), ctx, data)
}

// Send mocks base method.
func (m *MockSMSHandler) Send(ctx context.Context, cv *conversation.Conversation, transactionID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, cv, transactionID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSMSHandlerMockRecorder) Send(ctx, cv, transactionID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSMSHandler)(nil).Send), ctx, cv, transactionID, text)
}
