// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package smshandler -destination ./mock_smshandler.go -source main.go -build_flags=-mod=mod
//

// Package smshandler is a generated GoMock package.
package smshandler

import (
	context "context"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSMSHandler is a mock of SMSHandler interface.
type MockSMSHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSMSHandlerMockRecorder
	isgomock struct{}
}

// MockSMSHandlerMockRecorder is the mock recorder for MockSMSHandler.
type MockSMSHandlerMockRecorder struct {
	mock *MockSMSHandler
}

// NewMockSMSHandler creates a new mock instance.
func NewMockSMSHandler(ctrl *gomock.Controller) *MockSMSHandler {
	mock := &MockSMSHandler{ctrl: ctrl}
	mock.recorder = &MockSMSHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSHandler) EXPECT() *MockSMSHandlerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSMSHandler) Send(ctx context.Context, cv *conversation.Conversation, messageID uuid.UUID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, cv, messageID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSMSHandlerMockRecorder) Send(ctx, cv, messageID, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSMSHandler)(nil).Send), ctx, cv, messageID, text)
}
