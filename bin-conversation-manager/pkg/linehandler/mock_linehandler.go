// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package linehandler -destination ./mock_linehandler.go -source main.go -build_flags=-mod=mod
//

// Package linehandler is a generated GoMock package.
package linehandler

import (
	context "context"
	address "monorepo/bin-common-handler/models/address"
	account "monorepo/bin-conversation-manager/models/account"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	media "monorepo/bin-conversation-manager/models/media"
	message "monorepo/bin-conversation-manager/models/message"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLineHandler is a mock of LineHandler interface.
type MockLineHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLineHandlerMockRecorder
	isgomock struct{}
}

// MockLineHandlerMockRecorder is the mock recorder for MockLineHandler.
type MockLineHandlerMockRecorder struct {
	mock *MockLineHandler
}

// NewMockLineHandler creates a new mock instance.
func NewMockLineHandler(ctrl *gomock.Controller) *MockLineHandler {
	mock := &MockLineHandler{ctrl: ctrl}
	mock.recorder = &MockLineHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineHandler) EXPECT() *MockLineHandlerMockRecorder {
	return m.recorder
}

// GetParticipant mocks base method.
func (m *MockLineHandler) GetParticipant(ctx context.Context, ac *account.Account, id string) (*address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", ctx, ac, id)
	ret0, _ := ret[0].(*address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant.
func (mr *MockLineHandlerMockRecorder) GetParticipant(ctx, ac, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockLineHandler)(nil).GetParticipant), ctx, ac, id)
}

// Hook mocks base method.
func (m *MockLineHandler) Hook(ctx context.Context, ac *account.Account, data []byte) ([]*conversation.Conversation, []*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hook", ctx, ac, data)
	ret0, _ := ret[0].([]*conversation.Conversation)
	ret1, _ := ret[1].([]*message.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hook indicates an expected call of Hook.
func (mr *MockLineHandlerMockRecorder) Hook(ctx, ac, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hook", reflect.TypeOf((*MockLineHandler)(nil).Hook), ctx, ac, data)
}

// Send mocks base method.
func (m *MockLineHandler) Send(ctx context.Context, cv *conversation.Conversation, ac *account.Account, text string, medias []media.Media) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, cv, ac, text, medias)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLineHandlerMockRecorder) Send(ctx, cv, ac, text, medias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLineHandler)(nil).Send), ctx, cv, ac, text, medias)
}

// Setup mocks base method.
func (m *MockLineHandler) Setup(ctx context.Context, ac *account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockLineHandlerMockRecorder) Setup(ctx, ac any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockLineHandler)(nil).Setup), ctx, ac)
}
