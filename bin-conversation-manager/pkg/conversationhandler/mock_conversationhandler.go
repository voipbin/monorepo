// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package conversationhandler -destination ./mock_conversationhandler.go -source main.go -build_flags=-mod=mod
//

// Package conversationhandler is a generated GoMock package.
package conversationhandler

import (
	context "context"
	address "monorepo/bin-common-handler/models/address"
	conversation "monorepo/bin-conversation-manager/models/conversation"
	media "monorepo/bin-conversation-manager/models/media"
	message "monorepo/bin-conversation-manager/models/message"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockConversationHandler is a mock of ConversationHandler interface.
type MockConversationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConversationHandlerMockRecorder
	isgomock struct{}
}

// MockConversationHandlerMockRecorder is the mock recorder for MockConversationHandler.
type MockConversationHandlerMockRecorder struct {
	mock *MockConversationHandler
}

// NewMockConversationHandler creates a new mock instance.
func NewMockConversationHandler(ctrl *gomock.Controller) *MockConversationHandler {
	mock := &MockConversationHandler{ctrl: ctrl}
	mock.recorder = &MockConversationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationHandler) EXPECT() *MockConversationHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConversationHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, conversationType conversation.Type, dialogID string, self, peer address.Address) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, conversationType, dialogID, self, peer)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConversationHandlerMockRecorder) Create(ctx, customerID, name, detail, conversationType, dialogID, self, peer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConversationHandler)(nil).Create), ctx, customerID, name, detail, conversationType, dialogID, self, peer)
}

// Event mocks base method.
func (m *MockConversationHandler) Event(ctx context.Context, conversationType conversation.Type, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event", ctx, conversationType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event.
func (mr *MockConversationHandlerMockRecorder) Event(ctx, conversationType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockConversationHandler)(nil).Event), ctx, conversationType, data)
}

// Get mocks base method.
func (m *MockConversationHandler) Get(ctx context.Context, id uuid.UUID) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConversationHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConversationHandler)(nil).Get), ctx, id)
}

// GetByTypeAndDialogID mocks base method.
func (m *MockConversationHandler) GetByTypeAndDialogID(ctx context.Context, conversationType conversation.Type, dialogID string) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTypeAndDialogID", ctx, conversationType, dialogID)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTypeAndDialogID indicates an expected call of GetByTypeAndDialogID.
func (mr *MockConversationHandlerMockRecorder) GetByTypeAndDialogID(ctx, conversationType, dialogID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTypeAndDialogID", reflect.TypeOf((*MockConversationHandler)(nil).GetByTypeAndDialogID), ctx, conversationType, dialogID)
}

// Gets mocks base method.
func (m *MockConversationHandler) Gets(ctx context.Context, pageToken string, pageSize uint64, filters map[string]string) ([]*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, pageToken, pageSize, filters)
	ret0, _ := ret[0].([]*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockConversationHandlerMockRecorder) Gets(ctx, pageToken, pageSize, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockConversationHandler)(nil).Gets), ctx, pageToken, pageSize, filters)
}

// Hook mocks base method.
func (m *MockConversationHandler) Hook(ctx context.Context, uri string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hook", ctx, uri, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hook indicates an expected call of Hook.
func (mr *MockConversationHandlerMockRecorder) Hook(ctx, uri, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hook", reflect.TypeOf((*MockConversationHandler)(nil).Hook), ctx, uri, data)
}

// MessageSend mocks base method.
func (m *MockConversationHandler) MessageSend(ctx context.Context, conversationID uuid.UUID, text string, medias []media.Media) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSend", ctx, conversationID, text, medias)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSend indicates an expected call of MessageSend.
func (mr *MockConversationHandlerMockRecorder) MessageSend(ctx, conversationID, text, medias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSend", reflect.TypeOf((*MockConversationHandler)(nil).MessageSend), ctx, conversationID, text, medias)
}

// Update mocks base method.
func (m *MockConversationHandler) Update(ctx context.Context, id uuid.UUID, name, detail string) (*conversation.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail)
	ret0, _ := ret[0].(*conversation.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockConversationHandlerMockRecorder) Update(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConversationHandler)(nil).Update), ctx, id, name, detail)
}
