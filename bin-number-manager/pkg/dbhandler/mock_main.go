// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBHandler) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBHandler)(nil).Close))
}

// NumberCreate mocks base method.
func (m *MockDBHandler) NumberCreate(ctx context.Context, n *number.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberCreate", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberCreate indicates an expected call of NumberCreate.
func (mr *MockDBHandlerMockRecorder) NumberCreate(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberCreate", reflect.TypeOf((*MockDBHandler)(nil).NumberCreate), ctx, n)
}

// NumberDelete mocks base method.
func (m *MockDBHandler) NumberDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberDelete indicates an expected call of NumberDelete.
func (mr *MockDBHandlerMockRecorder) NumberDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberDelete", reflect.TypeOf((*MockDBHandler)(nil).NumberDelete), ctx, id)
}

// NumberGet mocks base method.
func (m *MockDBHandler) NumberGet(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGet", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGet indicates an expected call of NumberGet.
func (mr *MockDBHandlerMockRecorder) NumberGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGet", reflect.TypeOf((*MockDBHandler)(nil).NumberGet), ctx, id)
}

// NumberGets mocks base method.
func (m *MockDBHandler) NumberGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGets indicates an expected call of NumberGets.
func (mr *MockDBHandlerMockRecorder) NumberGets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGets", reflect.TypeOf((*MockDBHandler)(nil).NumberGets), ctx, size, token, filters)
}

// NumberGetsByTMRenew mocks base method.
func (m *MockDBHandler) NumberGetsByTMRenew(ctx context.Context, tmRenew string, size uint64, filters map[string]string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetsByTMRenew", ctx, tmRenew, size, filters)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetsByTMRenew indicates an expected call of NumberGetsByTMRenew.
func (mr *MockDBHandlerMockRecorder) NumberGetsByTMRenew(ctx, tmRenew, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetsByTMRenew", reflect.TypeOf((*MockDBHandler)(nil).NumberGetsByTMRenew), ctx, tmRenew, size, filters)
}

// NumberUpdateCallFlowID mocks base method.
func (m *MockDBHandler) NumberUpdateCallFlowID(ctx context.Context, id, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateCallFlowID", ctx, id, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateCallFlowID indicates an expected call of NumberUpdateCallFlowID.
func (mr *MockDBHandlerMockRecorder) NumberUpdateCallFlowID(ctx, id, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateCallFlowID", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateCallFlowID), ctx, id, flowID)
}

// NumberUpdateFlowID mocks base method.
func (m *MockDBHandler) NumberUpdateFlowID(ctx context.Context, id, callFlowID, messageFlowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateFlowID", ctx, id, callFlowID, messageFlowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateFlowID indicates an expected call of NumberUpdateFlowID.
func (mr *MockDBHandlerMockRecorder) NumberUpdateFlowID(ctx, id, callFlowID, messageFlowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateFlowID", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateFlowID), ctx, id, callFlowID, messageFlowID)
}

// NumberUpdateInfo mocks base method.
func (m *MockDBHandler) NumberUpdateInfo(ctx context.Context, id, callflowID, messageFlowID uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateInfo", ctx, id, callflowID, messageFlowID, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateInfo indicates an expected call of NumberUpdateInfo.
func (mr *MockDBHandlerMockRecorder) NumberUpdateInfo(ctx, id, callflowID, messageFlowID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateInfo", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateInfo), ctx, id, callflowID, messageFlowID, name, detail)
}

// NumberUpdateMessageFlowID mocks base method.
func (m *MockDBHandler) NumberUpdateMessageFlowID(ctx context.Context, id, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateMessageFlowID", ctx, id, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateMessageFlowID indicates an expected call of NumberUpdateMessageFlowID.
func (mr *MockDBHandlerMockRecorder) NumberUpdateMessageFlowID(ctx, id, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateMessageFlowID", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateMessageFlowID), ctx, id, flowID)
}

// NumberUpdateTMRenew mocks base method.
func (m *MockDBHandler) NumberUpdateTMRenew(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateTMRenew", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateTMRenew indicates an expected call of NumberUpdateTMRenew.
func (mr *MockDBHandlerMockRecorder) NumberUpdateTMRenew(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateTMRenew", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateTMRenew), ctx, id)
}
