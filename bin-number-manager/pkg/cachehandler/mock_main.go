// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package cachehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	number "monorepo/bin-number-manager/models/number"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
	isgomock struct{}
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// NumberDel mocks base method.
func (m *MockCacheHandler) NumberDel(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberDel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberDel indicates an expected call of NumberDel.
func (mr *MockCacheHandlerMockRecorder) NumberDel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberDel", reflect.TypeOf((*MockCacheHandler)(nil).NumberDel), ctx, id)
}

// NumberDelByNumber mocks base method.
func (m *MockCacheHandler) NumberDelByNumber(ctx context.Context, num string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberDelByNumber", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberDelByNumber indicates an expected call of NumberDelByNumber.
func (mr *MockCacheHandlerMockRecorder) NumberDelByNumber(ctx, num any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberDelByNumber", reflect.TypeOf((*MockCacheHandler)(nil).NumberDelByNumber), ctx, num)
}

// NumberGet mocks base method.
func (m *MockCacheHandler) NumberGet(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGet", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGet indicates an expected call of NumberGet.
func (mr *MockCacheHandlerMockRecorder) NumberGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGet", reflect.TypeOf((*MockCacheHandler)(nil).NumberGet), ctx, id)
}

// NumberGetByNumber mocks base method.
func (m *MockCacheHandler) NumberGetByNumber(ctx context.Context, num string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetByNumber", ctx, num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetByNumber indicates an expected call of NumberGetByNumber.
func (mr *MockCacheHandlerMockRecorder) NumberGetByNumber(ctx, num any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetByNumber", reflect.TypeOf((*MockCacheHandler)(nil).NumberGetByNumber), ctx, num)
}

// NumberSet mocks base method.
func (m *MockCacheHandler) NumberSet(ctx context.Context, numb *number.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberSet", ctx, numb)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberSet indicates an expected call of NumberSet.
func (mr *MockCacheHandlerMockRecorder) NumberSet(ctx, numb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberSet", reflect.TypeOf((*MockCacheHandler)(nil).NumberSet), ctx, numb)
}
