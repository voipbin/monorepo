// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package numberhandlertwilio -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package numberhandlertwilio is a generated GoMock package.
package numberhandlertwilio

import (
	context "context"
	availablenumber "monorepo/bin-number-manager/models/availablenumber"
	number "monorepo/bin-number-manager/models/number"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockNumberHandlerTwilio is a mock of NumberHandlerTwilio interface.
type MockNumberHandlerTwilio struct {
	ctrl     *gomock.Controller
	recorder *MockNumberHandlerTwilioMockRecorder
	isgomock struct{}
}

// MockNumberHandlerTwilioMockRecorder is the mock recorder for MockNumberHandlerTwilio.
type MockNumberHandlerTwilioMockRecorder struct {
	mock *MockNumberHandlerTwilio
}

// NewMockNumberHandlerTwilio creates a new mock instance.
func NewMockNumberHandlerTwilio(ctrl *gomock.Controller) *MockNumberHandlerTwilio {
	mock := &MockNumberHandlerTwilio{ctrl: ctrl}
	mock.recorder = &MockNumberHandlerTwilioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumberHandlerTwilio) EXPECT() *MockNumberHandlerTwilioMockRecorder {
	return m.recorder
}

// CreateNumber mocks base method.
func (m *MockNumberHandlerTwilio) CreateNumber(customerID uuid.UUID, num string, flowID uuid.UUID, name, detail string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNumber", customerID, num, flowID, name, detail)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNumber indicates an expected call of CreateNumber.
func (mr *MockNumberHandlerTwilioMockRecorder) CreateNumber(customerID, num, flowID, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNumber", reflect.TypeOf((*MockNumberHandlerTwilio)(nil).CreateNumber), customerID, num, flowID, name, detail)
}

// GetAvailableNumbers mocks base method.
func (m *MockNumberHandlerTwilio) GetAvailableNumbers(countyCode string, limit uint) ([]*availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableNumbers", countyCode, limit)
	ret0, _ := ret[0].([]*availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableNumbers indicates an expected call of GetAvailableNumbers.
func (mr *MockNumberHandlerTwilioMockRecorder) GetAvailableNumbers(countyCode, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableNumbers", reflect.TypeOf((*MockNumberHandlerTwilio)(nil).GetAvailableNumbers), countyCode, limit)
}

// ReleaseNumber mocks base method.
func (m *MockNumberHandlerTwilio) ReleaseNumber(ctx context.Context, num *number.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseNumber", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseNumber indicates an expected call of ReleaseNumber.
func (mr *MockNumberHandlerTwilioMockRecorder) ReleaseNumber(ctx, num any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseNumber", reflect.TypeOf((*MockNumberHandlerTwilio)(nil).ReleaseNumber), ctx, num)
}
