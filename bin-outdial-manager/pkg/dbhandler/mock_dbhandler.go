// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	address "monorepo/bin-common-handler/models/address"
	outdial "monorepo/bin-outdial-manager/models/outdial"
	outdialtarget "monorepo/bin-outdial-manager/models/outdialtarget"
	outdialtargetcall "monorepo/bin-outdial-manager/models/outdialtargetcall"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// OutdialCreate mocks base method.
func (m *MockDBHandler) OutdialCreate(ctx context.Context, f *outdial.Outdial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialCreate", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialCreate indicates an expected call of OutdialCreate.
func (mr *MockDBHandlerMockRecorder) OutdialCreate(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialCreate", reflect.TypeOf((*MockDBHandler)(nil).OutdialCreate), ctx, f)
}

// OutdialDelete mocks base method.
func (m *MockDBHandler) OutdialDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialDelete indicates an expected call of OutdialDelete.
func (mr *MockDBHandlerMockRecorder) OutdialDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialDelete", reflect.TypeOf((*MockDBHandler)(nil).OutdialDelete), ctx, id)
}

// OutdialGet mocks base method.
func (m *MockDBHandler) OutdialGet(ctx context.Context, id uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialGet", ctx, id)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialGet indicates an expected call of OutdialGet.
func (mr *MockDBHandlerMockRecorder) OutdialGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialGet", reflect.TypeOf((*MockDBHandler)(nil).OutdialGet), ctx, id)
}

// OutdialGetsByCustomerID mocks base method.
func (m *MockDBHandler) OutdialGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialGetsByCustomerID indicates an expected call of OutdialGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) OutdialGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).OutdialGetsByCustomerID), ctx, customerID, token, limit)
}

// OutdialTargetCallCreate mocks base method.
func (m *MockDBHandler) OutdialTargetCallCreate(ctx context.Context, t *outdialtargetcall.OutdialTargetCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetCallCreate indicates an expected call of OutdialTargetCallCreate.
func (mr *MockDBHandlerMockRecorder) OutdialTargetCallCreate(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallCreate", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetCallCreate), ctx, t)
}

// OutdialTargetCallGetsByCampaignIDAndStatus mocks base method.
func (m *MockDBHandler) OutdialTargetCallGetsByCampaignIDAndStatus(ctx context.Context, outdialID uuid.UUID, status outdialtargetcall.Status) ([]*outdialtargetcall.OutdialTargetCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallGetsByCampaignIDAndStatus", ctx, outdialID, status)
	ret0, _ := ret[0].([]*outdialtargetcall.OutdialTargetCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetCallGetsByCampaignIDAndStatus indicates an expected call of OutdialTargetCallGetsByCampaignIDAndStatus.
func (mr *MockDBHandlerMockRecorder) OutdialTargetCallGetsByCampaignIDAndStatus(ctx, outdialID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallGetsByCampaignIDAndStatus", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetCallGetsByCampaignIDAndStatus), ctx, outdialID, status)
}

// OutdialTargetCallGetsByOutdialIDAndStatus mocks base method.
func (m *MockDBHandler) OutdialTargetCallGetsByOutdialIDAndStatus(ctx context.Context, outdialID uuid.UUID, status outdialtargetcall.Status) ([]*outdialtargetcall.OutdialTargetCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallGetsByOutdialIDAndStatus", ctx, outdialID, status)
	ret0, _ := ret[0].([]*outdialtargetcall.OutdialTargetCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetCallGetsByOutdialIDAndStatus indicates an expected call of OutdialTargetCallGetsByOutdialIDAndStatus.
func (mr *MockDBHandlerMockRecorder) OutdialTargetCallGetsByOutdialIDAndStatus(ctx, outdialID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallGetsByOutdialIDAndStatus", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetCallGetsByOutdialIDAndStatus), ctx, outdialID, status)
}

// OutdialTargetCreate mocks base method.
func (m *MockDBHandler) OutdialTargetCreate(ctx context.Context, t *outdialtarget.OutdialTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetCreate indicates an expected call of OutdialTargetCreate.
func (mr *MockDBHandlerMockRecorder) OutdialTargetCreate(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCreate", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetCreate), ctx, t)
}

// OutdialTargetDelete mocks base method.
func (m *MockDBHandler) OutdialTargetDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetDelete indicates an expected call of OutdialTargetDelete.
func (mr *MockDBHandlerMockRecorder) OutdialTargetDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetDelete", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetDelete), ctx, id)
}

// OutdialTargetGet mocks base method.
func (m *MockDBHandler) OutdialTargetGet(ctx context.Context, id uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetGet", ctx, id)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetGet indicates an expected call of OutdialTargetGet.
func (mr *MockDBHandlerMockRecorder) OutdialTargetGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetGet", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetGet), ctx, id)
}

// OutdialTargetGetAvailable mocks base method.
func (m *MockDBHandler) OutdialTargetGetAvailable(ctx context.Context, outdialID uuid.UUID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4 int, limit uint64) ([]*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetGetAvailable", ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit)
	ret0, _ := ret[0].([]*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetGetAvailable indicates an expected call of OutdialTargetGetAvailable.
func (mr *MockDBHandlerMockRecorder) OutdialTargetGetAvailable(ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetGetAvailable", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetGetAvailable), ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit)
}

// OutdialTargetGetsByOutdialID mocks base method.
func (m *MockDBHandler) OutdialTargetGetsByOutdialID(ctx context.Context, outdialID uuid.UUID, token string, limit uint64) ([]*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetGetsByOutdialID", ctx, outdialID, token, limit)
	ret0, _ := ret[0].([]*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetGetsByOutdialID indicates an expected call of OutdialTargetGetsByOutdialID.
func (mr *MockDBHandlerMockRecorder) OutdialTargetGetsByOutdialID(ctx, outdialID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetGetsByOutdialID", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetGetsByOutdialID), ctx, outdialID, token, limit)
}

// OutdialTargetUpdateBasicInfo mocks base method.
func (m *MockDBHandler) OutdialTargetUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetUpdateBasicInfo indicates an expected call of OutdialTargetUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) OutdialTargetUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetUpdateBasicInfo), ctx, id, name, detail)
}

// OutdialTargetUpdateData mocks base method.
func (m *MockDBHandler) OutdialTargetUpdateData(ctx context.Context, id uuid.UUID, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetUpdateData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetUpdateData indicates an expected call of OutdialTargetUpdateData.
func (mr *MockDBHandlerMockRecorder) OutdialTargetUpdateData(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetUpdateData", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetUpdateData), ctx, id, data)
}

// OutdialTargetUpdateDestinations mocks base method.
func (m *MockDBHandler) OutdialTargetUpdateDestinations(ctx context.Context, id uuid.UUID, destination0, destination1, destination2, destination3, destination4 *address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetUpdateDestinations", ctx, id, destination0, destination1, destination2, destination3, destination4)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetUpdateDestinations indicates an expected call of OutdialTargetUpdateDestinations.
func (mr *MockDBHandlerMockRecorder) OutdialTargetUpdateDestinations(ctx, id, destination0, destination1, destination2, destination3, destination4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetUpdateDestinations", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetUpdateDestinations), ctx, id, destination0, destination1, destination2, destination3, destination4)
}

// OutdialTargetUpdateProgressing mocks base method.
func (m *MockDBHandler) OutdialTargetUpdateProgressing(ctx context.Context, id uuid.UUID, destinationIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetUpdateProgressing", ctx, id, destinationIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetUpdateProgressing indicates an expected call of OutdialTargetUpdateProgressing.
func (mr *MockDBHandlerMockRecorder) OutdialTargetUpdateProgressing(ctx, id, destinationIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetUpdateProgressing", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetUpdateProgressing), ctx, id, destinationIndex)
}

// OutdialTargetUpdateStatus mocks base method.
func (m *MockDBHandler) OutdialTargetUpdateStatus(ctx context.Context, id uuid.UUID, status outdialtarget.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetUpdateStatus indicates an expected call of OutdialTargetUpdateStatus.
func (mr *MockDBHandlerMockRecorder) OutdialTargetUpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetUpdateStatus", reflect.TypeOf((*MockDBHandler)(nil).OutdialTargetUpdateStatus), ctx, id, status)
}

// OutdialUpdateBasicInfo mocks base method.
func (m *MockDBHandler) OutdialUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialUpdateBasicInfo indicates an expected call of OutdialUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) OutdialUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).OutdialUpdateBasicInfo), ctx, id, name, detail)
}

// OutdialUpdateCampaignID mocks base method.
func (m *MockDBHandler) OutdialUpdateCampaignID(ctx context.Context, id, campaignID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialUpdateCampaignID", ctx, id, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialUpdateCampaignID indicates an expected call of OutdialUpdateCampaignID.
func (mr *MockDBHandlerMockRecorder) OutdialUpdateCampaignID(ctx, id, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialUpdateCampaignID", reflect.TypeOf((*MockDBHandler)(nil).OutdialUpdateCampaignID), ctx, id, campaignID)
}

// OutdialUpdateData mocks base method.
func (m *MockDBHandler) OutdialUpdateData(ctx context.Context, id uuid.UUID, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialUpdateData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialUpdateData indicates an expected call of OutdialUpdateData.
func (mr *MockDBHandlerMockRecorder) OutdialUpdateData(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialUpdateData", reflect.TypeOf((*MockDBHandler)(nil).OutdialUpdateData), ctx, id, data)
}
