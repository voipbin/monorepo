// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package outdialtargethandler -destination ./mock_outdialtargethandler.go -source main.go -build_flags=-mod=mod
//

// Package outdialtargethandler is a generated GoMock package.
package outdialtargethandler

import (
	context "context"
	address "monorepo/bin-common-handler/models/address"
	outdialtarget "monorepo/bin-outdial-manager/models/outdialtarget"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOutdialTargetHandler is a mock of OutdialTargetHandler interface.
type MockOutdialTargetHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOutdialTargetHandlerMockRecorder
	isgomock struct{}
}

// MockOutdialTargetHandlerMockRecorder is the mock recorder for MockOutdialTargetHandler.
type MockOutdialTargetHandlerMockRecorder struct {
	mock *MockOutdialTargetHandler
}

// NewMockOutdialTargetHandler creates a new mock instance.
func NewMockOutdialTargetHandler(ctrl *gomock.Controller) *MockOutdialTargetHandler {
	mock := &MockOutdialTargetHandler{ctrl: ctrl}
	mock.recorder = &MockOutdialTargetHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutdialTargetHandler) EXPECT() *MockOutdialTargetHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOutdialTargetHandler) Create(ctx context.Context, outdialID uuid.UUID, name, detail, data string, destination0, destination1, destination2, destination3, destination4 *address.Address) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOutdialTargetHandlerMockRecorder) Create(ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOutdialTargetHandler)(nil).Create), ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
}

// Delete mocks base method.
func (m *MockOutdialTargetHandler) Delete(ctx context.Context, id uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOutdialTargetHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOutdialTargetHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockOutdialTargetHandler) Get(ctx context.Context, id uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOutdialTargetHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOutdialTargetHandler)(nil).Get), ctx, id)
}

// GetAvailable mocks base method.
func (m *MockOutdialTargetHandler) GetAvailable(ctx context.Context, outdialID uuid.UUID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4 int, limit uint64) ([]*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailable", ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit)
	ret0, _ := ret[0].([]*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailable indicates an expected call of GetAvailable.
func (mr *MockOutdialTargetHandlerMockRecorder) GetAvailable(ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailable", reflect.TypeOf((*MockOutdialTargetHandler)(nil).GetAvailable), ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, limit)
}

// GetsByOutdialID mocks base method.
func (m *MockOutdialTargetHandler) GetsByOutdialID(ctx context.Context, outdialID uuid.UUID, token string, limit uint64) ([]*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByOutdialID", ctx, outdialID, token, limit)
	ret0, _ := ret[0].([]*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByOutdialID indicates an expected call of GetsByOutdialID.
func (mr *MockOutdialTargetHandlerMockRecorder) GetsByOutdialID(ctx, outdialID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByOutdialID", reflect.TypeOf((*MockOutdialTargetHandler)(nil).GetsByOutdialID), ctx, outdialID, token, limit)
}

// UpdateProgressing mocks base method.
func (m *MockOutdialTargetHandler) UpdateProgressing(ctx context.Context, id uuid.UUID, destinationIndex int) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgressing", ctx, id, destinationIndex)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProgressing indicates an expected call of UpdateProgressing.
func (mr *MockOutdialTargetHandlerMockRecorder) UpdateProgressing(ctx, id, destinationIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgressing", reflect.TypeOf((*MockOutdialTargetHandler)(nil).UpdateProgressing), ctx, id, destinationIndex)
}

// UpdateStatus mocks base method.
func (m *MockOutdialTargetHandler) UpdateStatus(ctx context.Context, id uuid.UUID, status outdialtarget.Status) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOutdialTargetHandlerMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOutdialTargetHandler)(nil).UpdateStatus), ctx, id, status)
}
