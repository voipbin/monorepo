// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	outdial "monorepo/bin-outdial-manager/models/outdial"
	outdialtarget "monorepo/bin-outdial-manager/models/outdialtarget"
	outdialtargetcall "monorepo/bin-outdial-manager/models/outdialtargetcall"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// OutdialGet mocks base method.
func (m *MockCacheHandler) OutdialGet(ctx context.Context, id uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialGet", ctx, id)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialGet indicates an expected call of OutdialGet.
func (mr *MockCacheHandlerMockRecorder) OutdialGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialGet", reflect.TypeOf((*MockCacheHandler)(nil).OutdialGet), ctx, id)
}

// OutdialSet mocks base method.
func (m *MockCacheHandler) OutdialSet(ctx context.Context, t *outdial.Outdial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialSet indicates an expected call of OutdialSet.
func (mr *MockCacheHandlerMockRecorder) OutdialSet(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialSet", reflect.TypeOf((*MockCacheHandler)(nil).OutdialSet), ctx, t)
}

// OutdialTargetCallGet mocks base method.
func (m *MockCacheHandler) OutdialTargetCallGet(ctx context.Context, id uuid.UUID) (*outdialtargetcall.OutdialTargetCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallGet", ctx, id)
	ret0, _ := ret[0].(*outdialtargetcall.OutdialTargetCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetCallGet indicates an expected call of OutdialTargetCallGet.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetCallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallGet", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetCallGet), ctx, id)
}

// OutdialTargetCallGetByActiveflowID mocks base method.
func (m *MockCacheHandler) OutdialTargetCallGetByActiveflowID(ctx context.Context, activeflowID uuid.UUID) (*outdialtargetcall.OutdialTargetCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallGetByActiveflowID", ctx, activeflowID)
	ret0, _ := ret[0].(*outdialtargetcall.OutdialTargetCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetCallGetByActiveflowID indicates an expected call of OutdialTargetCallGetByActiveflowID.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetCallGetByActiveflowID(ctx, activeflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallGetByActiveflowID", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetCallGetByActiveflowID), ctx, activeflowID)
}

// OutdialTargetCallGetByReferenceID mocks base method.
func (m *MockCacheHandler) OutdialTargetCallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*outdialtargetcall.OutdialTargetCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*outdialtargetcall.OutdialTargetCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetCallGetByReferenceID indicates an expected call of OutdialTargetCallGetByReferenceID.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetCallGetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallGetByReferenceID", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetCallGetByReferenceID), ctx, referenceID)
}

// OutdialTargetCallSet mocks base method.
func (m *MockCacheHandler) OutdialTargetCallSet(ctx context.Context, t *outdialtargetcall.OutdialTargetCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetCallSet indicates an expected call of OutdialTargetCallSet.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetCallSet(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallSet", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetCallSet), ctx, t)
}

// OutdialTargetCallSetByActiveflowID mocks base method.
func (m *MockCacheHandler) OutdialTargetCallSetByActiveflowID(ctx context.Context, t *outdialtargetcall.OutdialTargetCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallSetByActiveflowID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetCallSetByActiveflowID indicates an expected call of OutdialTargetCallSetByActiveflowID.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetCallSetByActiveflowID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallSetByActiveflowID", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetCallSetByActiveflowID), ctx, t)
}

// OutdialTargetCallSetByReferenceID mocks base method.
func (m *MockCacheHandler) OutdialTargetCallSetByReferenceID(ctx context.Context, t *outdialtargetcall.OutdialTargetCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetCallSetByReferenceID", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetCallSetByReferenceID indicates an expected call of OutdialTargetCallSetByReferenceID.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetCallSetByReferenceID(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetCallSetByReferenceID", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetCallSetByReferenceID), ctx, t)
}

// OutdialTargetGet mocks base method.
func (m *MockCacheHandler) OutdialTargetGet(ctx context.Context, id uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetGet", ctx, id)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutdialTargetGet indicates an expected call of OutdialTargetGet.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetGet", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetGet), ctx, id)
}

// OutdialTargetSet mocks base method.
func (m *MockCacheHandler) OutdialTargetSet(ctx context.Context, t *outdialtarget.OutdialTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutdialTargetSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutdialTargetSet indicates an expected call of OutdialTargetSet.
func (mr *MockCacheHandlerMockRecorder) OutdialTargetSet(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutdialTargetSet", reflect.TypeOf((*MockCacheHandler)(nil).OutdialTargetSet), ctx, t)
}
