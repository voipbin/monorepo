// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package outdialhandler -destination ./mock_outdialhandler.go -source main.go -build_flags=-mod=mod
//

// Package outdialhandler is a generated GoMock package.
package outdialhandler

import (
	context "context"
	outdial "monorepo/bin-outdial-manager/models/outdial"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOutdialHandler is a mock of OutdialHandler interface.
type MockOutdialHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOutdialHandlerMockRecorder
	isgomock struct{}
}

// MockOutdialHandlerMockRecorder is the mock recorder for MockOutdialHandler.
type MockOutdialHandlerMockRecorder struct {
	mock *MockOutdialHandler
}

// NewMockOutdialHandler creates a new mock instance.
func NewMockOutdialHandler(ctrl *gomock.Controller) *MockOutdialHandler {
	mock := &MockOutdialHandler{ctrl: ctrl}
	mock.recorder = &MockOutdialHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutdialHandler) EXPECT() *MockOutdialHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOutdialHandler) Create(ctx context.Context, customerID, campaignID uuid.UUID, name, detail, data string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, campaignID, name, detail, data)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOutdialHandlerMockRecorder) Create(ctx, customerID, campaignID, name, detail, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOutdialHandler)(nil).Create), ctx, customerID, campaignID, name, detail, data)
}

// Delete mocks base method.
func (m *MockOutdialHandler) Delete(ctx context.Context, id uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOutdialHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOutdialHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockOutdialHandler) Get(ctx context.Context, id uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOutdialHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOutdialHandler)(nil).Get), ctx, id)
}

// GetsByCustomerID mocks base method.
func (m *MockOutdialHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockOutdialHandlerMockRecorder) GetsByCustomerID(ctx, customerID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockOutdialHandler)(nil).GetsByCustomerID), ctx, customerID, token, limit)
}

// UpdateBasicInfo mocks base method.
func (m *MockOutdialHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockOutdialHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockOutdialHandler)(nil).UpdateBasicInfo), ctx, id, name, detail)
}

// UpdateCampaignID mocks base method.
func (m *MockOutdialHandler) UpdateCampaignID(ctx context.Context, id, campaignID uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignID", ctx, id, campaignID)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignID indicates an expected call of UpdateCampaignID.
func (mr *MockOutdialHandlerMockRecorder) UpdateCampaignID(ctx, id, campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignID", reflect.TypeOf((*MockOutdialHandler)(nil).UpdateCampaignID), ctx, id, campaignID)
}

// UpdateData mocks base method.
func (m *MockOutdialHandler) UpdateData(ctx context.Context, id uuid.UUID, data string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, id, data)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockOutdialHandlerMockRecorder) UpdateData(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockOutdialHandler)(nil).UpdateData), ctx, id, data)
}
