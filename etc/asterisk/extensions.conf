; NOTICE

; VB-X variables
; VB-X variables are for channels table.
; all keys are must be upper case.
; --------------------------------------
; VB-CONTEXT_TYPE: Channel's context type. call/conf (conf sets by call-manager)
; VB-DIRECTION: Channel's direction. incoming/outgoing.
; VB-SIP_CALLID: SIP's call id.
; VB-SIP_PAI: SIP's P-Asserted-Identity header info.
; VB-SIP_PRIVACY: SIP's Privacy header info.
; VB-SIP_TRANSPORT: SIP's transport info. Sets by kamailio. tcp/udp/tls/wss


; stasis contexts
; stasis contexts are for the calls table.
; all key and value are must be lower case.
; ----------------------------------------
; call-in: stasis context for incoming calls.
; call-out: stasis context for outgoing calls.
; call-svc: stasis context for the call from the svc-*.


; stasis variables
; stasis variables are will be used for calls table.
; all keys are must be lower case.
; --------------------------------------------------
; context: Requested domain name. Sets by kamailio. sip-service.voipbin.net, ...
; source: Source IP address where this request has sent.


[general]
static=yes
writeprotect=no
clearglobalvars=no

[globals]
CONSOLE=Console/dsp   ; Console interface for demo
IAXINFO=guest         ; IAXtel username/password
TRUNK=DAHDI/G2        ; Trunk interface
TRUNKMSD=1            ; MSD digits to strip (usually 1 or 0)

; call incoming handler
[call-in]
exten => _[+0-9a-zA-Z].,1,NoOp(call-in)
 same => n,Set(VB-CONTEXT_TYPE=call)
 same => n,Set(VB-DIRECTION=incoming) ; set variable for direction. incoming/outgoing
 same => n,Set(VB-SIP_CALLID=${PJSIP_HEADER(read,Call-ID)}) ; set variable for sip call-id.
 same => n,Set(VB-SIP_PAI=${PJSIP_HEADER(read,P-Asserted-Identity)})
 same => n,Set(VB-SIP_PRIVACY=${PJSIP_HEADER(read,Privacy)})
 same => n,Set(VB-SIP_TRANSPORT=${PJSIP_HEADER(read,VB-Transport)}) ; set variable for transport. tcp/udp/tls/wss
 ; setting the stasis args.
 ; type: channel's type.
 ; context: channel's context.
 ; domain: request domain name.
 ; source: request source ip.
 ; direction: channel's direction. incoming for this case.
 ; transport: receive request's transport type. tcp/udp/tls/wss
 ; sip_call_id: SIP's Call-ID header
 ; sip_pai: SIP's P-Asserted-Identity header
 ; sip_privacy: SIP's Privacy header
 same => n,Stasis(voipbin,type=call,context=call-in,domain=${PJSIP_HEADER(read,VB-Domain)},source=${PJSIP_HEADER(read,VB-Source)},direction=incoming,transport=${PJSIP_HEADER(read,VB-Transport)},sip_call_id=${PJSIP_HEADER(read,Call-ID)},sip_pai=${PJSIP_HEADER(read,P-Asserted-Identity)},sip_privacy=${PJSIP_HEADER(read,Privacy)})
 same => n,Hangup()

; call outgoing handler
[call-out]
exten => _[+0-9a-zA-Z].,1,NoOp(call-out)
 same => n,Hangup()

; Service stasis handler
; put the channel into the stasis state.
[svc-stasis]
exten => s,1,NoOp(svc-stasis)
 same => n,Stasis(voipbin,context=call-svc)
 same => n,Hangup()

; Service streamecho handler
[svc-stream_echo]
exten => s,1,NoOp(svc-streamecho)
 same => n,Answer()
 same => n,StreamEcho(1)
 same => n,Hangup()

; Service echo handler
[svc-echo]
exten => s,1,NoOp(svc-echo)
 same => n,Answer()
 same => n,Echo()
 same => n,Hangup()

; Service AMD handler
[svc-amd]
exten => s,1,NoOp(svc-amd)
 same => n,Answer()
 same => n,AMD()
 same => n,Stasis(voipbin,type=call,context=call-svc,context_from=svc-amd,amd_status=${AMDSTATUS},amd_cause=${AMDCAUSE})
 same => n,Hangup()

; test
[test]
exten => _[+0-9a-zA-Z].,1,NoOp(test)
 same => n,Set(TIMEOUT(absolute)=600)
 same => n,Stasis(test)
