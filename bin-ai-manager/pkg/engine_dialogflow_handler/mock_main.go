// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package engine_dialogflow_handler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package engine_dialogflow_handler is a generated GoMock package.
package engine_dialogflow_handler

import (
	context "context"
	aicall "monorepo/bin-ai-manager/models/aicall"
	message "monorepo/bin-ai-manager/models/message"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEngineDialogflowHandler is a mock of EngineDialogflowHandler interface.
type MockEngineDialogflowHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEngineDialogflowHandlerMockRecorder
	isgomock struct{}
}

// MockEngineDialogflowHandlerMockRecorder is the mock recorder for MockEngineDialogflowHandler.
type MockEngineDialogflowHandlerMockRecorder struct {
	mock *MockEngineDialogflowHandler
}

// NewMockEngineDialogflowHandler creates a new mock instance.
func NewMockEngineDialogflowHandler(ctrl *gomock.Controller) *MockEngineDialogflowHandler {
	mock := &MockEngineDialogflowHandler{ctrl: ctrl}
	mock.recorder = &MockEngineDialogflowHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineDialogflowHandler) EXPECT() *MockEngineDialogflowHandlerMockRecorder {
	return m.recorder
}

// MessageSend mocks base method.
func (m_2 *MockEngineDialogflowHandler) MessageSend(ctx context.Context, cc *aicall.AIcall, m *message.Message) (*message.Message, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MessageSend", ctx, cc, m)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSend indicates an expected call of MessageSend.
func (mr *MockEngineDialogflowHandlerMockRecorder) MessageSend(ctx, cc, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSend", reflect.TypeOf((*MockEngineDialogflowHandler)(nil).MessageSend), ctx, cc, m)
}
