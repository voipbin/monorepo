// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package cachehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	ai "monorepo/bin-ai-manager/models/ai"
	aicall "monorepo/bin-ai-manager/models/aicall"
	message "monorepo/bin-ai-manager/models/message"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
	isgomock struct{}
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// AIGet mocks base method.
func (m *MockCacheHandler) AIGet(ctx context.Context, id uuid.UUID) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIGet", ctx, id)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIGet indicates an expected call of AIGet.
func (mr *MockCacheHandlerMockRecorder) AIGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIGet", reflect.TypeOf((*MockCacheHandler)(nil).AIGet), ctx, id)
}

// AISet mocks base method.
func (m *MockCacheHandler) AISet(ctx context.Context, data *ai.AI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AISet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AISet indicates an expected call of AISet.
func (mr *MockCacheHandlerMockRecorder) AISet(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AISet", reflect.TypeOf((*MockCacheHandler)(nil).AISet), ctx, data)
}

// AIcallGet mocks base method.
func (m *MockCacheHandler) AIcallGet(ctx context.Context, id uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallGet", ctx, id)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIcallGet indicates an expected call of AIcallGet.
func (mr *MockCacheHandlerMockRecorder) AIcallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallGet", reflect.TypeOf((*MockCacheHandler)(nil).AIcallGet), ctx, id)
}

// AIcallGetByReferenceID mocks base method.
func (m *MockCacheHandler) AIcallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIcallGetByReferenceID indicates an expected call of AIcallGetByReferenceID.
func (mr *MockCacheHandlerMockRecorder) AIcallGetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallGetByReferenceID", reflect.TypeOf((*MockCacheHandler)(nil).AIcallGetByReferenceID), ctx, referenceID)
}

// AIcallGetByTranscribeID mocks base method.
func (m *MockCacheHandler) AIcallGetByTranscribeID(ctx context.Context, transcribeID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallGetByTranscribeID", ctx, transcribeID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIcallGetByTranscribeID indicates an expected call of AIcallGetByTranscribeID.
func (mr *MockCacheHandlerMockRecorder) AIcallGetByTranscribeID(ctx, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallGetByTranscribeID", reflect.TypeOf((*MockCacheHandler)(nil).AIcallGetByTranscribeID), ctx, transcribeID)
}

// AIcallSet mocks base method.
func (m *MockCacheHandler) AIcallSet(ctx context.Context, data *aicall.AIcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIcallSet indicates an expected call of AIcallSet.
func (mr *MockCacheHandlerMockRecorder) AIcallSet(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallSet", reflect.TypeOf((*MockCacheHandler)(nil).AIcallSet), ctx, data)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// MessageGet mocks base method.
func (m *MockCacheHandler) MessageGet(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGet", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGet indicates an expected call of MessageGet.
func (mr *MockCacheHandlerMockRecorder) MessageGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGet", reflect.TypeOf((*MockCacheHandler)(nil).MessageGet), ctx, id)
}

// MessageSet mocks base method.
func (m *MockCacheHandler) MessageSet(ctx context.Context, data *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageSet indicates an expected call of MessageSet.
func (mr *MockCacheHandlerMockRecorder) MessageSet(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSet", reflect.TypeOf((*MockCacheHandler)(nil).MessageSet), ctx, data)
}
