// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package messagehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package messagehandler is a generated GoMock package.
package messagehandler

import (
	context "context"
	message "monorepo/bin-ai-manager/models/message"
	message0 "monorepo/bin-pipecat-manager/models/message"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// EventPMMessageBotTranscription mocks base method.
func (m *MockMessageHandler) EventPMMessageBotTranscription(ctx context.Context, evt *message0.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventPMMessageBotTranscription", ctx, evt)
}

// EventPMMessageBotTranscription indicates an expected call of EventPMMessageBotTranscription.
func (mr *MockMessageHandlerMockRecorder) EventPMMessageBotTranscription(ctx, evt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPMMessageBotTranscription", reflect.TypeOf((*MockMessageHandler)(nil).EventPMMessageBotTranscription), ctx, evt)
}

// EventPMMessageUserTranscription mocks base method.
func (m *MockMessageHandler) EventPMMessageUserTranscription(ctx context.Context, evt *message0.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventPMMessageUserTranscription", ctx, evt)
}

// EventPMMessageUserTranscription indicates an expected call of EventPMMessageUserTranscription.
func (mr *MockMessageHandlerMockRecorder) EventPMMessageUserTranscription(ctx, evt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPMMessageUserTranscription", reflect.TypeOf((*MockMessageHandler)(nil).EventPMMessageUserTranscription), ctx, evt)
}

// Get mocks base method.
func (m *MockMessageHandler) Get(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockMessageHandler) Gets(ctx context.Context, aicallID uuid.UUID, size uint64, token string, filters map[string]string) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, aicallID, size, token, filters)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockMessageHandlerMockRecorder) Gets(ctx, aicallID, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockMessageHandler)(nil).Gets), ctx, aicallID, size, token, filters)
}

// Send mocks base method.
func (m *MockMessageHandler) Send(ctx context.Context, aicallID uuid.UUID, role message.Role, content string, returnResponse bool) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, aicallID, role, content, returnResponse)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageHandlerMockRecorder) Send(ctx, aicallID, role, content, returnResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageHandler)(nil).Send), ctx, aicallID, role, content, returnResponse)
}

// StreamingSend mocks base method.
func (m *MockMessageHandler) StreamingSend(ctx context.Context, aicallID uuid.UUID, role message.Role, content string) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingSend", ctx, aicallID, role, content)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamingSend indicates an expected call of StreamingSend.
func (mr *MockMessageHandlerMockRecorder) StreamingSend(ctx, aicallID, role, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingSend", reflect.TypeOf((*MockMessageHandler)(nil).StreamingSend), ctx, aicallID, role, content)
}

// StreamingSendAll mocks base method.
func (m *MockMessageHandler) StreamingSendAll(ctx context.Context, aicallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingSendAll", ctx, aicallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamingSendAll indicates an expected call of StreamingSendAll.
func (mr *MockMessageHandlerMockRecorder) StreamingSendAll(ctx, aicallID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingSendAll", reflect.TypeOf((*MockMessageHandler)(nil).StreamingSendAll), ctx, aicallID)
}
