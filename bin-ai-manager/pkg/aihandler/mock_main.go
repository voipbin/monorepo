// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package aihandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package aihandler is a generated GoMock package.
package aihandler

import (
	context "context"
	ai "monorepo/bin-ai-manager/models/ai"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAIHandler is a mock of AIHandler interface.
type MockAIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAIHandlerMockRecorder
	isgomock struct{}
}

// MockAIHandlerMockRecorder is the mock recorder for MockAIHandler.
type MockAIHandlerMockRecorder struct {
	mock *MockAIHandler
}

// NewMockAIHandler creates a new mock instance.
func NewMockAIHandler(ctrl *gomock.Controller) *MockAIHandler {
	mock := &MockAIHandler{ctrl: ctrl}
	mock.recorder = &MockAIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIHandler) EXPECT() *MockAIHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAIHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, engineType ai.EngineType, engineModel ai.EngineModel, engineData map[string]any, initPrompt string) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, engineType, engineModel, engineData, initPrompt)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAIHandlerMockRecorder) Create(ctx, customerID, name, detail, engineType, engineModel, engineData, initPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAIHandler)(nil).Create), ctx, customerID, name, detail, engineType, engineModel, engineData, initPrompt)
}

// Delete mocks base method.
func (m *MockAIHandler) Delete(ctx context.Context, id uuid.UUID) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAIHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAIHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockAIHandler) Get(ctx context.Context, id uuid.UUID) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAIHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAIHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockAIHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockAIHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockAIHandler)(nil).Gets), ctx, size, token, filters)
}

// Update mocks base method.
func (m *MockAIHandler) Update(ctx context.Context, id uuid.UUID, name, detail string, engineType ai.EngineType, engineModel ai.EngineModel, engineData map[string]any, initPrompt string) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail, engineType, engineModel, engineData, initPrompt)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAIHandlerMockRecorder) Update(ctx, id, name, detail, engineType, engineModel, engineData, initPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAIHandler)(nil).Update), ctx, id, name, detail, engineType, engineModel, engineData, initPrompt)
}
