// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package aicallhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package aicallhandler is a generated GoMock package.
package aicallhandler

import (
	context "context"
	ai "monorepo/bin-ai-manager/models/ai"
	aicall "monorepo/bin-ai-manager/models/aicall"
	service "monorepo/bin-common-handler/models/service"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAIcallHandler is a mock of AIcallHandler interface.
type MockAIcallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAIcallHandlerMockRecorder
	isgomock struct{}
}

// MockAIcallHandlerMockRecorder is the mock recorder for MockAIcallHandler.
type MockAIcallHandlerMockRecorder struct {
	mock *MockAIcallHandler
}

// NewMockAIcallHandler creates a new mock instance.
func NewMockAIcallHandler(ctrl *gomock.Controller) *MockAIcallHandler {
	mock := &MockAIcallHandler{ctrl: ctrl}
	mock.recorder = &MockAIcallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIcallHandler) EXPECT() *MockAIcallHandlerMockRecorder {
	return m.recorder
}

// ChatMessage mocks base method.
func (m *MockAIcallHandler) ChatMessage(ctx context.Context, cb *aicall.AIcall, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMessage", ctx, cb, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatMessage indicates an expected call of ChatMessage.
func (mr *MockAIcallHandlerMockRecorder) ChatMessage(ctx, cb, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMessage", reflect.TypeOf((*MockAIcallHandler)(nil).ChatMessage), ctx, cb, text)
}

// Create mocks base method.
func (m *MockAIcallHandler) Create(ctx context.Context, c *ai.AI, activeflowID uuid.UUID, referenceType aicall.ReferenceType, referenceID, confbridgeID uuid.UUID, gender aicall.Gender, language string) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, c, activeflowID, referenceType, referenceID, confbridgeID, gender, language)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAIcallHandlerMockRecorder) Create(ctx, c, activeflowID, referenceType, referenceID, confbridgeID, gender, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAIcallHandler)(nil).Create), ctx, c, activeflowID, referenceType, referenceID, confbridgeID, gender, language)
}

// Delete mocks base method.
func (m *MockAIcallHandler) Delete(ctx context.Context, id uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAIcallHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAIcallHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockAIcallHandler) Get(ctx context.Context, id uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAIcallHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAIcallHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockAIcallHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockAIcallHandlerMockRecorder) GetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockAIcallHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// GetByTranscribeID mocks base method.
func (m *MockAIcallHandler) GetByTranscribeID(ctx context.Context, transcribeID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTranscribeID", ctx, transcribeID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTranscribeID indicates an expected call of GetByTranscribeID.
func (mr *MockAIcallHandlerMockRecorder) GetByTranscribeID(ctx, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTranscribeID", reflect.TypeOf((*MockAIcallHandler)(nil).GetByTranscribeID), ctx, transcribeID)
}

// Gets mocks base method.
func (m *MockAIcallHandler) Gets(ctx context.Context, customerID uuid.UUID, size uint64, token string, filters map[string]string) ([]*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, size, token, filters)
	ret0, _ := ret[0].([]*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockAIcallHandlerMockRecorder) Gets(ctx, customerID, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockAIcallHandler)(nil).Gets), ctx, customerID, size, token, filters)
}

// ProcessEnd mocks base method.
func (m *MockAIcallHandler) ProcessEnd(ctx context.Context, cb *aicall.AIcall) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEnd", ctx, cb)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEnd indicates an expected call of ProcessEnd.
func (mr *MockAIcallHandlerMockRecorder) ProcessEnd(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEnd", reflect.TypeOf((*MockAIcallHandler)(nil).ProcessEnd), ctx, cb)
}

// ProcessStart mocks base method.
func (m *MockAIcallHandler) ProcessStart(ctx context.Context, cb *aicall.AIcall) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStart", ctx, cb)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessStart indicates an expected call of ProcessStart.
func (mr *MockAIcallHandlerMockRecorder) ProcessStart(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStart", reflect.TypeOf((*MockAIcallHandler)(nil).ProcessStart), ctx, cb)
}

// ServiceStart mocks base method.
func (m *MockAIcallHandler) ServiceStart(ctx context.Context, aiID, activeflowID uuid.UUID, referenceType aicall.ReferenceType, referenceID uuid.UUID, gender aicall.Gender, language string) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStart", ctx, aiID, activeflowID, referenceType, referenceID, gender, language)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStart indicates an expected call of ServiceStart.
func (mr *MockAIcallHandlerMockRecorder) ServiceStart(ctx, aiID, activeflowID, referenceType, referenceID, gender, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStart", reflect.TypeOf((*MockAIcallHandler)(nil).ServiceStart), ctx, aiID, activeflowID, referenceType, referenceID, gender, language)
}

// Start mocks base method.
func (m *MockAIcallHandler) Start(ctx context.Context, aiID, activeflowID uuid.UUID, referenceType aicall.ReferenceType, referenceID uuid.UUID, gender aicall.Gender, language string) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, aiID, activeflowID, referenceType, referenceID, gender, language)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockAIcallHandlerMockRecorder) Start(ctx, aiID, activeflowID, referenceType, referenceID, gender, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAIcallHandler)(nil).Start), ctx, aiID, activeflowID, referenceType, referenceID, gender, language)
}
