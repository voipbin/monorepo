// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package summaryhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package summaryhandler is a generated GoMock package.
package summaryhandler

import (
	context "context"
	summary "monorepo/bin-ai-manager/models/summary"
	call "monorepo/bin-call-manager/models/call"
	service "monorepo/bin-common-handler/models/service"
	conference "monorepo/bin-conference-manager/models/conference"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSummaryHandler is a mock of SummaryHandler interface.
type MockSummaryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSummaryHandlerMockRecorder
	isgomock struct{}
}

// MockSummaryHandlerMockRecorder is the mock recorder for MockSummaryHandler.
type MockSummaryHandlerMockRecorder struct {
	mock *MockSummaryHandler
}

// NewMockSummaryHandler creates a new mock instance.
func NewMockSummaryHandler(ctrl *gomock.Controller) *MockSummaryHandler {
	mock := &MockSummaryHandler{ctrl: ctrl}
	mock.recorder = &MockSummaryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummaryHandler) EXPECT() *MockSummaryHandlerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSummaryHandler) Delete(ctx context.Context, id uuid.UUID) (*summary.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*summary.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSummaryHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSummaryHandler)(nil).Delete), ctx, id)
}

// EventCMCallHangup mocks base method.
func (m *MockSummaryHandler) EventCMCallHangup(ctx context.Context, c *call.Call) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventCMCallHangup", ctx, c)
}

// EventCMCallHangup indicates an expected call of EventCMCallHangup.
func (mr *MockSummaryHandlerMockRecorder) EventCMCallHangup(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCMCallHangup", reflect.TypeOf((*MockSummaryHandler)(nil).EventCMCallHangup), ctx, c)
}

// EventCMConferenceUpdated mocks base method.
func (m *MockSummaryHandler) EventCMConferenceUpdated(ctx context.Context, c *conference.Conference) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EventCMConferenceUpdated", ctx, c)
}

// EventCMConferenceUpdated indicates an expected call of EventCMConferenceUpdated.
func (mr *MockSummaryHandlerMockRecorder) EventCMConferenceUpdated(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCMConferenceUpdated", reflect.TypeOf((*MockSummaryHandler)(nil).EventCMConferenceUpdated), ctx, c)
}

// Get mocks base method.
func (m *MockSummaryHandler) Get(ctx context.Context, id uuid.UUID) (*summary.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*summary.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSummaryHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSummaryHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockSummaryHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*summary.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*summary.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockSummaryHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockSummaryHandler)(nil).Gets), ctx, size, token, filters)
}

// ServiceStart mocks base method.
func (m *MockSummaryHandler) ServiceStart(ctx context.Context, customerID, activeflowID, onEndFlowID uuid.UUID, referenceType summary.ReferenceType, referenceID uuid.UUID, language string) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStart", ctx, customerID, activeflowID, onEndFlowID, referenceType, referenceID, language)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStart indicates an expected call of ServiceStart.
func (mr *MockSummaryHandlerMockRecorder) ServiceStart(ctx, customerID, activeflowID, onEndFlowID, referenceType, referenceID, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStart", reflect.TypeOf((*MockSummaryHandler)(nil).ServiceStart), ctx, customerID, activeflowID, onEndFlowID, referenceType, referenceID, language)
}

// Start mocks base method.
func (m *MockSummaryHandler) Start(ctx context.Context, customerID, activeflowID, onEndFlowID uuid.UUID, referenceType summary.ReferenceType, referenceID uuid.UUID, language string) (*summary.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, customerID, activeflowID, onEndFlowID, referenceType, referenceID, language)
	ret0, _ := ret[0].(*summary.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockSummaryHandlerMockRecorder) Start(ctx, customerID, activeflowID, onEndFlowID, referenceType, referenceID, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSummaryHandler)(nil).Start), ctx, customerID, activeflowID, onEndFlowID, referenceType, referenceID, language)
}
