// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package engine_openai_handler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package engine_openai_handler is a generated GoMock package.
package engine_openai_handler

import (
	context "context"
	aicall "monorepo/bin-ai-manager/models/aicall"
	message "monorepo/bin-ai-manager/models/message"
	reflect "reflect"

	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockEngineOpenaiHandler is a mock of EngineOpenaiHandler interface.
type MockEngineOpenaiHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEngineOpenaiHandlerMockRecorder
	isgomock struct{}
}

// MockEngineOpenaiHandlerMockRecorder is the mock recorder for MockEngineOpenaiHandler.
type MockEngineOpenaiHandlerMockRecorder struct {
	mock *MockEngineOpenaiHandler
}

// NewMockEngineOpenaiHandler creates a new mock instance.
func NewMockEngineOpenaiHandler(ctrl *gomock.Controller) *MockEngineOpenaiHandler {
	mock := &MockEngineOpenaiHandler{ctrl: ctrl}
	mock.recorder = &MockEngineOpenaiHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineOpenaiHandler) EXPECT() *MockEngineOpenaiHandlerMockRecorder {
	return m.recorder
}

// MessageSend mocks base method.
func (m *MockEngineOpenaiHandler) MessageSend(ctx context.Context, cc *aicall.AIcall, messages []*message.Message) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSend", ctx, cc, messages)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSend indicates an expected call of MessageSend.
func (mr *MockEngineOpenaiHandlerMockRecorder) MessageSend(ctx, cc, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSend", reflect.TypeOf((*MockEngineOpenaiHandler)(nil).MessageSend), ctx, cc, messages)
}

// Send mocks base method.
func (m *MockEngineOpenaiHandler) Send(ctx context.Context, req *openai.ChatCompletionRequest) (*openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, req)
	ret0, _ := ret[0].(*openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockEngineOpenaiHandlerMockRecorder) Send(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEngineOpenaiHandler)(nil).Send), ctx, req)
}
