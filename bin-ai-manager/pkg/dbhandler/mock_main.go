// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	ai "monorepo/bin-ai-manager/models/ai"
	aicall "monorepo/bin-ai-manager/models/aicall"
	message "monorepo/bin-ai-manager/models/message"
	summary "monorepo/bin-ai-manager/models/summary"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AICreate mocks base method.
func (m *MockDBHandler) AICreate(ctx context.Context, c *ai.AI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AICreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AICreate indicates an expected call of AICreate.
func (mr *MockDBHandlerMockRecorder) AICreate(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AICreate", reflect.TypeOf((*MockDBHandler)(nil).AICreate), ctx, c)
}

// AIDelete mocks base method.
func (m *MockDBHandler) AIDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIDelete indicates an expected call of AIDelete.
func (mr *MockDBHandlerMockRecorder) AIDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIDelete", reflect.TypeOf((*MockDBHandler)(nil).AIDelete), ctx, id)
}

// AIGet mocks base method.
func (m *MockDBHandler) AIGet(ctx context.Context, id uuid.UUID) (*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIGet", ctx, id)
	ret0, _ := ret[0].(*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIGet indicates an expected call of AIGet.
func (mr *MockDBHandlerMockRecorder) AIGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIGet", reflect.TypeOf((*MockDBHandler)(nil).AIGet), ctx, id)
}

// AIGets mocks base method.
func (m *MockDBHandler) AIGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*ai.AI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*ai.AI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIGets indicates an expected call of AIGets.
func (mr *MockDBHandlerMockRecorder) AIGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIGets", reflect.TypeOf((*MockDBHandler)(nil).AIGets), ctx, size, token, filters)
}

// AISetInfo mocks base method.
func (m *MockDBHandler) AISetInfo(ctx context.Context, id uuid.UUID, name, detail string, engineType ai.EngineType, engineModel ai.EngineModel, engineData map[string]any, initPrompt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AISetInfo", ctx, id, name, detail, engineType, engineModel, engineData, initPrompt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AISetInfo indicates an expected call of AISetInfo.
func (mr *MockDBHandlerMockRecorder) AISetInfo(ctx, id, name, detail, engineType, engineModel, engineData, initPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AISetInfo", reflect.TypeOf((*MockDBHandler)(nil).AISetInfo), ctx, id, name, detail, engineType, engineModel, engineData, initPrompt)
}

// AIcallCreate mocks base method.
func (m *MockDBHandler) AIcallCreate(ctx context.Context, cb *aicall.AIcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallCreate", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIcallCreate indicates an expected call of AIcallCreate.
func (mr *MockDBHandlerMockRecorder) AIcallCreate(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallCreate", reflect.TypeOf((*MockDBHandler)(nil).AIcallCreate), ctx, cb)
}

// AIcallDelete mocks base method.
func (m *MockDBHandler) AIcallDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIcallDelete indicates an expected call of AIcallDelete.
func (mr *MockDBHandlerMockRecorder) AIcallDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallDelete", reflect.TypeOf((*MockDBHandler)(nil).AIcallDelete), ctx, id)
}

// AIcallGet mocks base method.
func (m *MockDBHandler) AIcallGet(ctx context.Context, id uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallGet", ctx, id)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIcallGet indicates an expected call of AIcallGet.
func (mr *MockDBHandlerMockRecorder) AIcallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallGet", reflect.TypeOf((*MockDBHandler)(nil).AIcallGet), ctx, id)
}

// AIcallGetByReferenceID mocks base method.
func (m *MockDBHandler) AIcallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIcallGetByReferenceID indicates an expected call of AIcallGetByReferenceID.
func (mr *MockDBHandlerMockRecorder) AIcallGetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallGetByReferenceID", reflect.TypeOf((*MockDBHandler)(nil).AIcallGetByReferenceID), ctx, referenceID)
}

// AIcallGetByTranscribeID mocks base method.
func (m *MockDBHandler) AIcallGetByTranscribeID(ctx context.Context, transcribeID uuid.UUID) (*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallGetByTranscribeID", ctx, transcribeID)
	ret0, _ := ret[0].(*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIcallGetByTranscribeID indicates an expected call of AIcallGetByTranscribeID.
func (mr *MockDBHandlerMockRecorder) AIcallGetByTranscribeID(ctx, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallGetByTranscribeID", reflect.TypeOf((*MockDBHandler)(nil).AIcallGetByTranscribeID), ctx, transcribeID)
}

// AIcallGets mocks base method.
func (m *MockDBHandler) AIcallGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*aicall.AIcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*aicall.AIcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AIcallGets indicates an expected call of AIcallGets.
func (mr *MockDBHandlerMockRecorder) AIcallGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallGets", reflect.TypeOf((*MockDBHandler)(nil).AIcallGets), ctx, size, token, filters)
}

// AIcallUpdateStatusEnd mocks base method.
func (m *MockDBHandler) AIcallUpdateStatusEnd(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallUpdateStatusEnd", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIcallUpdateStatusEnd indicates an expected call of AIcallUpdateStatusEnd.
func (mr *MockDBHandlerMockRecorder) AIcallUpdateStatusEnd(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallUpdateStatusEnd", reflect.TypeOf((*MockDBHandler)(nil).AIcallUpdateStatusEnd), ctx, id)
}

// AIcallUpdateStatusPausing mocks base method.
func (m *MockDBHandler) AIcallUpdateStatusPausing(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallUpdateStatusPausing", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIcallUpdateStatusPausing indicates an expected call of AIcallUpdateStatusPausing.
func (mr *MockDBHandlerMockRecorder) AIcallUpdateStatusPausing(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallUpdateStatusPausing", reflect.TypeOf((*MockDBHandler)(nil).AIcallUpdateStatusPausing), ctx, id)
}

// AIcallUpdateStatusProgressing mocks base method.
func (m *MockDBHandler) AIcallUpdateStatusProgressing(ctx context.Context, id, transcribeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallUpdateStatusProgressing", ctx, id, transcribeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIcallUpdateStatusProgressing indicates an expected call of AIcallUpdateStatusProgressing.
func (mr *MockDBHandlerMockRecorder) AIcallUpdateStatusProgressing(ctx, id, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallUpdateStatusProgressing", reflect.TypeOf((*MockDBHandler)(nil).AIcallUpdateStatusProgressing), ctx, id, transcribeID)
}

// AIcallUpdateStatusResuming mocks base method.
func (m *MockDBHandler) AIcallUpdateStatusResuming(ctx context.Context, id, confbridgeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AIcallUpdateStatusResuming", ctx, id, confbridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AIcallUpdateStatusResuming indicates an expected call of AIcallUpdateStatusResuming.
func (mr *MockDBHandlerMockRecorder) AIcallUpdateStatusResuming(ctx, id, confbridgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AIcallUpdateStatusResuming", reflect.TypeOf((*MockDBHandler)(nil).AIcallUpdateStatusResuming), ctx, id, confbridgeID)
}

// MessageCreate mocks base method.
func (m *MockDBHandler) MessageCreate(ctx context.Context, c *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageCreate indicates an expected call of MessageCreate.
func (mr *MockDBHandlerMockRecorder) MessageCreate(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageCreate", reflect.TypeOf((*MockDBHandler)(nil).MessageCreate), ctx, c)
}

// MessageDelete mocks base method.
func (m *MockDBHandler) MessageDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageDelete indicates an expected call of MessageDelete.
func (mr *MockDBHandlerMockRecorder) MessageDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageDelete", reflect.TypeOf((*MockDBHandler)(nil).MessageDelete), ctx, id)
}

// MessageGet mocks base method.
func (m *MockDBHandler) MessageGet(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGet", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGet indicates an expected call of MessageGet.
func (mr *MockDBHandlerMockRecorder) MessageGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGet", reflect.TypeOf((*MockDBHandler)(nil).MessageGet), ctx, id)
}

// MessageGets mocks base method.
func (m *MockDBHandler) MessageGets(ctx context.Context, aicallID uuid.UUID, size uint64, token string, filters map[string]string) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageGets", ctx, aicallID, size, token, filters)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageGets indicates an expected call of MessageGets.
func (mr *MockDBHandlerMockRecorder) MessageGets(ctx, aicallID, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGets", reflect.TypeOf((*MockDBHandler)(nil).MessageGets), ctx, aicallID, size, token, filters)
}

// SummaryCreate mocks base method.
func (m *MockDBHandler) SummaryCreate(ctx context.Context, c *summary.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SummaryCreate indicates an expected call of SummaryCreate.
func (mr *MockDBHandlerMockRecorder) SummaryCreate(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryCreate", reflect.TypeOf((*MockDBHandler)(nil).SummaryCreate), ctx, c)
}

// SummaryDelete mocks base method.
func (m *MockDBHandler) SummaryDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SummaryDelete indicates an expected call of SummaryDelete.
func (mr *MockDBHandlerMockRecorder) SummaryDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryDelete", reflect.TypeOf((*MockDBHandler)(nil).SummaryDelete), ctx, id)
}

// SummaryGet mocks base method.
func (m *MockDBHandler) SummaryGet(ctx context.Context, id uuid.UUID) (*summary.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryGet", ctx, id)
	ret0, _ := ret[0].(*summary.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummaryGet indicates an expected call of SummaryGet.
func (mr *MockDBHandlerMockRecorder) SummaryGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryGet", reflect.TypeOf((*MockDBHandler)(nil).SummaryGet), ctx, id)
}

// SummaryGets mocks base method.
func (m *MockDBHandler) SummaryGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*summary.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*summary.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummaryGets indicates an expected call of SummaryGets.
func (mr *MockDBHandlerMockRecorder) SummaryGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryGets", reflect.TypeOf((*MockDBHandler)(nil).SummaryGets), ctx, size, token, filters)
}

// SummaryUpdateStatusDone mocks base method.
func (m *MockDBHandler) SummaryUpdateStatusDone(ctx context.Context, id uuid.UUID, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryUpdateStatusDone", ctx, id, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SummaryUpdateStatusDone indicates an expected call of SummaryUpdateStatusDone.
func (mr *MockDBHandlerMockRecorder) SummaryUpdateStatusDone(ctx, id, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryUpdateStatusDone", reflect.TypeOf((*MockDBHandler)(nil).SummaryUpdateStatusDone), ctx, id, content)
}
