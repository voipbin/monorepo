// Code generated by MockGen. DO NOT EDIT.
// Source: engine_sendgrid.go
//
// Generated by this command:
//
//	mockgen -package emailhandler -destination ./mock_engine_sendgrid.go -source engine_sendgrid.go -build_flags=-mod=mod
//

// Package emailhandler is a generated GoMock package.
package emailhandler

import (
	context "context"
	email "monorepo/bin-email-manager/models/email"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEngineSendgrid is a mock of EngineSendgrid interface.
type MockEngineSendgrid struct {
	ctrl     *gomock.Controller
	recorder *MockEngineSendgridMockRecorder
	isgomock struct{}
}

// MockEngineSendgridMockRecorder is the mock recorder for MockEngineSendgrid.
type MockEngineSendgridMockRecorder struct {
	mock *MockEngineSendgrid
}

// NewMockEngineSendgrid creates a new mock instance.
func NewMockEngineSendgrid(ctrl *gomock.Controller) *MockEngineSendgrid {
	mock := &MockEngineSendgrid{ctrl: ctrl}
	mock.recorder = &MockEngineSendgridMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineSendgrid) EXPECT() *MockEngineSendgridMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m_2 *MockEngineSendgrid) Send(ctx context.Context, m *email.Email) (string, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Send", ctx, m)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockEngineSendgridMockRecorder) Send(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEngineSendgrid)(nil).Send), ctx, m)
}
