// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	email "monorepo/bin-email-manager/models/email"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// EmailCreate mocks base method.
func (m *MockDBHandler) EmailCreate(ctx context.Context, e *email.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailCreate", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmailCreate indicates an expected call of EmailCreate.
func (mr *MockDBHandlerMockRecorder) EmailCreate(ctx, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailCreate", reflect.TypeOf((*MockDBHandler)(nil).EmailCreate), ctx, e)
}

// EmailDelete mocks base method.
func (m *MockDBHandler) EmailDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmailDelete indicates an expected call of EmailDelete.
func (mr *MockDBHandlerMockRecorder) EmailDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailDelete", reflect.TypeOf((*MockDBHandler)(nil).EmailDelete), ctx, id)
}

// EmailGet mocks base method.
func (m *MockDBHandler) EmailGet(ctx context.Context, id uuid.UUID) (*email.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailGet", ctx, id)
	ret0, _ := ret[0].(*email.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailGet indicates an expected call of EmailGet.
func (mr *MockDBHandlerMockRecorder) EmailGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailGet", reflect.TypeOf((*MockDBHandler)(nil).EmailGet), ctx, id)
}

// EmailGets mocks base method.
func (m *MockDBHandler) EmailGets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*email.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailGets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*email.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailGets indicates an expected call of EmailGets.
func (mr *MockDBHandlerMockRecorder) EmailGets(ctx, token, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailGets", reflect.TypeOf((*MockDBHandler)(nil).EmailGets), ctx, token, size, filters)
}

// EmailUpdateProviderReferenceID mocks base method.
func (m *MockDBHandler) EmailUpdateProviderReferenceID(ctx context.Context, id uuid.UUID, providerReferenceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailUpdateProviderReferenceID", ctx, id, providerReferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmailUpdateProviderReferenceID indicates an expected call of EmailUpdateProviderReferenceID.
func (mr *MockDBHandlerMockRecorder) EmailUpdateProviderReferenceID(ctx, id, providerReferenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailUpdateProviderReferenceID", reflect.TypeOf((*MockDBHandler)(nil).EmailUpdateProviderReferenceID), ctx, id, providerReferenceID)
}

// EmailUpdateStatus mocks base method.
func (m *MockDBHandler) EmailUpdateStatus(ctx context.Context, id uuid.UUID, status email.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmailUpdateStatus indicates an expected call of EmailUpdateStatus.
func (mr *MockDBHandlerMockRecorder) EmailUpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailUpdateStatus", reflect.TypeOf((*MockDBHandler)(nil).EmailUpdateStatus), ctx, id, status)
}
