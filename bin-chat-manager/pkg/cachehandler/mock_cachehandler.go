// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package cachehandler -destination ./mock_cachehandler.go -source main.go -build_flags=-mod=mod
//

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	chat "monorepo/bin-chat-manager/models/chat"
	chatroom "monorepo/bin-chat-manager/models/chatroom"
	messagechat "monorepo/bin-chat-manager/models/messagechat"
	messagechatroom "monorepo/bin-chat-manager/models/messagechatroom"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
	isgomock struct{}
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// ChatGet mocks base method.
func (m *MockCacheHandler) ChatGet(ctx context.Context, id uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGet", ctx, id)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGet indicates an expected call of ChatGet.
func (mr *MockCacheHandlerMockRecorder) ChatGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGet", reflect.TypeOf((*MockCacheHandler)(nil).ChatGet), ctx, id)
}

// ChatSet mocks base method.
func (m *MockCacheHandler) ChatSet(ctx context.Context, data *chat.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatSet indicates an expected call of ChatSet.
func (mr *MockCacheHandlerMockRecorder) ChatSet(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatSet", reflect.TypeOf((*MockCacheHandler)(nil).ChatSet), ctx, data)
}

// ChatroomGet mocks base method.
func (m *MockCacheHandler) ChatroomGet(ctx context.Context, id uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGet", ctx, id)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGet indicates an expected call of ChatroomGet.
func (mr *MockCacheHandlerMockRecorder) ChatroomGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGet", reflect.TypeOf((*MockCacheHandler)(nil).ChatroomGet), ctx, id)
}

// ChatroomSet mocks base method.
func (m *MockCacheHandler) ChatroomSet(ctx context.Context, af *chatroom.Chatroom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomSet", ctx, af)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomSet indicates an expected call of ChatroomSet.
func (mr *MockCacheHandlerMockRecorder) ChatroomSet(ctx, af any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomSet", reflect.TypeOf((*MockCacheHandler)(nil).ChatroomSet), ctx, af)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// MessagechatGet mocks base method.
func (m *MockCacheHandler) MessagechatGet(ctx context.Context, id uuid.UUID) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatGet", ctx, id)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatGet indicates an expected call of MessagechatGet.
func (mr *MockCacheHandlerMockRecorder) MessagechatGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatGet", reflect.TypeOf((*MockCacheHandler)(nil).MessagechatGet), ctx, id)
}

// MessagechatSet mocks base method.
func (m *MockCacheHandler) MessagechatSet(ctx context.Context, t *messagechat.Messagechat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatSet indicates an expected call of MessagechatSet.
func (mr *MockCacheHandlerMockRecorder) MessagechatSet(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatSet", reflect.TypeOf((*MockCacheHandler)(nil).MessagechatSet), ctx, t)
}

// MessagechatroomGet mocks base method.
func (m *MockCacheHandler) MessagechatroomGet(ctx context.Context, id uuid.UUID) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomGet", ctx, id)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatroomGet indicates an expected call of MessagechatroomGet.
func (mr *MockCacheHandlerMockRecorder) MessagechatroomGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomGet", reflect.TypeOf((*MockCacheHandler)(nil).MessagechatroomGet), ctx, id)
}

// MessagechatroomSet mocks base method.
func (m *MockCacheHandler) MessagechatroomSet(ctx context.Context, t *messagechatroom.Messagechatroom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatroomSet indicates an expected call of MessagechatroomSet.
func (mr *MockCacheHandlerMockRecorder) MessagechatroomSet(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomSet", reflect.TypeOf((*MockCacheHandler)(nil).MessagechatroomSet), ctx, t)
}
