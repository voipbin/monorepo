// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	chat "gitlab.com/voipbin/bin-manager/chat-manager.git/models/chat"
	chatroom "gitlab.com/voipbin/bin-manager/chat-manager.git/models/chatroom"
	messagechat "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechat"
	messagechatroom "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechatroom"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// ChatCreate mocks base method.
func (m *MockDBHandler) ChatCreate(ctx context.Context, c *chat.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatCreate indicates an expected call of ChatCreate.
func (mr *MockDBHandlerMockRecorder) ChatCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCreate", reflect.TypeOf((*MockDBHandler)(nil).ChatCreate), ctx, c)
}

// ChatDelete mocks base method.
func (m *MockDBHandler) ChatDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatDelete indicates an expected call of ChatDelete.
func (mr *MockDBHandlerMockRecorder) ChatDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatDelete", reflect.TypeOf((*MockDBHandler)(nil).ChatDelete), ctx, id)
}

// ChatGet mocks base method.
func (m *MockDBHandler) ChatGet(ctx context.Context, id uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGet", ctx, id)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGet indicates an expected call of ChatGet.
func (mr *MockDBHandlerMockRecorder) ChatGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGet", reflect.TypeOf((*MockDBHandler)(nil).ChatGet), ctx, id)
}

// ChatGets mocks base method.
func (m *MockDBHandler) ChatGets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGets indicates an expected call of ChatGets.
func (mr *MockDBHandlerMockRecorder) ChatGets(ctx, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGets", reflect.TypeOf((*MockDBHandler)(nil).ChatGets), ctx, token, size, filters)
}

// ChatUpdateBasicInfo mocks base method.
func (m *MockDBHandler) ChatUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatUpdateBasicInfo indicates an expected call of ChatUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) ChatUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).ChatUpdateBasicInfo), ctx, id, name, detail)
}

// ChatUpdateOwnerID mocks base method.
func (m *MockDBHandler) ChatUpdateOwnerID(ctx context.Context, id, ownerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatUpdateOwnerID", ctx, id, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatUpdateOwnerID indicates an expected call of ChatUpdateOwnerID.
func (mr *MockDBHandlerMockRecorder) ChatUpdateOwnerID(ctx, id, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatUpdateOwnerID", reflect.TypeOf((*MockDBHandler)(nil).ChatUpdateOwnerID), ctx, id, ownerID)
}

// ChatUpdateParticipantID mocks base method.
func (m *MockDBHandler) ChatUpdateParticipantID(ctx context.Context, id uuid.UUID, participantIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatUpdateParticipantID", ctx, id, participantIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatUpdateParticipantID indicates an expected call of ChatUpdateParticipantID.
func (mr *MockDBHandlerMockRecorder) ChatUpdateParticipantID(ctx, id, participantIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatUpdateParticipantID", reflect.TypeOf((*MockDBHandler)(nil).ChatUpdateParticipantID), ctx, id, participantIDs)
}

// ChatroomAddParticipantID mocks base method.
func (m *MockDBHandler) ChatroomAddParticipantID(ctx context.Context, id, participantID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomAddParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomAddParticipantID indicates an expected call of ChatroomAddParticipantID.
func (mr *MockDBHandlerMockRecorder) ChatroomAddParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomAddParticipantID", reflect.TypeOf((*MockDBHandler)(nil).ChatroomAddParticipantID), ctx, id, participantID)
}

// ChatroomCreate mocks base method.
func (m *MockDBHandler) ChatroomCreate(ctx context.Context, c *chatroom.Chatroom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomCreate indicates an expected call of ChatroomCreate.
func (mr *MockDBHandlerMockRecorder) ChatroomCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomCreate", reflect.TypeOf((*MockDBHandler)(nil).ChatroomCreate), ctx, c)
}

// ChatroomDelete mocks base method.
func (m *MockDBHandler) ChatroomDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomDelete indicates an expected call of ChatroomDelete.
func (mr *MockDBHandlerMockRecorder) ChatroomDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomDelete", reflect.TypeOf((*MockDBHandler)(nil).ChatroomDelete), ctx, id)
}

// ChatroomGet mocks base method.
func (m *MockDBHandler) ChatroomGet(ctx context.Context, id uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGet", ctx, id)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGet indicates an expected call of ChatroomGet.
func (mr *MockDBHandlerMockRecorder) ChatroomGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGet", reflect.TypeOf((*MockDBHandler)(nil).ChatroomGet), ctx, id)
}

// ChatroomGets mocks base method.
func (m *MockDBHandler) ChatroomGets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGets indicates an expected call of ChatroomGets.
func (mr *MockDBHandlerMockRecorder) ChatroomGets(ctx, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGets", reflect.TypeOf((*MockDBHandler)(nil).ChatroomGets), ctx, token, size, filters)
}

// ChatroomRemoveParticipantID mocks base method.
func (m *MockDBHandler) ChatroomRemoveParticipantID(ctx context.Context, id, participantID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomRemoveParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomRemoveParticipantID indicates an expected call of ChatroomRemoveParticipantID.
func (mr *MockDBHandlerMockRecorder) ChatroomRemoveParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomRemoveParticipantID", reflect.TypeOf((*MockDBHandler)(nil).ChatroomRemoveParticipantID), ctx, id, participantID)
}

// ChatroomUpdateBasicInfo mocks base method.
func (m *MockDBHandler) ChatroomUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomUpdateBasicInfo indicates an expected call of ChatroomUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) ChatroomUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).ChatroomUpdateBasicInfo), ctx, id, name, detail)
}

// MessagechatCreate mocks base method.
func (m_2 *MockDBHandler) MessagechatCreate(ctx context.Context, m *messagechat.Messagechat) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MessagechatCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatCreate indicates an expected call of MessagechatCreate.
func (mr *MockDBHandlerMockRecorder) MessagechatCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatCreate", reflect.TypeOf((*MockDBHandler)(nil).MessagechatCreate), ctx, m)
}

// MessagechatDelete mocks base method.
func (m *MockDBHandler) MessagechatDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatDelete indicates an expected call of MessagechatDelete.
func (mr *MockDBHandlerMockRecorder) MessagechatDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatDelete", reflect.TypeOf((*MockDBHandler)(nil).MessagechatDelete), ctx, id)
}

// MessagechatGet mocks base method.
func (m *MockDBHandler) MessagechatGet(ctx context.Context, id uuid.UUID) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatGet", ctx, id)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatGet indicates an expected call of MessagechatGet.
func (mr *MockDBHandlerMockRecorder) MessagechatGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatGet", reflect.TypeOf((*MockDBHandler)(nil).MessagechatGet), ctx, id)
}

// MessagechatGets mocks base method.
func (m *MockDBHandler) MessagechatGets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatGets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatGets indicates an expected call of MessagechatGets.
func (mr *MockDBHandlerMockRecorder) MessagechatGets(ctx, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatGets", reflect.TypeOf((*MockDBHandler)(nil).MessagechatGets), ctx, token, size, filters)
}

// MessagechatroomCreate mocks base method.
func (m_2 *MockDBHandler) MessagechatroomCreate(ctx context.Context, m *messagechatroom.Messagechatroom) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MessagechatroomCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatroomCreate indicates an expected call of MessagechatroomCreate.
func (mr *MockDBHandlerMockRecorder) MessagechatroomCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomCreate", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomCreate), ctx, m)
}

// MessagechatroomDelete mocks base method.
func (m *MockDBHandler) MessagechatroomDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatroomDelete indicates an expected call of MessagechatroomDelete.
func (mr *MockDBHandlerMockRecorder) MessagechatroomDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomDelete", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomDelete), ctx, id)
}

// MessagechatroomGet mocks base method.
func (m *MockDBHandler) MessagechatroomGet(ctx context.Context, id uuid.UUID) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomGet", ctx, id)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatroomGet indicates an expected call of MessagechatroomGet.
func (mr *MockDBHandlerMockRecorder) MessagechatroomGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomGet", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomGet), ctx, id)
}

// MessagechatroomGets mocks base method.
func (m *MockDBHandler) MessagechatroomGets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomGets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatroomGets indicates an expected call of MessagechatroomGets.
func (mr *MockDBHandlerMockRecorder) MessagechatroomGets(ctx, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomGets", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomGets), ctx, token, size, filters)
}
