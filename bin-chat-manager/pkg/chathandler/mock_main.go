// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package chathandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package chathandler is a generated GoMock package.
package chathandler

import (
	context "context"
	chat "monorepo/bin-chat-manager/models/chat"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockChatHandler is a mock of ChatHandler interface.
type MockChatHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChatHandlerMockRecorder
	isgomock struct{}
}

// MockChatHandlerMockRecorder is the mock recorder for MockChatHandler.
type MockChatHandlerMockRecorder struct {
	mock *MockChatHandler
}

// NewMockChatHandler creates a new mock instance.
func NewMockChatHandler(ctrl *gomock.Controller) *MockChatHandler {
	mock := &MockChatHandler{ctrl: ctrl}
	mock.recorder = &MockChatHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatHandler) EXPECT() *MockChatHandlerMockRecorder {
	return m.recorder
}

// AddParticipantID mocks base method.
func (m *MockChatHandler) AddParticipantID(ctx context.Context, id, participantID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddParticipantID indicates an expected call of AddParticipantID.
func (mr *MockChatHandlerMockRecorder) AddParticipantID(ctx, id, participantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipantID", reflect.TypeOf((*MockChatHandler)(nil).AddParticipantID), ctx, id, participantID)
}

// Create mocks base method.
func (m *MockChatHandler) Create(ctx context.Context, customerID uuid.UUID, chatType chat.Type, ownerID uuid.UUID, participantIDs []uuid.UUID, name, detail string) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, chatType, ownerID, participantIDs, name, detail)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChatHandlerMockRecorder) Create(ctx, customerID, chatType, ownerID, participantIDs, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatHandler)(nil).Create), ctx, customerID, chatType, ownerID, participantIDs, name, detail)
}

// Delete mocks base method.
func (m *MockChatHandler) Delete(ctx context.Context, id uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockChatHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockChatHandler) Get(ctx context.Context, id uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChatHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChatHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockChatHandler) Gets(ctx context.Context, token string, limit uint64, filters map[string]string) ([]*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, limit, filters)
	ret0, _ := ret[0].([]*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockChatHandlerMockRecorder) Gets(ctx, token, limit, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockChatHandler)(nil).Gets), ctx, token, limit, filters)
}

// RemoveParticipantID mocks base method.
func (m *MockChatHandler) RemoveParticipantID(ctx context.Context, id, participantID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveParticipantID indicates an expected call of RemoveParticipantID.
func (mr *MockChatHandlerMockRecorder) RemoveParticipantID(ctx, id, participantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipantID", reflect.TypeOf((*MockChatHandler)(nil).RemoveParticipantID), ctx, id, participantID)
}

// UpdateBasicInfo mocks base method.
func (m *MockChatHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockChatHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockChatHandler)(nil).UpdateBasicInfo), ctx, id, name, detail)
}

// UpdateRoomOwnerID mocks base method.
func (m *MockChatHandler) UpdateRoomOwnerID(ctx context.Context, id, ownerID uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomOwnerID", ctx, id, ownerID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoomOwnerID indicates an expected call of UpdateRoomOwnerID.
func (mr *MockChatHandlerMockRecorder) UpdateRoomOwnerID(ctx, id, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomOwnerID", reflect.TypeOf((*MockChatHandler)(nil).UpdateRoomOwnerID), ctx, id, ownerID)
}
