// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package chatroomhandler is a generated GoMock package.
package chatroomhandler

import (
	context "context"
	chatroom "monorepo/bin-chat-manager/models/chatroom"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockChatroomHandler is a mock of ChatroomHandler interface.
type MockChatroomHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChatroomHandlerMockRecorder
}

// MockChatroomHandlerMockRecorder is the mock recorder for MockChatroomHandler.
type MockChatroomHandlerMockRecorder struct {
	mock *MockChatroomHandler
}

// NewMockChatroomHandler creates a new mock instance.
func NewMockChatroomHandler(ctrl *gomock.Controller) *MockChatroomHandler {
	mock := &MockChatroomHandler{ctrl: ctrl}
	mock.recorder = &MockChatroomHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatroomHandler) EXPECT() *MockChatroomHandlerMockRecorder {
	return m.recorder
}

// AddParticipantID mocks base method.
func (m *MockChatroomHandler) AddParticipantID(ctx context.Context, id, participantID uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddParticipantID indicates an expected call of AddParticipantID.
func (mr *MockChatroomHandlerMockRecorder) AddParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipantID", reflect.TypeOf((*MockChatroomHandler)(nil).AddParticipantID), ctx, id, participantID)
}

// Create mocks base method.
func (m *MockChatroomHandler) Create(ctx context.Context, customerID, agentID uuid.UUID, chatroomType chatroom.Type, chatID, ownerID uuid.UUID, participantIDs []uuid.UUID, name, detail string) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, agentID, chatroomType, chatID, ownerID, participantIDs, name, detail)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChatroomHandlerMockRecorder) Create(ctx, customerID, agentID, chatroomType, chatID, ownerID, participantIDs, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatroomHandler)(nil).Create), ctx, customerID, agentID, chatroomType, chatID, ownerID, participantIDs, name, detail)
}

// Delete mocks base method.
func (m *MockChatroomHandler) Delete(ctx context.Context, id uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockChatroomHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatroomHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockChatroomHandler) Get(ctx context.Context, id uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChatroomHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChatroomHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockChatroomHandler) Gets(ctx context.Context, token string, limit uint64, filters map[string]string) ([]*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, limit, filters)
	ret0, _ := ret[0].([]*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockChatroomHandlerMockRecorder) Gets(ctx, token, limit, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockChatroomHandler)(nil).Gets), ctx, token, limit, filters)
}

// RemoveParticipantID mocks base method.
func (m *MockChatroomHandler) RemoveParticipantID(ctx context.Context, id, participantID uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveParticipantID indicates an expected call of RemoveParticipantID.
func (mr *MockChatroomHandlerMockRecorder) RemoveParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipantID", reflect.TypeOf((*MockChatroomHandler)(nil).RemoveParticipantID), ctx, id, participantID)
}

// UpdateBasicInfo mocks base method.
func (m *MockChatroomHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockChatroomHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockChatroomHandler)(nil).UpdateBasicInfo), ctx, id, name, detail)
}
