// Package openapi_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi_server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for AgentManagerAgentPermission.
const (
	AgentManagerPermissionAll               AgentManagerAgentPermission = 65535
	AgentManagerPermissionCustomerAdmin     AgentManagerAgentPermission = 32
	AgentManagerPermissionCustomerAgent     AgentManagerAgentPermission = 16
	AgentManagerPermissionCustomerAll       AgentManagerAgentPermission = 240
	AgentManagerPermissionCustomerManager   AgentManagerAgentPermission = 64
	AgentManagerPermissionNone              AgentManagerAgentPermission = 0
	AgentManagerPermissionProjectAll        AgentManagerAgentPermission = 15
	AgentManagerPermissionProjectSuperAdmin AgentManagerAgentPermission = 1
)

// Defines values for AgentManagerAgentRingMethod.
const (
	AgentManagerAgentRingMethodLinear  AgentManagerAgentRingMethod = "linear"
	AgentManagerAgentRingMethodRingAll AgentManagerAgentRingMethod = "ringall"
)

// Defines values for AgentManagerAgentStatus.
const (
	AgentManagerAgentStatusAvailable AgentManagerAgentStatus = "available"
	AgentManagerAgentStatusAway      AgentManagerAgentStatus = "away"
	AgentManagerAgentStatusBusy      AgentManagerAgentStatus = "busy"
	AgentManagerAgentStatusNone      AgentManagerAgentStatus = ""
	AgentManagerAgentStatusOffline   AgentManagerAgentStatus = "offline"
	AgentManagerAgentStatusRinging   AgentManagerAgentStatus = "ringing"
)

// Defines values for BillingManagerAccountPaymentMethod.
const (
	BillingManagerAccountPaymentMethodCreditCard BillingManagerAccountPaymentMethod = "credit card"
	BillingManagerAccountPaymentMethodNone       BillingManagerAccountPaymentMethod = ""
)

// Defines values for BillingManagerAccountPaymentType.
const (
	BillingManagerAccountPaymentTypeNone    BillingManagerAccountPaymentType = ""
	BillingManagerAccountPaymentTypePrepaid BillingManagerAccountPaymentType = "prepaid"
)

// Defines values for BillingManagerBillingStatus.
const (
	BillingManagerBillingStatusEnd         BillingManagerBillingStatus = "end"
	BillingManagerBillingStatusFinished    BillingManagerBillingStatus = "finished"
	BillingManagerBillingStatusPending     BillingManagerBillingStatus = "pending"
	BillingManagerBillingStatusProgressing BillingManagerBillingStatus = "progressing"
)

// Defines values for BillingManagerBillingreferenceType.
const (
	BillingManagerBillingreferenceTypeCall        BillingManagerBillingreferenceType = "call"
	BillingManagerBillingreferenceTypeNone        BillingManagerBillingreferenceType = ""
	BillingManagerBillingreferenceTypeNumber      BillingManagerBillingreferenceType = "number"
	BillingManagerBillingreferenceTypeNumberRenew BillingManagerBillingreferenceType = "number_renew"
	BillingManagerBillingreferenceTypeSMS         BillingManagerBillingreferenceType = "sms"
)

// Defines values for CallManagerCallDirection.
const (
	CallManagerCallDirectionIncoming CallManagerCallDirection = "incoming"
	CallManagerCallDirectionOutgoing CallManagerCallDirection = "outgoing"
)

// Defines values for CallManagerCallHangupBy.
const (
	CallManagerCallHangupByLocal  CallManagerCallHangupBy = "local"
	CallManagerCallHangupByNone   CallManagerCallHangupBy = ""
	CallManagerCallHangupByRemote CallManagerCallHangupBy = "remote"
)

// Defines values for CallManagerCallHangupReason.
const (
	CallManagerCallHangupReasonAMD      CallManagerCallHangupReason = "amd"
	CallManagerCallHangupReasonBusy     CallManagerCallHangupReason = "busy"
	CallManagerCallHangupReasonCancel   CallManagerCallHangupReason = "cancel"
	CallManagerCallHangupReasonDialout  CallManagerCallHangupReason = "dialout"
	CallManagerCallHangupReasonFailed   CallManagerCallHangupReason = "failed"
	CallManagerCallHangupReasonNoanswer CallManagerCallHangupReason = "noanswer"
	CallManagerCallHangupReasonNone     CallManagerCallHangupReason = ""
	CallManagerCallHangupReasonNormal   CallManagerCallHangupReason = "normal"
	CallManagerCallHangupReasonTimeout  CallManagerCallHangupReason = "timeout"
)

// Defines values for CallManagerCallMuteDirection.
const (
	CallManagerCallMuteDirectionBoth CallManagerCallMuteDirection = "both"
	CallManagerCallMuteDirectionIn   CallManagerCallMuteDirection = "in"
	CallManagerCallMuteDirectionNone CallManagerCallMuteDirection = ""
	CallManagerCallMuteDirectionOut  CallManagerCallMuteDirection = "out"
)

// Defines values for CallManagerCallStatus.
const (
	CallManagerCallStatusCanceling   CallManagerCallStatus = "canceling"
	CallManagerCallStatusDialing     CallManagerCallStatus = "dialing"
	CallManagerCallStatusHangup      CallManagerCallStatus = "hangup"
	CallManagerCallStatusProgressing CallManagerCallStatus = "progressing"
	CallManagerCallStatusRinging     CallManagerCallStatus = "ringing"
	CallManagerCallStatusTerminating CallManagerCallStatus = "terminating"
)

// Defines values for CallManagerCallType.
const (
	CallManagerCallTypeConference CallManagerCallType = "conference"
	CallManagerCallTypeFlow       CallManagerCallType = "flow"
	CallManagerCallTypeNone       CallManagerCallType = ""
	CallManagerCallTypeSIPService CallManagerCallType = "sip-service"
)

// Defines values for CallManagerGroupcallAnswerMethod.
const (
	CallManagerGroupcallAnswerMethodHangupOthers CallManagerGroupcallAnswerMethod = "hangup_others"
	CallManagerGroupcallAnswerMethodNone         CallManagerGroupcallAnswerMethod = ""
)

// Defines values for CallManagerGroupcallRingMethod.
const (
	CallManagerGroupcallRingMethodLinear  CallManagerGroupcallRingMethod = "linear"
	CallManagerGroupcallRingMethodNone    CallManagerGroupcallRingMethod = ""
	CallManagerGroupcallRingMethodRingAll CallManagerGroupcallRingMethod = "ring_all"
)

// Defines values for CallManagerGroupcallStatus.
const (
	CallManagerGroupcallStatusHangingup   CallManagerGroupcallStatus = "hangingup"
	CallManagerGroupcallStatusHangup      CallManagerGroupcallStatus = "hangup"
	CallManagerGroupcallStatusProgressing CallManagerGroupcallStatus = "progressing"
)

// Defines values for CallManagerRecordingFormat.
const (
	Wav CallManagerRecordingFormat = "wav"
)

// Defines values for CallManagerRecordingReferenceType.
const (
	CallManagerRecordingReferenceTypeCall       CallManagerRecordingReferenceType = "call"
	CallManagerRecordingReferenceTypeConfbridge CallManagerRecordingReferenceType = "confbridge"
)

// Defines values for CallManagerRecordingStatus.
const (
	CallManagerRecordingStatusEnded      CallManagerRecordingStatus = "ended"
	CallManagerRecordingStatusInitiating CallManagerRecordingStatus = "initiating"
	CallManagerRecordingStatusRecording  CallManagerRecordingStatus = "recording"
	CallManagerRecordingStatusStopping   CallManagerRecordingStatus = "stopping"
)

// Defines values for CampaignManagerCampaignEndHandle.
const (
	CampaignManagerCampaignEndHandleContinue CampaignManagerCampaignEndHandle = "continue"
	CampaignManagerCampaignEndHandleStop     CampaignManagerCampaignEndHandle = "stop"
)

// Defines values for CampaignManagerCampaignExecute.
const (
	CampaignManagerCampaignExecuteRun  CampaignManagerCampaignExecute = "run"
	CampaignManagerCampaignExecuteStop CampaignManagerCampaignExecute = "stop"
)

// Defines values for CampaignManagerCampaignStatus.
const (
	CampaignManagerCampaignStatusRun      CampaignManagerCampaignStatus = "run"
	CampaignManagerCampaignStatusStop     CampaignManagerCampaignStatus = "stop"
	CampaignManagerCampaignStatusStopping CampaignManagerCampaignStatus = "stopping"
)

// Defines values for CampaignManagerCampaignType.
const (
	CampaignManagerCampaignTypeCall CampaignManagerCampaignType = "call"
	CampaignManagerCampaignTypeFlow CampaignManagerCampaignType = "flow"
)

// Defines values for CampaignManagerCampaigncallReferenceType.
const (
	CampaignManagerCampaigncallReferenceTypeCall CampaignManagerCampaigncallReferenceType = "call"
	CampaignManagerCampaigncallReferenceTypeFlow CampaignManagerCampaigncallReferenceType = "flow"
	CampaignManagerCampaigncallReferenceTypeNone CampaignManagerCampaigncallReferenceType = "none"
)

// Defines values for CampaignManagerCampaigncallResult.
const (
	CampaignManagerCampaigncallResultFail    CampaignManagerCampaigncallResult = "fail"
	CampaignManagerCampaigncallResultNone    CampaignManagerCampaigncallResult = ""
	CampaignManagerCampaigncallResultSuccess CampaignManagerCampaigncallResult = "success"
)

// Defines values for CampaignManagerCampaigncallStatus.
const (
	CampaignManagerCampaigncallStatusDialing     CampaignManagerCampaigncallStatus = "dialing"
	CampaignManagerCampaigncallStatusDone        CampaignManagerCampaigncallStatus = "done"
	CampaignManagerCampaigncallStatusProgressing CampaignManagerCampaigncallStatus = "progressing"
)

// Defines values for ChatManagerChatType.
const (
	ChatManagerChatTypeGroup  ChatManagerChatType = "group"
	ChatManagerChatTypeNormal ChatManagerChatType = "normal"
)

// Defines values for ChatManagerChatroomType.
const (
	ChatManagerChatroomTypeGroup   ChatManagerChatroomType = "group"
	ChatManagerChatroomTypeNormal  ChatManagerChatroomType = "normal"
	ChatManagerChatroomTypeUnknown ChatManagerChatroomType = "unknown"
)

// Defines values for ChatManagerMediaType.
const (
	ChatManagerMediaTypeAddress ChatManagerMediaType = "address"
	ChatManagerMediaTypeAgent   ChatManagerMediaType = "agent"
	ChatManagerMediaTypeFile    ChatManagerMediaType = "file"
	ChatManagerMediaTypeLink    ChatManagerMediaType = "link"
)

// Defines values for ChatManagerMessagechatType.
const (
	ChatManagerMessagechatTypeNormal ChatManagerMessagechatType = "normal"
	ChatManagerMessagechatTypeSystem ChatManagerMessagechatType = "system"
)

// Defines values for ChatManagerMessagechatroomType.
const (
	ChatManagerMessagechatroomTypeNormal  ChatManagerMessagechatroomType = "normal"
	ChatManagerMessagechatroomTypeSystem  ChatManagerMessagechatroomType = "system"
	ChatManagerMessagechatroomTypeUnknown ChatManagerMessagechatroomType = ""
)

// Defines values for ChatbotManagerChatbotEngineType.
const (
	ChatbotManagerChatbotEngineTypeChatGPT ChatbotManagerChatbotEngineType = "chatGPT"
	ChatbotManagerChatbotEngineTypeClova   ChatbotManagerChatbotEngineType = "clova"
)

// Defines values for ChatbotManagerChatbotcallGender.
const (
	ChatbotManagerChatbotcallGenderFemale  ChatbotManagerChatbotcallGender = "female"
	ChatbotManagerChatbotcallGenderMale    ChatbotManagerChatbotcallGender = "male"
	ChatbotManagerChatbotcallGenderNeutral ChatbotManagerChatbotcallGender = "neutral"
)

// Defines values for ChatbotManagerChatbotcallStatus.
const (
	ChatbotManagerChatbotcallStatusEnd         ChatbotManagerChatbotcallStatus = "end"
	ChatbotManagerChatbotcallStatusInitiating  ChatbotManagerChatbotcallStatus = "initiating"
	ChatbotManagerChatbotcallStatusProgressing ChatbotManagerChatbotcallStatus = "progressing"
)

// Defines values for ChatbotManagerChatbotcallreferenceType.
const (
	ChatbotManagerChatbotcallreferenceTypeCall ChatbotManagerChatbotcallreferenceType = "call"
)

// Defines values for CommonAddressType.
const (
	CommonAddressTypeAgent      CommonAddressType = "agent"
	CommonAddressTypeConference CommonAddressType = "conference"
	CommonAddressTypeExtension  CommonAddressType = "extension"
	CommonAddressTypeLine       CommonAddressType = "line"
	CommonAddressTypeNone       CommonAddressType = ""
	CommonAddressTypeSIP        CommonAddressType = "sip"
	CommonAddressTypeTel        CommonAddressType = "tel"
)

// Defines values for ConferenceManagerConferenceStatus.
const (
	ConferenceManagerConferenceStatusProgressing ConferenceManagerConferenceStatus = "progressing"
	ConferenceManagerConferenceStatusStarting    ConferenceManagerConferenceStatus = "starting"
	ConferenceManagerConferenceStatusTerminated  ConferenceManagerConferenceStatus = "terminated"
	ConferenceManagerConferenceStatusTerminating ConferenceManagerConferenceStatus = "terminating"
)

// Defines values for ConferenceManagerConferenceType.
const (
	ConferenceManagerConferenceTypeConference ConferenceManagerConferenceType = "conference"
	ConferenceManagerConferenceTypeConnect    ConferenceManagerConferenceType = "connect"
	ConferenceManagerConferenceTypeNone       ConferenceManagerConferenceType = ""
	ConferenceManagerConferenceTypeQueue      ConferenceManagerConferenceType = "queue"
)

// Defines values for ConferenceManagerConferencecallReferenceType.
const (
	ConferenceManagerConferencecallReferenceTypeCall ConferenceManagerConferencecallReferenceType = "call"
)

// Defines values for ConferenceManagerConferencecallStatus.
const (
	ConferenceManagerConferencecallStatusJoined  ConferenceManagerConferencecallStatus = "joined"
	ConferenceManagerConferencecallStatusJoining ConferenceManagerConferencecallStatus = "joining"
	ConferenceManagerConferencecallStatusLeaved  ConferenceManagerConferencecallStatus = "leaved"
	ConferenceManagerConferencecallStatusLeaving ConferenceManagerConferencecallStatus = "leaving"
)

// Defines values for ConversationManagerAccountType.
const (
	ConversationManagerAccountTypeLine ConversationManagerAccountType = "line"
	ConversationManagerAccountTypeSMS  ConversationManagerAccountType = "sms"
)

// Defines values for ConversationManagerConversationReferenceType.
const (
	ConversationManagerConversationReferenceTypeLine    ConversationManagerConversationReferenceType = "line"
	ConversationManagerConversationReferenceTypeMessage ConversationManagerConversationReferenceType = "message"
	ConversationManagerConversationReferenceTypeNone    ConversationManagerConversationReferenceType = ""
)

// Defines values for ConversationManagerMediaType.
const (
	ConversationManagerMediaTypeAudio    ConversationManagerMediaType = "audio"
	ConversationManagerMediaTypeFile     ConversationManagerMediaType = "file"
	ConversationManagerMediaTypeFlex     ConversationManagerMediaType = "flex"
	ConversationManagerMediaTypeImage    ConversationManagerMediaType = "image"
	ConversationManagerMediaTypeImagemap ConversationManagerMediaType = "imagemap"
	ConversationManagerMediaTypeLocation ConversationManagerMediaType = "location"
	ConversationManagerMediaTypeSticker  ConversationManagerMediaType = "sticker"
	ConversationManagerMediaTypeTemplate ConversationManagerMediaType = "template"
	ConversationManagerMediaTypeVideo    ConversationManagerMediaType = "video"
)

// Defines values for ConversationManagerMessageDirection.
const (
	ConversationManagerMessageDirectionIncoming ConversationManagerMessageDirection = "incoming"
	ConversationManagerMessageDirectionOutgoing ConversationManagerMessageDirection = "outgoing"
)

// Defines values for ConversationManagerMessageReferenceType.
const (
	ConversationManagerMessageReferenceTypeCall     ConversationManagerMessageReferenceType = "call"
	ConversationManagerMessageReferenceTypeCampaign ConversationManagerMessageReferenceType = "campaign"
	ConversationManagerMessageReferenceTypeNone     ConversationManagerMessageReferenceType = "none"
)

// Defines values for ConversationManagerMessageStatus.
const (
	ConversationManagerMessageStatusFailed   ConversationManagerMessageStatus = "failed"
	ConversationManagerMessageStatusReceived ConversationManagerMessageStatus = "received"
	ConversationManagerMessageStatusSending  ConversationManagerMessageStatus = "sending"
	ConversationManagerMessageStatusSent     ConversationManagerMessageStatus = "sent"
)

// Defines values for CustomerManagerCustomerWebhookMethod.
const (
	CustomerManagerCustomerWebhookMethodDelete CustomerManagerCustomerWebhookMethod = "DELETE"
	CustomerManagerCustomerWebhookMethodGet    CustomerManagerCustomerWebhookMethod = "GET"
	CustomerManagerCustomerWebhookMethodNone   CustomerManagerCustomerWebhookMethod = ""
	CustomerManagerCustomerWebhookMethodPost   CustomerManagerCustomerWebhookMethod = "POST"
	CustomerManagerCustomerWebhookMethodPut    CustomerManagerCustomerWebhookMethod = "PUT"
)

// Defines values for FlowManagerActionType.
const (
	FlowManagerActionTypeAMD                 FlowManagerActionType = "amd"
	FlowManagerActionTypeAnswer              FlowManagerActionType = "answer"
	FlowManagerActionTypeBeep                FlowManagerActionType = "beep"
	FlowManagerActionTypeBranch              FlowManagerActionType = "branch"
	FlowManagerActionTypeCall                FlowManagerActionType = "call"
	FlowManagerActionTypeChatbotTalk         FlowManagerActionType = "chatbot_talk"
	FlowManagerActionTypeConditionCallDigits FlowManagerActionType = "condition_call_digits"
	FlowManagerActionTypeConditionCallStatus FlowManagerActionType = "condition_call_status"
	FlowManagerActionTypeConditionDatetime   FlowManagerActionType = "condition_datetime"
	FlowManagerActionTypeConditionVariable   FlowManagerActionType = "condition_variable"
	FlowManagerActionTypeConfbridgeJoin      FlowManagerActionType = "confbridge_join"
	FlowManagerActionTypeConferenceJoin      FlowManagerActionType = "conference_join"
	FlowManagerActionTypeConnect             FlowManagerActionType = "connect"
	FlowManagerActionTypeConversationSend    FlowManagerActionType = "conversation_send"
	FlowManagerActionTypeDigitsReceive       FlowManagerActionType = "digits_receive"
	FlowManagerActionTypeDigitsSend          FlowManagerActionType = "digits_send"
	FlowManagerActionTypeEcho                FlowManagerActionType = "echo"
	FlowManagerActionTypeExternalMediaStart  FlowManagerActionType = "external_media_start"
	FlowManagerActionTypeExternalMediaStop   FlowManagerActionType = "external_media_stop"
	FlowManagerActionTypeFetch               FlowManagerActionType = "fetch"
	FlowManagerActionTypeFetchFlow           FlowManagerActionType = "fetch_flow"
	FlowManagerActionTypeGoto                FlowManagerActionType = "goto"
	FlowManagerActionTypeHangup              FlowManagerActionType = "hangup"
	FlowManagerActionTypeMessageSend         FlowManagerActionType = "message_send"
	FlowManagerActionTypeMute                FlowManagerActionType = "mute"
	FlowManagerActionTypePlay                FlowManagerActionType = "play"
	FlowManagerActionTypeQueueJoin           FlowManagerActionType = "queue_join"
	FlowManagerActionTypeRecordingStart      FlowManagerActionType = "recording_start"
	FlowManagerActionTypeRecordingStop       FlowManagerActionType = "recording_stop"
	FlowManagerActionTypeSleep               FlowManagerActionType = "sleep"
	FlowManagerActionTypeStop                FlowManagerActionType = "stop"
	FlowManagerActionTypeStreamEcho          FlowManagerActionType = "stream_echo"
	FlowManagerActionTypeTalk                FlowManagerActionType = "talk"
	FlowManagerActionTypeTranscribeRecording FlowManagerActionType = "transcribe_recording"
	FlowManagerActionTypeTranscribeStart     FlowManagerActionType = "transcribe_start"
	FlowManagerActionTypeTranscribeStop      FlowManagerActionType = "transcribe_stop"
	FlowManagerActionTypeVariableSet         FlowManagerActionType = "variable_set"
	FlowManagerActionTypeWebhookSend         FlowManagerActionType = "webhook_send"
)

// Defines values for FlowManagerActiveflowStatus.
const (
	FlowManagerActiveflowStatusEnded   FlowManagerActiveflowStatus = "ended"
	FlowManagerActiveflowStatusNone    FlowManagerActiveflowStatus = ""
	FlowManagerActiveflowStatusRunning FlowManagerActiveflowStatus = "running"
)

// Defines values for FlowManagerFlowType.
const (
	FlowManagerFlowTypeCampaign   FlowManagerFlowType = "campaign"
	FlowManagerFlowTypeConference FlowManagerFlowType = "conference"
	FlowManagerFlowTypeFlow       FlowManagerFlowType = "flow"
	FlowManagerFlowTypeQueue      FlowManagerFlowType = "queue"
	FlowManagerFlowTypeTransfer   FlowManagerFlowType = "transfer"
)

// Defines values for FlowManagerReferenceType.
const (
	FlowManagerReferenceTypeCall    FlowManagerReferenceType = "call"
	FlowManagerReferenceTypeMessage FlowManagerReferenceType = "message"
	FlowManagerReferenceTypeNone    FlowManagerReferenceType = ""
)

// Defines values for MessageManagerMessageDirection.
const (
	MessageManagerMessageDirectionInbound  MessageManagerMessageDirection = "inbound"
	MessageManagerMessageDirectionOutbound MessageManagerMessageDirection = "outbound"
)

// Defines values for MessageManagerMessageProviderName.
const (
	MessageManagerMessageProviderNameMessagebird MessageManagerMessageProviderName = "messagebird"
	MessageManagerMessageProviderNameTelnyx      MessageManagerMessageProviderName = "telnyx"
	MessageManagerMessageProviderNameTwilio      MessageManagerMessageProviderName = "twilio"
)

// Defines values for MessageManagerMessageType.
const (
	MessageManagerMessageTypeSMS MessageManagerMessageType = "sms"
)

// Defines values for MessageManagerTargetStatus.
const (
	MessageManagerTargetStatusDLRTimeout MessageManagerTargetStatus = "dlr_timeout"
	MessageManagerTargetStatusDelivered  MessageManagerTargetStatus = "delivered"
	MessageManagerTargetStatusFailed     MessageManagerTargetStatus = "failed"
	MessageManagerTargetStatusGWTimeout  MessageManagerTargetStatus = "gw_timeout"
	MessageManagerTargetStatusQueued     MessageManagerTargetStatus = "queued"
	MessageManagerTargetStatusReceived   MessageManagerTargetStatus = "received"
	MessageManagerTargetStatusSent       MessageManagerTargetStatus = "sent"
)

// Defines values for NumberManagerAvailableNumber.
const (
	NumberManagerAvailableNumberFeatureEmergency NumberManagerAvailableNumber = "emergency"
	NumberManagerAvailableNumberFeatureFax       NumberManagerAvailableNumber = "fax"
	NumberManagerAvailableNumberFeatureMMS       NumberManagerAvailableNumber = "mms"
	NumberManagerAvailableNumberFeatureSMS       NumberManagerAvailableNumber = "sms"
	NumberManagerAvailableNumberFeatureVoice     NumberManagerAvailableNumber = "voice"
)

// Defines values for NumberManagerNumberProviderName.
const (
	NumberManagerProviderNameMessagebird NumberManagerNumberProviderName = "messagebird"
	NumberManagerProviderNameTelnyx      NumberManagerNumberProviderName = "telnyx"
	NumberManagerProviderNameTwilio      NumberManagerNumberProviderName = "twilio"
)

// Defines values for NumberManagerNumberStatus.
const (
	NumberManagerStatusActive  NumberManagerNumberStatus = "active"
	NumberManagerStatusDeleted NumberManagerNumberStatus = "deleted"
)

// Defines values for OutdialManagerOutdialtargetStatus.
const (
	OutdialManagerOutdialtargetStatusDone        OutdialManagerOutdialtargetStatus = "done"
	OutdialManagerOutdialtargetStatusIdle        OutdialManagerOutdialtargetStatus = "idle"
	OutdialManagerOutdialtargetStatusProgressing OutdialManagerOutdialtargetStatus = "progressing"
)

// Defines values for QueueManagerQueueRoutingMethod.
const (
	QueueManagerQueueRoutingMethodNone   QueueManagerQueueRoutingMethod = ""
	QueueManagerQueueRoutingMethodRandom QueueManagerQueueRoutingMethod = "random"
)

// Defines values for QueueManagerQueuecallReferenceType.
const (
	QueueManagerQueuecallReferenceTypeCall QueueManagerQueuecallReferenceType = "call"
)

// Defines values for QueueManagerQueuecallStatus.
const (
	QueueManagerQueuecallStatusAbandoned  QueueManagerQueuecallStatus = "abandoned"
	QueueManagerQueuecallStatusConnecting QueueManagerQueuecallStatus = "connecting"
	QueueManagerQueuecallStatusDone       QueueManagerQueuecallStatus = "done"
	QueueManagerQueuecallStatusInitiating QueueManagerQueuecallStatus = "initiating"
	QueueManagerQueuecallStatusKicking    QueueManagerQueuecallStatus = "kicking"
	QueueManagerQueuecallStatusService    QueueManagerQueuecallStatus = "service"
	QueueManagerQueuecallStatusWaiting    QueueManagerQueuecallStatus = "waiting"
)

// Defines values for RegistrarManagerAuthType.
const (
	RegistrarManagerAuthTypeBasic RegistrarManagerAuthType = "basic"
	RegistrarManagerAuthTypeIP    RegistrarManagerAuthType = "ip"
)

// Defines values for RouteManagerProviderType.
const (
	RouteManagerProviderTypeSIP RouteManagerProviderType = "sip"
)

// Defines values for StorageManagerFileReferenceType.
const (
	StorageManagerFileReferenceTypeNone      StorageManagerFileReferenceType = ""
	StorageManagerFileReferenceTypeNormal    StorageManagerFileReferenceType = "normal"
	StorageManagerFileReferenceTypeRecording StorageManagerFileReferenceType = "recording"
)

// Defines values for TranscribeManagerTranscribeDirection.
const (
	TranscribeManagerTranscribeDirectionBoth TranscribeManagerTranscribeDirection = "both"
	TranscribeManagerTranscribeDirectionIn   TranscribeManagerTranscribeDirection = "in"
	TranscribeManagerTranscribeDirectionOut  TranscribeManagerTranscribeDirection = "out"
)

// Defines values for TranscribeManagerTranscribeReferenceType.
const (
	TranscribeManagerTranscribeReferenceTypeCall       TranscribeManagerTranscribeReferenceType = "call"
	TranscribeManagerTranscribeReferenceTypeConfbridge TranscribeManagerTranscribeReferenceType = "confbridge"
	TranscribeManagerTranscribeReferenceTypeRecording  TranscribeManagerTranscribeReferenceType = "recording"
	TranscribeManagerTranscribeReferenceTypeUnknown    TranscribeManagerTranscribeReferenceType = "unknown"
)

// Defines values for TranscribeManagerTranscribeStatus.
const (
	TranscribeManagerTranscribeStatusDone        TranscribeManagerTranscribeStatus = "done"
	TranscribeManagerTranscribeStatusProgressing TranscribeManagerTranscribeStatus = "progressing"
)

// Defines values for TranscribeManagerTranscriptDirection.
const (
	TranscribeManagerTranscriptDirectionBoth TranscribeManagerTranscriptDirection = "both"
	TranscribeManagerTranscriptDirectionIn   TranscribeManagerTranscriptDirection = "in"
	TranscribeManagerTranscriptDirectionOut  TranscribeManagerTranscriptDirection = "out"
)

// Defines values for TransferManagerTransferType.
const (
	TransferManagerTransferTypeAttended TransferManagerTransferType = "attended"
	TransferManagerTransferTypeBlind    TransferManagerTransferType = "blind"
)

// AgentManagerAgent Represents an agent resource.
type AgentManagerAgent struct {
	// Addresses Agent's endpoint addresses.
	Addresses *[]CommonAddress `json:"addresses,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Agent's detail.
	Detail *string `json:"detail,omitempty"`
	Id     *string `json:"id,omitempty"`

	// Name Agent's name.
	Name *string `json:"name,omitempty"`

	// Permission Permission type
	Permission *AgentManagerAgentPermission `json:"permission,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *AgentManagerAgentRingMethod `json:"ring_method,omitempty"`

	// Status Agent's status
	Status *AgentManagerAgentStatus `json:"status,omitempty"`

	// TagIds Agent's tag IDs.
	TagIds *[]string `json:"tag_ids,omitempty"`

	// TmCreate Created timestamp.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Deleted timestamp.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Updated timestamp.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Username Agent's username.
	Username *string `json:"username,omitempty"`
}

// AgentManagerAgentPermission Permission type
type AgentManagerAgentPermission uint64

// AgentManagerAgentRingMethod Represents an agent resource.
type AgentManagerAgentRingMethod string

// AgentManagerAgentStatus Agent's status
type AgentManagerAgentStatus string

// BillingManagerAccount defines model for BillingManagerAccount.
type BillingManagerAccount struct {
	// Balance The balance of the account in USD.
	Balance *float32 `json:"balance,omitempty"`

	// CustomerId The unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Additional details about the account.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier of the account.
	Id *string `json:"id,omitempty"`

	// Name The name of the account.
	Name *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`

	// TmCreate The timestamp when the account was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The timestamp when the account was deleted, if applicable.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate The timestamp when the account was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// BillingManagerAccountPaymentMethod The method of payment used for the account.
type BillingManagerAccountPaymentMethod string

// BillingManagerAccountPaymentType The type of payment associated with the account.
type BillingManagerAccountPaymentType string

// BillingManagerBilling defines model for BillingManagerBilling.
type BillingManagerBilling struct {
	// AccountId The billing account ID.
	AccountId *string `json:"account_id,omitempty"`

	// BillingUnitCount The total count of billing units.
	BillingUnitCount *float32 `json:"billing_unit_count,omitempty"`

	// CostPerUnit The cost per billing unit.
	CostPerUnit *float32 `json:"cost_per_unit,omitempty"`

	// CostTotal The total cost of this billing.
	CostTotal *float32 `json:"cost_total,omitempty"`

	// CustomerId The customer's unique identifier.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id The unique identifier of the billing.
	Id *string `json:"id,omitempty"`

	// ReferenceId The ID of the reference related to this billing.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType The type of reference associated with this billing.
	ReferenceType *BillingManagerBillingreferenceType `json:"reference_type,omitempty"`

	// Status Status of the billing.
	Status *BillingManagerBillingStatus `json:"status,omitempty"`

	// TmBillingEnd The end timestamp of the billing period.
	TmBillingEnd *time.Time `json:"tm_billing_end,omitempty"`

	// TmBillingStart The start timestamp of the billing period.
	TmBillingStart *time.Time `json:"tm_billing_start,omitempty"`

	// TmCreate The creation timestamp.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The deletion timestamp, if applicable.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate The last update timestamp.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// BillingManagerBillingStatus Status of the billing.
type BillingManagerBillingStatus string

// BillingManagerBillingreferenceType The type of reference associated with this billing.
type BillingManagerBillingreferenceType string

// CallManagerCall defines model for CallManagerCall.
type CallManagerCall struct {
	Action *FlowManagerAction `json:"action,omitempty"`

	// ActiveflowId Active flow ID
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// ChainedCallIds Chained call IDs
	ChainedCallIds *[]string `json:"chained_call_ids,omitempty"`

	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// Direction Call direction
	Direction *CallManagerCallDirection `json:"direction,omitempty"`

	// FlowId Flow ID
	FlowId *string `json:"flow_id,omitempty"`

	// GroupcallId Group call ID, indicates if this call is part of a group call
	GroupcallId *string `json:"groupcall_id,omitempty"`

	// HangupBy Indicates who hung up the call
	HangupBy *CallManagerCallHangupBy `json:"hangup_by,omitempty"`

	// HangupReason Reason for call hangup
	HangupReason *CallManagerCallHangupReason `json:"hangup_reason,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// MasterCallId Master call ID
	MasterCallId *string `json:"master_call_id,omitempty"`

	// MuteDirection Possible mute directions for the call
	MuteDirection *CallManagerCallMuteDirection `json:"mute_direction,omitempty"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// RecordingId Current recording ID
	RecordingId *string `json:"recording_id,omitempty"`

	// RecordingIds Recording IDs
	RecordingIds *[]string `json:"recording_ids,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Call status
	Status *CallManagerCallStatus `json:"status,omitempty"`

	// TmCreate Creation timestamp
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Deletion timestamp
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmHangup Timestamp for call hangup
	TmHangup *time.Time `json:"tm_hangup,omitempty"`

	// TmProgressing Timestamp for call progressing
	TmProgressing *time.Time `json:"tm_progressing,omitempty"`

	// TmRinging Timestamp for call ringing
	TmRinging *time.Time `json:"tm_ringing,omitempty"`

	// TmUpdate Update timestamp
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Call type
	Type *CallManagerCallType `json:"type,omitempty"`
}

// CallManagerCallDirection Call direction
type CallManagerCallDirection string

// CallManagerCallHangupBy Indicates who hung up the call
type CallManagerCallHangupBy string

// CallManagerCallHangupReason Reason for call hangup
type CallManagerCallHangupReason string

// CallManagerCallMuteDirection Possible mute directions for the call
type CallManagerCallMuteDirection string

// CallManagerCallStatus Call status
type CallManagerCallStatus string

// CallManagerCallType Call type
type CallManagerCallType string

// CallManagerGroupcall Call or group call information
type CallManagerGroupcall struct {
	// AnswerCallId ID of the answered call
	AnswerCallId *string `json:"answer_call_id,omitempty"`

	// AnswerGroupcallId ID of the answered group call
	AnswerGroupcallId *string `json:"answer_groupcall_id,omitempty"`

	// AnswerMethod Method to handle answered calls
	AnswerMethod *CallManagerGroupcallAnswerMethod `json:"answer_method,omitempty"`

	// CallCount Number of remaining calls in the current dial
	CallCount *int `json:"call_count,omitempty"`

	// CallIds List of associated call IDs
	CallIds *[]string `json:"call_ids,omitempty"`

	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Destinations List of destination addresses
	Destinations *[]CommonAddress `json:"destinations,omitempty"`

	// DialIndex Current dial index, valid only when the ring method is "ring_all"
	DialIndex *int `json:"dial_index"`

	// FlowId ID of the associated flow
	FlowId *string `json:"flow_id,omitempty"`

	// GroupcallCount Number of remaining group calls in the current dial
	GroupcallCount *int `json:"groupcall_count,omitempty"`

	// GroupcallIds List of associated group call IDs
	GroupcallIds *[]string `json:"groupcall_ids,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// MasterCallId ID of the master call, if applicable
	MasterCallId *string `json:"master_call_id"`

	// MasterGroupcallId ID of the master group call, if applicable
	MasterGroupcallId *string `json:"master_groupcall_id"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// RingMethod Method used for dialing
	RingMethod *CallManagerGroupcallRingMethod `json:"ring_method,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Current status of the call or group call
	Status *CallManagerGroupcallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the call was created
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the call was deleted
	TmDelete *time.Time `json:"tm_delete"`

	// TmUpdate Timestamp when the call was last updated
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// CallManagerGroupcallAnswerMethod Method to handle answered calls
type CallManagerGroupcallAnswerMethod string

// CallManagerGroupcallRingMethod Method used for dialing
type CallManagerGroupcallRingMethod string

// CallManagerGroupcallStatus Current status of the call or group call
type CallManagerGroupcallStatus string

// CallManagerRecording defines model for CallManagerRecording.
type CallManagerRecording struct {
	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Format The format of the recording.
	Format *CallManagerRecordingFormat `json:"format,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// ReferenceId The UUID of the reference.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference for the recording.
	ReferenceType *CallManagerRecordingReferenceType `json:"reference_type,omitempty"`

	// Status The status of the recording.
	Status *CallManagerRecordingStatus `json:"status,omitempty"`

	// TmCreate The creation timestamp of the recording.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The timestamp when the recording was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmEnd The end timestamp of the recording.
	TmEnd *time.Time `json:"tm_end,omitempty"`

	// TmStart The start timestamp of the recording.
	TmStart *time.Time `json:"tm_start,omitempty"`

	// TmUpdate The last update timestamp of the recording.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// CallManagerRecordingFormat The format of the recording.
type CallManagerRecordingFormat string

// CallManagerRecordingReferenceType Type of reference for the recording.
type CallManagerRecordingReferenceType string

// CallManagerRecordingStatus The status of the recording.
type CallManagerRecordingStatus string

// CampaignManagerCampaign defines model for CampaignManagerCampaign.
type CampaignManagerCampaign struct {
	Actions    *[]FlowManagerAction `json:"actions,omitempty"`
	CustomerId *string              `json:"customer_id,omitempty"`
	Detail     *string              `json:"detail,omitempty"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle      *CampaignManagerCampaignEndHandle `json:"end_handle,omitempty"`
	Id             *string                           `json:"id,omitempty"`
	Name           *string                           `json:"name,omitempty"`
	NextCampaignId *string                           `json:"next_campaign_id,omitempty"`
	OutdialId      *string                           `json:"outdial_id,omitempty"`
	OutplanId      *string                           `json:"outplan_id,omitempty"`
	QueueId        *string                           `json:"queue_id,omitempty"`
	ServiceLevel   *int                              `json:"service_level,omitempty"`

	// Status Status of the campaign.
	Status   *CampaignManagerCampaignStatus `json:"status,omitempty"`
	TmCreate *time.Time                     `json:"tm_create,omitempty"`
	TmDelete *time.Time                     `json:"tm_delete,omitempty"`
	TmUpdate *time.Time                     `json:"tm_update,omitempty"`

	// Type Type of campaign.
	Type *CampaignManagerCampaignType `json:"type,omitempty"`
}

// CampaignManagerCampaignEndHandle Behavior of the campaign after outdial has no more targets.
type CampaignManagerCampaignEndHandle string

// CampaignManagerCampaignExecute Execution action for the campaign.
type CampaignManagerCampaignExecute string

// CampaignManagerCampaignStatus Status of the campaign.
type CampaignManagerCampaignStatus string

// CampaignManagerCampaignType Type of campaign.
type CampaignManagerCampaignType string

// CampaignManagerCampaigncall defines model for CampaignManagerCampaigncall.
type CampaignManagerCampaigncall struct {
	// ActiveflowId Identifier of the active flow.
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// CampaignId Identifier of the campaign.
	CampaignId *string `json:"campaign_id,omitempty"`

	// CustomerId Identifier of the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// DestinationIndex Index of the destination.
	DestinationIndex *int `json:"destination_index,omitempty"`

	// FlowId Identifier of the flow.
	FlowId *string `json:"flow_id,omitempty"`

	// Id Unique identifier of the campaign call.
	Id *string `json:"id,omitempty"`

	// OutdialId Identifier of the outbound dial.
	OutdialId *string `json:"outdial_id,omitempty"`

	// OutdialTargetId Identifier of the outbound dial target.
	OutdialTargetId *string `json:"outdial_target_id,omitempty"`

	// OutplanId Identifier of the outbound plan.
	OutplanId *string `json:"outplan_id,omitempty"`

	// QueueId Identifier of the queue.
	QueueId *string `json:"queue_id,omitempty"`

	// ReferenceId Identifier of the reference.
	ReferenceId   *string                                   `json:"reference_id,omitempty"`
	ReferenceType *CampaignManagerCampaigncallReferenceType `json:"reference_type,omitempty"`
	Result        *CampaignManagerCampaigncallResult        `json:"result,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress                     `json:"source,omitempty"`
	Status *CampaignManagerCampaigncallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the campaign call was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the campaign call was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the campaign call was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TryCount Number of dialing attempts.
	TryCount *int `json:"try_count,omitempty"`
}

// CampaignManagerCampaigncallReferenceType defines model for CampaignManagerCampaigncallReferenceType.
type CampaignManagerCampaigncallReferenceType string

// CampaignManagerCampaigncallResult defines model for CampaignManagerCampaigncallResult.
type CampaignManagerCampaigncallResult string

// CampaignManagerCampaigncallStatus defines model for CampaignManagerCampaigncallStatus.
type CampaignManagerCampaigncallStatus string

// CampaignManagerOutplan defines model for CampaignManagerOutplan.
type CampaignManagerOutplan struct {
	// CustomerId Identifier of the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the outplan.
	Detail *string `json:"detail,omitempty"`

	// DialTimeout Dial timeout in milliseconds.
	DialTimeout *int `json:"dial_timeout,omitempty"`

	// Id Unique identifier of the outplan.
	Id *string `json:"id,omitempty"`

	// MaxTryCount0 Maximum number of tries for level 0.
	MaxTryCount0 *int `json:"max_try_count_0,omitempty"`

	// MaxTryCount1 Maximum number of tries for level 1.
	MaxTryCount1 *int `json:"max_try_count_1,omitempty"`

	// MaxTryCount2 Maximum number of tries for level 2.
	MaxTryCount2 *int `json:"max_try_count_2,omitempty"`

	// MaxTryCount3 Maximum number of tries for level 3.
	MaxTryCount3 *int `json:"max_try_count_3,omitempty"`

	// MaxTryCount4 Maximum number of tries for level 4.
	MaxTryCount4 *int `json:"max_try_count_4,omitempty"`

	// Name Name of the outplan.
	Name *string `json:"name,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// TmCreate Timestamp when the outplan was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the outplan was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the outplan was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TryInterval Interval between dialing attempts in milliseconds.
	TryInterval *int `json:"try_interval,omitempty"`
}

// ChatManagerChat defines model for ChatManagerChat.
type ChatManagerChat struct {
	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chat.
	Detail *string `json:"detail,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Name Name of the chat.
	Name *string `json:"name,omitempty"`

	// ParticipantIds List of participant IDs (agent IDs).
	ParticipantIds *[]string `json:"participant_ids,omitempty"`

	// RoomOwnerId Owned agent's ID.
	RoomOwnerId *string `json:"room_owner_id,omitempty"`

	// TmCreate Timestamp when the chat was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chat was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chat was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the chat.
	Type *ChatManagerChatType `json:"type,omitempty"`
}

// ChatManagerChatType Type of the chat.
type ChatManagerChatType string

// ChatManagerChatroom defines model for ChatManagerChatroom.
type ChatManagerChatroom struct {
	// ChatId Associated chat ID.
	ChatId *string `json:"chat_id,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chat room.
	Detail *string `json:"detail,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Name Name of the chat room.
	Name *string `json:"name,omitempty"`

	// OwnerId Resource's owner ID.
	OwnerId   *string `json:"owner_id,omitempty"`
	OwnerType *string `json:"owner_type,omitempty"`

	// ParticipantIds List of participant agent IDs.
	ParticipantIds *[]string `json:"participant_ids,omitempty"`

	// RoomOwnerId Chat room's owner agent ID.
	RoomOwnerId *string `json:"room_owner_id,omitempty"`

	// TmCreate Timestamp when the chat room was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chat room was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chat room was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the chat room.
	Type *ChatManagerChatroomType `json:"type,omitempty"`
}

// ChatManagerChatroomType Type of the chat room.
type ChatManagerChatroomType string

// ChatManagerMedia defines model for ChatManagerMedia.
type ChatManagerMedia struct {
	// Address Contains source or destination detail info.
	Address *CommonAddress `json:"address,omitempty"`

	// Agent Represents an agent resource.
	Agent *AgentManagerAgent `json:"agent,omitempty"`

	// FileId Valid only if the type is `file`.
	FileId *string `json:"file_id,omitempty"`

	// LinkUrl Valid only if the type is `link`.
	LinkUrl *string `json:"link_url,omitempty"`

	// Type Type of the media content.
	Type *ChatManagerMediaType `json:"type,omitempty"`
}

// ChatManagerMediaType Type of the media content.
type ChatManagerMediaType string

// ChatManagerMessagechat defines model for ChatManagerMessagechat.
type ChatManagerMessagechat struct {
	// ChatId Associated chat ID.
	ChatId *string `json:"chat_id,omitempty"`

	// Id Unique identifier (inherited from commonidentity.Identity).
	Id *string `json:"id,omitempty"`

	// Medias List of associated media objects.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Text Text content of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message chat was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message chat was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message chat was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the message chat.
	Type *ChatManagerMessagechatType `json:"type,omitempty"`
}

// ChatManagerMessagechatType Type of the message chat.
type ChatManagerMessagechatType string

// ChatManagerMessagechatroom defines model for ChatManagerMessagechatroom.
type ChatManagerMessagechatroom struct {
	// ChatroomId Associated chat room ID.
	ChatroomId *string `json:"chatroom_id,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Medias List of associated media objects.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// MessagechatId Associated message chat ID.
	MessagechatId *string `json:"messagechat_id,omitempty"`

	// OwnerId Resource's owner ID.
	OwnerId   *string `json:"owner_id,omitempty"`
	OwnerType *string `json:"owner_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Text Text content of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message chat room was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message chat room was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message chat room was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the message in the chat room.
	Type *ChatManagerMessagechatroomType `json:"type,omitempty"`
}

// ChatManagerMessagechatroomType Type of the message in the chat room.
type ChatManagerMessagechatroomType string

// ChatbotManagerChatbot defines model for ChatbotManagerChatbot.
type ChatbotManagerChatbot struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chatbot.
	Detail *string `json:"detail,omitempty"`

	// EngineType Type of engine used by the chatbot.
	EngineType *ChatbotManagerChatbotEngineType `json:"engine_type,omitempty"`

	// Id Unique identifier of the chatbot.
	Id *string `json:"id,omitempty"`

	// InitPrompt Initial prompt to configure the chatbot's behavior.
	InitPrompt *string `json:"init_prompt,omitempty"`

	// Name Name of the chatbot.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the chatbot was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chatbot was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chatbot was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// ChatbotManagerChatbotEngineType Type of engine used by the chatbot.
type ChatbotManagerChatbotEngineType string

// ChatbotManagerChatbotcall defines model for ChatbotManagerChatbotcall.
type ChatbotManagerChatbotcall struct {
	// ActiveflowId Unique identifier for the active flow.
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// ChatbotId Unique identifier of the associated chatbot.
	ChatbotId *string `json:"chatbot_id,omitempty"`

	// ConfbridgeId Unique identifier for the conference bridge.
	ConfbridgeId *string `json:"confbridge_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Gender Gender associated with the chatbot call.
	Gender *ChatbotManagerChatbotcallGender `json:"gender,omitempty"`

	// Id Unique identifier for the chatbot call.
	Id *string `json:"id,omitempty"`

	// Language Language used during the chatbot call.
	Language *string `json:"language,omitempty"`

	// ReferenceId Unique identifier for the reference.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference associated with the chatbot call.
	ReferenceType *ChatbotManagerChatbotcallreferenceType `json:"reference_type,omitempty"`

	// Status Status of the chatbot call.
	Status *ChatbotManagerChatbotcallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the chatbot call was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chatbot call was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmEnd Timestamp when the chatbot call ended.
	TmEnd *time.Time `json:"tm_end,omitempty"`

	// TmUpdate Timestamp when the chatbot call was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TranscribeId Unique identifier for the transcription service.
	TranscribeId *string `json:"transcribe_id,omitempty"`
}

// ChatbotManagerChatbotcallGender Gender associated with the chatbot call.
type ChatbotManagerChatbotcallGender string

// ChatbotManagerChatbotcallMessage defines model for ChatbotManagerChatbotcallMessage.
type ChatbotManagerChatbotcallMessage struct {
	// Content Content of the message.
	Content *string `json:"content,omitempty"`

	// Role Role of the entity in the conversation.
	Role *string `json:"role,omitempty"`
}

// ChatbotManagerChatbotcallStatus Status of the chatbot call.
type ChatbotManagerChatbotcallStatus string

// ChatbotManagerChatbotcallreferenceType Type of reference associated with the chatbot call.
type ChatbotManagerChatbotcallreferenceType string

// CommonAddress Contains source or destination detail info.
type CommonAddress struct {
	// Detail Detail description.
	Detail *string `json:"detail,omitempty"`

	// Name Name.
	Name *string `json:"name,omitempty"`

	// Target Address endpoint.
	Target *string `json:"target,omitempty"`

	// TargetName Address's name.
	TargetName *string `json:"target_name,omitempty"`

	// Type Type of address.
	Type *CommonAddressType `json:"type,omitempty"`
}

// CommonAddressType Type of address.
type CommonAddressType string

// CommonPagination defines model for CommonPagination.
type CommonPagination struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// ConferenceManagerConference defines model for ConferenceManagerConference.
type ConferenceManagerConference struct {
	// ConferencecallIds List of associated conference call IDs.
	ConferencecallIds *[]string `json:"conferencecall_ids,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Data Custom data associated with the conference.
	Data *map[string]interface{} `json:"data,omitempty"`

	// Detail Detailed information about the conference.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the conference.
	Id *string `json:"id,omitempty"`

	// Name Name of the conference.
	Name *string `json:"name,omitempty"`

	// PostActions Post-actions to execute after the conference ends.
	PostActions *[]FlowManagerAction `json:"post_actions,omitempty"`

	// PreActions Pre-actions to execute before the conference starts.
	PreActions *[]FlowManagerAction `json:"pre_actions,omitempty"`

	// RecordingId ID of the main recording associated with the conference.
	RecordingId *string `json:"recording_id,omitempty"`

	// RecordingIds List of associated recording IDs.
	RecordingIds *[]string `json:"recording_ids,omitempty"`

	// Status Status of the conference.
	Status *ConferenceManagerConferenceStatus `json:"status,omitempty"`

	// Timeout Timeout for the conference in seconds.
	Timeout *int32 `json:"timeout,omitempty"`

	// TmCreate Timestamp when the conference was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conference was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmEnd Timestamp when the conference ended.
	TmEnd *string `json:"tm_end,omitempty"`

	// TmUpdate Timestamp when the conference was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TranscribeId ID of the main transcription associated with the conference.
	TranscribeId *string `json:"transcribe_id,omitempty"`

	// TranscribeIds List of associated transcription IDs.
	TranscribeIds *[]string `json:"transcribe_ids,omitempty"`

	// Type Types of conferences.
	Type *ConferenceManagerConferenceType `json:"type,omitempty"`
}

// ConferenceManagerConferenceStatus Status of the conference.
type ConferenceManagerConferenceStatus string

// ConferenceManagerConferenceType Types of conferences.
type ConferenceManagerConferenceType string

// ConferenceManagerConferencecall defines model for ConferenceManagerConferencecall.
type ConferenceManagerConferencecall struct {
	// ConferenceId Unique identifier of the associated conference.
	ConferenceId *string `json:"conference_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id Unique identifier for the conference call.
	Id *string `json:"id,omitempty"`

	// ReferenceId Unique identifier of the reference (e.g., call ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of the reference associated with the conference call.
	ReferenceType *ConferenceManagerConferencecallReferenceType `json:"reference_type,omitempty"`

	// Status Status of the conference call.
	Status *ConferenceManagerConferencecallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the conference call was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conference call was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the conference call was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConferenceManagerConferencecallReferenceType Type of the reference associated with the conference call.
type ConferenceManagerConferencecallReferenceType string

// ConferenceManagerConferencecallStatus Status of the conference call.
type ConferenceManagerConferencecallStatus string

// ConversationManagerAccount defines model for ConversationManagerAccount.
type ConversationManagerAccount struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the account.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the account.
	Id *string `json:"id,omitempty"`

	// Name Name of the account.
	Name *string `json:"name,omitempty"`

	// Secret Secret associated with the account.
	Secret *string `json:"secret,omitempty"`

	// TmCreate Timestamp when the account was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the account was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the account was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Token Token, usually an API token, associated with the account.
	Token *string `json:"token,omitempty"`

	// Type Type of the account.
	Type *ConversationManagerAccountType `json:"type,omitempty"`
}

// ConversationManagerAccountType Type of the account.
type ConversationManagerAccountType string

// ConversationManagerConversation defines model for ConversationManagerConversation.
type ConversationManagerConversation struct {
	// AccountId Unique identifier of the associated account.
	AccountId *string `json:"account_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the conversation.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the conversation.
	Id *string `json:"id,omitempty"`

	// Name Name of the conversation.
	Name *string `json:"name,omitempty"`

	// Participants List of participants in the conversation.
	Participants *[]CommonAddress `json:"participants,omitempty"`

	// ReferenceId Unique identifier for the reference (e.g., message ID, line ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of the reference for the conversation.
	ReferenceType *ConversationManagerConversationReferenceType `json:"reference_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// TmCreate Timestamp when the conversation was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conversation was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the conversation was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConversationManagerConversationReferenceType Type of the reference for the conversation.
type ConversationManagerConversationReferenceType string

// ConversationManagerMedia defines model for ConversationManagerMedia.
type ConversationManagerMedia struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Filename Filename of the media.
	Filename *string `json:"filename,omitempty"`

	// Id Unique identifier for the media.
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when the media was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the media was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the media was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the media.
	Type *ConversationManagerMediaType `json:"type,omitempty"`
}

// ConversationManagerMediaType Type of the media.
type ConversationManagerMediaType string

// ConversationManagerMessage defines model for ConversationManagerMessage.
type ConversationManagerMessage struct {
	// ConversationId Unique identifier of the conversation.
	ConversationId *string `json:"conversation_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Direction Direction of the message (incoming or outgoing).
	Direction *ConversationManagerMessageDirection `json:"direction,omitempty"`

	// Id Unique identifier for the message.
	Id *string `json:"id,omitempty"`

	// Medias List of media associated with the message.
	Medias *[]ConversationManagerMedia `json:"medias,omitempty"`

	// ReferenceId The reference ID for the message (e.g., related call ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference associated with the message (e.g., call, campaign).
	ReferenceType *ConversationManagerMessageReferenceType `json:"reference_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Status of the message.
	Status *ConversationManagerMessageStatus `json:"status,omitempty"`

	// Text The message content.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConversationManagerMessageDirection Direction of the message (incoming or outgoing).
type ConversationManagerMessageDirection string

// ConversationManagerMessageReferenceType Type of reference associated with the message (e.g., call, campaign).
type ConversationManagerMessageReferenceType string

// ConversationManagerMessageStatus Status of the message.
type ConversationManagerMessageStatus string

// CustomerManagerAccesskey defines model for CustomerManagerAccesskey.
type CustomerManagerAccesskey struct {
	CustomerId *string    `json:"customer_id,omitempty"`
	Detail     *string    `json:"detail,omitempty"`
	Id         *string    `json:"id,omitempty"`
	Name       *string    `json:"name,omitempty"`
	TmCreate   *time.Time `json:"tm_create,omitempty"`
	TmDelete   *time.Time `json:"tm_delete,omitempty"`
	TmExpire   *time.Time `json:"tm_expire,omitempty"`
	TmUpdate   *time.Time `json:"tm_update,omitempty"`
	Token      *string    `json:"token,omitempty"`
}

// CustomerManagerCustomer defines model for CustomerManagerCustomer.
type CustomerManagerCustomer struct {
	// Address Address of the customer.
	Address *string `json:"address,omitempty"`

	// BillingAccountId The ID of the customer's default billing account.
	BillingAccountId *string `json:"billing_account_id,omitempty"`

	// Detail Details about the customer.
	Detail *string `json:"detail,omitempty"`

	// Email Email address of the customer.
	Email *string `json:"email,omitempty"`

	// Id Unique identifier for the customer.
	Id *string `json:"id,omitempty"`

	// Name Name of the customer.
	Name *string `json:"name,omitempty"`

	// PhoneNumber Phone number of the customer.
	PhoneNumber *string `json:"phone_number,omitempty"`

	// TmCreate Timestamp when the customer was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the customer was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the customer was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod *CustomerManagerCustomerWebhookMethod `json:"webhook_method,omitempty"`

	// WebhookUri URI for the customer's webhook.
	WebhookUri *string `json:"webhook_uri,omitempty"`
}

// CustomerManagerCustomerWebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
type CustomerManagerCustomerWebhookMethod string

// FlowManagerAction defines model for FlowManagerAction.
type FlowManagerAction struct {
	// Id The unique identifier
	Id string `json:"id"`

	// NextId The identifier of the next item
	NextId *string `json:"next_id,omitempty"`

	// Option Additional options
	Option *map[string]interface{} `json:"option,omitempty"`

	// TmExecute Timestamp or time to execute
	TmExecute *string `json:"tm_execute,omitempty"`

	// Type Type of the action.
	Type FlowManagerActionType `json:"type"`
}

// FlowManagerActionType Type of the action.
type FlowManagerActionType string

// FlowManagerActiveflow defines model for FlowManagerActiveflow.
type FlowManagerActiveflow struct {
	CurrentAction *FlowManagerAction `json:"current_action,omitempty"`

	// CustomerId ID of the customer associated with the flow.
	CustomerId *string `json:"customer_id,omitempty"`

	// ExecutedActions List of actions that have been executed.
	ExecutedActions *[]FlowManagerAction `json:"executed_actions,omitempty"`

	// FlowId ID of the flow definition.
	FlowId *string `json:"flow_id,omitempty"`

	// ForwardActionId ID of the next action to be executed.
	ForwardActionId *string `json:"forward_action_id,omitempty"`

	// Id Unique identifier for the activeflow.
	Id *string `json:"id,omitempty"`

	// ReferenceId ID of the reference object.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Reference type of activeflow.
	ReferenceType *FlowManagerReferenceType `json:"reference_type,omitempty"`

	// Status Status of the activeflow.
	Status *FlowManagerActiveflowStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the flow was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the flow was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the flow was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// FlowManagerActiveflowStatus Status of the activeflow.
type FlowManagerActiveflowStatus string

// FlowManagerFlow defines model for FlowManagerFlow.
type FlowManagerFlow struct {
	// Actions List of actions associated with the flow.
	Actions *[]FlowManagerAction `json:"actions,omitempty"`

	// CustomerId Unique identifier for the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed description of the flow.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the flow.
	Id *string `json:"id,omitempty"`

	// Name Name of the flow.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the flow was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the flow was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the flow was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the flow.
	Type *FlowManagerFlowType `json:"type,omitempty"`
}

// FlowManagerFlowType Type of the flow.
type FlowManagerFlowType string

// FlowManagerReferenceType Reference type of activeflow.
type FlowManagerReferenceType string

// MessageManagerMessage defines model for MessageManagerMessage.
type MessageManagerMessage struct {
	// CustomerId Unique identifier for the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Direction Direction of the message.
	Direction *MessageManagerMessageDirection `json:"direction,omitempty"`

	// Id Unique identifier for the message.
	Id *string `json:"id,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Targets List of target addresses to which the message is sent.
	Targets *[]MessageManagerTarget `json:"targets,omitempty"`

	// Text The text delivered in the body of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the message.
	Type *MessageManagerMessageType `json:"type,omitempty"`
}

// MessageManagerMessageDirection Direction of the message.
type MessageManagerMessageDirection string

// MessageManagerMessageProviderName Name of the message provider.
type MessageManagerMessageProviderName string

// MessageManagerMessageType Type of the message.
type MessageManagerMessageType string

// MessageManagerTarget defines model for MessageManagerTarget.
type MessageManagerTarget struct {
	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// Parts The number of message parts (if the message is split).
	Parts *int `json:"parts,omitempty"`

	// Status The status of the message for the target.
	Status *MessageManagerTargetStatus `json:"status,omitempty"`

	// TmUpdate Timestamp when the target message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// MessageManagerTargetStatus The status of the message for the target.
type MessageManagerTargetStatus string

// NumberManagerAvailableNumber A feature supported by the phone number.
type NumberManagerAvailableNumber string

// NumberManagerAvailableNumberFeature defines model for NumberManagerAvailableNumberFeature.
type NumberManagerAvailableNumberFeature struct {
	// Country The country where the number is available.
	Country *string `json:"country,omitempty"`

	// Features The list of features supported by the number.
	Features *[]NumberManagerAvailableNumberFeature `json:"features,omitempty"`

	// Number The available phone number.
	Number *string `json:"number,omitempty"`

	// PostalCode The postal code associated with the number.
	PostalCode *string `json:"postal_code,omitempty"`

	// Region The region within the country.
	Region *string `json:"region,omitempty"`
}

// NumberManagerNumber defines model for NumberManagerNumber.
type NumberManagerNumber struct {
	// CallFlowId The ID of the associated call flow.
	CallFlowId *string `json:"call_flow_id,omitempty"`

	// CustomerId The customer ID associated with the number.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Additional details about the number.
	Detail *string `json:"detail,omitempty"`

	// EmergencyEnabled Whether emergency services are enabled for the number.
	EmergencyEnabled *bool `json:"emergency_enabled,omitempty"`

	// Id The unique identifier for the number.
	Id *string `json:"id,omitempty"`

	// MessageFlowId The ID of the associated message flow.
	MessageFlowId *string `json:"message_flow_id,omitempty"`

	// Name The name of the number.
	Name *string `json:"name,omitempty"`

	// Number The phone number.
	Number *string `json:"number,omitempty"`

	// Status The status of the number.
	Status *NumberManagerNumberStatus `json:"status,omitempty"`

	// T38Enabled Whether T38 is enabled for the number.
	T38Enabled *bool `json:"t38_enabled,omitempty"`

	// TmCreate The timestamp of when the number was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete The timestamp of when the number was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmPurchase The timestamp of when the number was purchased.
	TmPurchase *string `json:"tm_purchase,omitempty"`

	// TmRenew The timestamp of when the number was renewed.
	TmRenew *string `json:"tm_renew,omitempty"`

	// TmUpdate The timestamp of when the number was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// NumberManagerNumberProviderName The provider name for the number.
type NumberManagerNumberProviderName string

// NumberManagerNumberStatus The status of the number.
type NumberManagerNumberStatus string

// OutdialManagerOutdial defines model for OutdialManagerOutdial.
type OutdialManagerOutdial struct {
	// CampaignId The unique identifier for the campaign associated with the outdial.
	CampaignId *string `json:"campaign_id,omitempty"`

	// CustomerId The unique identifier for the customer associated with the outdial.
	CustomerId *string `json:"customer_id,omitempty"`

	// Data The data associated with the outdial.
	Data *string `json:"data,omitempty"`

	// Detail The detailed description of the outdial.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the outdial.
	Id *string `json:"id,omitempty"`

	// Name The name of the outdial.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the outdial was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the outdial was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the outdial was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// OutdialManagerOutdialtarget defines model for OutdialManagerOutdialtarget.
type OutdialManagerOutdialtarget struct {
	// Data The data associated with the outdial.
	Data *string `json:"data,omitempty"`

	// Destination0 Contains source or destination detail info.
	Destination0 *CommonAddress `json:"destination_0,omitempty"`

	// Destination1 Contains source or destination detail info.
	Destination1 *CommonAddress `json:"destination_1,omitempty"`

	// Destination2 Contains source or destination detail info.
	Destination2 *CommonAddress `json:"destination_2,omitempty"`

	// Destination3 Contains source or destination detail info.
	Destination3 *CommonAddress `json:"destination_3,omitempty"`

	// Destination4 Contains source or destination detail info.
	Destination4 *CommonAddress `json:"destination_4,omitempty"`

	// Detail Additional details about the outdial.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the outdial.
	Id *string `json:"id,omitempty"`

	// Name The name of the outdial.
	Name *string `json:"name,omitempty"`

	// OutdialId The outdial reference ID.
	OutdialId *string `json:"outdial_id,omitempty"`

	// Status The status of the outdial.
	Status *OutdialManagerOutdialtargetStatus `json:"status,omitempty"`

	// TmCreate The creation timestamp.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The deletion timestamp.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate The update timestamp.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TryCount0 The try count for destination 0.
	TryCount0 *int `json:"try_count_0,omitempty"`

	// TryCount1 The try count for destination 1.
	TryCount1 *int `json:"try_count_1,omitempty"`

	// TryCount2 The try count for destination 2.
	TryCount2 *int `json:"try_count_2,omitempty"`

	// TryCount3 The try count for destination 3.
	TryCount3 *int `json:"try_count_3,omitempty"`

	// TryCount4 The try count for destination 4.
	TryCount4 *int `json:"try_count_4,omitempty"`
}

// OutdialManagerOutdialtargetStatus The status of the outdial.
type OutdialManagerOutdialtargetStatus string

// QueueManagerQueue defines model for QueueManagerQueue.
type QueueManagerQueue struct {
	CustomerId          *string                         `json:"customer_id,omitempty"`
	Detail              *string                         `json:"detail,omitempty"`
	Id                  *string                         `json:"id,omitempty"`
	Name                *string                         `json:"name,omitempty"`
	RoutingMethod       *QueueManagerQueueRoutingMethod `json:"routing_method,omitempty"`
	ServiceQueuecallIds *[]string                       `json:"service_queuecall_ids,omitempty"`

	// ServiceTimeout Service queue timeout in milliseconds.
	ServiceTimeout *int      `json:"service_timeout,omitempty"`
	TagIds         *[]string `json:"tag_ids,omitempty"`
	TmCreate       *string   `json:"tm_create,omitempty"`
	TmDelete       *string   `json:"tm_delete,omitempty"`
	TmUpdate       *string   `json:"tm_update,omitempty"`

	// TotalAbandonedCount Total abandoned call count.
	TotalAbandonedCount *int `json:"total_abandoned_count,omitempty"`

	// TotalIncomingCount Total incoming call count.
	TotalIncomingCount *int `json:"total_incoming_count,omitempty"`

	// TotalServicedCount Total serviced call count.
	TotalServicedCount *int                 `json:"total_serviced_count,omitempty"`
	WaitActions        *[]FlowManagerAction `json:"wait_actions,omitempty"`
	WaitQueuecallIds   *[]string            `json:"wait_queuecall_ids,omitempty"`

	// WaitTimeout Wait queue timeout in milliseconds.
	WaitTimeout *int `json:"wait_timeout,omitempty"`
}

// QueueManagerQueueRoutingMethod defines model for QueueManagerQueueRoutingMethod.
type QueueManagerQueueRoutingMethod string

// QueueManagerQueuecall defines model for QueueManagerQueuecall.
type QueueManagerQueuecall struct {
	CustomerId *string `json:"customer_id,omitempty"`

	// DurationService Duration for service in milliseconds
	DurationService *int `json:"duration_service,omitempty"`

	// DurationWaiting Duration for waiting in milliseconds
	DurationWaiting *int                                `json:"duration_waiting,omitempty"`
	Id              *string                             `json:"id,omitempty"`
	ReferenceId     *string                             `json:"reference_id,omitempty"`
	ReferenceType   *QueueManagerQueuecallReferenceType `json:"reference_type,omitempty"`

	// ServiceAgentId The ID of the service agent handling the queue call
	ServiceAgentId *string                      `json:"service_agent_id,omitempty"`
	Status         *QueueManagerQueuecallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the queue call was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the queue call was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmService Timestamp when the queue call started service
	TmService *string `json:"tm_service,omitempty"`

	// TmUpdate Timestamp when the queue call was last updated
	TmUpdate *string `json:"tm_update,omitempty"`
}

// QueueManagerQueuecallReferenceType defines model for QueueManagerQueuecallReferenceType.
type QueueManagerQueuecallReferenceType string

// QueueManagerQueuecallStatus defines model for QueueManagerQueuecallStatus.
type QueueManagerQueuecallStatus string

// RegistrarManagerAuthType Defines the authentication type. Can be 'basic' or 'ip'.
type RegistrarManagerAuthType string

// RegistrarManagerExtension defines model for RegistrarManagerExtension.
type RegistrarManagerExtension struct {
	CustomerId *string `json:"customer_id,omitempty"`
	Detail     *string `json:"detail,omitempty"`

	// DomainName Domain name, same as the customer_id, used by Kamailio's INVITE validation
	DomainName *string `json:"domain_name,omitempty"`
	Extension  *string `json:"extension,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	Password   *string `json:"password,omitempty"`

	// TmCreate Timestamp when the extension was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the extension was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the extension was last updated
	TmUpdate *string `json:"tm_update,omitempty"`

	// Username Username, same as the Extension, used by Kamailio's INVITE validation
	Username *string `json:"username,omitempty"`
}

// RegistrarManagerTrunk defines model for RegistrarManagerTrunk.
type RegistrarManagerTrunk struct {
	AllowedIps *[]string                   `json:"allowed_ips,omitempty"`
	AuthTypes  *[]RegistrarManagerAuthType `json:"auth_types,omitempty"`
	CustomerId *string                     `json:"customer_id,omitempty"`
	Detail     *string                     `json:"detail,omitempty"`
	DomainName *string                     `json:"domain_name,omitempty"`
	Id         *string                     `json:"id,omitempty"`
	Name       *string                     `json:"name,omitempty"`
	Password   *string                     `json:"password,omitempty"`

	// TmCreate Timestamp when the trunk was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the trunk was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the trunk was last updated
	TmUpdate *string `json:"tm_update,omitempty"`
	Username *string `json:"username,omitempty"`
}

// RouteManagerProvider defines model for RouteManagerProvider.
type RouteManagerProvider struct {
	// Detail The details about the provider.
	Detail *string `json:"detail,omitempty"`

	// Hostname The destination hostname for the provider.
	Hostname *string `json:"hostname,omitempty"`

	// Id The unique identifier for the provider.
	Id *string `json:"id,omitempty"`

	// Name The name of the provider.
	Name *string `json:"name,omitempty"`

	// TechHeaders The tech headers, valid only for SIP type providers.
	TechHeaders *map[string]string `json:"tech_headers,omitempty"`

	// TechPostfix The tech postfix, valid only for SIP type providers.
	TechPostfix *string `json:"tech_postfix,omitempty"`

	// TechPrefix The tech prefix, valid only for SIP type providers.
	TechPrefix *string `json:"tech_prefix,omitempty"`

	// TmCreate Timestamp when the provider was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the provider was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the provider was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
	Type *RouteManagerProviderType `json:"type,omitempty"`
}

// RouteManagerProviderType Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
type RouteManagerProviderType string

// RouteManagerRoute defines model for RouteManagerRoute.
type RouteManagerRoute struct {
	// CustomerId The customer ID associated with the route.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail The details about the route.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the route.
	Id *string `json:"id,omitempty"`

	// Name The name of the route.
	Name *string `json:"name,omitempty"`

	// Priority The priority of the route, used for routing decisions.
	Priority *int `json:"priority,omitempty"`

	// ProviderId The unique identifier of the provider associated with this route.
	ProviderId *string `json:"provider_id,omitempty"`

	// Target The target destination for the route (e.g., country code or 'all').
	Target *string `json:"target,omitempty"`

	// TmCreate Timestamp when the route was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the route was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the route was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// StorageManagerAccount defines model for StorageManagerAccount.
type StorageManagerAccount struct {
	// CustomerId The customer ID associated with the account.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id The unique identifier for the account.
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when the account was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the account was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the account was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TotalFileCount The total number of files in the account.
	TotalFileCount *int64 `json:"total_file_count,omitempty"`

	// TotalFileSize The total file size in bytes.
	TotalFileSize *int64 `json:"total_file_size,omitempty"`
}

// StorageManagerFile defines model for StorageManagerFile.
type StorageManagerFile struct {
	// CustomerId The customer ID associated with the file.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail The details of the file.
	Detail *string `json:"detail,omitempty"`

	// Filename The filename of the file.
	Filename *string `json:"filename,omitempty"`

	// Filesize The size of the file in bytes.
	Filesize *int64 `json:"filesize,omitempty"`

	// Id The unique identifier for the file.
	Id *string `json:"id,omitempty"`

	// Name The name of the file.
	Name *string `json:"name,omitempty"`

	// OwnerId The owner ID of the file.
	OwnerId *string `json:"owner_id,omitempty"`

	// ReferenceId The reference ID associated with the file.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType The reference type of the file.
	ReferenceType *StorageManagerFileReferenceType `json:"reference_type,omitempty"`

	// TmCreate Timestamp when the file was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the file was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmDownloadExpire The timestamp when the download link expires.
	TmDownloadExpire *time.Time `json:"tm_download_expire,omitempty"`

	// TmUpdate Timestamp when the file was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// UriDownload The URI for downloading the file.
	UriDownload *string `json:"uri_download,omitempty"`
}

// StorageManagerFileReferenceType The reference type of the file.
type StorageManagerFileReferenceType string

// TagManagerTag defines model for TagManagerTag.
type TagManagerTag struct {
	// Detail The details about the tag.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the tag.
	Id *string `json:"id,omitempty"`

	// Name The name of the tag.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the tag was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the tag was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the tag was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// TranscribeManagerTranscribe defines model for TranscribeManagerTranscribe.
type TranscribeManagerTranscribe struct {
	// CustomerId Customer ID
	CustomerId *string                               `json:"customer_id,omitempty"`
	Direction  *TranscribeManagerTranscribeDirection `json:"direction,omitempty"`

	// Id Transcribe id
	Id *string `json:"id,omitempty"`

	// Language BCP47 type's language code.
	Language *string `json:"language,omitempty"`

	// ReferenceId Call/Conference/Recording's ID
	ReferenceId   *string                                   `json:"reference_id,omitempty"`
	ReferenceType *TranscribeManagerTranscribeReferenceType `json:"reference_type,omitempty"`
	Status        *TranscribeManagerTranscribeStatus        `json:"status,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when deleted
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when updated
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// TranscribeManagerTranscribeDirection defines model for TranscribeManagerTranscribeDirection.
type TranscribeManagerTranscribeDirection string

// TranscribeManagerTranscribeReferenceType defines model for TranscribeManagerTranscribeReferenceType.
type TranscribeManagerTranscribeReferenceType string

// TranscribeManagerTranscribeStatus defines model for TranscribeManagerTranscribeStatus.
type TranscribeManagerTranscribeStatus string

// TranscribeManagerTranscript defines model for TranscribeManagerTranscript.
type TranscribeManagerTranscript struct {
	Direction *TranscribeManagerTranscriptDirection `json:"direction,omitempty"`

	// Id Transcript ID
	Id *string `json:"id,omitempty"`

	// Message Transcript message
	Message *string `json:"message,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmTranscript Timestamp for the transcript
	TmTranscript *string `json:"tm_transcript,omitempty"`

	// TranscribeId Transcribe ID
	TranscribeId *string `json:"transcribe_id,omitempty"`
}

// TranscribeManagerTranscriptDirection defines model for TranscribeManagerTranscriptDirection.
type TranscribeManagerTranscriptDirection string

// TransferManagerTransfer defines model for TransferManagerTransfer.
type TransferManagerTransfer struct {
	// ConfbridgeId Conference Bridge ID
	ConfbridgeId *string `json:"confbridge_id,omitempty"`

	// CustomerId Customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// GroupcallId Created Groupcall ID
	GroupcallId *string `json:"groupcall_id,omitempty"`

	// Id Transfer ID
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when updated
	TmUpdate *string `json:"tm_update,omitempty"`

	// TransfereeAddresses List of transferee addresses
	TransfereeAddresses *[]CommonAddress `json:"transferee_addresses,omitempty"`

	// TransfereeCallId Transferee Call ID
	TransfereeCallId *string `json:"transferee_call_id,omitempty"`

	// TransfererCallId Transferer Call ID
	TransfererCallId *string                      `json:"transferer_call_id,omitempty"`
	Type             *TransferManagerTransferType `json:"type,omitempty"`
}

// TransferManagerTransferType defines model for TransferManagerTransferType.
type TransferManagerTransferType string

// PageSize defines model for PageSize.
type PageSize = int

// PageToken defines model for PageToken.
type PageToken = string

// GetAccesskeysParams defines parameters for GetAccesskeys.
type GetAccesskeysParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostAccesskeysJSONBody defines parameters for PostAccesskeys.
type PostAccesskeysJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Expire *int    `json:"expire,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PutAccesskeysIdJSONBody defines parameters for PutAccesskeysId.
type PutAccesskeysIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// GetActiveflowsParams defines parameters for GetActiveflows.
type GetActiveflowsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostActiveflowsJSONBody defines parameters for PostActiveflows.
type PostActiveflowsJSONBody struct {
	Actions *[]FlowManagerAction `json:"actions,omitempty"`

	// FlowId Flow id of.
	FlowId *string `json:"flow_id,omitempty"`

	// Id ID of the activeflow.
	Id *string `json:"id,omitempty"`
}

// GetAgentsParams defines parameters for GetAgents.
type GetAgentsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// TagIds Comma separated tag ids.
	TagIds *string `form:"tag_ids,omitempty" json:"tag_ids,omitempty"`

	// Status Agent status.
	Status *AgentManagerAgentStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PostAgentsJSONBody defines parameters for PostAgents.
type PostAgentsJSONBody struct {
	Addresses []CommonAddress `json:"addresses"`
	Detail    string          `json:"detail"`
	Name      string          `json:"name"`
	Password  string          `json:"password"`

	// Permission Permission type
	Permission AgentManagerAgentPermission `json:"permission"`

	// RingMethod Represents an agent resource.
	RingMethod AgentManagerAgentRingMethod `json:"ring_method"`
	TagIds     []string                    `json:"tag_ids"`
	Username   string                      `json:"username"`
}

// PutAgentsIdJSONBody defines parameters for PutAgentsId.
type PutAgentsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *AgentManagerAgentRingMethod `json:"ring_method,omitempty"`
}

// PutAgentsIdAddressesJSONBody defines parameters for PutAgentsIdAddresses.
type PutAgentsIdAddressesJSONBody struct {
	Addresses *[]CommonAddress `json:"addresses,omitempty"`
}

// PutAgentsIdPasswordJSONBody defines parameters for PutAgentsIdPassword.
type PutAgentsIdPasswordJSONBody struct {
	Password *string `json:"password,omitempty"`
}

// PutAgentsIdPermissionJSONBody defines parameters for PutAgentsIdPermission.
type PutAgentsIdPermissionJSONBody struct {
	// Permission Permission type
	Permission *AgentManagerAgentPermission `json:"permission,omitempty"`
}

// PutAgentsIdStatusJSONBody defines parameters for PutAgentsIdStatus.
type PutAgentsIdStatusJSONBody struct {
	// Status Agent's status
	Status *AgentManagerAgentStatus `json:"status,omitempty"`
}

// PutAgentsIdTagIdsJSONBody defines parameters for PutAgentsIdTagIds.
type PutAgentsIdTagIdsJSONBody struct {
	TagIds *[]string `json:"tag_ids,omitempty"`
}

// GetAvailableNumbersParams defines parameters for GetAvailableNumbers.
type GetAvailableNumbersParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// CountryCode The ISO country code.
	CountryCode string `form:"country_code" json:"country_code"`
}

// GetBillingAccountsParams defines parameters for GetBillingAccounts.
type GetBillingAccountsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostBillingAccountsJSONBody defines parameters for PostBillingAccounts.
type PostBillingAccountsJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`
}

// PutBillingAccountsIdJSONBody defines parameters for PutBillingAccountsId.
type PutBillingAccountsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PostBillingAccountsIdBalanceAddForceJSONBody defines parameters for PostBillingAccountsIdBalanceAddForce.
type PostBillingAccountsIdBalanceAddForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PostBillingAccountsIdBalanceSubtractForceJSONBody defines parameters for PostBillingAccountsIdBalanceSubtractForce.
type PostBillingAccountsIdBalanceSubtractForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PutBillingAccountsIdPaymentInfoJSONBody defines parameters for PutBillingAccountsIdPaymentInfo.
type PutBillingAccountsIdPaymentInfoJSONBody struct {
	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`
}

// GetBillingsParams defines parameters for GetBillings.
type GetBillingsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCallsParams defines parameters for GetCalls.
type GetCallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCallsJSONBody defines parameters for PostCalls.
type PostCallsJSONBody struct {
	Actions      *[]FlowManagerAction `json:"actions,omitempty"`
	Destinations *[]CommonAddress     `json:"destinations,omitempty"`
	FlowId       *string              `json:"flow_id,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`
}

// GetCallsIdMediaStreamParams defines parameters for GetCallsIdMediaStream.
type GetCallsIdMediaStreamParams struct {
	Encapsulation *string `form:"encapsulation,omitempty" json:"encapsulation,omitempty"`
}

// DeleteCallsIdMuteJSONBody defines parameters for DeleteCallsIdMute.
type DeleteCallsIdMuteJSONBody struct {
	// Direction Possible mute directions for the call
	Direction *CallManagerCallMuteDirection `json:"direction,omitempty"`
}

// PostCallsIdMuteJSONBody defines parameters for PostCallsIdMute.
type PostCallsIdMuteJSONBody struct {
	// Direction Possible mute directions for the call
	Direction *CallManagerCallMuteDirection `json:"direction,omitempty"`
}

// PostCallsIdTalkJSONBody defines parameters for PostCallsIdTalk.
type PostCallsIdTalkJSONBody struct {
	Gender   *string `json:"gender,omitempty"`
	Language *string `json:"language,omitempty"`
	Text     *string `json:"text,omitempty"`
}

// GetCampaigncallsParams defines parameters for GetCampaigncalls.
type GetCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCampaignsParams defines parameters for GetCampaigns.
type GetCampaignsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCampaignsJSONBody defines parameters for PostCampaigns.
type PostCampaignsJSONBody struct {
	// Actions Actions associated with the campaign
	Actions []FlowManagerAction `json:"actions"`

	// Detail Detailed description of the campaign
	Detail string `json:"detail"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle CampaignManagerCampaignEndHandle `json:"end_handle"`

	// Name Name of the campaign
	Name string `json:"name"`

	// NextCampaignId ID of the next campaign
	NextCampaignId string `json:"next_campaign_id"`

	// OutdialId Outdial ID for the campaign
	OutdialId string `json:"outdial_id"`

	// OutplanId Outplan ID for the campaign
	OutplanId string `json:"outplan_id"`

	// QueueId Queue ID for the campaign
	QueueId string `json:"queue_id"`

	// ServiceLevel Service level of the campaign
	ServiceLevel int `json:"service_level"`

	// Type Type of campaign.
	Type CampaignManagerCampaignType `json:"type"`
}

// PutCampaignsIdJSONBody defines parameters for PutCampaignsId.
type PutCampaignsIdJSONBody struct {
	// Detail Updated details of the campaign
	Detail string `json:"detail"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle CampaignManagerCampaignEndHandle `json:"end_handle"`

	// Name Updated name of the campaign
	Name string `json:"name"`

	// ServiceLevel Updated service level of the campaign
	ServiceLevel int `json:"service_level"`

	// Type Type of campaign.
	Type CampaignManagerCampaignType `json:"type"`
}

// PutCampaignsIdActionsJSONBody defines parameters for PutCampaignsIdActions.
type PutCampaignsIdActionsJSONBody struct {
	Actions []FlowManagerAction `json:"actions"`
}

// GetCampaignsIdCampaigncallsParams defines parameters for GetCampaignsIdCampaigncalls.
type GetCampaignsIdCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PutCampaignsIdNextCampaignIdJSONBody defines parameters for PutCampaignsIdNextCampaignId.
type PutCampaignsIdNextCampaignIdJSONBody struct {
	// NextCampaignId The next campaign's id.
	NextCampaignId string `json:"next_campaign_id"`
}

// PutCampaignsIdResourceInfoJSONBody defines parameters for PutCampaignsIdResourceInfo.
type PutCampaignsIdResourceInfoJSONBody struct {
	// NextCampaignId next campaign's id.
	NextCampaignId string `json:"next_campaign_id"`

	// OutdialId outplan's id.
	OutdialId string `json:"outdial_id"`

	// OutplanId outplan's id.
	OutplanId string `json:"outplan_id"`

	// QueueId queue's id.
	QueueId string `json:"queue_id"`
}

// PutCampaignsIdServiceLevelJSONBody defines parameters for PutCampaignsIdServiceLevel.
type PutCampaignsIdServiceLevelJSONBody struct {
	// ServiceLevel The campaign's service level.
	ServiceLevel int `json:"service_level"`
}

// PutCampaignsIdStatusJSONBody defines parameters for PutCampaignsIdStatus.
type PutCampaignsIdStatusJSONBody struct {
	// Status Status of the campaign.
	Status CampaignManagerCampaignStatus `json:"status"`
}

// GetChatbotcallsParams defines parameters for GetChatbotcalls.
type GetChatbotcallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetChatbotsParams defines parameters for GetChatbots.
type GetChatbotsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatbotsJSONBody defines parameters for PostChatbots.
type PostChatbotsJSONBody struct {
	Detail string `json:"detail"`

	// EngineType Type of engine used by the chatbot.
	EngineType ChatbotManagerChatbotEngineType `json:"engine_type"`
	InitPrompt string                          `json:"init_prompt"`
	Name       string                          `json:"name"`
}

// PutChatbotsIdJSONBody defines parameters for PutChatbotsId.
type PutChatbotsIdJSONBody struct {
	Detail string `json:"detail"`

	// EngineType Type of engine used by the chatbot.
	EngineType ChatbotManagerChatbotEngineType `json:"engine_type"`
	InitPrompt string                          `json:"init_prompt"`
	Name       string                          `json:"name"`
}

// GetChatmessagesParams defines parameters for GetChatmessages.
type GetChatmessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatId The chat id.
	ChatId string `form:"chat_id" json:"chat_id"`
}

// PostChatmessagesJSONBody defines parameters for PostChatmessages.
type PostChatmessagesJSONBody struct {
	ChatId string              `json:"chat_id"`
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source CommonAddress `json:"source"`
	Text   string        `json:"text"`

	// Type Type of the message chat.
	Type ChatManagerMessagechatType `json:"type"`
}

// GetChatroommessagesParams defines parameters for GetChatroommessages.
type GetChatroommessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatroomId The ID of the chatroom
	ChatroomId string `form:"chatroom_id" json:"chatroom_id"`
}

// PostChatroommessagesJSONBody defines parameters for PostChatroommessages.
type PostChatroommessagesJSONBody struct {
	// ChatroomId ID of the chatroom.
	ChatroomId string `json:"chatroom_id"`

	// Medias List of media URLs.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Text Text of the message.
	Text string `json:"text"`
}

// GetChatroomsParams defines parameters for GetChatrooms.
type GetChatroomsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// OwnerId The ID of the chatroom owner.
	OwnerId string `form:"owner_id" json:"owner_id"`
}

// PostChatroomsJSONBody defines parameters for PostChatrooms.
type PostChatroomsJSONBody struct {
	// Detail Additional details of the chatroom.
	Detail string `json:"detail"`

	// Name The name of the chatroom.
	Name string `json:"name"`

	// ParticipantIds The ID of the participant.
	ParticipantIds []string `json:"participant_ids"`
}

// PutChatroomsIdJSONBody defines parameters for PutChatroomsId.
type PutChatroomsIdJSONBody struct {
	// Detail The new details of the chatroom.
	Detail string `json:"detail"`

	// Name The new name of the chatroom.
	Name string `json:"name"`
}

// GetChatsParams defines parameters for GetChats.
type GetChatsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatsJSONBody defines parameters for PostChats.
type PostChatsJSONBody struct {
	Detail         string   `json:"detail"`
	Name           string   `json:"name"`
	OwnerId        string   `json:"owner_id"`
	ParticipantIds []string `json:"participant_ids"`

	// Type Type of the chat.
	Type ChatManagerChatType `json:"type"`
}

// PutChatsIdJSONBody defines parameters for PutChatsId.
type PutChatsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// PostChatsIdParticipantIdsJSONBody defines parameters for PostChatsIdParticipantIds.
type PostChatsIdParticipantIdsJSONBody struct {
	ParticipantId string `json:"participant_id"`
}

// PutChatsIdRoomOwnerIdJSONBody defines parameters for PutChatsIdRoomOwnerId.
type PutChatsIdRoomOwnerIdJSONBody struct {
	RoomOwnerId string `json:"room_owner_id"`
}

// GetConferencecallsParams defines parameters for GetConferencecalls.
type GetConferencecallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetConferencesParams defines parameters for GetConferences.
type GetConferencesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConferencesJSONBody defines parameters for PostConferences.
type PostConferencesJSONBody struct {
	Data        map[string]interface{} `json:"data"`
	Detail      string                 `json:"detail"`
	Name        string                 `json:"name"`
	PostActions []FlowManagerAction    `json:"post_actions"`
	PreActions  []FlowManagerAction    `json:"pre_actions"`
	Timeout     int                    `json:"timeout"`

	// Type Types of conferences.
	Type ConferenceManagerConferenceType `json:"type"`
}

// PutConferencesIdJSONBody defines parameters for PutConferencesId.
type PutConferencesIdJSONBody struct {
	Detail      string              `json:"detail"`
	Name        string              `json:"name"`
	PostActions []FlowManagerAction `json:"post_actions"`
	PreActions  []FlowManagerAction `json:"pre_actions"`
	Timeout     int                 `json:"timeout"`
}

// GetConferencesIdMediaStreamParams defines parameters for GetConferencesIdMediaStream.
type GetConferencesIdMediaStreamParams struct {
	// Encapsulation The encapsulation for media stream.
	Encapsulation string `form:"encapsulation" json:"encapsulation"`
}

// PostConferencesIdTranscribeStartJSONBody defines parameters for PostConferencesIdTranscribeStart.
type PostConferencesIdTranscribeStartJSONBody struct {
	// Language The language for transcription.
	Language string `json:"language"`
}

// PostAccesskeysJSONRequestBody defines body for PostAccesskeys for application/json ContentType.
type PostAccesskeysJSONRequestBody PostAccesskeysJSONBody

// PutAccesskeysIdJSONRequestBody defines body for PutAccesskeysId for application/json ContentType.
type PutAccesskeysIdJSONRequestBody PutAccesskeysIdJSONBody

// PostActiveflowsJSONRequestBody defines body for PostActiveflows for application/json ContentType.
type PostActiveflowsJSONRequestBody PostActiveflowsJSONBody

// PostAgentsJSONRequestBody defines body for PostAgents for application/json ContentType.
type PostAgentsJSONRequestBody PostAgentsJSONBody

// PutAgentsIdJSONRequestBody defines body for PutAgentsId for application/json ContentType.
type PutAgentsIdJSONRequestBody PutAgentsIdJSONBody

// PutAgentsIdAddressesJSONRequestBody defines body for PutAgentsIdAddresses for application/json ContentType.
type PutAgentsIdAddressesJSONRequestBody PutAgentsIdAddressesJSONBody

// PutAgentsIdPasswordJSONRequestBody defines body for PutAgentsIdPassword for application/json ContentType.
type PutAgentsIdPasswordJSONRequestBody PutAgentsIdPasswordJSONBody

// PutAgentsIdPermissionJSONRequestBody defines body for PutAgentsIdPermission for application/json ContentType.
type PutAgentsIdPermissionJSONRequestBody PutAgentsIdPermissionJSONBody

// PutAgentsIdStatusJSONRequestBody defines body for PutAgentsIdStatus for application/json ContentType.
type PutAgentsIdStatusJSONRequestBody PutAgentsIdStatusJSONBody

// PutAgentsIdTagIdsJSONRequestBody defines body for PutAgentsIdTagIds for application/json ContentType.
type PutAgentsIdTagIdsJSONRequestBody PutAgentsIdTagIdsJSONBody

// PostBillingAccountsJSONRequestBody defines body for PostBillingAccounts for application/json ContentType.
type PostBillingAccountsJSONRequestBody PostBillingAccountsJSONBody

// PutBillingAccountsIdJSONRequestBody defines body for PutBillingAccountsId for application/json ContentType.
type PutBillingAccountsIdJSONRequestBody PutBillingAccountsIdJSONBody

// PostBillingAccountsIdBalanceAddForceJSONRequestBody defines body for PostBillingAccountsIdBalanceAddForce for application/json ContentType.
type PostBillingAccountsIdBalanceAddForceJSONRequestBody PostBillingAccountsIdBalanceAddForceJSONBody

// PostBillingAccountsIdBalanceSubtractForceJSONRequestBody defines body for PostBillingAccountsIdBalanceSubtractForce for application/json ContentType.
type PostBillingAccountsIdBalanceSubtractForceJSONRequestBody PostBillingAccountsIdBalanceSubtractForceJSONBody

// PutBillingAccountsIdPaymentInfoJSONRequestBody defines body for PutBillingAccountsIdPaymentInfo for application/json ContentType.
type PutBillingAccountsIdPaymentInfoJSONRequestBody PutBillingAccountsIdPaymentInfoJSONBody

// PostCallsJSONRequestBody defines body for PostCalls for application/json ContentType.
type PostCallsJSONRequestBody PostCallsJSONBody

// DeleteCallsIdMuteJSONRequestBody defines body for DeleteCallsIdMute for application/json ContentType.
type DeleteCallsIdMuteJSONRequestBody DeleteCallsIdMuteJSONBody

// PostCallsIdMuteJSONRequestBody defines body for PostCallsIdMute for application/json ContentType.
type PostCallsIdMuteJSONRequestBody PostCallsIdMuteJSONBody

// PostCallsIdTalkJSONRequestBody defines body for PostCallsIdTalk for application/json ContentType.
type PostCallsIdTalkJSONRequestBody PostCallsIdTalkJSONBody

// PostCampaignsJSONRequestBody defines body for PostCampaigns for application/json ContentType.
type PostCampaignsJSONRequestBody PostCampaignsJSONBody

// PutCampaignsIdJSONRequestBody defines body for PutCampaignsId for application/json ContentType.
type PutCampaignsIdJSONRequestBody PutCampaignsIdJSONBody

// PutCampaignsIdActionsJSONRequestBody defines body for PutCampaignsIdActions for application/json ContentType.
type PutCampaignsIdActionsJSONRequestBody PutCampaignsIdActionsJSONBody

// PutCampaignsIdNextCampaignIdJSONRequestBody defines body for PutCampaignsIdNextCampaignId for application/json ContentType.
type PutCampaignsIdNextCampaignIdJSONRequestBody PutCampaignsIdNextCampaignIdJSONBody

// PutCampaignsIdResourceInfoJSONRequestBody defines body for PutCampaignsIdResourceInfo for application/json ContentType.
type PutCampaignsIdResourceInfoJSONRequestBody PutCampaignsIdResourceInfoJSONBody

// PutCampaignsIdServiceLevelJSONRequestBody defines body for PutCampaignsIdServiceLevel for application/json ContentType.
type PutCampaignsIdServiceLevelJSONRequestBody PutCampaignsIdServiceLevelJSONBody

// PutCampaignsIdStatusJSONRequestBody defines body for PutCampaignsIdStatus for application/json ContentType.
type PutCampaignsIdStatusJSONRequestBody PutCampaignsIdStatusJSONBody

// PostChatbotsJSONRequestBody defines body for PostChatbots for application/json ContentType.
type PostChatbotsJSONRequestBody PostChatbotsJSONBody

// PutChatbotsIdJSONRequestBody defines body for PutChatbotsId for application/json ContentType.
type PutChatbotsIdJSONRequestBody PutChatbotsIdJSONBody

// PostChatmessagesJSONRequestBody defines body for PostChatmessages for application/json ContentType.
type PostChatmessagesJSONRequestBody PostChatmessagesJSONBody

// PostChatroommessagesJSONRequestBody defines body for PostChatroommessages for application/json ContentType.
type PostChatroommessagesJSONRequestBody PostChatroommessagesJSONBody

// PostChatroomsJSONRequestBody defines body for PostChatrooms for application/json ContentType.
type PostChatroomsJSONRequestBody PostChatroomsJSONBody

// PutChatroomsIdJSONRequestBody defines body for PutChatroomsId for application/json ContentType.
type PutChatroomsIdJSONRequestBody PutChatroomsIdJSONBody

// PostChatsJSONRequestBody defines body for PostChats for application/json ContentType.
type PostChatsJSONRequestBody PostChatsJSONBody

// PutChatsIdJSONRequestBody defines body for PutChatsId for application/json ContentType.
type PutChatsIdJSONRequestBody PutChatsIdJSONBody

// PostChatsIdParticipantIdsJSONRequestBody defines body for PostChatsIdParticipantIds for application/json ContentType.
type PostChatsIdParticipantIdsJSONRequestBody PostChatsIdParticipantIdsJSONBody

// PutChatsIdRoomOwnerIdJSONRequestBody defines body for PutChatsIdRoomOwnerId for application/json ContentType.
type PutChatsIdRoomOwnerIdJSONRequestBody PutChatsIdRoomOwnerIdJSONBody

// PostConferencesJSONRequestBody defines body for PostConferences for application/json ContentType.
type PostConferencesJSONRequestBody PostConferencesJSONBody

// PutConferencesIdJSONRequestBody defines body for PutConferencesId for application/json ContentType.
type PutConferencesIdJSONRequestBody PutConferencesIdJSONBody

// PostConferencesIdTranscribeStartJSONRequestBody defines body for PostConferencesIdTranscribeStart for application/json ContentType.
type PostConferencesIdTranscribeStartJSONRequestBody PostConferencesIdTranscribeStartJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(c *gin.Context, params GetAccesskeysParams)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(c *gin.Context)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(c *gin.Context, id string)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(c *gin.Context, id string)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(c *gin.Context, id string)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(c *gin.Context, params GetActiveflowsParams)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(c *gin.Context)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(c *gin.Context, id string)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(c *gin.Context, id string)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(c *gin.Context, id string)
	// List agents
	// (GET /agents)
	GetAgents(c *gin.Context, params GetAgentsParams)
	// Create a new agent
	// (POST /agents)
	PostAgents(c *gin.Context)
	// Delete the agent
	// (DELETE /agents/{id})
	DeleteAgentsId(c *gin.Context, id string)
	// Get the agent
	// (GET /agents/{id})
	GetAgentsId(c *gin.Context, id string)
	// Update an agent
	// (PUT /agents/{id})
	PutAgentsId(c *gin.Context, id string)
	// Update an agent's addresses
	// (PUT /agents/{id}/addresses)
	PutAgentsIdAddresses(c *gin.Context, id string)
	// Update an agent's password
	// (PUT /agents/{id}/password)
	PutAgentsIdPassword(c *gin.Context, id string)
	// Update an agent's permission
	// (PUT /agents/{id}/permission)
	PutAgentsIdPermission(c *gin.Context, id string)
	// Update an agent's status
	// (PUT /agents/{id}/status)
	PutAgentsIdStatus(c *gin.Context, id string)
	// Update an agent's tag IDs
	// (PUT /agents/{id}/tag_ids)
	PutAgentsIdTagIds(c *gin.Context, id string)
	// List available numbers
	// (GET /available_numbers)
	GetAvailableNumbers(c *gin.Context, params GetAvailableNumbersParams)
	// Get list of billing accounts
	// (GET /billing_accounts)
	GetBillingAccounts(c *gin.Context, params GetBillingAccountsParams)
	// Create a new billing account
	// (POST /billing_accounts)
	PostBillingAccounts(c *gin.Context)
	// Delete billing account
	// (DELETE /billing_accounts/{id})
	DeleteBillingAccountsId(c *gin.Context, id string)
	// Get detailed billing account info
	// (GET /billing_accounts/{id})
	GetBillingAccountsId(c *gin.Context, id string)
	// Update billing account
	// (PUT /billing_accounts/{id})
	PutBillingAccountsId(c *gin.Context, id string)
	// Add balance to billing account
	// (POST /billing_accounts/{id}/balance_add_force)
	PostBillingAccountsIdBalanceAddForce(c *gin.Context, id string)
	// Subtract balance from billing account
	// (POST /billing_accounts/{id}/balance_subtract_force)
	PostBillingAccountsIdBalanceSubtractForce(c *gin.Context, id string)
	// Update billing account's payment info
	// (PUT /billing_accounts/{id}/payment_info)
	PutBillingAccountsIdPaymentInfo(c *gin.Context, id string)
	// Get list of billings
	// (GET /billings)
	GetBillings(c *gin.Context, params GetBillingsParams)
	// Get list of calls
	// (GET /calls)
	GetCalls(c *gin.Context, params GetCallsParams)
	// Make an outbound call
	// (POST /calls)
	PostCalls(c *gin.Context)
	// Delete up the call
	// (DELETE /calls/{id})
	DeleteCallsId(c *gin.Context, id string)
	// Get detail call info
	// (GET /calls/{id})
	GetCallsId(c *gin.Context, id string)
	// Hang up the call
	// (POST /calls/{id}/hangup)
	PostCallsIdHangup(c *gin.Context, id string)
	// Unhold the call
	// (DELETE /calls/{id}/hold)
	DeleteCallsIdHold(c *gin.Context, id string)
	// Hold the call
	// (POST /calls/{id}/hold)
	PostCallsIdHold(c *gin.Context, id string)
	// Get media stream for the call
	// (GET /calls/{id}/media_stream)
	GetCallsIdMediaStream(c *gin.Context, id string, params GetCallsIdMediaStreamParams)
	// Disable Music on Hold (MOH)
	// (DELETE /calls/{id}/moh)
	DeleteCallsIdMoh(c *gin.Context, id string)
	// Enable Music on Hold (MOH)
	// (POST /calls/{id}/moh)
	PostCallsIdMoh(c *gin.Context, id string)
	// Unmute the call
	// (DELETE /calls/{id}/mute)
	DeleteCallsIdMute(c *gin.Context, id string)
	// Mute the call
	// (POST /calls/{id}/mute)
	PostCallsIdMute(c *gin.Context, id string)
	// Un-silence a call
	// (DELETE /calls/{id}/silence)
	DeleteCallsIdSilence(c *gin.Context, id string)
	// Silence a call
	// (POST /calls/{id}/silence)
	PostCallsIdSilence(c *gin.Context, id string)
	// Talk to the call
	// (POST /calls/{id}/talk)
	PostCallsIdTalk(c *gin.Context, id string)
	// Get list of campaign calls
	// (GET /campaigncalls)
	GetCampaigncalls(c *gin.Context, params GetCampaigncallsParams)
	// Delete a campaign call
	// (DELETE /campaigncalls/{id})
	DeleteCampaigncallsId(c *gin.Context, id string)
	// Get campaign call details
	// (GET /campaigncalls/{id})
	GetCampaigncallsId(c *gin.Context, id string)
	// Get a list of campaigns
	// (GET /campaigns)
	GetCampaigns(c *gin.Context, params GetCampaignsParams)
	// Create a new campaign
	// (POST /campaigns)
	PostCampaigns(c *gin.Context)
	// Delete a campaign
	// (DELETE /campaigns/{id})
	DeleteCampaignsId(c *gin.Context, id string)
	// Get campaign details
	// (GET /campaigns/{id})
	GetCampaignsId(c *gin.Context, id string)
	// Update a campaign
	// (PUT /campaigns/{id})
	PutCampaignsId(c *gin.Context, id string)
	// Update campaign's actions
	// (PUT /campaigns/{id}/actions)
	PutCampaignsIdActions(c *gin.Context, id string)
	// Update campaign's actions
	// (GET /campaigns/{id}/campaigncalls)
	GetCampaignsIdCampaigncalls(c *gin.Context, id string, params GetCampaignsIdCampaigncallsParams)
	// Update campaign's service level
	// (PUT /campaigns/{id}/next_campaign_id)
	PutCampaignsIdNextCampaignId(c *gin.Context, id string)
	// Update campaign's resource info
	// (PUT /campaigns/{id}/resource_info)
	PutCampaignsIdResourceInfo(c *gin.Context, id string)
	// Update campaign's service level
	// (PUT /campaigns/{id}/service_level)
	PutCampaignsIdServiceLevel(c *gin.Context, id string)
	// Update campaign status
	// (PUT /campaigns/{id}/status)
	PutCampaignsIdStatus(c *gin.Context, id string)
	// Gets a list of chatbot calls
	// (GET /chatbotcalls)
	GetChatbotcalls(c *gin.Context, params GetChatbotcallsParams)
	// Delete a specific chatbot call
	// (DELETE /chatbotcalls/{id})
	DeleteChatbotcallsId(c *gin.Context, id string)
	// Get details of a specific chatbot call
	// (GET /chatbotcalls/{id})
	GetChatbotcallsId(c *gin.Context, id string)
	// Gets a list of chatbots.
	// (GET /chatbots)
	GetChatbots(c *gin.Context, params GetChatbotsParams)
	// Create a new chatbot.
	// (POST /chatbots)
	PostChatbots(c *gin.Context)
	// Delete a chatbot.
	// (DELETE /chatbots/{id})
	DeleteChatbotsId(c *gin.Context, id string)
	// Get chatbot details.
	// (GET /chatbots/{id})
	GetChatbotsId(c *gin.Context, id string)
	// Update a chatbot.
	// (PUT /chatbots/{id})
	PutChatbotsId(c *gin.Context, id string)
	// Retrieve a list of chat messages
	// (GET /chatmessages)
	GetChatmessages(c *gin.Context, params GetChatmessagesParams)
	// Create a new chat message
	// (POST /chatmessages)
	PostChatmessages(c *gin.Context)
	// Delete a chat message
	// (DELETE /chatmessages/{id})
	DeleteChatmessagesId(c *gin.Context, id string)
	// Retrieve details of a chat message
	// (GET /chatmessages/{id})
	GetChatmessagesId(c *gin.Context, id string)
	// Retrieve a list of chatroom messages
	// (GET /chatroommessages)
	GetChatroommessages(c *gin.Context, params GetChatroommessagesParams)
	// Create a new chatroom message
	// (POST /chatroommessages)
	PostChatroommessages(c *gin.Context)
	// Delete a chatroom message
	// (DELETE /chatroommessages/{id})
	DeleteChatroommessagesId(c *gin.Context, id string)
	// Get details of a specific chatroom message
	// (GET /chatroommessages/{id})
	GetChatroommessagesId(c *gin.Context, id string)
	// Gets a list of chatrooms.
	// (GET /chatrooms)
	GetChatrooms(c *gin.Context, params GetChatroomsParams)
	// Create a new chatroom.
	// (POST /chatrooms)
	PostChatrooms(c *gin.Context)
	// Delete a chatroom.
	// (DELETE /chatrooms/{id})
	DeleteChatroomsId(c *gin.Context, id string)
	// Get chatroom details.
	// (GET /chatrooms/{id})
	GetChatroomsId(c *gin.Context, id string)
	// Update a chatroom.
	// (PUT /chatrooms/{id})
	PutChatroomsId(c *gin.Context, id string)
	// Gets a list of chats.
	// (GET /chats)
	GetChats(c *gin.Context, params GetChatsParams)
	// Create a new chat.
	// (POST /chats)
	PostChats(c *gin.Context)
	// Delete a chat.
	// (DELETE /chats/{id})
	DeleteChatsId(c *gin.Context, id string)
	// Get details of a specific chat.
	// (GET /chats/{id})
	GetChatsId(c *gin.Context, id string)
	// Update a chat.
	// (PUT /chats/{id})
	PutChatsId(c *gin.Context, id string)
	// Add a participant to a chat.
	// (POST /chats/{id}/participant_ids)
	PostChatsIdParticipantIds(c *gin.Context, id string)
	// Remove a participant from a chat.
	// (DELETE /chats/{id}/participant_ids/{participant_id})
	DeleteChatsIdParticipantIdsParticipantId(c *gin.Context, id string, participantId string)
	// Update the room owner of a chat.
	// (PUT /chats/{id}/room_owner_id)
	PutChatsIdRoomOwnerId(c *gin.Context, id string)
	// Get list of conference calls
	// (GET /conferencecalls)
	GetConferencecalls(c *gin.Context, params GetConferencecallsParams)
	// Remove a conference call
	// (DELETE /conferencecalls/{id})
	DeleteConferencecallsId(c *gin.Context, id string)
	// Get conference call details
	// (GET /conferencecalls/{id})
	GetConferencecallsId(c *gin.Context, id string)
	// Get list of conferences
	// (GET /conferences)
	GetConferences(c *gin.Context, params GetConferencesParams)
	// Create a new conference
	// (POST /conferences)
	PostConferences(c *gin.Context)
	// Delete a conference
	// (DELETE /conferences/{id})
	DeleteConferencesId(c *gin.Context, id string)
	// Get conference details
	// (GET /conferences/{id})
	GetConferencesId(c *gin.Context, id string)
	// Update conference details
	// (PUT /conferences/{id})
	PutConferencesId(c *gin.Context, id string)
	// Start media streaming for a conference
	// (GET /conferences/{id}/media_stream)
	GetConferencesIdMediaStream(c *gin.Context, id string, params GetConferencesIdMediaStreamParams)
	// Start conference recording
	// (POST /conferences/{id}/recording_start)
	PostConferencesIdRecordingStart(c *gin.Context, id string)
	// Stop conference recording
	// (POST /conferences/{id}/recording_stop)
	PostConferencesIdRecordingStop(c *gin.Context, id string)
	// Start conference transcription
	// (POST /conferences/{id}/transcribe_start)
	PostConferencesIdTranscribeStart(c *gin.Context, id string)
	// Stop conference transcription
	// (POST /conferences/{id}/transcribe_stop)
	PostConferencesIdTranscribeStop(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeys(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccesskeysParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeys(c, params)
}

// PostAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) PostAccesskeys(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAccesskeys(c)
}

// DeleteAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccesskeysId(c, id)
}

// GetAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeysId(c, id)
}

// PutAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) PutAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAccesskeysId(c, id)
}

// GetActiveflows operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflows(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActiveflowsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflows(c, params)
}

// PostActiveflows operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflows(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflows(c)
}

// DeleteActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteActiveflowsId(c, id)
}

// GetActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflowsId(c, id)
}

// PostActiveflowsIdStop operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflowsIdStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflowsIdStop(c, id)
}

// GetAgents operation middleware
func (siw *ServerInterfaceWrapper) GetAgents(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAgentsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag_ids", c.Request.URL.Query(), &params.TagIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgents(c, params)
}

// PostAgents operation middleware
func (siw *ServerInterfaceWrapper) PostAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAgents(c)
}

// DeleteAgentsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAgentsId(c, id)
}

// GetAgentsId operation middleware
func (siw *ServerInterfaceWrapper) GetAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgentsId(c, id)
}

// PutAgentsId operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsId(c, id)
}

// PutAgentsIdAddresses operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdAddresses(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdAddresses(c, id)
}

// PutAgentsIdPassword operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdPassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdPassword(c, id)
}

// PutAgentsIdPermission operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdPermission(c, id)
}

// PutAgentsIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdStatus(c, id)
}

// PutAgentsIdTagIds operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdTagIds(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdTagIds(c, id)
}

// GetAvailableNumbers operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableNumbers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableNumbersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "country_code" -------------

	if paramValue := c.Query("country_code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument country_code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "country_code", c.Request.URL.Query(), &params.CountryCode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailableNumbers(c, params)
}

// GetBillingAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetBillingAccounts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingAccountsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBillingAccounts(c, params)
}

// PostBillingAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccounts(c)
}

// DeleteBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBillingAccountsId(c, id)
}

// GetBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) GetBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBillingAccountsId(c, id)
}

// PutBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) PutBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBillingAccountsId(c, id)
}

// PostBillingAccountsIdBalanceAddForce operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccountsIdBalanceAddForce(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccountsIdBalanceAddForce(c, id)
}

// PostBillingAccountsIdBalanceSubtractForce operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccountsIdBalanceSubtractForce(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccountsIdBalanceSubtractForce(c, id)
}

// PutBillingAccountsIdPaymentInfo operation middleware
func (siw *ServerInterfaceWrapper) PutBillingAccountsIdPaymentInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBillingAccountsIdPaymentInfo(c, id)
}

// GetBillings operation middleware
func (siw *ServerInterfaceWrapper) GetBillings(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBillings(c, params)
}

// GetCalls operation middleware
func (siw *ServerInterfaceWrapper) GetCalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCalls(c, params)
}

// PostCalls operation middleware
func (siw *ServerInterfaceWrapper) PostCalls(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCalls(c)
}

// DeleteCallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsId(c, id)
}

// GetCallsId operation middleware
func (siw *ServerInterfaceWrapper) GetCallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallsId(c, id)
}

// PostCallsIdHangup operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdHangup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdHangup(c, id)
}

// DeleteCallsIdHold operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdHold(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdHold(c, id)
}

// PostCallsIdHold operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdHold(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdHold(c, id)
}

// GetCallsIdMediaStream operation middleware
func (siw *ServerInterfaceWrapper) GetCallsIdMediaStream(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallsIdMediaStreamParams

	// ------------- Optional query parameter "encapsulation" -------------

	err = runtime.BindQueryParameter("form", true, false, "encapsulation", c.Request.URL.Query(), &params.Encapsulation)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter encapsulation: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallsIdMediaStream(c, id, params)
}

// DeleteCallsIdMoh operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdMoh(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdMoh(c, id)
}

// PostCallsIdMoh operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdMoh(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdMoh(c, id)
}

// DeleteCallsIdMute operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdMute(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdMute(c, id)
}

// PostCallsIdMute operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdMute(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdMute(c, id)
}

// DeleteCallsIdSilence operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdSilence(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdSilence(c, id)
}

// PostCallsIdSilence operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdSilence(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdSilence(c, id)
}

// PostCallsIdTalk operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdTalk(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdTalk(c, id)
}

// GetCampaigncalls operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigncalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaigncallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigncalls(c, params)
}

// DeleteCampaigncallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaigncallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCampaigncallsId(c, id)
}

// GetCampaigncallsId operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigncallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigncallsId(c, id)
}

// GetCampaigns operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigns(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigns(c, params)
}

// PostCampaigns operation middleware
func (siw *ServerInterfaceWrapper) PostCampaigns(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCampaigns(c)
}

// DeleteCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCampaignsId(c, id)
}

// GetCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaignsId(c, id)
}

// PutCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsId(c, id)
}

// PutCampaignsIdActions operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsIdActions(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsIdActions(c, id)
}

// GetCampaignsIdCampaigncalls operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsIdCampaigncalls(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsIdCampaigncallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaignsIdCampaigncalls(c, id, params)
}

// PutCampaignsIdNextCampaignId operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsIdNextCampaignId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsIdNextCampaignId(c, id)
}

// PutCampaignsIdResourceInfo operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsIdResourceInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsIdResourceInfo(c, id)
}

// PutCampaignsIdServiceLevel operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsIdServiceLevel(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsIdServiceLevel(c, id)
}

// PutCampaignsIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsIdStatus(c, id)
}

// GetChatbotcalls operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotcalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatbotcallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotcalls(c, params)
}

// DeleteChatbotcallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatbotcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatbotcallsId(c, id)
}

// GetChatbotcallsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotcallsId(c, id)
}

// GetChatbots operation middleware
func (siw *ServerInterfaceWrapper) GetChatbots(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatbotsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbots(c, params)
}

// PostChatbots operation middleware
func (siw *ServerInterfaceWrapper) PostChatbots(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatbots(c)
}

// DeleteChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatbotsId(c, id)
}

// GetChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotsId(c, id)
}

// PutChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatbotsId(c, id)
}

// GetChatmessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatmessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatmessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "chat_id" -------------

	if paramValue := c.Query("chat_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument chat_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "chat_id", c.Request.URL.Query(), &params.ChatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chat_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatmessages(c, params)
}

// PostChatmessages operation middleware
func (siw *ServerInterfaceWrapper) PostChatmessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatmessages(c)
}

// DeleteChatmessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatmessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatmessagesId(c, id)
}

// GetChatmessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetChatmessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatmessagesId(c, id)
}

// GetChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatroommessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatroommessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "chatroom_id" -------------

	if paramValue := c.Query("chatroom_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument chatroom_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "chatroom_id", c.Request.URL.Query(), &params.ChatroomId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chatroom_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroommessages(c, params)
}

// PostChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) PostChatroommessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatroommessages(c)
}

// DeleteChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatroommessagesId(c, id)
}

// GetChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroommessagesId(c, id)
}

// GetChatrooms operation middleware
func (siw *ServerInterfaceWrapper) GetChatrooms(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatroomsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "owner_id" -------------

	if paramValue := c.Query("owner_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument owner_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "owner_id", c.Request.URL.Query(), &params.OwnerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owner_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatrooms(c, params)
}

// PostChatrooms operation middleware
func (siw *ServerInterfaceWrapper) PostChatrooms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatrooms(c)
}

// DeleteChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatroomsId(c, id)
}

// GetChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroomsId(c, id)
}

// PutChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatroomsId(c, id)
}

// GetChats operation middleware
func (siw *ServerInterfaceWrapper) GetChats(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChats(c, params)
}

// PostChats operation middleware
func (siw *ServerInterfaceWrapper) PostChats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChats(c)
}

// DeleteChatsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatsId(c, id)
}

// GetChatsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatsId(c, id)
}

// PutChatsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatsId(c, id)
}

// PostChatsIdParticipantIds operation middleware
func (siw *ServerInterfaceWrapper) PostChatsIdParticipantIds(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatsIdParticipantIds(c, id)
}

// DeleteChatsIdParticipantIdsParticipantId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatsIdParticipantIdsParticipantId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "participant_id" -------------
	var participantId string

	err = runtime.BindStyledParameterWithOptions("simple", "participant_id", c.Param("participant_id"), &participantId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter participant_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatsIdParticipantIdsParticipantId(c, id, participantId)
}

// PutChatsIdRoomOwnerId operation middleware
func (siw *ServerInterfaceWrapper) PutChatsIdRoomOwnerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatsIdRoomOwnerId(c, id)
}

// GetConferencecalls operation middleware
func (siw *ServerInterfaceWrapper) GetConferencecalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConferencecallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencecalls(c, params)
}

// DeleteConferencecallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteConferencecallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteConferencecallsId(c, id)
}

// GetConferencecallsId operation middleware
func (siw *ServerInterfaceWrapper) GetConferencecallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencecallsId(c, id)
}

// GetConferences operation middleware
func (siw *ServerInterfaceWrapper) GetConferences(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConferencesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferences(c, params)
}

// PostConferences operation middleware
func (siw *ServerInterfaceWrapper) PostConferences(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferences(c)
}

// DeleteConferencesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteConferencesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteConferencesId(c, id)
}

// GetConferencesId operation middleware
func (siw *ServerInterfaceWrapper) GetConferencesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencesId(c, id)
}

// PutConferencesId operation middleware
func (siw *ServerInterfaceWrapper) PutConferencesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutConferencesId(c, id)
}

// GetConferencesIdMediaStream operation middleware
func (siw *ServerInterfaceWrapper) GetConferencesIdMediaStream(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConferencesIdMediaStreamParams

	// ------------- Required query parameter "encapsulation" -------------

	if paramValue := c.Query("encapsulation"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument encapsulation is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "encapsulation", c.Request.URL.Query(), &params.Encapsulation)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter encapsulation: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencesIdMediaStream(c, id, params)
}

// PostConferencesIdRecordingStart operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdRecordingStart(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdRecordingStart(c, id)
}

// PostConferencesIdRecordingStop operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdRecordingStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdRecordingStop(c, id)
}

// PostConferencesIdTranscribeStart operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdTranscribeStart(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdTranscribeStart(c, id)
}

// PostConferencesIdTranscribeStop operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdTranscribeStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdTranscribeStop(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accesskeys", wrapper.GetAccesskeys)
	router.POST(options.BaseURL+"/accesskeys", wrapper.PostAccesskeys)
	router.DELETE(options.BaseURL+"/accesskeys/:id", wrapper.DeleteAccesskeysId)
	router.GET(options.BaseURL+"/accesskeys/:id", wrapper.GetAccesskeysId)
	router.PUT(options.BaseURL+"/accesskeys/:id", wrapper.PutAccesskeysId)
	router.GET(options.BaseURL+"/activeflows", wrapper.GetActiveflows)
	router.POST(options.BaseURL+"/activeflows", wrapper.PostActiveflows)
	router.DELETE(options.BaseURL+"/activeflows/:id", wrapper.DeleteActiveflowsId)
	router.GET(options.BaseURL+"/activeflows/:id", wrapper.GetActiveflowsId)
	router.POST(options.BaseURL+"/activeflows/:id/stop", wrapper.PostActiveflowsIdStop)
	router.GET(options.BaseURL+"/agents", wrapper.GetAgents)
	router.POST(options.BaseURL+"/agents", wrapper.PostAgents)
	router.DELETE(options.BaseURL+"/agents/:id", wrapper.DeleteAgentsId)
	router.GET(options.BaseURL+"/agents/:id", wrapper.GetAgentsId)
	router.PUT(options.BaseURL+"/agents/:id", wrapper.PutAgentsId)
	router.PUT(options.BaseURL+"/agents/:id/addresses", wrapper.PutAgentsIdAddresses)
	router.PUT(options.BaseURL+"/agents/:id/password", wrapper.PutAgentsIdPassword)
	router.PUT(options.BaseURL+"/agents/:id/permission", wrapper.PutAgentsIdPermission)
	router.PUT(options.BaseURL+"/agents/:id/status", wrapper.PutAgentsIdStatus)
	router.PUT(options.BaseURL+"/agents/:id/tag_ids", wrapper.PutAgentsIdTagIds)
	router.GET(options.BaseURL+"/available_numbers", wrapper.GetAvailableNumbers)
	router.GET(options.BaseURL+"/billing_accounts", wrapper.GetBillingAccounts)
	router.POST(options.BaseURL+"/billing_accounts", wrapper.PostBillingAccounts)
	router.DELETE(options.BaseURL+"/billing_accounts/:id", wrapper.DeleteBillingAccountsId)
	router.GET(options.BaseURL+"/billing_accounts/:id", wrapper.GetBillingAccountsId)
	router.PUT(options.BaseURL+"/billing_accounts/:id", wrapper.PutBillingAccountsId)
	router.POST(options.BaseURL+"/billing_accounts/:id/balance_add_force", wrapper.PostBillingAccountsIdBalanceAddForce)
	router.POST(options.BaseURL+"/billing_accounts/:id/balance_subtract_force", wrapper.PostBillingAccountsIdBalanceSubtractForce)
	router.PUT(options.BaseURL+"/billing_accounts/:id/payment_info", wrapper.PutBillingAccountsIdPaymentInfo)
	router.GET(options.BaseURL+"/billings", wrapper.GetBillings)
	router.GET(options.BaseURL+"/calls", wrapper.GetCalls)
	router.POST(options.BaseURL+"/calls", wrapper.PostCalls)
	router.DELETE(options.BaseURL+"/calls/:id", wrapper.DeleteCallsId)
	router.GET(options.BaseURL+"/calls/:id", wrapper.GetCallsId)
	router.POST(options.BaseURL+"/calls/:id/hangup", wrapper.PostCallsIdHangup)
	router.DELETE(options.BaseURL+"/calls/:id/hold", wrapper.DeleteCallsIdHold)
	router.POST(options.BaseURL+"/calls/:id/hold", wrapper.PostCallsIdHold)
	router.GET(options.BaseURL+"/calls/:id/media_stream", wrapper.GetCallsIdMediaStream)
	router.DELETE(options.BaseURL+"/calls/:id/moh", wrapper.DeleteCallsIdMoh)
	router.POST(options.BaseURL+"/calls/:id/moh", wrapper.PostCallsIdMoh)
	router.DELETE(options.BaseURL+"/calls/:id/mute", wrapper.DeleteCallsIdMute)
	router.POST(options.BaseURL+"/calls/:id/mute", wrapper.PostCallsIdMute)
	router.DELETE(options.BaseURL+"/calls/:id/silence", wrapper.DeleteCallsIdSilence)
	router.POST(options.BaseURL+"/calls/:id/silence", wrapper.PostCallsIdSilence)
	router.POST(options.BaseURL+"/calls/:id/talk", wrapper.PostCallsIdTalk)
	router.GET(options.BaseURL+"/campaigncalls", wrapper.GetCampaigncalls)
	router.DELETE(options.BaseURL+"/campaigncalls/:id", wrapper.DeleteCampaigncallsId)
	router.GET(options.BaseURL+"/campaigncalls/:id", wrapper.GetCampaigncallsId)
	router.GET(options.BaseURL+"/campaigns", wrapper.GetCampaigns)
	router.POST(options.BaseURL+"/campaigns", wrapper.PostCampaigns)
	router.DELETE(options.BaseURL+"/campaigns/:id", wrapper.DeleteCampaignsId)
	router.GET(options.BaseURL+"/campaigns/:id", wrapper.GetCampaignsId)
	router.PUT(options.BaseURL+"/campaigns/:id", wrapper.PutCampaignsId)
	router.PUT(options.BaseURL+"/campaigns/:id/actions", wrapper.PutCampaignsIdActions)
	router.GET(options.BaseURL+"/campaigns/:id/campaigncalls", wrapper.GetCampaignsIdCampaigncalls)
	router.PUT(options.BaseURL+"/campaigns/:id/next_campaign_id", wrapper.PutCampaignsIdNextCampaignId)
	router.PUT(options.BaseURL+"/campaigns/:id/resource_info", wrapper.PutCampaignsIdResourceInfo)
	router.PUT(options.BaseURL+"/campaigns/:id/service_level", wrapper.PutCampaignsIdServiceLevel)
	router.PUT(options.BaseURL+"/campaigns/:id/status", wrapper.PutCampaignsIdStatus)
	router.GET(options.BaseURL+"/chatbotcalls", wrapper.GetChatbotcalls)
	router.DELETE(options.BaseURL+"/chatbotcalls/:id", wrapper.DeleteChatbotcallsId)
	router.GET(options.BaseURL+"/chatbotcalls/:id", wrapper.GetChatbotcallsId)
	router.GET(options.BaseURL+"/chatbots", wrapper.GetChatbots)
	router.POST(options.BaseURL+"/chatbots", wrapper.PostChatbots)
	router.DELETE(options.BaseURL+"/chatbots/:id", wrapper.DeleteChatbotsId)
	router.GET(options.BaseURL+"/chatbots/:id", wrapper.GetChatbotsId)
	router.PUT(options.BaseURL+"/chatbots/:id", wrapper.PutChatbotsId)
	router.GET(options.BaseURL+"/chatmessages", wrapper.GetChatmessages)
	router.POST(options.BaseURL+"/chatmessages", wrapper.PostChatmessages)
	router.DELETE(options.BaseURL+"/chatmessages/:id", wrapper.DeleteChatmessagesId)
	router.GET(options.BaseURL+"/chatmessages/:id", wrapper.GetChatmessagesId)
	router.GET(options.BaseURL+"/chatroommessages", wrapper.GetChatroommessages)
	router.POST(options.BaseURL+"/chatroommessages", wrapper.PostChatroommessages)
	router.DELETE(options.BaseURL+"/chatroommessages/:id", wrapper.DeleteChatroommessagesId)
	router.GET(options.BaseURL+"/chatroommessages/:id", wrapper.GetChatroommessagesId)
	router.GET(options.BaseURL+"/chatrooms", wrapper.GetChatrooms)
	router.POST(options.BaseURL+"/chatrooms", wrapper.PostChatrooms)
	router.DELETE(options.BaseURL+"/chatrooms/:id", wrapper.DeleteChatroomsId)
	router.GET(options.BaseURL+"/chatrooms/:id", wrapper.GetChatroomsId)
	router.PUT(options.BaseURL+"/chatrooms/:id", wrapper.PutChatroomsId)
	router.GET(options.BaseURL+"/chats", wrapper.GetChats)
	router.POST(options.BaseURL+"/chats", wrapper.PostChats)
	router.DELETE(options.BaseURL+"/chats/:id", wrapper.DeleteChatsId)
	router.GET(options.BaseURL+"/chats/:id", wrapper.GetChatsId)
	router.PUT(options.BaseURL+"/chats/:id", wrapper.PutChatsId)
	router.POST(options.BaseURL+"/chats/:id/participant_ids", wrapper.PostChatsIdParticipantIds)
	router.DELETE(options.BaseURL+"/chats/:id/participant_ids/:participant_id", wrapper.DeleteChatsIdParticipantIdsParticipantId)
	router.PUT(options.BaseURL+"/chats/:id/room_owner_id", wrapper.PutChatsIdRoomOwnerId)
	router.GET(options.BaseURL+"/conferencecalls", wrapper.GetConferencecalls)
	router.DELETE(options.BaseURL+"/conferencecalls/:id", wrapper.DeleteConferencecallsId)
	router.GET(options.BaseURL+"/conferencecalls/:id", wrapper.GetConferencecallsId)
	router.GET(options.BaseURL+"/conferences", wrapper.GetConferences)
	router.POST(options.BaseURL+"/conferences", wrapper.PostConferences)
	router.DELETE(options.BaseURL+"/conferences/:id", wrapper.DeleteConferencesId)
	router.GET(options.BaseURL+"/conferences/:id", wrapper.GetConferencesId)
	router.PUT(options.BaseURL+"/conferences/:id", wrapper.PutConferencesId)
	router.GET(options.BaseURL+"/conferences/:id/media_stream", wrapper.GetConferencesIdMediaStream)
	router.POST(options.BaseURL+"/conferences/:id/recording_start", wrapper.PostConferencesIdRecordingStart)
	router.POST(options.BaseURL+"/conferences/:id/recording_stop", wrapper.PostConferencesIdRecordingStop)
	router.POST(options.BaseURL+"/conferences/:id/transcribe_start", wrapper.PostConferencesIdTranscribeStart)
	router.POST(options.BaseURL+"/conferences/:id/transcribe_stop", wrapper.PostConferencesIdTranscribeStop)
}

type GetAccesskeysRequestObject struct {
	Params GetAccesskeysParams
}

type GetAccesskeysResponseObject interface {
	VisitGetAccesskeysResponse(w http.ResponseWriter) error
}

type GetAccesskeys200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]CustomerManagerAccesskey `json:"result,omitempty"`
}

func (response GetAccesskeys200JSONResponse) VisitGetAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAccesskeysRequestObject struct {
	Body *PostAccesskeysJSONRequestBody
}

type PostAccesskeysResponseObject interface {
	VisitPostAccesskeysResponse(w http.ResponseWriter) error
}

type PostAccesskeys201JSONResponse CustomerManagerAccesskey

func (response PostAccesskeys201JSONResponse) VisitPostAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteAccesskeysIdResponseObject interface {
	VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error
}

type DeleteAccesskeysId204Response struct {
}

func (response DeleteAccesskeysId204Response) VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type GetAccesskeysIdResponseObject interface {
	VisitGetAccesskeysIdResponse(w http.ResponseWriter) error
}

type GetAccesskeysId200JSONResponse CustomerManagerAccesskey

func (response GetAccesskeysId200JSONResponse) VisitGetAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAccesskeysIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutAccesskeysIdJSONRequestBody
}

type PutAccesskeysIdResponseObject interface {
	VisitPutAccesskeysIdResponse(w http.ResponseWriter) error
}

type PutAccesskeysId200JSONResponse CustomerManagerAccesskey

func (response PutAccesskeysId200JSONResponse) VisitPutAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsRequestObject struct {
	Params GetActiveflowsParams
}

type GetActiveflowsResponseObject interface {
	VisitGetActiveflowsResponse(w http.ResponseWriter) error
}

type GetActiveflows200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]FlowManagerActiveflow `json:"result,omitempty"`
}

func (response GetActiveflows200JSONResponse) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflows500Response struct {
}

func (response GetActiveflows500Response) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostActiveflowsRequestObject struct {
	Body *PostActiveflowsJSONRequestBody
}

type PostActiveflowsResponseObject interface {
	VisitPostActiveflowsResponse(w http.ResponseWriter) error
}

type PostActiveflows201JSONResponse FlowManagerActiveflow

func (response PostActiveflows201JSONResponse) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflows400Response struct {
}

func (response PostActiveflows400Response) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteActiveflowsIdResponseObject interface {
	VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error
}

type DeleteActiveflowsId204Response struct {
}

func (response DeleteActiveflowsId204Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteActiveflowsId404Response struct {
}

func (response DeleteActiveflowsId404Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type GetActiveflowsIdResponseObject interface {
	VisitGetActiveflowsIdResponse(w http.ResponseWriter) error
}

type GetActiveflowsId200JSONResponse FlowManagerActiveflow

func (response GetActiveflowsId200JSONResponse) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsId404Response struct {
}

func (response GetActiveflowsId404Response) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostActiveflowsIdStopRequestObject struct {
	Id string `json:"id"`
}

type PostActiveflowsIdStopResponseObject interface {
	VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error
}

type PostActiveflowsIdStop200JSONResponse FlowManagerActiveflow

func (response PostActiveflowsIdStop200JSONResponse) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflowsIdStop400Response struct {
}

func (response PostActiveflowsIdStop400Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostActiveflowsIdStop404Response struct {
}

func (response PostActiveflowsIdStop404Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAgentsRequestObject struct {
	Params GetAgentsParams
}

type GetAgentsResponseObject interface {
	VisitGetAgentsResponse(w http.ResponseWriter) error
}

type GetAgents200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string              `json:"next_page_token,omitempty"`
	Result        *[]AgentManagerAgent `json:"result,omitempty"`
}

func (response GetAgents200JSONResponse) VisitGetAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAgentsRequestObject struct {
	Body *PostAgentsJSONRequestBody
}

type PostAgentsResponseObject interface {
	VisitPostAgentsResponse(w http.ResponseWriter) error
}

type PostAgents201JSONResponse AgentManagerAgent

func (response PostAgents201JSONResponse) VisitPostAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAgents400Response struct {
}

func (response PostAgents400Response) VisitPostAgentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAgentsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteAgentsIdResponseObject interface {
	VisitDeleteAgentsIdResponse(w http.ResponseWriter) error
}

type DeleteAgentsId200JSONResponse AgentManagerAgent

func (response DeleteAgentsId200JSONResponse) VisitDeleteAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentsIdRequestObject struct {
	Id string `json:"id"`
}

type GetAgentsIdResponseObject interface {
	VisitGetAgentsIdResponse(w http.ResponseWriter) error
}

type GetAgentsId200JSONResponse AgentManagerAgent

func (response GetAgentsId200JSONResponse) VisitGetAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdJSONRequestBody
}

type PutAgentsIdResponseObject interface {
	VisitPutAgentsIdResponse(w http.ResponseWriter) error
}

type PutAgentsId200JSONResponse AgentManagerAgent

func (response PutAgentsId200JSONResponse) VisitPutAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdAddressesRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdAddressesJSONRequestBody
}

type PutAgentsIdAddressesResponseObject interface {
	VisitPutAgentsIdAddressesResponse(w http.ResponseWriter) error
}

type PutAgentsIdAddresses200JSONResponse AgentManagerAgent

func (response PutAgentsIdAddresses200JSONResponse) VisitPutAgentsIdAddressesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdPasswordRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdPasswordJSONRequestBody
}

type PutAgentsIdPasswordResponseObject interface {
	VisitPutAgentsIdPasswordResponse(w http.ResponseWriter) error
}

type PutAgentsIdPassword200JSONResponse AgentManagerAgent

func (response PutAgentsIdPassword200JSONResponse) VisitPutAgentsIdPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdPermissionRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdPermissionJSONRequestBody
}

type PutAgentsIdPermissionResponseObject interface {
	VisitPutAgentsIdPermissionResponse(w http.ResponseWriter) error
}

type PutAgentsIdPermission200JSONResponse AgentManagerAgent

func (response PutAgentsIdPermission200JSONResponse) VisitPutAgentsIdPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdStatusRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdStatusJSONRequestBody
}

type PutAgentsIdStatusResponseObject interface {
	VisitPutAgentsIdStatusResponse(w http.ResponseWriter) error
}

type PutAgentsIdStatus200JSONResponse AgentManagerAgent

func (response PutAgentsIdStatus200JSONResponse) VisitPutAgentsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdTagIdsRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdTagIdsJSONRequestBody
}

type PutAgentsIdTagIdsResponseObject interface {
	VisitPutAgentsIdTagIdsResponse(w http.ResponseWriter) error
}

type PutAgentsIdTagIds200JSONResponse AgentManagerAgent

func (response PutAgentsIdTagIds200JSONResponse) VisitPutAgentsIdTagIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAvailableNumbersRequestObject struct {
	Params GetAvailableNumbersParams
}

type GetAvailableNumbersResponseObject interface {
	VisitGetAvailableNumbersResponse(w http.ResponseWriter) error
}

type GetAvailableNumbers200JSONResponse struct {
	Result *[]NumberManagerAvailableNumber `json:"result,omitempty"`
}

func (response GetAvailableNumbers200JSONResponse) VisitGetAvailableNumbersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAvailableNumbers400Response struct {
}

func (response GetAvailableNumbers400Response) VisitGetAvailableNumbersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetBillingAccountsRequestObject struct {
	Params GetBillingAccountsParams
}

type GetBillingAccountsResponseObject interface {
	VisitGetBillingAccountsResponse(w http.ResponseWriter) error
}

type GetBillingAccounts200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]BillingManagerAccount `json:"result,omitempty"`
}

func (response GetBillingAccounts200JSONResponse) VisitGetBillingAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsRequestObject struct {
	Body *PostBillingAccountsJSONRequestBody
}

type PostBillingAccountsResponseObject interface {
	VisitPostBillingAccountsResponse(w http.ResponseWriter) error
}

type PostBillingAccounts200JSONResponse BillingManagerAccount

func (response PostBillingAccounts200JSONResponse) VisitPostBillingAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBillingAccountsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteBillingAccountsIdResponseObject interface {
	VisitDeleteBillingAccountsIdResponse(w http.ResponseWriter) error
}

type DeleteBillingAccountsId200JSONResponse BillingManagerAccount

func (response DeleteBillingAccountsId200JSONResponse) VisitDeleteBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBillingAccountsIdRequestObject struct {
	Id string `json:"id"`
}

type GetBillingAccountsIdResponseObject interface {
	VisitGetBillingAccountsIdResponse(w http.ResponseWriter) error
}

type GetBillingAccountsId200JSONResponse BillingManagerAccount

func (response GetBillingAccountsId200JSONResponse) VisitGetBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutBillingAccountsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutBillingAccountsIdJSONRequestBody
}

type PutBillingAccountsIdResponseObject interface {
	VisitPutBillingAccountsIdResponse(w http.ResponseWriter) error
}

type PutBillingAccountsId200JSONResponse BillingManagerAccount

func (response PutBillingAccountsId200JSONResponse) VisitPutBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsIdBalanceAddForceRequestObject struct {
	Id   string `json:"id"`
	Body *PostBillingAccountsIdBalanceAddForceJSONRequestBody
}

type PostBillingAccountsIdBalanceAddForceResponseObject interface {
	VisitPostBillingAccountsIdBalanceAddForceResponse(w http.ResponseWriter) error
}

type PostBillingAccountsIdBalanceAddForce200JSONResponse BillingManagerAccount

func (response PostBillingAccountsIdBalanceAddForce200JSONResponse) VisitPostBillingAccountsIdBalanceAddForceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsIdBalanceSubtractForceRequestObject struct {
	Id   string `json:"id"`
	Body *PostBillingAccountsIdBalanceSubtractForceJSONRequestBody
}

type PostBillingAccountsIdBalanceSubtractForceResponseObject interface {
	VisitPostBillingAccountsIdBalanceSubtractForceResponse(w http.ResponseWriter) error
}

type PostBillingAccountsIdBalanceSubtractForce200JSONResponse BillingManagerAccount

func (response PostBillingAccountsIdBalanceSubtractForce200JSONResponse) VisitPostBillingAccountsIdBalanceSubtractForceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutBillingAccountsIdPaymentInfoRequestObject struct {
	Id   string `json:"id"`
	Body *PutBillingAccountsIdPaymentInfoJSONRequestBody
}

type PutBillingAccountsIdPaymentInfoResponseObject interface {
	VisitPutBillingAccountsIdPaymentInfoResponse(w http.ResponseWriter) error
}

type PutBillingAccountsIdPaymentInfo200JSONResponse BillingManagerAccount

func (response PutBillingAccountsIdPaymentInfo200JSONResponse) VisitPutBillingAccountsIdPaymentInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBillingsRequestObject struct {
	Params GetBillingsParams
}

type GetBillingsResponseObject interface {
	VisitGetBillingsResponse(w http.ResponseWriter) error
}

type GetBillings200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]BillingManagerBilling `json:"result,omitempty"`
}

func (response GetBillings200JSONResponse) VisitGetBillingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallsRequestObject struct {
	Params GetCallsParams
}

type GetCallsResponseObject interface {
	VisitGetCallsResponse(w http.ResponseWriter) error
}

type GetCalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string            `json:"next_page_token,omitempty"`
	Result        *[]CallManagerCall `json:"result,omitempty"`
}

func (response GetCalls200JSONResponse) VisitGetCallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCallsRequestObject struct {
	Body *PostCallsJSONRequestBody
}

type PostCallsResponseObject interface {
	VisitPostCallsResponse(w http.ResponseWriter) error
}

type PostCalls200JSONResponse struct {
	Calls      *[]CallManagerCall      `json:"calls,omitempty"`
	Groupcalls *[]CallManagerGroupcall `json:"groupcalls,omitempty"`
}

func (response PostCalls200JSONResponse) VisitPostCallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdResponseObject interface {
	VisitDeleteCallsIdResponse(w http.ResponseWriter) error
}

type DeleteCallsId200JSONResponse CallManagerCall

func (response DeleteCallsId200JSONResponse) VisitDeleteCallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCallsIdResponseObject interface {
	VisitGetCallsIdResponse(w http.ResponseWriter) error
}

type GetCallsId200JSONResponse CallManagerCall

func (response GetCallsId200JSONResponse) VisitGetCallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCallsIdHangupRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdHangupResponseObject interface {
	VisitPostCallsIdHangupResponse(w http.ResponseWriter) error
}

type PostCallsIdHangup200JSONResponse CallManagerCall

func (response PostCallsIdHangup200JSONResponse) VisitPostCallsIdHangupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCallsIdHoldRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdHoldResponseObject interface {
	VisitDeleteCallsIdHoldResponse(w http.ResponseWriter) error
}

type DeleteCallsIdHold200Response struct {
}

func (response DeleteCallsIdHold200Response) VisitDeleteCallsIdHoldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdHoldRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdHoldResponseObject interface {
	VisitPostCallsIdHoldResponse(w http.ResponseWriter) error
}

type PostCallsIdHold200Response struct {
}

func (response PostCallsIdHold200Response) VisitPostCallsIdHoldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCallsIdMediaStreamRequestObject struct {
	Id     string `json:"id"`
	Params GetCallsIdMediaStreamParams
}

type GetCallsIdMediaStreamResponseObject interface {
	VisitGetCallsIdMediaStreamResponse(w http.ResponseWriter) error
}

type GetCallsIdMediaStream200Response struct {
}

func (response GetCallsIdMediaStream200Response) VisitGetCallsIdMediaStreamResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdMohRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdMohResponseObject interface {
	VisitDeleteCallsIdMohResponse(w http.ResponseWriter) error
}

type DeleteCallsIdMoh200Response struct {
}

func (response DeleteCallsIdMoh200Response) VisitDeleteCallsIdMohResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdMohRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdMohResponseObject interface {
	VisitPostCallsIdMohResponse(w http.ResponseWriter) error
}

type PostCallsIdMoh200Response struct {
}

func (response PostCallsIdMoh200Response) VisitPostCallsIdMohResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdMuteRequestObject struct {
	Id   string `json:"id"`
	Body *DeleteCallsIdMuteJSONRequestBody
}

type DeleteCallsIdMuteResponseObject interface {
	VisitDeleteCallsIdMuteResponse(w http.ResponseWriter) error
}

type DeleteCallsIdMute200Response struct {
}

func (response DeleteCallsIdMute200Response) VisitDeleteCallsIdMuteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdMuteRequestObject struct {
	Id   string `json:"id"`
	Body *PostCallsIdMuteJSONRequestBody
}

type PostCallsIdMuteResponseObject interface {
	VisitPostCallsIdMuteResponse(w http.ResponseWriter) error
}

type PostCallsIdMute200Response struct {
}

func (response PostCallsIdMute200Response) VisitPostCallsIdMuteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdSilenceRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdSilenceResponseObject interface {
	VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error
}

type DeleteCallsIdSilence200Response struct {
}

func (response DeleteCallsIdSilence200Response) VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdSilence400Response struct {
}

func (response DeleteCallsIdSilence400Response) VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostCallsIdSilenceRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdSilenceResponseObject interface {
	VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error
}

type PostCallsIdSilence200Response struct {
}

func (response PostCallsIdSilence200Response) VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdSilence400Response struct {
}

func (response PostCallsIdSilence400Response) VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostCallsIdTalkRequestObject struct {
	Id   string `json:"id"`
	Body *PostCallsIdTalkJSONRequestBody
}

type PostCallsIdTalkResponseObject interface {
	VisitPostCallsIdTalkResponse(w http.ResponseWriter) error
}

type PostCallsIdTalk200Response struct {
}

func (response PostCallsIdTalk200Response) VisitPostCallsIdTalkResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCampaigncallsRequestObject struct {
	Params GetCampaigncallsParams
}

type GetCampaigncallsResponseObject interface {
	VisitGetCampaigncallsResponse(w http.ResponseWriter) error
}

type GetCampaigncalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                        `json:"next_page_token,omitempty"`
	Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
}

func (response GetCampaigncalls200JSONResponse) VisitGetCampaigncallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCampaigncallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCampaigncallsIdResponseObject interface {
	VisitDeleteCampaigncallsIdResponse(w http.ResponseWriter) error
}

type DeleteCampaigncallsId200JSONResponse CampaignManagerCampaigncall

func (response DeleteCampaigncallsId200JSONResponse) VisitDeleteCampaigncallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaigncallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCampaigncallsIdResponseObject interface {
	VisitGetCampaigncallsIdResponse(w http.ResponseWriter) error
}

type GetCampaigncallsId200JSONResponse CampaignManagerCampaigncall

func (response GetCampaigncallsId200JSONResponse) VisitGetCampaigncallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaignsRequestObject struct {
	Params GetCampaignsParams
}

type GetCampaignsResponseObject interface {
	VisitGetCampaignsResponse(w http.ResponseWriter) error
}

type GetCampaigns200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                    `json:"next_page_token,omitempty"`
	Result        *[]CampaignManagerCampaign `json:"result,omitempty"`
}

func (response GetCampaigns200JSONResponse) VisitGetCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCampaignsRequestObject struct {
	Body *PostCampaignsJSONRequestBody
}

type PostCampaignsResponseObject interface {
	VisitPostCampaignsResponse(w http.ResponseWriter) error
}

type PostCampaigns200JSONResponse CampaignManagerCampaign

func (response PostCampaigns200JSONResponse) VisitPostCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCampaignsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCampaignsIdResponseObject interface {
	VisitDeleteCampaignsIdResponse(w http.ResponseWriter) error
}

type DeleteCampaignsId200JSONResponse CampaignManagerCampaign

func (response DeleteCampaignsId200JSONResponse) VisitDeleteCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaignsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCampaignsIdResponseObject interface {
	VisitGetCampaignsIdResponse(w http.ResponseWriter) error
}

type GetCampaignsId200JSONResponse CampaignManagerCampaign

func (response GetCampaignsId200JSONResponse) VisitGetCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdJSONRequestBody
}

type PutCampaignsIdResponseObject interface {
	VisitPutCampaignsIdResponse(w http.ResponseWriter) error
}

type PutCampaignsId200JSONResponse CampaignManagerCampaign

func (response PutCampaignsId200JSONResponse) VisitPutCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdActionsRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdActionsJSONRequestBody
}

type PutCampaignsIdActionsResponseObject interface {
	VisitPutCampaignsIdActionsResponse(w http.ResponseWriter) error
}

type PutCampaignsIdActions200JSONResponse CampaignManagerCampaign

func (response PutCampaignsIdActions200JSONResponse) VisitPutCampaignsIdActionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaignsIdCampaigncallsRequestObject struct {
	Id     string `json:"id"`
	Params GetCampaignsIdCampaigncallsParams
}

type GetCampaignsIdCampaigncallsResponseObject interface {
	VisitGetCampaignsIdCampaigncallsResponse(w http.ResponseWriter) error
}

type GetCampaignsIdCampaigncalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                        `json:"next_page_token,omitempty"`
	Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
}

func (response GetCampaignsIdCampaigncalls200JSONResponse) VisitGetCampaignsIdCampaigncallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdNextCampaignIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdNextCampaignIdJSONRequestBody
}

type PutCampaignsIdNextCampaignIdResponseObject interface {
	VisitPutCampaignsIdNextCampaignIdResponse(w http.ResponseWriter) error
}

type PutCampaignsIdNextCampaignId200JSONResponse CampaignManagerCampaign

func (response PutCampaignsIdNextCampaignId200JSONResponse) VisitPutCampaignsIdNextCampaignIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdResourceInfoRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdResourceInfoJSONRequestBody
}

type PutCampaignsIdResourceInfoResponseObject interface {
	VisitPutCampaignsIdResourceInfoResponse(w http.ResponseWriter) error
}

type PutCampaignsIdResourceInfo200JSONResponse CampaignManagerCampaign

func (response PutCampaignsIdResourceInfo200JSONResponse) VisitPutCampaignsIdResourceInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdServiceLevelRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdServiceLevelJSONRequestBody
}

type PutCampaignsIdServiceLevelResponseObject interface {
	VisitPutCampaignsIdServiceLevelResponse(w http.ResponseWriter) error
}

type PutCampaignsIdServiceLevel200JSONResponse CampaignManagerCampaign

func (response PutCampaignsIdServiceLevel200JSONResponse) VisitPutCampaignsIdServiceLevelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdStatusRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdStatusJSONRequestBody
}

type PutCampaignsIdStatusResponseObject interface {
	VisitPutCampaignsIdStatusResponse(w http.ResponseWriter) error
}

type PutCampaignsIdStatus200JSONResponse CampaignManagerCampaign

func (response PutCampaignsIdStatus200JSONResponse) VisitPutCampaignsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotcallsRequestObject struct {
	Params GetChatbotcallsParams
}

type GetChatbotcallsResponseObject interface {
	VisitGetChatbotcallsResponse(w http.ResponseWriter) error
}

type GetChatbotcalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                      `json:"next_page_token,omitempty"`
	Result        *[]ChatbotManagerChatbotcall `json:"result,omitempty"`
}

func (response GetChatbotcalls200JSONResponse) VisitGetChatbotcallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatbotcallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatbotcallsIdResponseObject interface {
	VisitDeleteChatbotcallsIdResponse(w http.ResponseWriter) error
}

type DeleteChatbotcallsId200JSONResponse ChatbotManagerChatbotcall

func (response DeleteChatbotcallsId200JSONResponse) VisitDeleteChatbotcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotcallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatbotcallsIdResponseObject interface {
	VisitGetChatbotcallsIdResponse(w http.ResponseWriter) error
}

type GetChatbotcallsId200JSONResponse ChatbotManagerChatbotcall

func (response GetChatbotcallsId200JSONResponse) VisitGetChatbotcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotsRequestObject struct {
	Params GetChatbotsParams
}

type GetChatbotsResponseObject interface {
	VisitGetChatbotsResponse(w http.ResponseWriter) error
}

type GetChatbots200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]ChatbotManagerChatbot `json:"result,omitempty"`
}

func (response GetChatbots200JSONResponse) VisitGetChatbotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatbotsRequestObject struct {
	Body *PostChatbotsJSONRequestBody
}

type PostChatbotsResponseObject interface {
	VisitPostChatbotsResponse(w http.ResponseWriter) error
}

type PostChatbots200JSONResponse ChatbotManagerChatbot

func (response PostChatbots200JSONResponse) VisitPostChatbotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatbotsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatbotsIdResponseObject interface {
	VisitDeleteChatbotsIdResponse(w http.ResponseWriter) error
}

type DeleteChatbotsId200JSONResponse ChatbotManagerChatbot

func (response DeleteChatbotsId200JSONResponse) VisitDeleteChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatbotsIdResponseObject interface {
	VisitGetChatbotsIdResponse(w http.ResponseWriter) error
}

type GetChatbotsId200JSONResponse ChatbotManagerChatbot

func (response GetChatbotsId200JSONResponse) VisitGetChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatbotsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatbotsIdJSONRequestBody
}

type PutChatbotsIdResponseObject interface {
	VisitPutChatbotsIdResponse(w http.ResponseWriter) error
}

type PutChatbotsId200JSONResponse ChatbotManagerChatbot

func (response PutChatbotsId200JSONResponse) VisitPutChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatmessagesRequestObject struct {
	Params GetChatmessagesParams
}

type GetChatmessagesResponseObject interface {
	VisitGetChatmessagesResponse(w http.ResponseWriter) error
}

type GetChatmessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                   `json:"next_page_token,omitempty"`
	Result        *[]ChatManagerMessagechat `json:"result,omitempty"`
}

func (response GetChatmessages200JSONResponse) VisitGetChatmessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatmessagesRequestObject struct {
	Body *PostChatmessagesJSONRequestBody
}

type PostChatmessagesResponseObject interface {
	VisitPostChatmessagesResponse(w http.ResponseWriter) error
}

type PostChatmessages200JSONResponse ChatManagerMessagechat

func (response PostChatmessages200JSONResponse) VisitPostChatmessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatmessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatmessagesIdResponseObject interface {
	VisitDeleteChatmessagesIdResponse(w http.ResponseWriter) error
}

type DeleteChatmessagesId200JSONResponse ChatManagerMessagechat

func (response DeleteChatmessagesId200JSONResponse) VisitDeleteChatmessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatmessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatmessagesIdResponseObject interface {
	VisitGetChatmessagesIdResponse(w http.ResponseWriter) error
}

type GetChatmessagesId200JSONResponse ChatManagerMessagechat

func (response GetChatmessagesId200JSONResponse) VisitGetChatmessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroommessagesRequestObject struct {
	Params GetChatroommessagesParams
}

type GetChatroommessagesResponseObject interface {
	VisitGetChatroommessagesResponse(w http.ResponseWriter) error
}

type GetChatroommessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                       `json:"next_page_token,omitempty"`
	Result        *[]ChatManagerMessagechatroom `json:"result,omitempty"`
}

func (response GetChatroommessages200JSONResponse) VisitGetChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatroommessagesRequestObject struct {
	Body *PostChatroommessagesJSONRequestBody
}

type PostChatroommessagesResponseObject interface {
	VisitPostChatroommessagesResponse(w http.ResponseWriter) error
}

type PostChatroommessages200JSONResponse ChatManagerMessagechatroom

func (response PostChatroommessages200JSONResponse) VisitPostChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatroommessagesIdResponseObject interface {
	VisitDeleteChatroommessagesIdResponse(w http.ResponseWriter) error
}

type DeleteChatroommessagesId200JSONResponse ChatManagerMessagechatroom

func (response DeleteChatroommessagesId200JSONResponse) VisitDeleteChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatroommessagesIdResponseObject interface {
	VisitGetChatroommessagesIdResponse(w http.ResponseWriter) error
}

type GetChatroommessagesId200JSONResponse ChatManagerMessagechatroom

func (response GetChatroommessagesId200JSONResponse) VisitGetChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroomsRequestObject struct {
	Params GetChatroomsParams
}

type GetChatroomsResponseObject interface {
	VisitGetChatroomsResponse(w http.ResponseWriter) error
}

type GetChatrooms200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                `json:"next_page_token,omitempty"`
	Result        *[]ChatManagerChatroom `json:"result,omitempty"`
}

func (response GetChatrooms200JSONResponse) VisitGetChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatroomsRequestObject struct {
	Body *PostChatroomsJSONRequestBody
}

type PostChatroomsResponseObject interface {
	VisitPostChatroomsResponse(w http.ResponseWriter) error
}

type PostChatrooms200JSONResponse ChatManagerChatroom

func (response PostChatrooms200JSONResponse) VisitPostChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatroomsIdResponseObject interface {
	VisitDeleteChatroomsIdResponse(w http.ResponseWriter) error
}

type DeleteChatroomsId200JSONResponse ChatManagerChatroom

func (response DeleteChatroomsId200JSONResponse) VisitDeleteChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatroomsIdResponseObject interface {
	VisitGetChatroomsIdResponse(w http.ResponseWriter) error
}

type GetChatroomsId200JSONResponse ChatManagerChatroom

func (response GetChatroomsId200JSONResponse) VisitGetChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatroomsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatroomsIdJSONRequestBody
}

type PutChatroomsIdResponseObject interface {
	VisitPutChatroomsIdResponse(w http.ResponseWriter) error
}

type PutChatroomsId200JSONResponse ChatManagerChatroom

func (response PutChatroomsId200JSONResponse) VisitPutChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatsRequestObject struct {
	Params GetChatsParams
}

type GetChatsResponseObject interface {
	VisitGetChatsResponse(w http.ResponseWriter) error
}

type GetChats200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string            `json:"next_page_token,omitempty"`
	Result        *[]ChatManagerChat `json:"result,omitempty"`
}

func (response GetChats200JSONResponse) VisitGetChatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatsRequestObject struct {
	Body *PostChatsJSONRequestBody
}

type PostChatsResponseObject interface {
	VisitPostChatsResponse(w http.ResponseWriter) error
}

type PostChats200JSONResponse ChatManagerChat

func (response PostChats200JSONResponse) VisitPostChatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatsIdResponseObject interface {
	VisitDeleteChatsIdResponse(w http.ResponseWriter) error
}

type DeleteChatsId200JSONResponse ChatManagerChat

func (response DeleteChatsId200JSONResponse) VisitDeleteChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatsIdResponseObject interface {
	VisitGetChatsIdResponse(w http.ResponseWriter) error
}

type GetChatsId200JSONResponse ChatManagerChat

func (response GetChatsId200JSONResponse) VisitGetChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatsIdJSONRequestBody
}

type PutChatsIdResponseObject interface {
	VisitPutChatsIdResponse(w http.ResponseWriter) error
}

type PutChatsId200JSONResponse ChatManagerChat

func (response PutChatsId200JSONResponse) VisitPutChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatsIdParticipantIdsRequestObject struct {
	Id   string `json:"id"`
	Body *PostChatsIdParticipantIdsJSONRequestBody
}

type PostChatsIdParticipantIdsResponseObject interface {
	VisitPostChatsIdParticipantIdsResponse(w http.ResponseWriter) error
}

type PostChatsIdParticipantIds200JSONResponse ChatManagerChat

func (response PostChatsIdParticipantIds200JSONResponse) VisitPostChatsIdParticipantIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatsIdParticipantIdsParticipantIdRequestObject struct {
	Id            string `json:"id"`
	ParticipantId string `json:"participant_id"`
}

type DeleteChatsIdParticipantIdsParticipantIdResponseObject interface {
	VisitDeleteChatsIdParticipantIdsParticipantIdResponse(w http.ResponseWriter) error
}

type DeleteChatsIdParticipantIdsParticipantId200JSONResponse ChatManagerChat

func (response DeleteChatsIdParticipantIdsParticipantId200JSONResponse) VisitDeleteChatsIdParticipantIdsParticipantIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatsIdRoomOwnerIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatsIdRoomOwnerIdJSONRequestBody
}

type PutChatsIdRoomOwnerIdResponseObject interface {
	VisitPutChatsIdRoomOwnerIdResponse(w http.ResponseWriter) error
}

type PutChatsIdRoomOwnerId200JSONResponse ChatManagerChat

func (response PutChatsIdRoomOwnerId200JSONResponse) VisitPutChatsIdRoomOwnerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencecallsRequestObject struct {
	Params GetConferencecallsParams
}

type GetConferencecallsResponseObject interface {
	VisitGetConferencecallsResponse(w http.ResponseWriter) error
}

type GetConferencecalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                            `json:"next_page_token,omitempty"`
	Result        *[]ConferenceManagerConferencecall `json:"result,omitempty"`
}

func (response GetConferencecalls200JSONResponse) VisitGetConferencecallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConferencecallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteConferencecallsIdResponseObject interface {
	VisitDeleteConferencecallsIdResponse(w http.ResponseWriter) error
}

type DeleteConferencecallsId200JSONResponse ConferenceManagerConferencecall

func (response DeleteConferencecallsId200JSONResponse) VisitDeleteConferencecallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencecallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetConferencecallsIdResponseObject interface {
	VisitGetConferencecallsIdResponse(w http.ResponseWriter) error
}

type GetConferencecallsId200JSONResponse ConferenceManagerConferencecall

func (response GetConferencecallsId200JSONResponse) VisitGetConferencecallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencesRequestObject struct {
	Params GetConferencesParams
}

type GetConferencesResponseObject interface {
	VisitGetConferencesResponse(w http.ResponseWriter) error
}

type GetConferences200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                        `json:"next_page_token,omitempty"`
	Result        *[]ConferenceManagerConference `json:"result,omitempty"`
}

func (response GetConferences200JSONResponse) VisitGetConferencesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostConferencesRequestObject struct {
	Body *PostConferencesJSONRequestBody
}

type PostConferencesResponseObject interface {
	VisitPostConferencesResponse(w http.ResponseWriter) error
}

type PostConferences200JSONResponse ConferenceManagerConference

func (response PostConferences200JSONResponse) VisitPostConferencesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConferencesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteConferencesIdResponseObject interface {
	VisitDeleteConferencesIdResponse(w http.ResponseWriter) error
}

type DeleteConferencesId200JSONResponse ConferenceManagerConference

func (response DeleteConferencesId200JSONResponse) VisitDeleteConferencesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencesIdRequestObject struct {
	Id string `json:"id"`
}

type GetConferencesIdResponseObject interface {
	VisitGetConferencesIdResponse(w http.ResponseWriter) error
}

type GetConferencesId200JSONResponse ConferenceManagerConference

func (response GetConferencesId200JSONResponse) VisitGetConferencesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutConferencesIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutConferencesIdJSONRequestBody
}

type PutConferencesIdResponseObject interface {
	VisitPutConferencesIdResponse(w http.ResponseWriter) error
}

type PutConferencesId200JSONResponse ConferenceManagerConference

func (response PutConferencesId200JSONResponse) VisitPutConferencesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencesIdMediaStreamRequestObject struct {
	Id     string `json:"id"`
	Params GetConferencesIdMediaStreamParams
}

type GetConferencesIdMediaStreamResponseObject interface {
	VisitGetConferencesIdMediaStreamResponse(w http.ResponseWriter) error
}

type GetConferencesIdMediaStream200Response struct {
}

func (response GetConferencesIdMediaStream200Response) VisitGetConferencesIdMediaStreamResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdRecordingStartRequestObject struct {
	Id string `json:"id"`
}

type PostConferencesIdRecordingStartResponseObject interface {
	VisitPostConferencesIdRecordingStartResponse(w http.ResponseWriter) error
}

type PostConferencesIdRecordingStart200Response struct {
}

func (response PostConferencesIdRecordingStart200Response) VisitPostConferencesIdRecordingStartResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdRecordingStopRequestObject struct {
	Id string `json:"id"`
}

type PostConferencesIdRecordingStopResponseObject interface {
	VisitPostConferencesIdRecordingStopResponse(w http.ResponseWriter) error
}

type PostConferencesIdRecordingStop200Response struct {
}

func (response PostConferencesIdRecordingStop200Response) VisitPostConferencesIdRecordingStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdTranscribeStartRequestObject struct {
	Id   string `json:"id"`
	Body *PostConferencesIdTranscribeStartJSONRequestBody
}

type PostConferencesIdTranscribeStartResponseObject interface {
	VisitPostConferencesIdTranscribeStartResponse(w http.ResponseWriter) error
}

type PostConferencesIdTranscribeStart200Response struct {
}

func (response PostConferencesIdTranscribeStart200Response) VisitPostConferencesIdTranscribeStartResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdTranscribeStopRequestObject struct {
	Id string `json:"id"`
}

type PostConferencesIdTranscribeStopResponseObject interface {
	VisitPostConferencesIdTranscribeStopResponse(w http.ResponseWriter) error
}

type PostConferencesIdTranscribeStop200Response struct {
}

func (response PostConferencesIdTranscribeStop200Response) VisitPostConferencesIdTranscribeStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(ctx context.Context, request GetAccesskeysRequestObject) (GetAccesskeysResponseObject, error)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(ctx context.Context, request PostAccesskeysRequestObject) (PostAccesskeysResponseObject, error)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(ctx context.Context, request DeleteAccesskeysIdRequestObject) (DeleteAccesskeysIdResponseObject, error)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(ctx context.Context, request GetAccesskeysIdRequestObject) (GetAccesskeysIdResponseObject, error)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(ctx context.Context, request PutAccesskeysIdRequestObject) (PutAccesskeysIdResponseObject, error)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(ctx context.Context, request GetActiveflowsRequestObject) (GetActiveflowsResponseObject, error)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(ctx context.Context, request PostActiveflowsRequestObject) (PostActiveflowsResponseObject, error)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(ctx context.Context, request DeleteActiveflowsIdRequestObject) (DeleteActiveflowsIdResponseObject, error)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(ctx context.Context, request GetActiveflowsIdRequestObject) (GetActiveflowsIdResponseObject, error)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(ctx context.Context, request PostActiveflowsIdStopRequestObject) (PostActiveflowsIdStopResponseObject, error)
	// List agents
	// (GET /agents)
	GetAgents(ctx context.Context, request GetAgentsRequestObject) (GetAgentsResponseObject, error)
	// Create a new agent
	// (POST /agents)
	PostAgents(ctx context.Context, request PostAgentsRequestObject) (PostAgentsResponseObject, error)
	// Delete the agent
	// (DELETE /agents/{id})
	DeleteAgentsId(ctx context.Context, request DeleteAgentsIdRequestObject) (DeleteAgentsIdResponseObject, error)
	// Get the agent
	// (GET /agents/{id})
	GetAgentsId(ctx context.Context, request GetAgentsIdRequestObject) (GetAgentsIdResponseObject, error)
	// Update an agent
	// (PUT /agents/{id})
	PutAgentsId(ctx context.Context, request PutAgentsIdRequestObject) (PutAgentsIdResponseObject, error)
	// Update an agent's addresses
	// (PUT /agents/{id}/addresses)
	PutAgentsIdAddresses(ctx context.Context, request PutAgentsIdAddressesRequestObject) (PutAgentsIdAddressesResponseObject, error)
	// Update an agent's password
	// (PUT /agents/{id}/password)
	PutAgentsIdPassword(ctx context.Context, request PutAgentsIdPasswordRequestObject) (PutAgentsIdPasswordResponseObject, error)
	// Update an agent's permission
	// (PUT /agents/{id}/permission)
	PutAgentsIdPermission(ctx context.Context, request PutAgentsIdPermissionRequestObject) (PutAgentsIdPermissionResponseObject, error)
	// Update an agent's status
	// (PUT /agents/{id}/status)
	PutAgentsIdStatus(ctx context.Context, request PutAgentsIdStatusRequestObject) (PutAgentsIdStatusResponseObject, error)
	// Update an agent's tag IDs
	// (PUT /agents/{id}/tag_ids)
	PutAgentsIdTagIds(ctx context.Context, request PutAgentsIdTagIdsRequestObject) (PutAgentsIdTagIdsResponseObject, error)
	// List available numbers
	// (GET /available_numbers)
	GetAvailableNumbers(ctx context.Context, request GetAvailableNumbersRequestObject) (GetAvailableNumbersResponseObject, error)
	// Get list of billing accounts
	// (GET /billing_accounts)
	GetBillingAccounts(ctx context.Context, request GetBillingAccountsRequestObject) (GetBillingAccountsResponseObject, error)
	// Create a new billing account
	// (POST /billing_accounts)
	PostBillingAccounts(ctx context.Context, request PostBillingAccountsRequestObject) (PostBillingAccountsResponseObject, error)
	// Delete billing account
	// (DELETE /billing_accounts/{id})
	DeleteBillingAccountsId(ctx context.Context, request DeleteBillingAccountsIdRequestObject) (DeleteBillingAccountsIdResponseObject, error)
	// Get detailed billing account info
	// (GET /billing_accounts/{id})
	GetBillingAccountsId(ctx context.Context, request GetBillingAccountsIdRequestObject) (GetBillingAccountsIdResponseObject, error)
	// Update billing account
	// (PUT /billing_accounts/{id})
	PutBillingAccountsId(ctx context.Context, request PutBillingAccountsIdRequestObject) (PutBillingAccountsIdResponseObject, error)
	// Add balance to billing account
	// (POST /billing_accounts/{id}/balance_add_force)
	PostBillingAccountsIdBalanceAddForce(ctx context.Context, request PostBillingAccountsIdBalanceAddForceRequestObject) (PostBillingAccountsIdBalanceAddForceResponseObject, error)
	// Subtract balance from billing account
	// (POST /billing_accounts/{id}/balance_subtract_force)
	PostBillingAccountsIdBalanceSubtractForce(ctx context.Context, request PostBillingAccountsIdBalanceSubtractForceRequestObject) (PostBillingAccountsIdBalanceSubtractForceResponseObject, error)
	// Update billing account's payment info
	// (PUT /billing_accounts/{id}/payment_info)
	PutBillingAccountsIdPaymentInfo(ctx context.Context, request PutBillingAccountsIdPaymentInfoRequestObject) (PutBillingAccountsIdPaymentInfoResponseObject, error)
	// Get list of billings
	// (GET /billings)
	GetBillings(ctx context.Context, request GetBillingsRequestObject) (GetBillingsResponseObject, error)
	// Get list of calls
	// (GET /calls)
	GetCalls(ctx context.Context, request GetCallsRequestObject) (GetCallsResponseObject, error)
	// Make an outbound call
	// (POST /calls)
	PostCalls(ctx context.Context, request PostCallsRequestObject) (PostCallsResponseObject, error)
	// Delete up the call
	// (DELETE /calls/{id})
	DeleteCallsId(ctx context.Context, request DeleteCallsIdRequestObject) (DeleteCallsIdResponseObject, error)
	// Get detail call info
	// (GET /calls/{id})
	GetCallsId(ctx context.Context, request GetCallsIdRequestObject) (GetCallsIdResponseObject, error)
	// Hang up the call
	// (POST /calls/{id}/hangup)
	PostCallsIdHangup(ctx context.Context, request PostCallsIdHangupRequestObject) (PostCallsIdHangupResponseObject, error)
	// Unhold the call
	// (DELETE /calls/{id}/hold)
	DeleteCallsIdHold(ctx context.Context, request DeleteCallsIdHoldRequestObject) (DeleteCallsIdHoldResponseObject, error)
	// Hold the call
	// (POST /calls/{id}/hold)
	PostCallsIdHold(ctx context.Context, request PostCallsIdHoldRequestObject) (PostCallsIdHoldResponseObject, error)
	// Get media stream for the call
	// (GET /calls/{id}/media_stream)
	GetCallsIdMediaStream(ctx context.Context, request GetCallsIdMediaStreamRequestObject) (GetCallsIdMediaStreamResponseObject, error)
	// Disable Music on Hold (MOH)
	// (DELETE /calls/{id}/moh)
	DeleteCallsIdMoh(ctx context.Context, request DeleteCallsIdMohRequestObject) (DeleteCallsIdMohResponseObject, error)
	// Enable Music on Hold (MOH)
	// (POST /calls/{id}/moh)
	PostCallsIdMoh(ctx context.Context, request PostCallsIdMohRequestObject) (PostCallsIdMohResponseObject, error)
	// Unmute the call
	// (DELETE /calls/{id}/mute)
	DeleteCallsIdMute(ctx context.Context, request DeleteCallsIdMuteRequestObject) (DeleteCallsIdMuteResponseObject, error)
	// Mute the call
	// (POST /calls/{id}/mute)
	PostCallsIdMute(ctx context.Context, request PostCallsIdMuteRequestObject) (PostCallsIdMuteResponseObject, error)
	// Un-silence a call
	// (DELETE /calls/{id}/silence)
	DeleteCallsIdSilence(ctx context.Context, request DeleteCallsIdSilenceRequestObject) (DeleteCallsIdSilenceResponseObject, error)
	// Silence a call
	// (POST /calls/{id}/silence)
	PostCallsIdSilence(ctx context.Context, request PostCallsIdSilenceRequestObject) (PostCallsIdSilenceResponseObject, error)
	// Talk to the call
	// (POST /calls/{id}/talk)
	PostCallsIdTalk(ctx context.Context, request PostCallsIdTalkRequestObject) (PostCallsIdTalkResponseObject, error)
	// Get list of campaign calls
	// (GET /campaigncalls)
	GetCampaigncalls(ctx context.Context, request GetCampaigncallsRequestObject) (GetCampaigncallsResponseObject, error)
	// Delete a campaign call
	// (DELETE /campaigncalls/{id})
	DeleteCampaigncallsId(ctx context.Context, request DeleteCampaigncallsIdRequestObject) (DeleteCampaigncallsIdResponseObject, error)
	// Get campaign call details
	// (GET /campaigncalls/{id})
	GetCampaigncallsId(ctx context.Context, request GetCampaigncallsIdRequestObject) (GetCampaigncallsIdResponseObject, error)
	// Get a list of campaigns
	// (GET /campaigns)
	GetCampaigns(ctx context.Context, request GetCampaignsRequestObject) (GetCampaignsResponseObject, error)
	// Create a new campaign
	// (POST /campaigns)
	PostCampaigns(ctx context.Context, request PostCampaignsRequestObject) (PostCampaignsResponseObject, error)
	// Delete a campaign
	// (DELETE /campaigns/{id})
	DeleteCampaignsId(ctx context.Context, request DeleteCampaignsIdRequestObject) (DeleteCampaignsIdResponseObject, error)
	// Get campaign details
	// (GET /campaigns/{id})
	GetCampaignsId(ctx context.Context, request GetCampaignsIdRequestObject) (GetCampaignsIdResponseObject, error)
	// Update a campaign
	// (PUT /campaigns/{id})
	PutCampaignsId(ctx context.Context, request PutCampaignsIdRequestObject) (PutCampaignsIdResponseObject, error)
	// Update campaign's actions
	// (PUT /campaigns/{id}/actions)
	PutCampaignsIdActions(ctx context.Context, request PutCampaignsIdActionsRequestObject) (PutCampaignsIdActionsResponseObject, error)
	// Update campaign's actions
	// (GET /campaigns/{id}/campaigncalls)
	GetCampaignsIdCampaigncalls(ctx context.Context, request GetCampaignsIdCampaigncallsRequestObject) (GetCampaignsIdCampaigncallsResponseObject, error)
	// Update campaign's service level
	// (PUT /campaigns/{id}/next_campaign_id)
	PutCampaignsIdNextCampaignId(ctx context.Context, request PutCampaignsIdNextCampaignIdRequestObject) (PutCampaignsIdNextCampaignIdResponseObject, error)
	// Update campaign's resource info
	// (PUT /campaigns/{id}/resource_info)
	PutCampaignsIdResourceInfo(ctx context.Context, request PutCampaignsIdResourceInfoRequestObject) (PutCampaignsIdResourceInfoResponseObject, error)
	// Update campaign's service level
	// (PUT /campaigns/{id}/service_level)
	PutCampaignsIdServiceLevel(ctx context.Context, request PutCampaignsIdServiceLevelRequestObject) (PutCampaignsIdServiceLevelResponseObject, error)
	// Update campaign status
	// (PUT /campaigns/{id}/status)
	PutCampaignsIdStatus(ctx context.Context, request PutCampaignsIdStatusRequestObject) (PutCampaignsIdStatusResponseObject, error)
	// Gets a list of chatbot calls
	// (GET /chatbotcalls)
	GetChatbotcalls(ctx context.Context, request GetChatbotcallsRequestObject) (GetChatbotcallsResponseObject, error)
	// Delete a specific chatbot call
	// (DELETE /chatbotcalls/{id})
	DeleteChatbotcallsId(ctx context.Context, request DeleteChatbotcallsIdRequestObject) (DeleteChatbotcallsIdResponseObject, error)
	// Get details of a specific chatbot call
	// (GET /chatbotcalls/{id})
	GetChatbotcallsId(ctx context.Context, request GetChatbotcallsIdRequestObject) (GetChatbotcallsIdResponseObject, error)
	// Gets a list of chatbots.
	// (GET /chatbots)
	GetChatbots(ctx context.Context, request GetChatbotsRequestObject) (GetChatbotsResponseObject, error)
	// Create a new chatbot.
	// (POST /chatbots)
	PostChatbots(ctx context.Context, request PostChatbotsRequestObject) (PostChatbotsResponseObject, error)
	// Delete a chatbot.
	// (DELETE /chatbots/{id})
	DeleteChatbotsId(ctx context.Context, request DeleteChatbotsIdRequestObject) (DeleteChatbotsIdResponseObject, error)
	// Get chatbot details.
	// (GET /chatbots/{id})
	GetChatbotsId(ctx context.Context, request GetChatbotsIdRequestObject) (GetChatbotsIdResponseObject, error)
	// Update a chatbot.
	// (PUT /chatbots/{id})
	PutChatbotsId(ctx context.Context, request PutChatbotsIdRequestObject) (PutChatbotsIdResponseObject, error)
	// Retrieve a list of chat messages
	// (GET /chatmessages)
	GetChatmessages(ctx context.Context, request GetChatmessagesRequestObject) (GetChatmessagesResponseObject, error)
	// Create a new chat message
	// (POST /chatmessages)
	PostChatmessages(ctx context.Context, request PostChatmessagesRequestObject) (PostChatmessagesResponseObject, error)
	// Delete a chat message
	// (DELETE /chatmessages/{id})
	DeleteChatmessagesId(ctx context.Context, request DeleteChatmessagesIdRequestObject) (DeleteChatmessagesIdResponseObject, error)
	// Retrieve details of a chat message
	// (GET /chatmessages/{id})
	GetChatmessagesId(ctx context.Context, request GetChatmessagesIdRequestObject) (GetChatmessagesIdResponseObject, error)
	// Retrieve a list of chatroom messages
	// (GET /chatroommessages)
	GetChatroommessages(ctx context.Context, request GetChatroommessagesRequestObject) (GetChatroommessagesResponseObject, error)
	// Create a new chatroom message
	// (POST /chatroommessages)
	PostChatroommessages(ctx context.Context, request PostChatroommessagesRequestObject) (PostChatroommessagesResponseObject, error)
	// Delete a chatroom message
	// (DELETE /chatroommessages/{id})
	DeleteChatroommessagesId(ctx context.Context, request DeleteChatroommessagesIdRequestObject) (DeleteChatroommessagesIdResponseObject, error)
	// Get details of a specific chatroom message
	// (GET /chatroommessages/{id})
	GetChatroommessagesId(ctx context.Context, request GetChatroommessagesIdRequestObject) (GetChatroommessagesIdResponseObject, error)
	// Gets a list of chatrooms.
	// (GET /chatrooms)
	GetChatrooms(ctx context.Context, request GetChatroomsRequestObject) (GetChatroomsResponseObject, error)
	// Create a new chatroom.
	// (POST /chatrooms)
	PostChatrooms(ctx context.Context, request PostChatroomsRequestObject) (PostChatroomsResponseObject, error)
	// Delete a chatroom.
	// (DELETE /chatrooms/{id})
	DeleteChatroomsId(ctx context.Context, request DeleteChatroomsIdRequestObject) (DeleteChatroomsIdResponseObject, error)
	// Get chatroom details.
	// (GET /chatrooms/{id})
	GetChatroomsId(ctx context.Context, request GetChatroomsIdRequestObject) (GetChatroomsIdResponseObject, error)
	// Update a chatroom.
	// (PUT /chatrooms/{id})
	PutChatroomsId(ctx context.Context, request PutChatroomsIdRequestObject) (PutChatroomsIdResponseObject, error)
	// Gets a list of chats.
	// (GET /chats)
	GetChats(ctx context.Context, request GetChatsRequestObject) (GetChatsResponseObject, error)
	// Create a new chat.
	// (POST /chats)
	PostChats(ctx context.Context, request PostChatsRequestObject) (PostChatsResponseObject, error)
	// Delete a chat.
	// (DELETE /chats/{id})
	DeleteChatsId(ctx context.Context, request DeleteChatsIdRequestObject) (DeleteChatsIdResponseObject, error)
	// Get details of a specific chat.
	// (GET /chats/{id})
	GetChatsId(ctx context.Context, request GetChatsIdRequestObject) (GetChatsIdResponseObject, error)
	// Update a chat.
	// (PUT /chats/{id})
	PutChatsId(ctx context.Context, request PutChatsIdRequestObject) (PutChatsIdResponseObject, error)
	// Add a participant to a chat.
	// (POST /chats/{id}/participant_ids)
	PostChatsIdParticipantIds(ctx context.Context, request PostChatsIdParticipantIdsRequestObject) (PostChatsIdParticipantIdsResponseObject, error)
	// Remove a participant from a chat.
	// (DELETE /chats/{id}/participant_ids/{participant_id})
	DeleteChatsIdParticipantIdsParticipantId(ctx context.Context, request DeleteChatsIdParticipantIdsParticipantIdRequestObject) (DeleteChatsIdParticipantIdsParticipantIdResponseObject, error)
	// Update the room owner of a chat.
	// (PUT /chats/{id}/room_owner_id)
	PutChatsIdRoomOwnerId(ctx context.Context, request PutChatsIdRoomOwnerIdRequestObject) (PutChatsIdRoomOwnerIdResponseObject, error)
	// Get list of conference calls
	// (GET /conferencecalls)
	GetConferencecalls(ctx context.Context, request GetConferencecallsRequestObject) (GetConferencecallsResponseObject, error)
	// Remove a conference call
	// (DELETE /conferencecalls/{id})
	DeleteConferencecallsId(ctx context.Context, request DeleteConferencecallsIdRequestObject) (DeleteConferencecallsIdResponseObject, error)
	// Get conference call details
	// (GET /conferencecalls/{id})
	GetConferencecallsId(ctx context.Context, request GetConferencecallsIdRequestObject) (GetConferencecallsIdResponseObject, error)
	// Get list of conferences
	// (GET /conferences)
	GetConferences(ctx context.Context, request GetConferencesRequestObject) (GetConferencesResponseObject, error)
	// Create a new conference
	// (POST /conferences)
	PostConferences(ctx context.Context, request PostConferencesRequestObject) (PostConferencesResponseObject, error)
	// Delete a conference
	// (DELETE /conferences/{id})
	DeleteConferencesId(ctx context.Context, request DeleteConferencesIdRequestObject) (DeleteConferencesIdResponseObject, error)
	// Get conference details
	// (GET /conferences/{id})
	GetConferencesId(ctx context.Context, request GetConferencesIdRequestObject) (GetConferencesIdResponseObject, error)
	// Update conference details
	// (PUT /conferences/{id})
	PutConferencesId(ctx context.Context, request PutConferencesIdRequestObject) (PutConferencesIdResponseObject, error)
	// Start media streaming for a conference
	// (GET /conferences/{id}/media_stream)
	GetConferencesIdMediaStream(ctx context.Context, request GetConferencesIdMediaStreamRequestObject) (GetConferencesIdMediaStreamResponseObject, error)
	// Start conference recording
	// (POST /conferences/{id}/recording_start)
	PostConferencesIdRecordingStart(ctx context.Context, request PostConferencesIdRecordingStartRequestObject) (PostConferencesIdRecordingStartResponseObject, error)
	// Stop conference recording
	// (POST /conferences/{id}/recording_stop)
	PostConferencesIdRecordingStop(ctx context.Context, request PostConferencesIdRecordingStopRequestObject) (PostConferencesIdRecordingStopResponseObject, error)
	// Start conference transcription
	// (POST /conferences/{id}/transcribe_start)
	PostConferencesIdTranscribeStart(ctx context.Context, request PostConferencesIdTranscribeStartRequestObject) (PostConferencesIdTranscribeStartResponseObject, error)
	// Stop conference transcription
	// (POST /conferences/{id}/transcribe_stop)
	PostConferencesIdTranscribeStop(ctx context.Context, request PostConferencesIdTranscribeStopRequestObject) (PostConferencesIdTranscribeStopResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAccesskeys operation middleware
func (sh *strictHandler) GetAccesskeys(ctx *gin.Context, params GetAccesskeysParams) {
	var request GetAccesskeysRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeys(ctx, request.(GetAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAccesskeys operation middleware
func (sh *strictHandler) PostAccesskeys(ctx *gin.Context) {
	var request PostAccesskeysRequestObject

	var body PostAccesskeysJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccesskeys(ctx, request.(PostAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAccesskeysResponseObject); ok {
		if err := validResponse.VisitPostAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccesskeysId operation middleware
func (sh *strictHandler) DeleteAccesskeysId(ctx *gin.Context, id string) {
	var request DeleteAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccesskeysId(ctx, request.(DeleteAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitDeleteAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccesskeysId operation middleware
func (sh *strictHandler) GetAccesskeysId(ctx *gin.Context, id string) {
	var request GetAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeysId(ctx, request.(GetAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAccesskeysId operation middleware
func (sh *strictHandler) PutAccesskeysId(ctx *gin.Context, id string) {
	var request PutAccesskeysIdRequestObject

	request.Id = id

	var body PutAccesskeysIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAccesskeysId(ctx, request.(PutAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitPutAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflows operation middleware
func (sh *strictHandler) GetActiveflows(ctx *gin.Context, params GetActiveflowsParams) {
	var request GetActiveflowsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflows(ctx, request.(GetActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflows operation middleware
func (sh *strictHandler) PostActiveflows(ctx *gin.Context) {
	var request PostActiveflowsRequestObject

	var body PostActiveflowsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflows(ctx, request.(PostActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteActiveflowsId operation middleware
func (sh *strictHandler) DeleteActiveflowsId(ctx *gin.Context, id string) {
	var request DeleteActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActiveflowsId(ctx, request.(DeleteActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitDeleteActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflowsId operation middleware
func (sh *strictHandler) GetActiveflowsId(ctx *gin.Context, id string) {
	var request GetActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflowsId(ctx, request.(GetActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflowsIdStop operation middleware
func (sh *strictHandler) PostActiveflowsIdStop(ctx *gin.Context, id string) {
	var request PostActiveflowsIdStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflowsIdStop(ctx, request.(PostActiveflowsIdStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflowsIdStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsIdStopResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsIdStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgents operation middleware
func (sh *strictHandler) GetAgents(ctx *gin.Context, params GetAgentsParams) {
	var request GetAgentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgents(ctx, request.(GetAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAgentsResponseObject); ok {
		if err := validResponse.VisitGetAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAgents operation middleware
func (sh *strictHandler) PostAgents(ctx *gin.Context) {
	var request PostAgentsRequestObject

	var body PostAgentsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAgents(ctx, request.(PostAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAgentsResponseObject); ok {
		if err := validResponse.VisitPostAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAgentsId operation middleware
func (sh *strictHandler) DeleteAgentsId(ctx *gin.Context, id string) {
	var request DeleteAgentsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAgentsId(ctx, request.(DeleteAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAgentsIdResponseObject); ok {
		if err := validResponse.VisitDeleteAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgentsId operation middleware
func (sh *strictHandler) GetAgentsId(ctx *gin.Context, id string) {
	var request GetAgentsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgentsId(ctx, request.(GetAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAgentsIdResponseObject); ok {
		if err := validResponse.VisitGetAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsId operation middleware
func (sh *strictHandler) PutAgentsId(ctx *gin.Context, id string) {
	var request PutAgentsIdRequestObject

	request.Id = id

	var body PutAgentsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsId(ctx, request.(PutAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdAddresses operation middleware
func (sh *strictHandler) PutAgentsIdAddresses(ctx *gin.Context, id string) {
	var request PutAgentsIdAddressesRequestObject

	request.Id = id

	var body PutAgentsIdAddressesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdAddresses(ctx, request.(PutAgentsIdAddressesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdAddresses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdAddressesResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdAddressesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdPassword operation middleware
func (sh *strictHandler) PutAgentsIdPassword(ctx *gin.Context, id string) {
	var request PutAgentsIdPasswordRequestObject

	request.Id = id

	var body PutAgentsIdPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdPassword(ctx, request.(PutAgentsIdPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdPasswordResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdPermission operation middleware
func (sh *strictHandler) PutAgentsIdPermission(ctx *gin.Context, id string) {
	var request PutAgentsIdPermissionRequestObject

	request.Id = id

	var body PutAgentsIdPermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdPermission(ctx, request.(PutAgentsIdPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdPermissionResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdStatus operation middleware
func (sh *strictHandler) PutAgentsIdStatus(ctx *gin.Context, id string) {
	var request PutAgentsIdStatusRequestObject

	request.Id = id

	var body PutAgentsIdStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdStatus(ctx, request.(PutAgentsIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdStatusResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdTagIds operation middleware
func (sh *strictHandler) PutAgentsIdTagIds(ctx *gin.Context, id string) {
	var request PutAgentsIdTagIdsRequestObject

	request.Id = id

	var body PutAgentsIdTagIdsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdTagIds(ctx, request.(PutAgentsIdTagIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdTagIds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdTagIdsResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdTagIdsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAvailableNumbers operation middleware
func (sh *strictHandler) GetAvailableNumbers(ctx *gin.Context, params GetAvailableNumbersParams) {
	var request GetAvailableNumbersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAvailableNumbers(ctx, request.(GetAvailableNumbersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAvailableNumbers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAvailableNumbersResponseObject); ok {
		if err := validResponse.VisitGetAvailableNumbersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBillingAccounts operation middleware
func (sh *strictHandler) GetBillingAccounts(ctx *gin.Context, params GetBillingAccountsParams) {
	var request GetBillingAccountsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBillingAccounts(ctx, request.(GetBillingAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBillingAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBillingAccountsResponseObject); ok {
		if err := validResponse.VisitGetBillingAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccounts operation middleware
func (sh *strictHandler) PostBillingAccounts(ctx *gin.Context) {
	var request PostBillingAccountsRequestObject

	var body PostBillingAccountsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccounts(ctx, request.(PostBillingAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteBillingAccountsId operation middleware
func (sh *strictHandler) DeleteBillingAccountsId(ctx *gin.Context, id string) {
	var request DeleteBillingAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBillingAccountsId(ctx, request.(DeleteBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitDeleteBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBillingAccountsId operation middleware
func (sh *strictHandler) GetBillingAccountsId(ctx *gin.Context, id string) {
	var request GetBillingAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBillingAccountsId(ctx, request.(GetBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitGetBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutBillingAccountsId operation middleware
func (sh *strictHandler) PutBillingAccountsId(ctx *gin.Context, id string) {
	var request PutBillingAccountsIdRequestObject

	request.Id = id

	var body PutBillingAccountsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBillingAccountsId(ctx, request.(PutBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitPutBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccountsIdBalanceAddForce operation middleware
func (sh *strictHandler) PostBillingAccountsIdBalanceAddForce(ctx *gin.Context, id string) {
	var request PostBillingAccountsIdBalanceAddForceRequestObject

	request.Id = id

	var body PostBillingAccountsIdBalanceAddForceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccountsIdBalanceAddForce(ctx, request.(PostBillingAccountsIdBalanceAddForceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccountsIdBalanceAddForce")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsIdBalanceAddForceResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsIdBalanceAddForceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccountsIdBalanceSubtractForce operation middleware
func (sh *strictHandler) PostBillingAccountsIdBalanceSubtractForce(ctx *gin.Context, id string) {
	var request PostBillingAccountsIdBalanceSubtractForceRequestObject

	request.Id = id

	var body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccountsIdBalanceSubtractForce(ctx, request.(PostBillingAccountsIdBalanceSubtractForceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccountsIdBalanceSubtractForce")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsIdBalanceSubtractForceResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsIdBalanceSubtractForceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutBillingAccountsIdPaymentInfo operation middleware
func (sh *strictHandler) PutBillingAccountsIdPaymentInfo(ctx *gin.Context, id string) {
	var request PutBillingAccountsIdPaymentInfoRequestObject

	request.Id = id

	var body PutBillingAccountsIdPaymentInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBillingAccountsIdPaymentInfo(ctx, request.(PutBillingAccountsIdPaymentInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBillingAccountsIdPaymentInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutBillingAccountsIdPaymentInfoResponseObject); ok {
		if err := validResponse.VisitPutBillingAccountsIdPaymentInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBillings operation middleware
func (sh *strictHandler) GetBillings(ctx *gin.Context, params GetBillingsParams) {
	var request GetBillingsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBillings(ctx, request.(GetBillingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBillings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBillingsResponseObject); ok {
		if err := validResponse.VisitGetBillingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCalls operation middleware
func (sh *strictHandler) GetCalls(ctx *gin.Context, params GetCallsParams) {
	var request GetCallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCalls(ctx, request.(GetCallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsResponseObject); ok {
		if err := validResponse.VisitGetCallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCalls operation middleware
func (sh *strictHandler) PostCalls(ctx *gin.Context) {
	var request PostCallsRequestObject

	var body PostCallsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCalls(ctx, request.(PostCallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsResponseObject); ok {
		if err := validResponse.VisitPostCallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsId operation middleware
func (sh *strictHandler) DeleteCallsId(ctx *gin.Context, id string) {
	var request DeleteCallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsId(ctx, request.(DeleteCallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCallsId operation middleware
func (sh *strictHandler) GetCallsId(ctx *gin.Context, id string) {
	var request GetCallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallsId(ctx, request.(GetCallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsIdResponseObject); ok {
		if err := validResponse.VisitGetCallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdHangup operation middleware
func (sh *strictHandler) PostCallsIdHangup(ctx *gin.Context, id string) {
	var request PostCallsIdHangupRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdHangup(ctx, request.(PostCallsIdHangupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdHangup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdHangupResponseObject); ok {
		if err := validResponse.VisitPostCallsIdHangupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdHold operation middleware
func (sh *strictHandler) DeleteCallsIdHold(ctx *gin.Context, id string) {
	var request DeleteCallsIdHoldRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdHold(ctx, request.(DeleteCallsIdHoldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdHold")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdHoldResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdHoldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdHold operation middleware
func (sh *strictHandler) PostCallsIdHold(ctx *gin.Context, id string) {
	var request PostCallsIdHoldRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdHold(ctx, request.(PostCallsIdHoldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdHold")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdHoldResponseObject); ok {
		if err := validResponse.VisitPostCallsIdHoldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCallsIdMediaStream operation middleware
func (sh *strictHandler) GetCallsIdMediaStream(ctx *gin.Context, id string, params GetCallsIdMediaStreamParams) {
	var request GetCallsIdMediaStreamRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallsIdMediaStream(ctx, request.(GetCallsIdMediaStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallsIdMediaStream")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsIdMediaStreamResponseObject); ok {
		if err := validResponse.VisitGetCallsIdMediaStreamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdMoh operation middleware
func (sh *strictHandler) DeleteCallsIdMoh(ctx *gin.Context, id string) {
	var request DeleteCallsIdMohRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdMoh(ctx, request.(DeleteCallsIdMohRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdMoh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdMohResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdMohResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdMoh operation middleware
func (sh *strictHandler) PostCallsIdMoh(ctx *gin.Context, id string) {
	var request PostCallsIdMohRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdMoh(ctx, request.(PostCallsIdMohRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdMoh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdMohResponseObject); ok {
		if err := validResponse.VisitPostCallsIdMohResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdMute operation middleware
func (sh *strictHandler) DeleteCallsIdMute(ctx *gin.Context, id string) {
	var request DeleteCallsIdMuteRequestObject

	request.Id = id

	var body DeleteCallsIdMuteJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdMute(ctx, request.(DeleteCallsIdMuteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdMute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdMuteResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdMuteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdMute operation middleware
func (sh *strictHandler) PostCallsIdMute(ctx *gin.Context, id string) {
	var request PostCallsIdMuteRequestObject

	request.Id = id

	var body PostCallsIdMuteJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdMute(ctx, request.(PostCallsIdMuteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdMute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdMuteResponseObject); ok {
		if err := validResponse.VisitPostCallsIdMuteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdSilence operation middleware
func (sh *strictHandler) DeleteCallsIdSilence(ctx *gin.Context, id string) {
	var request DeleteCallsIdSilenceRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdSilence(ctx, request.(DeleteCallsIdSilenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdSilence")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdSilenceResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdSilenceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdSilence operation middleware
func (sh *strictHandler) PostCallsIdSilence(ctx *gin.Context, id string) {
	var request PostCallsIdSilenceRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdSilence(ctx, request.(PostCallsIdSilenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdSilence")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdSilenceResponseObject); ok {
		if err := validResponse.VisitPostCallsIdSilenceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdTalk operation middleware
func (sh *strictHandler) PostCallsIdTalk(ctx *gin.Context, id string) {
	var request PostCallsIdTalkRequestObject

	request.Id = id

	var body PostCallsIdTalkJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdTalk(ctx, request.(PostCallsIdTalkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdTalk")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdTalkResponseObject); ok {
		if err := validResponse.VisitPostCallsIdTalkResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigncalls operation middleware
func (sh *strictHandler) GetCampaigncalls(ctx *gin.Context, params GetCampaigncallsParams) {
	var request GetCampaigncallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigncalls(ctx, request.(GetCampaigncallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigncalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaigncallsResponseObject); ok {
		if err := validResponse.VisitGetCampaigncallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCampaigncallsId operation middleware
func (sh *strictHandler) DeleteCampaigncallsId(ctx *gin.Context, id string) {
	var request DeleteCampaigncallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCampaigncallsId(ctx, request.(DeleteCampaigncallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCampaigncallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCampaigncallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCampaigncallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigncallsId operation middleware
func (sh *strictHandler) GetCampaigncallsId(ctx *gin.Context, id string) {
	var request GetCampaigncallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigncallsId(ctx, request.(GetCampaigncallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigncallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaigncallsIdResponseObject); ok {
		if err := validResponse.VisitGetCampaigncallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigns operation middleware
func (sh *strictHandler) GetCampaigns(ctx *gin.Context, params GetCampaignsParams) {
	var request GetCampaignsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigns(ctx, request.(GetCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaignsResponseObject); ok {
		if err := validResponse.VisitGetCampaignsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCampaigns operation middleware
func (sh *strictHandler) PostCampaigns(ctx *gin.Context) {
	var request PostCampaignsRequestObject

	var body PostCampaignsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCampaigns(ctx, request.(PostCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCampaignsResponseObject); ok {
		if err := validResponse.VisitPostCampaignsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCampaignsId operation middleware
func (sh *strictHandler) DeleteCampaignsId(ctx *gin.Context, id string) {
	var request DeleteCampaignsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCampaignsId(ctx, request.(DeleteCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCampaignsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaignsId operation middleware
func (sh *strictHandler) GetCampaignsId(ctx *gin.Context, id string) {
	var request GetCampaignsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaignsId(ctx, request.(GetCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaignsIdResponseObject); ok {
		if err := validResponse.VisitGetCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsId operation middleware
func (sh *strictHandler) PutCampaignsId(ctx *gin.Context, id string) {
	var request PutCampaignsIdRequestObject

	request.Id = id

	var body PutCampaignsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsId(ctx, request.(PutCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsIdActions operation middleware
func (sh *strictHandler) PutCampaignsIdActions(ctx *gin.Context, id string) {
	var request PutCampaignsIdActionsRequestObject

	request.Id = id

	var body PutCampaignsIdActionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsIdActions(ctx, request.(PutCampaignsIdActionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsIdActions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdActionsResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdActionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaignsIdCampaigncalls operation middleware
func (sh *strictHandler) GetCampaignsIdCampaigncalls(ctx *gin.Context, id string, params GetCampaignsIdCampaigncallsParams) {
	var request GetCampaignsIdCampaigncallsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaignsIdCampaigncalls(ctx, request.(GetCampaignsIdCampaigncallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaignsIdCampaigncalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaignsIdCampaigncallsResponseObject); ok {
		if err := validResponse.VisitGetCampaignsIdCampaigncallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsIdNextCampaignId operation middleware
func (sh *strictHandler) PutCampaignsIdNextCampaignId(ctx *gin.Context, id string) {
	var request PutCampaignsIdNextCampaignIdRequestObject

	request.Id = id

	var body PutCampaignsIdNextCampaignIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsIdNextCampaignId(ctx, request.(PutCampaignsIdNextCampaignIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsIdNextCampaignId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdNextCampaignIdResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdNextCampaignIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsIdResourceInfo operation middleware
func (sh *strictHandler) PutCampaignsIdResourceInfo(ctx *gin.Context, id string) {
	var request PutCampaignsIdResourceInfoRequestObject

	request.Id = id

	var body PutCampaignsIdResourceInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsIdResourceInfo(ctx, request.(PutCampaignsIdResourceInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsIdResourceInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdResourceInfoResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdResourceInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsIdServiceLevel operation middleware
func (sh *strictHandler) PutCampaignsIdServiceLevel(ctx *gin.Context, id string) {
	var request PutCampaignsIdServiceLevelRequestObject

	request.Id = id

	var body PutCampaignsIdServiceLevelJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsIdServiceLevel(ctx, request.(PutCampaignsIdServiceLevelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsIdServiceLevel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdServiceLevelResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdServiceLevelResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsIdStatus operation middleware
func (sh *strictHandler) PutCampaignsIdStatus(ctx *gin.Context, id string) {
	var request PutCampaignsIdStatusRequestObject

	request.Id = id

	var body PutCampaignsIdStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsIdStatus(ctx, request.(PutCampaignsIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsIdStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdStatusResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotcalls operation middleware
func (sh *strictHandler) GetChatbotcalls(ctx *gin.Context, params GetChatbotcallsParams) {
	var request GetChatbotcallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotcalls(ctx, request.(GetChatbotcallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotcalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotcallsResponseObject); ok {
		if err := validResponse.VisitGetChatbotcallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatbotcallsId operation middleware
func (sh *strictHandler) DeleteChatbotcallsId(ctx *gin.Context, id string) {
	var request DeleteChatbotcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatbotcallsId(ctx, request.(DeleteChatbotcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatbotcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatbotcallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatbotcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotcallsId operation middleware
func (sh *strictHandler) GetChatbotcallsId(ctx *gin.Context, id string) {
	var request GetChatbotcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotcallsId(ctx, request.(GetChatbotcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotcallsIdResponseObject); ok {
		if err := validResponse.VisitGetChatbotcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbots operation middleware
func (sh *strictHandler) GetChatbots(ctx *gin.Context, params GetChatbotsParams) {
	var request GetChatbotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbots(ctx, request.(GetChatbotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotsResponseObject); ok {
		if err := validResponse.VisitGetChatbotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatbots operation middleware
func (sh *strictHandler) PostChatbots(ctx *gin.Context) {
	var request PostChatbotsRequestObject

	var body PostChatbotsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatbots(ctx, request.(PostChatbotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatbots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatbotsResponseObject); ok {
		if err := validResponse.VisitPostChatbotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatbotsId operation middleware
func (sh *strictHandler) DeleteChatbotsId(ctx *gin.Context, id string) {
	var request DeleteChatbotsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatbotsId(ctx, request.(DeleteChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatbotsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotsId operation middleware
func (sh *strictHandler) GetChatbotsId(ctx *gin.Context, id string) {
	var request GetChatbotsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotsId(ctx, request.(GetChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotsIdResponseObject); ok {
		if err := validResponse.VisitGetChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatbotsId operation middleware
func (sh *strictHandler) PutChatbotsId(ctx *gin.Context, id string) {
	var request PutChatbotsIdRequestObject

	request.Id = id

	var body PutChatbotsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatbotsId(ctx, request.(PutChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatbotsIdResponseObject); ok {
		if err := validResponse.VisitPutChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatmessages operation middleware
func (sh *strictHandler) GetChatmessages(ctx *gin.Context, params GetChatmessagesParams) {
	var request GetChatmessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatmessages(ctx, request.(GetChatmessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatmessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatmessagesResponseObject); ok {
		if err := validResponse.VisitGetChatmessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatmessages operation middleware
func (sh *strictHandler) PostChatmessages(ctx *gin.Context) {
	var request PostChatmessagesRequestObject

	var body PostChatmessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatmessages(ctx, request.(PostChatmessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatmessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatmessagesResponseObject); ok {
		if err := validResponse.VisitPostChatmessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatmessagesId operation middleware
func (sh *strictHandler) DeleteChatmessagesId(ctx *gin.Context, id string) {
	var request DeleteChatmessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatmessagesId(ctx, request.(DeleteChatmessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatmessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatmessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatmessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatmessagesId operation middleware
func (sh *strictHandler) GetChatmessagesId(ctx *gin.Context, id string) {
	var request GetChatmessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatmessagesId(ctx, request.(GetChatmessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatmessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatmessagesIdResponseObject); ok {
		if err := validResponse.VisitGetChatmessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroommessages operation middleware
func (sh *strictHandler) GetChatroommessages(ctx *gin.Context, params GetChatroommessagesParams) {
	var request GetChatroommessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroommessages(ctx, request.(GetChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroommessagesResponseObject); ok {
		if err := validResponse.VisitGetChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatroommessages operation middleware
func (sh *strictHandler) PostChatroommessages(ctx *gin.Context) {
	var request PostChatroommessagesRequestObject

	var body PostChatroommessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatroommessages(ctx, request.(PostChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatroommessagesResponseObject); ok {
		if err := validResponse.VisitPostChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatroommessagesId operation middleware
func (sh *strictHandler) DeleteChatroommessagesId(ctx *gin.Context, id string) {
	var request DeleteChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatroommessagesId(ctx, request.(DeleteChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroommessagesId operation middleware
func (sh *strictHandler) GetChatroommessagesId(ctx *gin.Context, id string) {
	var request GetChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroommessagesId(ctx, request.(GetChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitGetChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatrooms operation middleware
func (sh *strictHandler) GetChatrooms(ctx *gin.Context, params GetChatroomsParams) {
	var request GetChatroomsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatrooms(ctx, request.(GetChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroomsResponseObject); ok {
		if err := validResponse.VisitGetChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatrooms operation middleware
func (sh *strictHandler) PostChatrooms(ctx *gin.Context) {
	var request PostChatroomsRequestObject

	var body PostChatroomsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatrooms(ctx, request.(PostChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatroomsResponseObject); ok {
		if err := validResponse.VisitPostChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatroomsId operation middleware
func (sh *strictHandler) DeleteChatroomsId(ctx *gin.Context, id string) {
	var request DeleteChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatroomsId(ctx, request.(DeleteChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatroomsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroomsId operation middleware
func (sh *strictHandler) GetChatroomsId(ctx *gin.Context, id string) {
	var request GetChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroomsId(ctx, request.(GetChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroomsIdResponseObject); ok {
		if err := validResponse.VisitGetChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatroomsId operation middleware
func (sh *strictHandler) PutChatroomsId(ctx *gin.Context, id string) {
	var request PutChatroomsIdRequestObject

	request.Id = id

	var body PutChatroomsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatroomsId(ctx, request.(PutChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatroomsIdResponseObject); ok {
		if err := validResponse.VisitPutChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChats operation middleware
func (sh *strictHandler) GetChats(ctx *gin.Context, params GetChatsParams) {
	var request GetChatsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChats(ctx, request.(GetChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatsResponseObject); ok {
		if err := validResponse.VisitGetChatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChats operation middleware
func (sh *strictHandler) PostChats(ctx *gin.Context) {
	var request PostChatsRequestObject

	var body PostChatsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChats(ctx, request.(PostChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatsResponseObject); ok {
		if err := validResponse.VisitPostChatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatsId operation middleware
func (sh *strictHandler) DeleteChatsId(ctx *gin.Context, id string) {
	var request DeleteChatsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatsId(ctx, request.(DeleteChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatsId operation middleware
func (sh *strictHandler) GetChatsId(ctx *gin.Context, id string) {
	var request GetChatsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatsId(ctx, request.(GetChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatsIdResponseObject); ok {
		if err := validResponse.VisitGetChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatsId operation middleware
func (sh *strictHandler) PutChatsId(ctx *gin.Context, id string) {
	var request PutChatsIdRequestObject

	request.Id = id

	var body PutChatsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatsId(ctx, request.(PutChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatsIdResponseObject); ok {
		if err := validResponse.VisitPutChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatsIdParticipantIds operation middleware
func (sh *strictHandler) PostChatsIdParticipantIds(ctx *gin.Context, id string) {
	var request PostChatsIdParticipantIdsRequestObject

	request.Id = id

	var body PostChatsIdParticipantIdsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatsIdParticipantIds(ctx, request.(PostChatsIdParticipantIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatsIdParticipantIds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatsIdParticipantIdsResponseObject); ok {
		if err := validResponse.VisitPostChatsIdParticipantIdsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatsIdParticipantIdsParticipantId operation middleware
func (sh *strictHandler) DeleteChatsIdParticipantIdsParticipantId(ctx *gin.Context, id string, participantId string) {
	var request DeleteChatsIdParticipantIdsParticipantIdRequestObject

	request.Id = id
	request.ParticipantId = participantId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatsIdParticipantIdsParticipantId(ctx, request.(DeleteChatsIdParticipantIdsParticipantIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatsIdParticipantIdsParticipantId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatsIdParticipantIdsParticipantIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatsIdParticipantIdsParticipantIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatsIdRoomOwnerId operation middleware
func (sh *strictHandler) PutChatsIdRoomOwnerId(ctx *gin.Context, id string) {
	var request PutChatsIdRoomOwnerIdRequestObject

	request.Id = id

	var body PutChatsIdRoomOwnerIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatsIdRoomOwnerId(ctx, request.(PutChatsIdRoomOwnerIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatsIdRoomOwnerId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatsIdRoomOwnerIdResponseObject); ok {
		if err := validResponse.VisitPutChatsIdRoomOwnerIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencecalls operation middleware
func (sh *strictHandler) GetConferencecalls(ctx *gin.Context, params GetConferencecallsParams) {
	var request GetConferencecallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencecalls(ctx, request.(GetConferencecallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencecalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencecallsResponseObject); ok {
		if err := validResponse.VisitGetConferencecallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConferencecallsId operation middleware
func (sh *strictHandler) DeleteConferencecallsId(ctx *gin.Context, id string) {
	var request DeleteConferencecallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConferencecallsId(ctx, request.(DeleteConferencecallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConferencecallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteConferencecallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteConferencecallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencecallsId operation middleware
func (sh *strictHandler) GetConferencecallsId(ctx *gin.Context, id string) {
	var request GetConferencecallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencecallsId(ctx, request.(GetConferencecallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencecallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencecallsIdResponseObject); ok {
		if err := validResponse.VisitGetConferencecallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferences operation middleware
func (sh *strictHandler) GetConferences(ctx *gin.Context, params GetConferencesParams) {
	var request GetConferencesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferences(ctx, request.(GetConferencesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferences")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencesResponseObject); ok {
		if err := validResponse.VisitGetConferencesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferences operation middleware
func (sh *strictHandler) PostConferences(ctx *gin.Context) {
	var request PostConferencesRequestObject

	var body PostConferencesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferences(ctx, request.(PostConferencesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferences")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesResponseObject); ok {
		if err := validResponse.VisitPostConferencesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConferencesId operation middleware
func (sh *strictHandler) DeleteConferencesId(ctx *gin.Context, id string) {
	var request DeleteConferencesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConferencesId(ctx, request.(DeleteConferencesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConferencesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteConferencesIdResponseObject); ok {
		if err := validResponse.VisitDeleteConferencesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencesId operation middleware
func (sh *strictHandler) GetConferencesId(ctx *gin.Context, id string) {
	var request GetConferencesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencesId(ctx, request.(GetConferencesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencesIdResponseObject); ok {
		if err := validResponse.VisitGetConferencesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutConferencesId operation middleware
func (sh *strictHandler) PutConferencesId(ctx *gin.Context, id string) {
	var request PutConferencesIdRequestObject

	request.Id = id

	var body PutConferencesIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutConferencesId(ctx, request.(PutConferencesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutConferencesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutConferencesIdResponseObject); ok {
		if err := validResponse.VisitPutConferencesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencesIdMediaStream operation middleware
func (sh *strictHandler) GetConferencesIdMediaStream(ctx *gin.Context, id string, params GetConferencesIdMediaStreamParams) {
	var request GetConferencesIdMediaStreamRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencesIdMediaStream(ctx, request.(GetConferencesIdMediaStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencesIdMediaStream")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencesIdMediaStreamResponseObject); ok {
		if err := validResponse.VisitGetConferencesIdMediaStreamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdRecordingStart operation middleware
func (sh *strictHandler) PostConferencesIdRecordingStart(ctx *gin.Context, id string) {
	var request PostConferencesIdRecordingStartRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdRecordingStart(ctx, request.(PostConferencesIdRecordingStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdRecordingStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdRecordingStartResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdRecordingStartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdRecordingStop operation middleware
func (sh *strictHandler) PostConferencesIdRecordingStop(ctx *gin.Context, id string) {
	var request PostConferencesIdRecordingStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdRecordingStop(ctx, request.(PostConferencesIdRecordingStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdRecordingStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdRecordingStopResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdRecordingStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdTranscribeStart operation middleware
func (sh *strictHandler) PostConferencesIdTranscribeStart(ctx *gin.Context, id string) {
	var request PostConferencesIdTranscribeStartRequestObject

	request.Id = id

	var body PostConferencesIdTranscribeStartJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdTranscribeStart(ctx, request.(PostConferencesIdTranscribeStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdTranscribeStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdTranscribeStartResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdTranscribeStartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdTranscribeStop operation middleware
func (sh *strictHandler) PostConferencesIdTranscribeStop(ctx *gin.Context, id string) {
	var request PostConferencesIdTranscribeStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdTranscribeStop(ctx, request.(PostConferencesIdTranscribeStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdTranscribeStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdTranscribeStopResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdTranscribeStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
