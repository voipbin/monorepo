// Package openapi_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi_server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef6 "monorepo/bin-api-manager/gens/models/common"
	externalRef9 "monorepo/bin-api-manager/gens/models/customer_manager"
	externalRef10 "monorepo/bin-api-manager/gens/models/flow_manager"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// GetAccesskeysParams defines parameters for GetAccesskeys.
type GetAccesskeysParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostAccesskeysJSONBody defines parameters for PostAccesskeys.
type PostAccesskeysJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Expire *int    `json:"expire,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PutAccesskeysIdJSONBody defines parameters for PutAccesskeysId.
type PutAccesskeysIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// GetActiveflowsParams defines parameters for GetActiveflows.
type GetActiveflowsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostActiveflowsJSONBody defines parameters for PostActiveflows.
type PostActiveflowsJSONBody struct {
	Actions *[]externalRef10.Action `json:"actions,omitempty"`

	// FlowId Flow id of.
	FlowId *string `json:"flow_id,omitempty"`

	// Id ID of the activeflow.
	Id *string `json:"id,omitempty"`
}

// PostAccesskeysJSONRequestBody defines body for PostAccesskeys for application/json ContentType.
type PostAccesskeysJSONRequestBody PostAccesskeysJSONBody

// PutAccesskeysIdJSONRequestBody defines body for PutAccesskeysId for application/json ContentType.
type PutAccesskeysIdJSONRequestBody PutAccesskeysIdJSONBody

// PostActiveflowsJSONRequestBody defines body for PostActiveflows for application/json ContentType.
type PostActiveflowsJSONRequestBody PostActiveflowsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(c *gin.Context, params GetAccesskeysParams)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(c *gin.Context)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(c *gin.Context, id string)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(c *gin.Context, id string)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(c *gin.Context, id string)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(c *gin.Context, params GetActiveflowsParams)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(c *gin.Context)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(c *gin.Context, id string)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(c *gin.Context, id string)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeys(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccesskeysParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeys(c, params)
}

// PostAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) PostAccesskeys(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAccesskeys(c)
}

// DeleteAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccesskeysId(c, id)
}

// GetAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeysId(c, id)
}

// PutAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) PutAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAccesskeysId(c, id)
}

// GetActiveflows operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflows(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActiveflowsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflows(c, params)
}

// PostActiveflows operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflows(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflows(c)
}

// DeleteActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteActiveflowsId(c, id)
}

// GetActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflowsId(c, id)
}

// PostActiveflowsIdStop operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflowsIdStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflowsIdStop(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accesskeys", wrapper.GetAccesskeys)
	router.POST(options.BaseURL+"/accesskeys", wrapper.PostAccesskeys)
	router.DELETE(options.BaseURL+"/accesskeys/:id", wrapper.DeleteAccesskeysId)
	router.GET(options.BaseURL+"/accesskeys/:id", wrapper.GetAccesskeysId)
	router.PUT(options.BaseURL+"/accesskeys/:id", wrapper.PutAccesskeysId)
	router.GET(options.BaseURL+"/activeflows", wrapper.GetActiveflows)
	router.POST(options.BaseURL+"/activeflows", wrapper.PostActiveflows)
	router.DELETE(options.BaseURL+"/activeflows/:id", wrapper.DeleteActiveflowsId)
	router.GET(options.BaseURL+"/activeflows/:id", wrapper.GetActiveflowsId)
	router.POST(options.BaseURL+"/activeflows/:id/stop", wrapper.PostActiveflowsIdStop)
}

type GetAccesskeysRequestObject struct {
	Params GetAccesskeysParams
}

type GetAccesskeysResponseObject interface {
	VisitGetAccesskeysResponse(w http.ResponseWriter) error
}

type GetAccesskeys200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                   `json:"next_page_token,omitempty"`
	Result        *[]externalRef9.Accesskey `json:"result,omitempty"`
}

func (response GetAccesskeys200JSONResponse) VisitGetAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAccesskeysRequestObject struct {
	Body *PostAccesskeysJSONRequestBody
}

type PostAccesskeysResponseObject interface {
	VisitPostAccesskeysResponse(w http.ResponseWriter) error
}

type PostAccesskeys201JSONResponse externalRef9.Accesskey

func (response PostAccesskeys201JSONResponse) VisitPostAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteAccesskeysIdResponseObject interface {
	VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error
}

type DeleteAccesskeysId204Response struct {
}

func (response DeleteAccesskeysId204Response) VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type GetAccesskeysIdResponseObject interface {
	VisitGetAccesskeysIdResponse(w http.ResponseWriter) error
}

type GetAccesskeysId200JSONResponse externalRef9.Accesskey

func (response GetAccesskeysId200JSONResponse) VisitGetAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAccesskeysIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutAccesskeysIdJSONRequestBody
}

type PutAccesskeysIdResponseObject interface {
	VisitPutAccesskeysIdResponse(w http.ResponseWriter) error
}

type PutAccesskeysId200JSONResponse externalRef9.Accesskey

func (response PutAccesskeysId200JSONResponse) VisitPutAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsRequestObject struct {
	Params GetActiveflowsParams
}

type GetActiveflowsResponseObject interface {
	VisitGetActiveflowsResponse(w http.ResponseWriter) error
}

type GetActiveflows200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef10.Activeflow `json:"result,omitempty"`
}

func (response GetActiveflows200JSONResponse) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflows500Response struct {
}

func (response GetActiveflows500Response) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostActiveflowsRequestObject struct {
	Body *PostActiveflowsJSONRequestBody
}

type PostActiveflowsResponseObject interface {
	VisitPostActiveflowsResponse(w http.ResponseWriter) error
}

type PostActiveflows201JSONResponse externalRef10.Activeflow

func (response PostActiveflows201JSONResponse) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflows400Response struct {
}

func (response PostActiveflows400Response) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteActiveflowsIdResponseObject interface {
	VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error
}

type DeleteActiveflowsId204Response struct {
}

func (response DeleteActiveflowsId204Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteActiveflowsId404Response struct {
}

func (response DeleteActiveflowsId404Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type GetActiveflowsIdResponseObject interface {
	VisitGetActiveflowsIdResponse(w http.ResponseWriter) error
}

type GetActiveflowsId200JSONResponse externalRef10.Activeflow

func (response GetActiveflowsId200JSONResponse) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsId404Response struct {
}

func (response GetActiveflowsId404Response) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostActiveflowsIdStopRequestObject struct {
	Id string `json:"id"`
}

type PostActiveflowsIdStopResponseObject interface {
	VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error
}

type PostActiveflowsIdStop200JSONResponse externalRef10.Activeflow

func (response PostActiveflowsIdStop200JSONResponse) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflowsIdStop400Response struct {
}

func (response PostActiveflowsIdStop400Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostActiveflowsIdStop404Response struct {
}

func (response PostActiveflowsIdStop404Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(ctx context.Context, request GetAccesskeysRequestObject) (GetAccesskeysResponseObject, error)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(ctx context.Context, request PostAccesskeysRequestObject) (PostAccesskeysResponseObject, error)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(ctx context.Context, request DeleteAccesskeysIdRequestObject) (DeleteAccesskeysIdResponseObject, error)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(ctx context.Context, request GetAccesskeysIdRequestObject) (GetAccesskeysIdResponseObject, error)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(ctx context.Context, request PutAccesskeysIdRequestObject) (PutAccesskeysIdResponseObject, error)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(ctx context.Context, request GetActiveflowsRequestObject) (GetActiveflowsResponseObject, error)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(ctx context.Context, request PostActiveflowsRequestObject) (PostActiveflowsResponseObject, error)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(ctx context.Context, request DeleteActiveflowsIdRequestObject) (DeleteActiveflowsIdResponseObject, error)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(ctx context.Context, request GetActiveflowsIdRequestObject) (GetActiveflowsIdResponseObject, error)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(ctx context.Context, request PostActiveflowsIdStopRequestObject) (PostActiveflowsIdStopResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAccesskeys operation middleware
func (sh *strictHandler) GetAccesskeys(ctx *gin.Context, params GetAccesskeysParams) {
	var request GetAccesskeysRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeys(ctx, request.(GetAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAccesskeys operation middleware
func (sh *strictHandler) PostAccesskeys(ctx *gin.Context) {
	var request PostAccesskeysRequestObject

	var body PostAccesskeysJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccesskeys(ctx, request.(PostAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAccesskeysResponseObject); ok {
		if err := validResponse.VisitPostAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccesskeysId operation middleware
func (sh *strictHandler) DeleteAccesskeysId(ctx *gin.Context, id string) {
	var request DeleteAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccesskeysId(ctx, request.(DeleteAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitDeleteAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccesskeysId operation middleware
func (sh *strictHandler) GetAccesskeysId(ctx *gin.Context, id string) {
	var request GetAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeysId(ctx, request.(GetAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAccesskeysId operation middleware
func (sh *strictHandler) PutAccesskeysId(ctx *gin.Context, id string) {
	var request PutAccesskeysIdRequestObject

	request.Id = id

	var body PutAccesskeysIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAccesskeysId(ctx, request.(PutAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitPutAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflows operation middleware
func (sh *strictHandler) GetActiveflows(ctx *gin.Context, params GetActiveflowsParams) {
	var request GetActiveflowsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflows(ctx, request.(GetActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflows operation middleware
func (sh *strictHandler) PostActiveflows(ctx *gin.Context) {
	var request PostActiveflowsRequestObject

	var body PostActiveflowsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflows(ctx, request.(PostActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteActiveflowsId operation middleware
func (sh *strictHandler) DeleteActiveflowsId(ctx *gin.Context, id string) {
	var request DeleteActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActiveflowsId(ctx, request.(DeleteActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitDeleteActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflowsId operation middleware
func (sh *strictHandler) GetActiveflowsId(ctx *gin.Context, id string) {
	var request GetActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflowsId(ctx, request.(GetActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflowsIdStop operation middleware
func (sh *strictHandler) PostActiveflowsIdStop(ctx *gin.Context, id string) {
	var request PostActiveflowsIdStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflowsIdStop(ctx, request.(PostActiveflowsIdStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflowsIdStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsIdStopResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsIdStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
