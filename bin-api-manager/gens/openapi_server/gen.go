// Package openapi_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi_server

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"time"

	externalRef0 "monorepo/bin-api-manager/gens/models/agent_manager"
	externalRef1 "monorepo/bin-api-manager/gens/models/billing_manager"
	externalRef2 "monorepo/bin-api-manager/gens/models/call_manager"
	externalRef3 "monorepo/bin-api-manager/gens/models/campaign_manager"
	externalRef4 "monorepo/bin-api-manager/gens/models/chat_manager"
	externalRef5 "monorepo/bin-api-manager/gens/models/chatbot_manager"
	externalRef6 "monorepo/bin-api-manager/gens/models/common"
	externalRef7 "monorepo/bin-api-manager/gens/models/conference_manager"
	externalRef8 "monorepo/bin-api-manager/gens/models/conversation_manager"
	externalRef9 "monorepo/bin-api-manager/gens/models/customer_manager"
	externalRef10 "monorepo/bin-api-manager/gens/models/flow_manager"
	externalRef11 "monorepo/bin-api-manager/gens/models/message_manager"
	externalRef12 "monorepo/bin-api-manager/gens/models/number_manager"
	externalRef13 "monorepo/bin-api-manager/gens/models/outdial_manager"
	externalRef15 "monorepo/bin-api-manager/gens/models/queue_manager"
	externalRef16 "monorepo/bin-api-manager/gens/models/registrar_manager"
	externalRef17 "monorepo/bin-api-manager/gens/models/route_manager"
	externalRef18 "monorepo/bin-api-manager/gens/models/storage_manager"
	externalRef19 "monorepo/bin-api-manager/gens/models/tag_manager"
	externalRef20 "monorepo/bin-api-manager/gens/models/transcribe_manager"
	externalRef21 "monorepo/bin-api-manager/gens/models/transfer_manager"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// GetAccesskeysParams defines parameters for GetAccesskeys.
type GetAccesskeysParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostAccesskeysJSONBody defines parameters for PostAccesskeys.
type PostAccesskeysJSONBody struct {
	Detail *string    `json:"detail,omitempty"`
	Expire *time.Time `json:"expire,omitempty"`
	Name   *string    `json:"name,omitempty"`
}

// PutAccesskeysIdJSONBody defines parameters for PutAccesskeysId.
type PutAccesskeysIdJSONBody = interface{}

// GetActiveflowsParams defines parameters for GetActiveflows.
type GetActiveflowsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostActiveflowsJSONBody defines parameters for PostActiveflows.
type PostActiveflowsJSONBody struct {
	Actions *[]externalRef10.Action `json:"actions,omitempty"`

	// FlowId Flow id of.
	FlowId *string `json:"flow_id,omitempty"`

	// Id ID of the activeflow.
	Id *string `json:"id,omitempty"`
}

// GetAgentsParams defines parameters for GetAgents.
type GetAgentsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// TagIds Comma separated tag ids.
	TagIds *string `form:"tag_ids,omitempty" json:"tag_ids,omitempty"`

	// Status Agent status.
	Status *externalRef0.AgentStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PostAgentsJSONBody defines parameters for PostAgents.
type PostAgentsJSONBody struct {
	Addresses *[]externalRef6.Address `json:"Addresses,omitempty"`
	Detail    *string                 `json:"Detail,omitempty"`
	Name      *string                 `json:"Name,omitempty"`
	Password  *string                 `json:"Password,omitempty"`

	// Permission Permission type
	Permission *externalRef0.AgentPermission `json:"Permission,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *externalRef0.AgentRingMethod `json:"RingMethod,omitempty"`
	TagIDs     *[]string                     `json:"TagIDs,omitempty"`
	Username   *string                       `json:"Username,omitempty"`
}

// PutAgentsIdJSONBody defines parameters for PutAgentsId.
type PutAgentsIdJSONBody = interface{}

// PutAgentsIdAddressesJSONBody defines parameters for PutAgentsIdAddresses.
type PutAgentsIdAddressesJSONBody struct {
	Addresses *[]externalRef6.Address `json:"addresses,omitempty"`
}

// PutAgentsIdPasswordJSONBody defines parameters for PutAgentsIdPassword.
type PutAgentsIdPasswordJSONBody struct {
	Password *string `json:"Password,omitempty"`
}

// PutAgentsIdTagIdsJSONBody defines parameters for PutAgentsIdTagIds.
type PutAgentsIdTagIdsJSONBody struct {
	TagIDs *[]string `json:"TagIDs,omitempty"`
}

// GetAvailableNumbersParams defines parameters for GetAvailableNumbers.
type GetAvailableNumbersParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// CountryCode The ISO country code.
	CountryCode string `form:"country_code" json:"country_code"`
}

// GetBillingAccountsParams defines parameters for GetBillingAccounts.
type GetBillingAccountsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostBillingAccountsJSONBody defines parameters for PostBillingAccounts.
type PostBillingAccountsJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *externalRef1.AccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *externalRef1.AccountPaymentType `json:"payment_type,omitempty"`
}

// PutBillingAccountsIdJSONBody defines parameters for PutBillingAccountsId.
type PutBillingAccountsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PostBillingAccountsIdBalanceAddForceJSONBody defines parameters for PostBillingAccountsIdBalanceAddForce.
type PostBillingAccountsIdBalanceAddForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PostBillingAccountsIdBalanceSubtractForceJSONBody defines parameters for PostBillingAccountsIdBalanceSubtractForce.
type PostBillingAccountsIdBalanceSubtractForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PutBillingAccountsIdPaymentInfoJSONBody defines parameters for PutBillingAccountsIdPaymentInfo.
type PutBillingAccountsIdPaymentInfoJSONBody struct {
	// PaymentMethod The method of payment used for the account.
	PaymentMethod *externalRef1.AccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *externalRef1.AccountPaymentType `json:"payment_type,omitempty"`
}

// GetCallsParams defines parameters for GetCalls.
type GetCallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCallsJSONBody defines parameters for PostCalls.
type PostCallsJSONBody struct {
	Actions      *[]externalRef10.Action `json:"actions,omitempty"`
	Destinations *[]externalRef6.Address `json:"destinations,omitempty"`
	FlowId       *string                 `json:"flow_id,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`
}

// GetCampaigncallsParams defines parameters for GetCampaigncalls.
type GetCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCampaignsParams defines parameters for GetCampaigns.
type GetCampaignsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCampaignsJSONBody defines parameters for PostCampaigns.
type PostCampaignsJSONBody struct {
	// Actions Actions associated with the campaign
	Actions *[]externalRef10.Action `json:"actions,omitempty"`

	// Detail Detailed description of the campaign
	Detail *string `json:"detail,omitempty"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle *externalRef3.CampaignEndHandle `json:"endHandle,omitempty"`

	// Name Name of the campaign
	Name string `json:"name"`

	// NextCampaignId ID of the next campaign
	NextCampaignId *string `json:"nextCampaignId,omitempty"`

	// OutdialId Outdial ID for the campaign
	OutdialId *string `json:"outdialId,omitempty"`

	// OutplanId Outplan ID for the campaign
	OutplanId *string `json:"outplanId,omitempty"`

	// QueueId Queue ID for the campaign
	QueueId *string `json:"queueId,omitempty"`

	// ServiceLevel Service level of the campaign
	ServiceLevel *float32 `json:"serviceLevel,omitempty"`

	// Type Type of campaign.
	Type externalRef3.CampaignType `json:"type"`
}

// PutCampaignsIdJSONBody defines parameters for PutCampaignsId.
type PutCampaignsIdJSONBody struct {
	// Detail Updated details of the campaign
	Detail *string `json:"detail,omitempty"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle *externalRef3.CampaignEndHandle `json:"endHandle,omitempty"`

	// Name Updated name of the campaign
	Name *string `json:"name,omitempty"`

	// ServiceLevel Updated service level of the campaign
	ServiceLevel *float32 `json:"serviceLevel,omitempty"`

	// Type Type of campaign.
	Type *externalRef3.CampaignType `json:"type,omitempty"`
}

// PutCampaignsIdStatusJSONBody defines parameters for PutCampaignsIdStatus.
type PutCampaignsIdStatusJSONBody struct {
	// Status Status of the campaign.
	Status externalRef3.CampaignStatus `json:"status"`
}

// GetChatbotcallsParams defines parameters for GetChatbotcalls.
type GetChatbotcallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetChatbotsParams defines parameters for GetChatbots.
type GetChatbotsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatbotsJSONBody defines parameters for PostChatbots.
type PostChatbotsJSONBody struct {
	Detail *string `json:"detail,omitempty"`

	// EngineType Type of engine used by the chatbot.
	EngineType *externalRef5.ChatbotEngineType `json:"engineType,omitempty"`
	InitPrompt *string                         `json:"initPrompt,omitempty"`
	Name       *string                         `json:"name,omitempty"`
}

// PutChatbotsIdJSONBody defines parameters for PutChatbotsId.
type PutChatbotsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`

	// EngineType Type of engine used by the chatbot.
	EngineType *externalRef5.ChatbotEngineType `json:"engineType,omitempty"`
	InitPrompt *string                         `json:"initPrompt,omitempty"`
	Name       *string                         `json:"name,omitempty"`
}

// GetChatmessagesParams defines parameters for GetChatmessages.
type GetChatmessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatmessagesJSONBody defines parameters for PostChatmessages.
type PostChatmessagesJSONBody struct {
	ChatID *string               `json:"chatID,omitempty"`
	Medias *[]externalRef4.Media `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`
	Text   *string               `json:"text,omitempty"`

	// Type Type of the message chat.
	Type *externalRef4.MessagechatType `json:"type,omitempty"`
}

// GetChatroommessagesParams defines parameters for GetChatroommessages.
type GetChatroommessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatroomId The ID of the chatroom
	ChatroomId string `form:"chatroom_id" json:"chatroom_id"`
}

// PostChatroommessagesJSONBody defines parameters for PostChatroommessages.
type PostChatroommessagesJSONBody struct {
	// ChatroomId ID of the chatroom.
	ChatroomId string `json:"chatroom_id"`

	// Medias List of media URLs.
	Medias *[]externalRef4.Media `json:"medias,omitempty"`

	// Text Text of the message.
	Text *string `json:"text,omitempty"`
}

// GetChatroomsParams defines parameters for GetChatrooms.
type GetChatroomsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// OwnerId The ID of the chatroom owner.
	OwnerId string `form:"owner_id" json:"owner_id"`
}

// PostChatroomsJSONBody defines parameters for PostChatrooms.
type PostChatroomsJSONBody struct {
	// Detail Additional details of the chatroom.
	Detail *string `json:"detail,omitempty"`

	// Name The name of the chatroom.
	Name *string `json:"name,omitempty"`

	// ParticipantId The ID of the participant.
	ParticipantId string `json:"participant_id"`
}

// PutChatroomsIdJSONBody defines parameters for PutChatroomsId.
type PutChatroomsIdJSONBody struct {
	// Detail The new details of the chatroom.
	Detail *string `json:"detail,omitempty"`

	// Name The new name of the chatroom.
	Name string `json:"name"`
}

// GetChatsParams defines parameters for GetChats.
type GetChatsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatsJSONBody defines parameters for PostChats.
type PostChatsJSONBody struct {
	Detail        *string `json:"detail,omitempty"`
	Name          *string `json:"name,omitempty"`
	OwnerID       string  `json:"ownerID"`
	ParticipantID *string `json:"participantID,omitempty"`

	// Type Type of the chat.
	Type *externalRef4.ChatType `json:"type,omitempty"`
}

// PutChatsIdJSONBody defines parameters for PutChatsId.
type PutChatsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   string  `json:"name"`
}

// PostChatsIdParticipantIdsJSONBody defines parameters for PostChatsIdParticipantIds.
type PostChatsIdParticipantIdsJSONBody struct {
	ParticipantID string `json:"participantID"`
}

// GetConferencecallsParams defines parameters for GetConferencecalls.
type GetConferencecallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetConferencesParams defines parameters for GetConferences.
type GetConferencesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConferencesJSONBody defines parameters for PostConferences.
type PostConferencesJSONBody struct {
	Data        *map[string]interface{} `json:"data,omitempty"`
	Detail      *string                 `json:"detail,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	PostActions *[]externalRef10.Action `json:"postActions,omitempty"`
	PreActions  *[]externalRef10.Action `json:"preActions,omitempty"`
	Timeout     *int                    `json:"timeout,omitempty"`

	// Type Types of conferences.
	Type *externalRef7.ConferenceType `json:"type,omitempty"`
}

// PutConferencesIdJSONBody defines parameters for PutConferencesId.
type PutConferencesIdJSONBody struct {
	Detail      *string                 `json:"detail,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	PostActions *[]externalRef10.Action `json:"postActions,omitempty"`
	PreActions  *[]externalRef10.Action `json:"preActions,omitempty"`
	Timeout     *int                    `json:"timeout,omitempty"`
}

// PostConferencesIdTranscribeStartJSONBody defines parameters for PostConferencesIdTranscribeStart.
type PostConferencesIdTranscribeStartJSONBody struct {
	// Language The language for transcription.
	Language *string `json:"language,omitempty"`
}

// GetConversationAccountsParams defines parameters for GetConversationAccounts.
type GetConversationAccountsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConversationAccountsJSONBody defines parameters for PostConversationAccounts.
type PostConversationAccountsJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
	Token  *string `json:"token,omitempty"`

	// Type Type of the account.
	Type *externalRef8.AccountType `json:"type,omitempty"`
}

// PutConversationAccountsIdJSONBody defines parameters for PutConversationAccountsId.
type PutConversationAccountsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
	Secret *string `json:"secret,omitempty"`
	Token  *string `json:"token,omitempty"`
}

// GetConversationsParams defines parameters for GetConversations.
type GetConversationsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PutConversationsIdJSONBody defines parameters for PutConversationsId.
type PutConversationsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// GetConversationsIdMessagesParams defines parameters for GetConversationsIdMessages.
type GetConversationsIdMessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConversationsIdMessagesJSONBody defines parameters for PostConversationsIdMessages.
type PostConversationsIdMessagesJSONBody struct {
	Media *[]externalRef8.Media `json:"media,omitempty"`

	// Text The message text.
	Text *string `json:"text,omitempty"`
}

// PutCustomerJSONBody defines parameters for PutCustomer.
type PutCustomerJSONBody struct {
	// Address The customer's address.
	Address *string `json:"address,omitempty"`

	// Detail Additional details about the customer.
	Detail *string `json:"detail,omitempty"`

	// Email The customer's email address.
	Email *string `json:"email,omitempty"`

	// Name The new name of the customer.
	Name *string `json:"name,omitempty"`

	// PhoneNumber The customer's phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod *externalRef9.CustomerWebhookMethod `json:"webhook_method,omitempty"`

	// WebhookUri Webhook URI.
	WebhookUri *string `json:"webhook_uri,omitempty"`
}

// PutCustomerBillingAccountIdJSONBody defines parameters for PutCustomerBillingAccountId.
type PutCustomerBillingAccountIdJSONBody struct {
	// BillingAccountId The new billing account ID for the customer.
	BillingAccountId *string `json:"billing_account_id,omitempty"`
}

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCustomersJSONBody defines parameters for PostCustomers.
type PostCustomersJSONBody struct {
	Address     *string `json:"address,omitempty"`
	Detail      *string `json:"detail,omitempty"`
	Email       *string `json:"email,omitempty"`
	Name        *string `json:"name,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod *externalRef9.CustomerWebhookMethod `json:"webhookMethod,omitempty"`
	WebhookURI    *string                             `json:"webhookURI,omitempty"`
}

// PutCustomersIdJSONBody defines parameters for PutCustomersId.
type PutCustomersIdJSONBody struct {
	Address     *string `json:"address,omitempty"`
	Detail      *string `json:"detail,omitempty"`
	Email       *string `json:"email,omitempty"`
	Name        *string `json:"name,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod *externalRef9.CustomerWebhookMethod `json:"webhookMethod,omitempty"`
	WebhookURI    *string                             `json:"webhookURI,omitempty"`
}

// PutCustomersIdBillingAccountIdJSONBody defines parameters for PutCustomersIdBillingAccountId.
type PutCustomersIdBillingAccountIdJSONBody struct {
	BillingAccountID *string `json:"billingAccountID,omitempty"`
}

// GetExtensionsParams defines parameters for GetExtensions.
type GetExtensionsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostExtensionsJSONBody defines parameters for PostExtensions.
type PostExtensionsJSONBody struct {
	Detail    *string `json:"detail,omitempty"`
	Extension string  `json:"extension"`
	Name      string  `json:"name"`
	Password  string  `json:"password"`
}

// PutExtensionsIdJSONBody defines parameters for PutExtensionsId.
type PutExtensionsIdJSONBody struct {
	Detail   *string `json:"detail,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
}

// GetFilesParams defines parameters for GetFiles.
type GetFilesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostFilesMultipartBody defines parameters for PostFiles.
type PostFilesMultipartBody struct {
	// File The file to be uploaded.
	File *openapi_types.File `json:"file,omitempty"`
}

// GetFlowsParams defines parameters for GetFlows.
type GetFlowsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostFlowsJSONBody defines parameters for PostFlows.
type PostFlowsJSONBody struct {
	// Actions List of actions associated with the flow.
	Actions *[]externalRef10.Action `json:"actions,omitempty"`

	// Detail Detailed information about the flow.
	Detail *string `json:"detail,omitempty"`

	// Name The name of the flow.
	Name *string `json:"name,omitempty"`
}

// PutFlowsIdJSONBody defines parameters for PutFlowsId.
type PutFlowsIdJSONBody struct {
	// Actions Updated list of actions associated with the flow.
	Actions *[]externalRef10.Action `json:"actions,omitempty"`

	// Detail The updated details of the flow.
	Detail *string `json:"detail,omitempty"`

	// Name The updated name of the flow.
	Name *string `json:"name,omitempty"`
}

// GetGroupcallsParams defines parameters for GetGroupcalls.
type GetGroupcallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostGroupcallsJSONBody defines parameters for PostGroupcalls.
type PostGroupcallsJSONBody struct {
	Actions *[]externalRef10.Action `json:"actions,omitempty"`

	// AnswerMethod Method to handle answered calls
	AnswerMethod *externalRef2.GroupcallAnswerMethod `json:"answer_method,omitempty"`
	Destinations *[]externalRef6.Address             `json:"destinations,omitempty"`
	FlowID       *string                             `json:"flowID,omitempty"`

	// RingMethod Method used for dialing
	RingMethod *externalRef2.GroupcallRingMethod `json:"ring_method,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`
}

// GetMessagesParams defines parameters for GetMessages.
type GetMessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostMessagesJSONBody defines parameters for PostMessages.
type PostMessagesJSONBody struct {
	// Destinations List of destinations for the message.
	Destinations *[]externalRef6.Address `json:"destinations,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`

	// Text The content of the message.
	Text *string `json:"text,omitempty"`
}

// GetNumbersParams defines parameters for GetNumbers.
type GetNumbersParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostNumbersJSONBody defines parameters for PostNumbers.
type PostNumbersJSONBody struct {
	// CallFlowId The ID of the call flow.
	CallFlowId *string `json:"call_flow_id,omitempty"`

	// Detail Additional details about the number.
	Detail *string `json:"detail,omitempty"`

	// MessageFlowId The ID of the message flow.
	MessageFlowId *string `json:"message_flow_id,omitempty"`

	// Name The name of the number.
	Name *string `json:"name,omitempty"`

	// Number The phone number.
	Number *string `json:"number,omitempty"`
}

// PostNumbersRenewJSONBody defines parameters for PostNumbersRenew.
type PostNumbersRenewJSONBody struct {
	// TmRenew The timestamp for renewing the number.
	TmRenew *string `json:"tm_renew,omitempty"`
}

// PutNumbersIdJSONBody defines parameters for PutNumbersId.
type PutNumbersIdJSONBody struct {
	// CallFlowId The ID of the updated call flow.
	CallFlowId *string `json:"call_flow_id,omitempty"`

	// Detail Updated details for the number.
	Detail *string `json:"detail,omitempty"`

	// MessageFlowId The ID of the updated message flow.
	MessageFlowId *string `json:"message_flow_id,omitempty"`

	// Name The updated name of the number.
	Name *string `json:"name,omitempty"`
}

// PutNumbersIdFlowIdJSONBody defines parameters for PutNumbersIdFlowId.
type PutNumbersIdFlowIdJSONBody struct {
	// CallFlowId The ID of the updated call flow.
	CallFlowId *string `json:"call_flow_id,omitempty"`

	// Detail Updated details for the number.
	Detail *string `json:"detail,omitempty"`

	// MessageFlowId The ID of the updated message flow.
	MessageFlowId *string `json:"message_flow_id,omitempty"`

	// Name The updated name of the number.
	Name *string `json:"name,omitempty"`
}

// GetOutdialsParams defines parameters for GetOutdials.
type GetOutdialsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostOutdialsJSONBody defines parameters for PostOutdials.
type PostOutdialsJSONBody struct {
	CampaignId *string `json:"campaign_id,omitempty"`
	Data       *string `json:"data,omitempty"`
	Detail     *string `json:"detail,omitempty"`
	Name       *string `json:"name,omitempty"`
}

// GetOutdialsIdParams defines parameters for GetOutdialsId.
type GetOutdialsIdParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PutOutdialsIdJSONBody defines parameters for PutOutdialsId.
type PutOutdialsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PutOutdialsIdCampaignIdJSONBody defines parameters for PutOutdialsIdCampaignId.
type PutOutdialsIdCampaignIdJSONBody struct {
	CampaignId *string `json:"campaign_id,omitempty"`
}

// PutOutdialsIdDataJSONBody defines parameters for PutOutdialsIdData.
type PutOutdialsIdDataJSONBody struct {
	Data *string `json:"data,omitempty"`
}

// PostOutdialsIdTargetsJSONBody defines parameters for PostOutdialsIdTargets.
type PostOutdialsIdTargetsJSONBody struct {
	Data *string `json:"data,omitempty"`

	// Destination0 Contains source or destination detail info.
	Destination0 *externalRef6.Address `json:"destination0,omitempty"`

	// Destination1 Contains source or destination detail info.
	Destination1 *externalRef6.Address `json:"destination1,omitempty"`

	// Destination2 Contains source or destination detail info.
	Destination2 *externalRef6.Address `json:"destination2,omitempty"`

	// Destination3 Contains source or destination detail info.
	Destination3 *externalRef6.Address `json:"destination3,omitempty"`

	// Destination4 Contains source or destination detail info.
	Destination4 *externalRef6.Address `json:"destination4,omitempty"`
	Detail       *string               `json:"detail,omitempty"`
	Name         *string               `json:"name,omitempty"`
}

// GetOutplansParams defines parameters for GetOutplans.
type GetOutplansParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostOutplansJSONBody defines parameters for PostOutplans.
type PostOutplansJSONBody struct {
	// Detail Additional details about the outplan.
	Detail *string `json:"detail,omitempty"`

	// DialTimeout The dial timeout in seconds.
	DialTimeout *int `json:"dial_timeout,omitempty"`

	// MaxTryCount0 Maximum retry count for destination 0.
	MaxTryCount0 *int `json:"max_try_count_0,omitempty"`

	// MaxTryCount1 Maximum retry count for destination 1.
	MaxTryCount1 *int `json:"max_try_count_1,omitempty"`

	// MaxTryCount2 Maximum retry count for destination 2.
	MaxTryCount2 *int `json:"max_try_count_2,omitempty"`

	// MaxTryCount3 Maximum retry count for destination 3.
	MaxTryCount3 *int `json:"max_try_count_3,omitempty"`

	// MaxTryCount4 Maximum retry count for destination 4.
	MaxTryCount4 *int `json:"max_try_count_4,omitempty"`

	// Name The name of the outplan.
	Name *string `json:"name,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`

	// TryInterval The interval between retry attempts.
	TryInterval *int `json:"try_interval,omitempty"`
}

// PutOutplansIdJSONBody defines parameters for PutOutplansId.
type PutOutplansIdJSONBody struct {
	// DialTimeout The new dial timeout in seconds.
	DialTimeout *int `json:"dial_timeout,omitempty"`

	// MaxTryCount0 The new maximum retry count for destination 0.
	MaxTryCount0 *int `json:"max_try_count_0,omitempty"`

	// MaxTryCount1 The new maximum retry count for destination 1.
	MaxTryCount1 *int `json:"max_try_count_1,omitempty"`

	// MaxTryCount2 The new maximum retry count for destination 2.
	MaxTryCount2 *int `json:"max_try_count_2,omitempty"`

	// MaxTryCount3 The new maximum retry count for destination 3.
	MaxTryCount3 *int `json:"max_try_count_3,omitempty"`

	// MaxTryCount4 The new maximum retry count for destination 4.
	MaxTryCount4 *int `json:"max_try_count_4,omitempty"`

	// Source Contains source or destination detail info.
	Source *externalRef6.Address `json:"source,omitempty"`

	// TryInterval The new interval between retry attempts.
	TryInterval *int `json:"try_interval,omitempty"`
}

// GetProvidersParams defines parameters for GetProviders.
type GetProvidersParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostProvidersJSONBody defines parameters for PostProviders.
type PostProvidersJSONBody struct {
	Detail      *string                 `json:"detail,omitempty"`
	Hostname    *string                 `json:"hostname,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	TechHeaders *map[string]interface{} `json:"techHeaders,omitempty"`
	TechPostfix *string                 `json:"techPostfix,omitempty"`
	TechPrefix  *string                 `json:"techPrefix,omitempty"`

	// Type Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
	Type *externalRef17.ProviderType `json:"type,omitempty"`
}

// PutProvidersIdJSONBody defines parameters for PutProvidersId.
type PutProvidersIdJSONBody struct {
	Detail      *string                 `json:"detail,omitempty"`
	Hostname    *string                 `json:"hostname,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	TechHeaders *map[string]interface{} `json:"techHeaders,omitempty"`
	TechPostfix *string                 `json:"techPostfix,omitempty"`
	TechPrefix  *string                 `json:"techPrefix,omitempty"`

	// Type Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
	Type *externalRef17.ProviderType `json:"type,omitempty"`
}

// GetQueuecallsParams defines parameters for GetQueuecalls.
type GetQueuecallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetQueuesParams defines parameters for GetQueues.
type GetQueuesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostQueuesJSONBody defines parameters for PostQueues.
type PostQueuesJSONBody struct {
	Detail         *string                           `json:"detail,omitempty"`
	Name           *string                           `json:"name,omitempty"`
	RoutingMethod  *externalRef15.QueueRoutingMethod `json:"routing_method,omitempty"`
	ServiceTimeout *int                              `json:"service_timeout,omitempty"`
	TagIds         *[]string                         `json:"tag_ids,omitempty"`
	WaitActions    *[]externalRef10.Action           `json:"wait_actions,omitempty"`
	WaitTimeout    *int                              `json:"wait_timeout,omitempty"`
}

// PutQueuesIdJSONBody defines parameters for PutQueuesId.
type PutQueuesIdJSONBody struct {
	Detail         *string                           `json:"detail,omitempty"`
	Name           *string                           `json:"name,omitempty"`
	RoutingMethod  *externalRef15.QueueRoutingMethod `json:"routing_method,omitempty"`
	ServiceTimeout *int                              `json:"service_timeout,omitempty"`
	TagIds         *[]string                         `json:"tag_ids,omitempty"`
	WaitActions    *[]externalRef10.Action           `json:"wait_actions,omitempty"`
	WaitTimeout    *int                              `json:"wait_timeout,omitempty"`
}

// PutQueuesIdActionsJSONBody defines parameters for PutQueuesIdActions.
type PutQueuesIdActionsJSONBody struct {
	TimeoutService *int                    `json:"timeout_service,omitempty"`
	TimeoutWait    *int                    `json:"timeout_wait,omitempty"`
	WaitActions    *[]externalRef10.Action `json:"wait_actions,omitempty"`
}

// PutQueuesIdRoutingMethodJSONBody defines parameters for PutQueuesIdRoutingMethod.
type PutQueuesIdRoutingMethodJSONBody struct {
	RoutingMethod *externalRef15.QueueRoutingMethod `json:"routing_method,omitempty"`
}

// PutQueuesIdTagIdsJSONBody defines parameters for PutQueuesIdTagIds.
type PutQueuesIdTagIdsJSONBody struct {
	TagIds *[]string `json:"tag_ids,omitempty"`
}

// GetRecordingsParams defines parameters for GetRecordings.
type GetRecordingsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetRoutesParams defines parameters for GetRoutes.
type GetRoutesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostRoutesJSONBody defines parameters for PostRoutes.
type PostRoutesJSONBody struct {
	// CustomerId The ID of the customer for the route.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail The detail information of the route.
	Detail *string `json:"detail,omitempty"`

	// Name The name of the route.
	Name *string `json:"name,omitempty"`

	// Priority The priority of the route.
	Priority *int `json:"priority,omitempty"`

	// ProviderId The provider ID for the route.
	ProviderId *string `json:"provider_id,omitempty"`

	// Target The target of the route.
	Target *string `json:"target,omitempty"`
}

// PutRoutesIdJSONBody defines parameters for PutRoutesId.
type PutRoutesIdJSONBody struct {
	// Detail The detail information of the route.
	Detail *string `json:"detail,omitempty"`

	// Name The name of the route.
	Name *string `json:"name,omitempty"`

	// Priority The priority of the route.
	Priority *int `json:"priority,omitempty"`

	// ProviderId The provider ID for the route.
	ProviderId *string `json:"provider_id,omitempty"`

	// Target The target of the route.
	Target *string `json:"target,omitempty"`
}

// GetServiceAgentsAgentsParams defines parameters for GetServiceAgentsAgents.
type GetServiceAgentsAgentsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsCallsParams defines parameters for GetServiceAgentsCalls.
type GetServiceAgentsCallsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsChatroommessagesParams defines parameters for GetServiceAgentsChatroommessages.
type GetServiceAgentsChatroommessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatroomId The ID of the chatroom to retrieve messages for.
	ChatroomId string `form:"chatroom_id" json:"chatroom_id"`
}

// GetServiceAgentsChatroomsParams defines parameters for GetServiceAgentsChatrooms.
type GetServiceAgentsChatroomsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostServiceAgentsChatroomsJSONBody defines parameters for PostServiceAgentsChatrooms.
type PostServiceAgentsChatroomsJSONBody struct {
	Detail         *string   `json:"detail,omitempty"`
	Name           *string   `json:"name,omitempty"`
	ParticipantIds *[]string `json:"participant_ids,omitempty"`
}

// PutServiceAgentsChatroomsIdJSONBody defines parameters for PutServiceAgentsChatroomsId.
type PutServiceAgentsChatroomsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// GetServiceAgentsConversationsParams defines parameters for GetServiceAgentsConversations.
type GetServiceAgentsConversationsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsConversationsIdMessagesParams defines parameters for GetServiceAgentsConversationsIdMessages.
type GetServiceAgentsConversationsIdMessagesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostServiceAgentsConversationsIdMessagesJSONBody defines parameters for PostServiceAgentsConversationsIdMessages.
type PostServiceAgentsConversationsIdMessagesJSONBody struct {
	Media *[]externalRef8.Media `json:"media,omitempty"`

	// Text The text content of the message.
	Text *string `json:"text,omitempty"`
}

// GetServiceAgentsExtensionsParams defines parameters for GetServiceAgentsExtensions.
type GetServiceAgentsExtensionsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsFilesParams defines parameters for GetServiceAgentsFiles.
type GetServiceAgentsFilesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostServiceAgentsFilesMultipartBody defines parameters for PostServiceAgentsFiles.
type PostServiceAgentsFilesMultipartBody struct {
	// File The file to upload.
	File *openapi_types.File `json:"file,omitempty"`
}

// PutServiceAgentsMeJSONBody defines parameters for PutServiceAgentsMe.
type PutServiceAgentsMeJSONBody struct {
	// Detail Additional details about the agent.
	Detail *string `json:"detail,omitempty"`

	// Name The updated name of the agent.
	Name *string `json:"name,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *externalRef0.AgentRingMethod `json:"ringMethod,omitempty"`
}

// PutServiceAgentsMeAddressesJSONBody defines parameters for PutServiceAgentsMeAddresses.
type PutServiceAgentsMeAddressesJSONBody struct {
	// Addresses The updated list of addresses.
	Addresses *[]externalRef6.Address `json:"addresses,omitempty"`
}

// PutServiceAgentsMePasswordJSONBody defines parameters for PutServiceAgentsMePassword.
type PutServiceAgentsMePasswordJSONBody struct {
	// Password The new password for the agent.
	Password *string `json:"password,omitempty"`
}

// PutServiceAgentsMeStatusJSONBody defines parameters for PutServiceAgentsMeStatus.
type PutServiceAgentsMeStatusJSONBody struct {
	// Status Agent's status
	Status *externalRef0.AgentStatus `json:"status,omitempty"`
}

// GetStorageAccountsParams defines parameters for GetStorageAccounts.
type GetStorageAccountsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostStorageAccountsJSONBody defines parameters for PostStorageAccounts.
type PostStorageAccountsJSONBody struct {
	CustomerId *string `json:"customer_id,omitempty"`
}

// GetStorageFilesParams defines parameters for GetStorageFiles.
type GetStorageFilesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostStorageFilesMultipartBody defines parameters for PostStorageFiles.
type PostStorageFilesMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// GetTranscribesParams defines parameters for GetTranscribes.
type GetTranscribesParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostTranscribesJSONBody defines parameters for PostTranscribes.
type PostTranscribesJSONBody struct {
	Direction *interface{} `json:"direction,omitempty"`

	// Language The language of the transcription.
	Language *string `json:"language,omitempty"`

	// ReferenceId The ID of the reference for the transcription.
	ReferenceId   *string                                `json:"reference_id,omitempty"`
	ReferenceType *externalRef20.TranscribeReferenceType `json:"reference_type,omitempty"`
}

// GetTranscriptsParams defines parameters for GetTranscripts.
type GetTranscriptsParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostTransfersJSONBody defines parameters for PostTransfers.
type PostTransfersJSONBody struct {
	TransferType externalRef21.TransferType `json:"transferType"`

	// TransfereeAddresses Addresses of the transfer recipients.
	TransfereeAddresses []externalRef6.Address `json:"transfereeAddresses"`

	// TransfererCallID Call ID of the transfer initiator.
	TransfererCallID string `json:"transfererCallID"`
}

// GetTrunksParams defines parameters for GetTrunks.
type GetTrunksParams struct {
	// PageSize The size of results.
	PageSize *externalRef6.PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *externalRef6.PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostTrunksJSONBody defines parameters for PostTrunks.
type PostTrunksJSONBody struct {
	AllowedIPs *[]string                 `json:"allowedIPs,omitempty"`
	AuthTypes  *[]externalRef16.AuthType `json:"authTypes,omitempty"`
	Detail     *string                   `json:"detail,omitempty"`
	DomainName *string                   `json:"domainName,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	Password   *string                   `json:"password,omitempty"`
	Username   *string                   `json:"username,omitempty"`
}

// PutTrunksIdJSONBody defines parameters for PutTrunksId.
type PutTrunksIdJSONBody struct {
	AllowedIPs *[]string                 `json:"allowedIPs,omitempty"`
	AuthTypes  *[]externalRef16.AuthType `json:"authTypes,omitempty"`
	Detail     *string                   `json:"detail,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	Password   *string                   `json:"password,omitempty"`
	Username   *string                   `json:"username,omitempty"`
}

// PostAccesskeysJSONRequestBody defines body for PostAccesskeys for application/json ContentType.
type PostAccesskeysJSONRequestBody PostAccesskeysJSONBody

// PutAccesskeysIdJSONRequestBody defines body for PutAccesskeysId for application/json ContentType.
type PutAccesskeysIdJSONRequestBody = PutAccesskeysIdJSONBody

// PostActiveflowsJSONRequestBody defines body for PostActiveflows for application/json ContentType.
type PostActiveflowsJSONRequestBody PostActiveflowsJSONBody

// PostAgentsJSONRequestBody defines body for PostAgents for application/json ContentType.
type PostAgentsJSONRequestBody PostAgentsJSONBody

// PutAgentsIdJSONRequestBody defines body for PutAgentsId for application/json ContentType.
type PutAgentsIdJSONRequestBody = PutAgentsIdJSONBody

// PutAgentsIdAddressesJSONRequestBody defines body for PutAgentsIdAddresses for application/json ContentType.
type PutAgentsIdAddressesJSONRequestBody PutAgentsIdAddressesJSONBody

// PutAgentsIdPasswordJSONRequestBody defines body for PutAgentsIdPassword for application/json ContentType.
type PutAgentsIdPasswordJSONRequestBody PutAgentsIdPasswordJSONBody

// PutAgentsIdPermissionJSONRequestBody defines body for PutAgentsIdPermission for application/json ContentType.
type PutAgentsIdPermissionJSONRequestBody = externalRef0.AgentPermission

// PutAgentsIdTagIdsJSONRequestBody defines body for PutAgentsIdTagIds for application/json ContentType.
type PutAgentsIdTagIdsJSONRequestBody PutAgentsIdTagIdsJSONBody

// PostBillingAccountsJSONRequestBody defines body for PostBillingAccounts for application/json ContentType.
type PostBillingAccountsJSONRequestBody PostBillingAccountsJSONBody

// PutBillingAccountsIdJSONRequestBody defines body for PutBillingAccountsId for application/json ContentType.
type PutBillingAccountsIdJSONRequestBody PutBillingAccountsIdJSONBody

// PostBillingAccountsIdBalanceAddForceJSONRequestBody defines body for PostBillingAccountsIdBalanceAddForce for application/json ContentType.
type PostBillingAccountsIdBalanceAddForceJSONRequestBody PostBillingAccountsIdBalanceAddForceJSONBody

// PostBillingAccountsIdBalanceSubtractForceJSONRequestBody defines body for PostBillingAccountsIdBalanceSubtractForce for application/json ContentType.
type PostBillingAccountsIdBalanceSubtractForceJSONRequestBody PostBillingAccountsIdBalanceSubtractForceJSONBody

// PutBillingAccountsIdPaymentInfoJSONRequestBody defines body for PutBillingAccountsIdPaymentInfo for application/json ContentType.
type PutBillingAccountsIdPaymentInfoJSONRequestBody PutBillingAccountsIdPaymentInfoJSONBody

// PostCallsJSONRequestBody defines body for PostCalls for application/json ContentType.
type PostCallsJSONRequestBody PostCallsJSONBody

// PostCampaignsJSONRequestBody defines body for PostCampaigns for application/json ContentType.
type PostCampaignsJSONRequestBody PostCampaignsJSONBody

// PutCampaignsIdJSONRequestBody defines body for PutCampaignsId for application/json ContentType.
type PutCampaignsIdJSONRequestBody PutCampaignsIdJSONBody

// PutCampaignsIdStatusJSONRequestBody defines body for PutCampaignsIdStatus for application/json ContentType.
type PutCampaignsIdStatusJSONRequestBody PutCampaignsIdStatusJSONBody

// PostChatbotsJSONRequestBody defines body for PostChatbots for application/json ContentType.
type PostChatbotsJSONRequestBody PostChatbotsJSONBody

// PutChatbotsIdJSONRequestBody defines body for PutChatbotsId for application/json ContentType.
type PutChatbotsIdJSONRequestBody PutChatbotsIdJSONBody

// PostChatmessagesJSONRequestBody defines body for PostChatmessages for application/json ContentType.
type PostChatmessagesJSONRequestBody PostChatmessagesJSONBody

// PostChatroommessagesJSONRequestBody defines body for PostChatroommessages for application/json ContentType.
type PostChatroommessagesJSONRequestBody PostChatroommessagesJSONBody

// PostChatroomsJSONRequestBody defines body for PostChatrooms for application/json ContentType.
type PostChatroomsJSONRequestBody PostChatroomsJSONBody

// PutChatroomsIdJSONRequestBody defines body for PutChatroomsId for application/json ContentType.
type PutChatroomsIdJSONRequestBody PutChatroomsIdJSONBody

// PostChatsJSONRequestBody defines body for PostChats for application/json ContentType.
type PostChatsJSONRequestBody PostChatsJSONBody

// PutChatsIdJSONRequestBody defines body for PutChatsId for application/json ContentType.
type PutChatsIdJSONRequestBody PutChatsIdJSONBody

// PostChatsIdParticipantIdsJSONRequestBody defines body for PostChatsIdParticipantIds for application/json ContentType.
type PostChatsIdParticipantIdsJSONRequestBody PostChatsIdParticipantIdsJSONBody

// PostConferencesJSONRequestBody defines body for PostConferences for application/json ContentType.
type PostConferencesJSONRequestBody PostConferencesJSONBody

// PutConferencesIdJSONRequestBody defines body for PutConferencesId for application/json ContentType.
type PutConferencesIdJSONRequestBody PutConferencesIdJSONBody

// PostConferencesIdTranscribeStartJSONRequestBody defines body for PostConferencesIdTranscribeStart for application/json ContentType.
type PostConferencesIdTranscribeStartJSONRequestBody PostConferencesIdTranscribeStartJSONBody

// PostConversationAccountsJSONRequestBody defines body for PostConversationAccounts for application/json ContentType.
type PostConversationAccountsJSONRequestBody PostConversationAccountsJSONBody

// PutConversationAccountsIdJSONRequestBody defines body for PutConversationAccountsId for application/json ContentType.
type PutConversationAccountsIdJSONRequestBody PutConversationAccountsIdJSONBody

// PutConversationsIdJSONRequestBody defines body for PutConversationsId for application/json ContentType.
type PutConversationsIdJSONRequestBody PutConversationsIdJSONBody

// PostConversationsIdMessagesJSONRequestBody defines body for PostConversationsIdMessages for application/json ContentType.
type PostConversationsIdMessagesJSONRequestBody PostConversationsIdMessagesJSONBody

// PutCustomerJSONRequestBody defines body for PutCustomer for application/json ContentType.
type PutCustomerJSONRequestBody PutCustomerJSONBody

// PutCustomerBillingAccountIdJSONRequestBody defines body for PutCustomerBillingAccountId for application/json ContentType.
type PutCustomerBillingAccountIdJSONRequestBody PutCustomerBillingAccountIdJSONBody

// PostCustomersJSONRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody PostCustomersJSONBody

// PutCustomersIdJSONRequestBody defines body for PutCustomersId for application/json ContentType.
type PutCustomersIdJSONRequestBody PutCustomersIdJSONBody

// PutCustomersIdBillingAccountIdJSONRequestBody defines body for PutCustomersIdBillingAccountId for application/json ContentType.
type PutCustomersIdBillingAccountIdJSONRequestBody PutCustomersIdBillingAccountIdJSONBody

// PostExtensionsJSONRequestBody defines body for PostExtensions for application/json ContentType.
type PostExtensionsJSONRequestBody PostExtensionsJSONBody

// PutExtensionsIdJSONRequestBody defines body for PutExtensionsId for application/json ContentType.
type PutExtensionsIdJSONRequestBody PutExtensionsIdJSONBody

// PostFilesMultipartRequestBody defines body for PostFiles for multipart/form-data ContentType.
type PostFilesMultipartRequestBody PostFilesMultipartBody

// PostFlowsJSONRequestBody defines body for PostFlows for application/json ContentType.
type PostFlowsJSONRequestBody PostFlowsJSONBody

// PutFlowsIdJSONRequestBody defines body for PutFlowsId for application/json ContentType.
type PutFlowsIdJSONRequestBody PutFlowsIdJSONBody

// PostGroupcallsJSONRequestBody defines body for PostGroupcalls for application/json ContentType.
type PostGroupcallsJSONRequestBody PostGroupcallsJSONBody

// PostMessagesJSONRequestBody defines body for PostMessages for application/json ContentType.
type PostMessagesJSONRequestBody PostMessagesJSONBody

// PostNumbersJSONRequestBody defines body for PostNumbers for application/json ContentType.
type PostNumbersJSONRequestBody PostNumbersJSONBody

// PostNumbersRenewJSONRequestBody defines body for PostNumbersRenew for application/json ContentType.
type PostNumbersRenewJSONRequestBody PostNumbersRenewJSONBody

// PutNumbersIdJSONRequestBody defines body for PutNumbersId for application/json ContentType.
type PutNumbersIdJSONRequestBody PutNumbersIdJSONBody

// PutNumbersIdFlowIdJSONRequestBody defines body for PutNumbersIdFlowId for application/json ContentType.
type PutNumbersIdFlowIdJSONRequestBody PutNumbersIdFlowIdJSONBody

// PostOutdialsJSONRequestBody defines body for PostOutdials for application/json ContentType.
type PostOutdialsJSONRequestBody PostOutdialsJSONBody

// PutOutdialsIdJSONRequestBody defines body for PutOutdialsId for application/json ContentType.
type PutOutdialsIdJSONRequestBody PutOutdialsIdJSONBody

// PutOutdialsIdCampaignIdJSONRequestBody defines body for PutOutdialsIdCampaignId for application/json ContentType.
type PutOutdialsIdCampaignIdJSONRequestBody PutOutdialsIdCampaignIdJSONBody

// PutOutdialsIdDataJSONRequestBody defines body for PutOutdialsIdData for application/json ContentType.
type PutOutdialsIdDataJSONRequestBody PutOutdialsIdDataJSONBody

// PostOutdialsIdTargetsJSONRequestBody defines body for PostOutdialsIdTargets for application/json ContentType.
type PostOutdialsIdTargetsJSONRequestBody PostOutdialsIdTargetsJSONBody

// PostOutplansJSONRequestBody defines body for PostOutplans for application/json ContentType.
type PostOutplansJSONRequestBody PostOutplansJSONBody

// PutOutplansIdJSONRequestBody defines body for PutOutplansId for application/json ContentType.
type PutOutplansIdJSONRequestBody PutOutplansIdJSONBody

// PostProvidersJSONRequestBody defines body for PostProviders for application/json ContentType.
type PostProvidersJSONRequestBody PostProvidersJSONBody

// PutProvidersIdJSONRequestBody defines body for PutProvidersId for application/json ContentType.
type PutProvidersIdJSONRequestBody PutProvidersIdJSONBody

// PostQueuesJSONRequestBody defines body for PostQueues for application/json ContentType.
type PostQueuesJSONRequestBody PostQueuesJSONBody

// PutQueuesIdJSONRequestBody defines body for PutQueuesId for application/json ContentType.
type PutQueuesIdJSONRequestBody PutQueuesIdJSONBody

// PutQueuesIdActionsJSONRequestBody defines body for PutQueuesIdActions for application/json ContentType.
type PutQueuesIdActionsJSONRequestBody PutQueuesIdActionsJSONBody

// PutQueuesIdRoutingMethodJSONRequestBody defines body for PutQueuesIdRoutingMethod for application/json ContentType.
type PutQueuesIdRoutingMethodJSONRequestBody PutQueuesIdRoutingMethodJSONBody

// PutQueuesIdTagIdsJSONRequestBody defines body for PutQueuesIdTagIds for application/json ContentType.
type PutQueuesIdTagIdsJSONRequestBody PutQueuesIdTagIdsJSONBody

// PostRoutesJSONRequestBody defines body for PostRoutes for application/json ContentType.
type PostRoutesJSONRequestBody PostRoutesJSONBody

// PutRoutesIdJSONRequestBody defines body for PutRoutesId for application/json ContentType.
type PutRoutesIdJSONRequestBody PutRoutesIdJSONBody

// PostServiceAgentsChatroommessagesJSONRequestBody defines body for PostServiceAgentsChatroommessages for application/json ContentType.
type PostServiceAgentsChatroommessagesJSONRequestBody = externalRef4.Messagechatroom

// PostServiceAgentsChatroomsJSONRequestBody defines body for PostServiceAgentsChatrooms for application/json ContentType.
type PostServiceAgentsChatroomsJSONRequestBody PostServiceAgentsChatroomsJSONBody

// PutServiceAgentsChatroomsIdJSONRequestBody defines body for PutServiceAgentsChatroomsId for application/json ContentType.
type PutServiceAgentsChatroomsIdJSONRequestBody PutServiceAgentsChatroomsIdJSONBody

// PostServiceAgentsConversationsIdMessagesJSONRequestBody defines body for PostServiceAgentsConversationsIdMessages for application/json ContentType.
type PostServiceAgentsConversationsIdMessagesJSONRequestBody PostServiceAgentsConversationsIdMessagesJSONBody

// PostServiceAgentsFilesMultipartRequestBody defines body for PostServiceAgentsFiles for multipart/form-data ContentType.
type PostServiceAgentsFilesMultipartRequestBody PostServiceAgentsFilesMultipartBody

// PutServiceAgentsMeJSONRequestBody defines body for PutServiceAgentsMe for application/json ContentType.
type PutServiceAgentsMeJSONRequestBody PutServiceAgentsMeJSONBody

// PutServiceAgentsMeAddressesJSONRequestBody defines body for PutServiceAgentsMeAddresses for application/json ContentType.
type PutServiceAgentsMeAddressesJSONRequestBody PutServiceAgentsMeAddressesJSONBody

// PutServiceAgentsMePasswordJSONRequestBody defines body for PutServiceAgentsMePassword for application/json ContentType.
type PutServiceAgentsMePasswordJSONRequestBody PutServiceAgentsMePasswordJSONBody

// PutServiceAgentsMeStatusJSONRequestBody defines body for PutServiceAgentsMeStatus for application/json ContentType.
type PutServiceAgentsMeStatusJSONRequestBody PutServiceAgentsMeStatusJSONBody

// PostStorageAccountsJSONRequestBody defines body for PostStorageAccounts for application/json ContentType.
type PostStorageAccountsJSONRequestBody PostStorageAccountsJSONBody

// PostStorageFilesMultipartRequestBody defines body for PostStorageFiles for multipart/form-data ContentType.
type PostStorageFilesMultipartRequestBody PostStorageFilesMultipartBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PostTranscribesJSONRequestBody defines body for PostTranscribes for application/json ContentType.
type PostTranscribesJSONRequestBody PostTranscribesJSONBody

// PostTransfersJSONRequestBody defines body for PostTransfers for application/json ContentType.
type PostTransfersJSONRequestBody PostTransfersJSONBody

// PostTrunksJSONRequestBody defines body for PostTrunks for application/json ContentType.
type PostTrunksJSONRequestBody PostTrunksJSONBody

// PutTrunksIdJSONRequestBody defines body for PutTrunksId for application/json ContentType.
type PutTrunksIdJSONRequestBody PutTrunksIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(c *gin.Context, params GetAccesskeysParams)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(c *gin.Context)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(c *gin.Context, id string)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(c *gin.Context, id string)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(c *gin.Context, id string)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(c *gin.Context, params GetActiveflowsParams)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(c *gin.Context)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(c *gin.Context, id string)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(c *gin.Context, id string)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(c *gin.Context, id string)
	// List agents
	// (GET /agents)
	GetAgents(c *gin.Context, params GetAgentsParams)
	// Create a new agent
	// (POST /agents)
	PostAgents(c *gin.Context)
	// Delete the agent
	// (DELETE /agents/{id})
	DeleteAgentsId(c *gin.Context, id string)
	// Get the agent
	// (GET /agents/{id})
	GetAgentsId(c *gin.Context, id string)
	// Update an agent
	// (PUT /agents/{id})
	PutAgentsId(c *gin.Context, id string)
	// Update an agent's addresses
	// (PUT /agents/{id}/addresses)
	PutAgentsIdAddresses(c *gin.Context, id string)
	// Update an agent's password
	// (PUT /agents/{id}/password)
	PutAgentsIdPassword(c *gin.Context, id string)
	// Update an agent's permission
	// (PUT /agents/{id}/permission)
	PutAgentsIdPermission(c *gin.Context, id string)
	// Update an agent's tag IDs
	// (PUT /agents/{id}/tag_ids)
	PutAgentsIdTagIds(c *gin.Context, id string)
	// List available numbers
	// (GET /available_numbers)
	GetAvailableNumbers(c *gin.Context, params GetAvailableNumbersParams)
	// Get list of billing accounts
	// (GET /billing_accounts)
	GetBillingAccounts(c *gin.Context, params GetBillingAccountsParams)
	// Create a new billing account
	// (POST /billing_accounts)
	PostBillingAccounts(c *gin.Context)
	// Delete billing account
	// (DELETE /billing_accounts/{id})
	DeleteBillingAccountsId(c *gin.Context, id openapi_types.UUID)
	// Get detailed billing account info
	// (GET /billing_accounts/{id})
	GetBillingAccountsId(c *gin.Context, id openapi_types.UUID)
	// Update billing account
	// (PUT /billing_accounts/{id})
	PutBillingAccountsId(c *gin.Context, id openapi_types.UUID)
	// Add balance to billing account
	// (POST /billing_accounts/{id}/balance_add_force)
	PostBillingAccountsIdBalanceAddForce(c *gin.Context, id openapi_types.UUID)
	// Subtract balance from billing account
	// (POST /billing_accounts/{id}/balance_subtract_force)
	PostBillingAccountsIdBalanceSubtractForce(c *gin.Context, id openapi_types.UUID)
	// Update billing account's payment info
	// (PUT /billing_accounts/{id}/payment_info)
	PutBillingAccountsIdPaymentInfo(c *gin.Context, id openapi_types.UUID)
	// Get list of calls
	// (GET /calls)
	GetCalls(c *gin.Context, params GetCallsParams)
	// Make an outbound call
	// (POST /calls)
	PostCalls(c *gin.Context)
	// Delete up the call
	// (DELETE /calls/{id})
	DeleteCallsId(c *gin.Context, id string)
	// Get detail call info
	// (GET /calls/{id})
	GetCallsId(c *gin.Context, id string)
	// Hang up the call
	// (POST /calls/{id}/hangup)
	PostCallsIdHangup(c *gin.Context, id string)
	// Unhold the call
	// (DELETE /calls/{id}/hold)
	DeleteCallsIdHold(c *gin.Context, id string)
	// Hold the call
	// (POST /calls/{id}/hold)
	PostCallsIdHold(c *gin.Context, id string)
	// Get media stream for the call
	// (GET /calls/{id}/media_stream)
	GetCallsIdMediaStream(c *gin.Context, id string)
	// Disable Music on Hold (MOH)
	// (DELETE /calls/{id}/moh)
	DeleteCallsIdMoh(c *gin.Context, id string)
	// Enable Music on Hold (MOH)
	// (POST /calls/{id}/moh)
	PostCallsIdMoh(c *gin.Context, id string)
	// Unmute the call
	// (DELETE /calls/{id}/mute)
	DeleteCallsIdMute(c *gin.Context, id string)
	// Mute the call
	// (POST /calls/{id}/mute)
	PostCallsIdMute(c *gin.Context, id string)
	// Un-silence a call
	// (DELETE /calls/{id}/silence)
	DeleteCallsIdSilence(c *gin.Context, id string)
	// Silence a call
	// (POST /calls/{id}/silence)
	PostCallsIdSilence(c *gin.Context, id string)
	// Talk to the call
	// (POST /calls/{id}/talk)
	PostCallsIdTalk(c *gin.Context, id string)
	// Get list of campaign calls
	// (GET /campaigncalls)
	GetCampaigncalls(c *gin.Context, params GetCampaigncallsParams)
	// Delete a campaign call
	// (DELETE /campaigncalls/{id})
	DeleteCampaigncallsId(c *gin.Context, id string)
	// Get campaign call details
	// (GET /campaigncalls/{id})
	GetCampaigncallsId(c *gin.Context, id string)
	// Get a list of campaigns
	// (GET /campaigns)
	GetCampaigns(c *gin.Context, params GetCampaignsParams)
	// Create a new campaign
	// (POST /campaigns)
	PostCampaigns(c *gin.Context)
	// Delete a campaign
	// (DELETE /campaigns/{id})
	DeleteCampaignsId(c *gin.Context, id string)
	// Get campaign details
	// (GET /campaigns/{id})
	GetCampaignsId(c *gin.Context, id string)
	// Update a campaign
	// (PUT /campaigns/{id})
	PutCampaignsId(c *gin.Context, id string)
	// Update campaign status
	// (PUT /campaigns/{id}/status)
	PutCampaignsIdStatus(c *gin.Context, id string)
	// Gets a list of chatbot calls
	// (GET /chatbotcalls)
	GetChatbotcalls(c *gin.Context, params GetChatbotcallsParams)
	// Delete a specific chatbot call
	// (DELETE /chatbotcalls/{id})
	DeleteChatbotcallsId(c *gin.Context, id string)
	// Get details of a specific chatbot call
	// (GET /chatbotcalls/{id})
	GetChatbotcallsId(c *gin.Context, id string)
	// Gets a list of chatbots.
	// (GET /chatbots)
	GetChatbots(c *gin.Context, params GetChatbotsParams)
	// Create a new chatbot.
	// (POST /chatbots)
	PostChatbots(c *gin.Context)
	// Delete a chatbot.
	// (DELETE /chatbots/{id})
	DeleteChatbotsId(c *gin.Context, id string)
	// Get chatbot details.
	// (GET /chatbots/{id})
	GetChatbotsId(c *gin.Context, id string)
	// Update a chatbot.
	// (PUT /chatbots/{id})
	PutChatbotsId(c *gin.Context, id string)
	// Retrieve a list of chat messages
	// (GET /chatmessages)
	GetChatmessages(c *gin.Context, params GetChatmessagesParams)
	// Create a new chat message
	// (POST /chatmessages)
	PostChatmessages(c *gin.Context)
	// Delete a chat message
	// (DELETE /chatmessages/{id})
	DeleteChatmessagesId(c *gin.Context, id string)
	// Retrieve details of a chat message
	// (GET /chatmessages/{id})
	GetChatmessagesId(c *gin.Context, id string)
	// Retrieve a list of chatroom messages
	// (GET /chatroommessages)
	GetChatroommessages(c *gin.Context, params GetChatroommessagesParams)
	// Create a new chatroom message
	// (POST /chatroommessages)
	PostChatroommessages(c *gin.Context)
	// Delete a chatroom message
	// (DELETE /chatroommessages/{id})
	DeleteChatroommessagesId(c *gin.Context, id string)
	// Get details of a specific chatroom message
	// (GET /chatroommessages/{id})
	GetChatroommessagesId(c *gin.Context, id string)
	// Gets a list of chatrooms.
	// (GET /chatrooms)
	GetChatrooms(c *gin.Context, params GetChatroomsParams)
	// Create a new chatroom.
	// (POST /chatrooms)
	PostChatrooms(c *gin.Context)
	// Delete a chatroom.
	// (DELETE /chatrooms/{id})
	DeleteChatroomsId(c *gin.Context, id string)
	// Get chatroom details.
	// (GET /chatrooms/{id})
	GetChatroomsId(c *gin.Context, id string)
	// Update a chatroom.
	// (PUT /chatrooms/{id})
	PutChatroomsId(c *gin.Context, id string)
	// Gets a list of chats.
	// (GET /chats)
	GetChats(c *gin.Context, params GetChatsParams)
	// Create a new chat.
	// (POST /chats)
	PostChats(c *gin.Context)
	// Delete a chat.
	// (DELETE /chats/{id})
	DeleteChatsId(c *gin.Context, id string)
	// Get details of a specific chat.
	// (GET /chats/{id})
	GetChatsId(c *gin.Context, id string)
	// Update a chat.
	// (PUT /chats/{id})
	PutChatsId(c *gin.Context, id string)
	// Add a participant to a chat.
	// (POST /chats/{id}/participant_ids)
	PostChatsIdParticipantIds(c *gin.Context, id string)
	// Remove a participant from a chat.
	// (DELETE /chats/{id}/participant_ids/{participant_id})
	DeleteChatsIdParticipantIdsParticipantId(c *gin.Context, id string, participantId string)
	// Get list of conference calls
	// (GET /conferencecalls)
	GetConferencecalls(c *gin.Context, params GetConferencecallsParams)
	// Remove a conference call
	// (DELETE /conferencecalls/{id})
	DeleteConferencecallsId(c *gin.Context, id string)
	// Get conference call details
	// (GET /conferencecalls/{id})
	GetConferencecallsId(c *gin.Context, id string)
	// Get list of conferences
	// (GET /conferences)
	GetConferences(c *gin.Context, params GetConferencesParams)
	// Create a new conference
	// (POST /conferences)
	PostConferences(c *gin.Context)
	// Delete a conference
	// (DELETE /conferences/{id})
	DeleteConferencesId(c *gin.Context, id string)
	// Get conference details
	// (GET /conferences/{id})
	GetConferencesId(c *gin.Context, id string)
	// Update conference details
	// (PUT /conferences/{id})
	PutConferencesId(c *gin.Context, id string)
	// Start media streaming for a conference
	// (GET /conferences/{id}/media_stream)
	GetConferencesIdMediaStream(c *gin.Context, id string)
	// Start conference recording
	// (POST /conferences/{id}/recording_start)
	PostConferencesIdRecordingStart(c *gin.Context, id string)
	// Stop conference recording
	// (POST /conferences/{id}/recording_stop)
	PostConferencesIdRecordingStop(c *gin.Context, id string)
	// Start conference transcription
	// (POST /conferences/{id}/transcribe_start)
	PostConferencesIdTranscribeStart(c *gin.Context, id string)
	// Stop conference transcription
	// (POST /conferences/{id}/transcribe_stop)
	PostConferencesIdTranscribeStop(c *gin.Context, id string)
	// Gets a list of conversation accounts
	// (GET /conversation_accounts)
	GetConversationAccounts(c *gin.Context, params GetConversationAccountsParams)
	// Create a new conversation account
	// (POST /conversation_accounts)
	PostConversationAccounts(c *gin.Context)
	// Delete a conversation account
	// (DELETE /conversation_accounts/{id})
	DeleteConversationAccountsId(c *gin.Context, id string)
	// Get details of a conversation account
	// (GET /conversation_accounts/{id})
	GetConversationAccountsId(c *gin.Context, id string)
	// Update a conversation account
	// (PUT /conversation_accounts/{id})
	PutConversationAccountsId(c *gin.Context, id string)
	// Gets a list of conversations
	// (GET /conversations)
	GetConversations(c *gin.Context, params GetConversationsParams)
	// Returns detailed conversation info
	// (GET /conversations/{id})
	GetConversationsId(c *gin.Context, id string)
	// Update conversation info
	// (PUT /conversations/{id})
	PutConversationsId(c *gin.Context, id string)
	// Gets a list of conversation messages
	// (GET /conversations/{id}/messages)
	GetConversationsIdMessages(c *gin.Context, id string, params GetConversationsIdMessagesParams)
	// Send a message
	// (POST /conversations/{id}/messages)
	PostConversationsIdMessages(c *gin.Context, id string)
	// Get customer info
	// (GET /customer)
	GetCustomer(c *gin.Context)
	// Update a customer
	// (PUT /customer)
	PutCustomer(c *gin.Context)
	// Update a customer's billing account ID
	// (PUT /customer/billing_account_id)
	PutCustomerBillingAccountId(c *gin.Context)
	// Gets a list of customers.
	// (GET /customers)
	GetCustomers(c *gin.Context, params GetCustomersParams)
	// Create a new customer.
	// (POST /customers)
	PostCustomers(c *gin.Context)
	// Delete a customer.
	// (DELETE /customers/{id})
	DeleteCustomersId(c *gin.Context, id string)
	// Retrieve customer details.
	// (GET /customers/{id})
	GetCustomersId(c *gin.Context, id string)
	// Update a customer.
	// (PUT /customers/{id})
	PutCustomersId(c *gin.Context, id string)
	// Update a customer's billing account ID.
	// (PUT /customers/{id}/billing_account_id)
	PutCustomersIdBillingAccountId(c *gin.Context, id string)
	// Get a list of extensions
	// (GET /extensions)
	GetExtensions(c *gin.Context, params GetExtensionsParams)
	// Create a new extension
	// (POST /extensions)
	PostExtensions(c *gin.Context)
	// Delete an extension
	// (DELETE /extensions/{id})
	DeleteExtensionsId(c *gin.Context, id string)
	// Get extension details
	// (GET /extensions/{id})
	GetExtensionsId(c *gin.Context, id string)
	// Update an extension
	// (PUT /extensions/{id})
	PutExtensionsId(c *gin.Context, id string)
	// Gets a list of files
	// (GET /files)
	GetFiles(c *gin.Context, params GetFilesParams)
	// Upload file
	// (POST /files)
	PostFiles(c *gin.Context)
	// Delete a file
	// (DELETE /files/{id})
	DeleteFilesId(c *gin.Context, id string)
	// Returns detail file info
	// (GET /files/{id})
	GetFilesId(c *gin.Context, id string)
	// Retrieve a list of flows
	// (GET /flows)
	GetFlows(c *gin.Context, params GetFlowsParams)
	// Create a new flow
	// (POST /flows)
	PostFlows(c *gin.Context)
	// Delete a flow
	// (DELETE /flows/{id})
	DeleteFlowsId(c *gin.Context, id string)
	// Retrieve flow details
	// (GET /flows/{id})
	GetFlowsId(c *gin.Context, id string)
	// Update a flow
	// (PUT /flows/{id})
	PutFlowsId(c *gin.Context, id string)
	// Get a list of groupcalls
	// (GET /groupcalls)
	GetGroupcalls(c *gin.Context, params GetGroupcallsParams)
	// Create a new groupcall
	// (POST /groupcalls)
	PostGroupcalls(c *gin.Context)
	// Delete a groupcall
	// (DELETE /groupcalls/{id})
	DeleteGroupcallsId(c *gin.Context, id string)
	// Get detailed information of a groupcall
	// (GET /groupcalls/{id})
	GetGroupcallsId(c *gin.Context, id string)
	// Hangup the groupcall
	// (POST /groupcalls/{id})
	PostGroupcallsId(c *gin.Context, id string)
	// Get the logged-in agent
	// (GET /me)
	GetMe(c *gin.Context)
	// List all messages
	// (GET /messages)
	GetMessages(c *gin.Context, params GetMessagesParams)
	// Send a message and return the sent message
	// (POST /messages)
	PostMessages(c *gin.Context)
	// Delete a message by ID
	// (DELETE /messages/{id})
	DeleteMessagesId(c *gin.Context, id string)
	// Get a message by ID
	// (GET /messages/{id})
	GetMessagesId(c *gin.Context, id string)
	// List order numbers
	// (GET /numbers)
	GetNumbers(c *gin.Context, params GetNumbersParams)
	// Create a new number
	// (POST /numbers)
	PostNumbers(c *gin.Context)
	// Renew the numbers
	// (POST /numbers/renew)
	PostNumbersRenew(c *gin.Context)
	// Delete order number by ID
	// (DELETE /numbers/{id})
	DeleteNumbersId(c *gin.Context, id string)
	// Get order number by ID
	// (GET /numbers/{id})
	GetNumbersId(c *gin.Context, id string)
	// Update order number by ID
	// (PUT /numbers/{id})
	PutNumbersId(c *gin.Context, id string)
	// Delete order number by ID
	// (DELETE /numbers/{id}/flow_id)
	DeleteNumbersIdFlowId(c *gin.Context, id string)
	// Get order number by ID
	// (GET /numbers/{id}/flow_id)
	GetNumbersIdFlowId(c *gin.Context, id string)
	// Update order number by ID
	// (PUT /numbers/{id}/flow_id)
	PutNumbersIdFlowId(c *gin.Context, id string)
	// Retrieve a list of outdials.
	// (GET /outdials)
	GetOutdials(c *gin.Context, params GetOutdialsParams)
	// Create a new outdial.
	// (POST /outdials)
	PostOutdials(c *gin.Context)
	// Delete an existing outdial.
	// (DELETE /outdials/{id})
	DeleteOutdialsId(c *gin.Context, id string)
	// Retrieve an outdial by its ID.
	// (GET /outdials/{id})
	GetOutdialsId(c *gin.Context, id string, params GetOutdialsIdParams)
	// Update an outdial.
	// (PUT /outdials/{id})
	PutOutdialsId(c *gin.Context, id string)
	// Update an outdial's campaign ID.
	// (PUT /outdials/{id}/campaign_id)
	PutOutdialsIdCampaignId(c *gin.Context, id string)
	// Update an outdial's data.
	// (PUT /outdials/{id}/data)
	PutOutdialsIdData(c *gin.Context, id string)
	// Create a new target for an outdial.
	// (POST /outdials/{id}/targets)
	PostOutdialsIdTargets(c *gin.Context, id string)
	// Delete an outdial target.
	// (DELETE /outdials/{id}/targets/{target_id})
	DeleteOutdialsIdTargetsTargetId(c *gin.Context, id string, targetId string)
	// Retrieve an outdial target by its ID.
	// (GET /outdials/{id}/targets/{target_id})
	GetOutdialsIdTargetsTargetId(c *gin.Context, id string, targetId string)
	// Retrieve a list of outplans.
	// (GET /outplans)
	GetOutplans(c *gin.Context, params GetOutplansParams)
	// Create a new outplan.
	// (POST /outplans)
	PostOutplans(c *gin.Context)
	// Delete an existing outplan.
	// (DELETE /outplans/{id})
	DeleteOutplansId(c *gin.Context, id string)
	// Retrieve outplan details by ID.
	// (GET /outplans/{id})
	GetOutplansId(c *gin.Context, id string)
	// Update dial information of an existing outplan.
	// (PUT /outplans/{id})
	PutOutplansId(c *gin.Context, id string)
	// List providers of the given customer
	// (GET /providers)
	GetProviders(c *gin.Context, params GetProvidersParams)
	// Create a new provider
	// (POST /providers)
	PostProviders(c *gin.Context)
	// Delete provider by ID
	// (DELETE /providers/{id})
	DeleteProvidersId(c *gin.Context, id string)
	// Get provider by ID
	// (GET /providers/{id})
	GetProvidersId(c *gin.Context, id string)
	// Update provider information
	// (PUT /providers/{id})
	PutProvidersId(c *gin.Context, id string)
	// List queue calls
	// (GET /queuecalls)
	GetQueuecalls(c *gin.Context, params GetQueuecallsParams)
	// Kick a queue call by reference ID
	// (POST /queuecalls/reference_id/{id}/kick)
	PostQueuecallsReferenceIdIdKick(c *gin.Context, id string)
	// Delete a queue call
	// (DELETE /queuecalls/{id})
	DeleteQueuecallsId(c *gin.Context, id string)
	// Get detailed queue call information
	// (GET /queuecalls/{id})
	GetQueuecallsId(c *gin.Context, id string)
	// Kick a queue call from the queue
	// (POST /queuecalls/{id}/kick)
	PostQueuecallsIdKick(c *gin.Context, id string)
	// List queues of the customer
	// (GET /queues)
	GetQueues(c *gin.Context, params GetQueuesParams)
	// Create a new queue
	// (POST /queues)
	PostQueues(c *gin.Context)
	// Delete a queue by ID
	// (DELETE /queues/{id})
	DeleteQueuesId(c *gin.Context, id string)
	// Get the queue by ID
	// (GET /queues/{id})
	GetQueuesId(c *gin.Context, id string)
	// Update the queue details
	// (PUT /queues/{id})
	PutQueuesId(c *gin.Context, id string)
	// Update the queue's action handle
	// (PUT /queues/{id}/actions)
	PutQueuesIdActions(c *gin.Context, id string)
	// Update the queue's routing method
	// (PUT /queues/{id}/routing_method)
	PutQueuesIdRoutingMethod(c *gin.Context, id string)
	// Update the queue's tag IDs
	// (PUT /queues/{id}/tag_ids)
	PutQueuesIdTagIds(c *gin.Context, id string)
	// Download the recording file
	// (GET /recordingfiles/{id})
	GetRecordingfilesId(c *gin.Context, id string)
	// List recordings
	// (GET /recordings)
	GetRecordings(c *gin.Context, params GetRecordingsParams)
	// Delete recording
	// (DELETE /recordings/{id})
	DeleteRecordingsId(c *gin.Context, id string)
	// Get recording details
	// (GET /recordings/{id})
	GetRecordingsId(c *gin.Context, id string)
	// List routes
	// (GET /routes)
	GetRoutes(c *gin.Context, params GetRoutesParams)
	// Create a new route
	// (POST /routes)
	PostRoutes(c *gin.Context)
	// Delete the route
	// (DELETE /routes/{id})
	DeleteRoutesId(c *gin.Context, id string)
	// Get a route
	// (GET /routes/{id})
	GetRoutesId(c *gin.Context, id string)
	// Update a route
	// (PUT /routes/{id})
	PutRoutesId(c *gin.Context, id string)
	// Retrieve a list of service agents
	// (GET /service_agents/agents)
	GetServiceAgentsAgents(c *gin.Context, params GetServiceAgentsAgentsParams)
	// Retrieve detailed information of a service agent
	// (GET /service_agents/agents/{id})
	GetServiceAgentsAgentsId(c *gin.Context, id string)
	// Retrieve a list of calls for the given customer
	// (GET /service_agents/calls)
	GetServiceAgentsCalls(c *gin.Context, params GetServiceAgentsCallsParams)
	// Retrieve detailed information of a specific call
	// (GET /service_agents/calls/{id})
	GetServiceAgentsCallsId(c *gin.Context, id string)
	// Retrieve a list of chatroom messages
	// (GET /service_agents/chatroommessages)
	GetServiceAgentsChatroommessages(c *gin.Context, params GetServiceAgentsChatroommessagesParams)
	// Create a new chatroom message
	// (POST /service_agents/chatroommessages)
	PostServiceAgentsChatroommessages(c *gin.Context)
	// Delete a specific chatroom message
	// (DELETE /service_agents/chatroommessages/{id})
	DeleteServiceAgentsChatroommessagesId(c *gin.Context, id string)
	// Retrieve detailed information of a specific chatroom message
	// (GET /service_agents/chatroommessages/{id})
	GetServiceAgentsChatroommessagesId(c *gin.Context, id string)
	// Get list of chatrooms
	// (GET /service_agents/chatrooms)
	GetServiceAgentsChatrooms(c *gin.Context, params GetServiceAgentsChatroomsParams)
	// Create a new chatroom and return the created chatroom's details
	// (POST /service_agents/chatrooms)
	PostServiceAgentsChatrooms(c *gin.Context)
	// Delete a chatroom and return the deleted chatroom's details
	// (DELETE /service_agents/chatrooms/{id})
	DeleteServiceAgentsChatroomsId(c *gin.Context, id string)
	// Get detailed information of a chatroom
	// (GET /service_agents/chatrooms/{id})
	GetServiceAgentsChatroomsId(c *gin.Context, id string)
	// Update the chatroom and return the updated information
	// (PUT /service_agents/chatrooms/{id})
	PutServiceAgentsChatroomsId(c *gin.Context, id string)
	// Get list of conversations
	// (GET /service_agents/conversations)
	GetServiceAgentsConversations(c *gin.Context, params GetServiceAgentsConversationsParams)
	// Get detailed conversation info
	// (GET /service_agents/conversations/{id})
	GetServiceAgentsConversationsId(c *gin.Context, id string)
	// Get list of conversation messages
	// (GET /service_agents/conversations/{id}/messages)
	GetServiceAgentsConversationsIdMessages(c *gin.Context, id string, params GetServiceAgentsConversationsIdMessagesParams)
	// Send a message to the conversation
	// (POST /service_agents/conversations/{id}/messages)
	PostServiceAgentsConversationsIdMessages(c *gin.Context, id string)
	// Get customer details
	// (GET /service_agents/customer)
	GetServiceAgentsCustomer(c *gin.Context)
	// Get list of extensions
	// (GET /service_agents/extensions)
	GetServiceAgentsExtensions(c *gin.Context, params GetServiceAgentsExtensionsParams)
	// Get extension details
	// (GET /service_agents/extensions/{id})
	GetServiceAgentsExtensionsId(c *gin.Context, id string)
	// Get list of files
	// (GET /service_agents/files)
	GetServiceAgentsFiles(c *gin.Context, params GetServiceAgentsFilesParams)
	// Upload a file
	// (POST /service_agents/files)
	PostServiceAgentsFiles(c *gin.Context)
	// Delete a file
	// (DELETE /service_agents/files/{id})
	DeleteServiceAgentsFilesId(c *gin.Context, id string)
	// Get file details
	// (GET /service_agents/files/{id})
	GetServiceAgentsFilesId(c *gin.Context, id string)
	// Get authenticated agent's details
	// (GET /service_agents/me)
	GetServiceAgentsMe(c *gin.Context)
	// Update authenticated agent's information
	// (PUT /service_agents/me)
	PutServiceAgentsMe(c *gin.Context)
	// Update authenticated agent's addresses
	// (PUT /service_agents/me/addresses)
	PutServiceAgentsMeAddresses(c *gin.Context)
	// Update authenticated agent's password
	// (PUT /service_agents/me/password)
	PutServiceAgentsMePassword(c *gin.Context)
	// Update authenticated agent's status
	// (PUT /service_agents/me/status)
	PutServiceAgentsMeStatus(c *gin.Context)
	// Establish a WebSocket connection
	// (GET /service_agents/ws)
	GetServiceAgentsWs(c *gin.Context)
	// Get a list of storage accounts
	// (GET /storage_accounts)
	GetStorageAccounts(c *gin.Context, params GetStorageAccountsParams)
	// Create a new storage account
	// (POST /storage_accounts)
	PostStorageAccounts(c *gin.Context)
	// Delete a specific storage account
	// (DELETE /storage_accounts/{id})
	DeleteStorageAccountsId(c *gin.Context, id string)
	// Get details of a specific storage account
	// (GET /storage_accounts/{id})
	GetStorageAccountsId(c *gin.Context, id string)
	// Get a list of files
	// (GET /storage_files)
	GetStorageFiles(c *gin.Context, params GetStorageFilesParams)
	// Upload a file and create a call with it
	// (POST /storage_files)
	PostStorageFiles(c *gin.Context)
	// Delete a file
	// (DELETE /storage_files/{id})
	DeleteStorageFilesId(c *gin.Context, id string)
	// Get file details by ID
	// (GET /storage_files/{id})
	GetStorageFilesId(c *gin.Context, id string)
	// List tags
	// (GET /tags)
	GetTags(c *gin.Context, params GetTagsParams)
	// Create a new tag.
	// (POST /tags)
	PostTags(c *gin.Context)
	// Delete the tag
	// (DELETE /tags/{id})
	DeleteTagsId(c *gin.Context, id string)
	// Get the tag
	// (GET /tags/{id})
	GetTagsId(c *gin.Context, id string)
	// Update the tag info
	// (PUT /tags/{id})
	PutTagsId(c *gin.Context, id struct {
		Detail *string `json:"detail,omitempty"`
		Name   *string `json:"name,omitempty"`
	})
	// Get list of transcribes
	// (GET /transcribes)
	GetTranscribes(c *gin.Context, params GetTranscribesParams)
	// Create a transcribe
	// (POST /transcribes)
	PostTranscribes(c *gin.Context)
	// Delete a transcribe
	// (DELETE /transcribes/{id})
	DeleteTranscribesId(c *gin.Context, id string)
	// Get detailed transcribe info
	// (GET /transcribes/{id})
	GetTranscribesId(c *gin.Context, id string)
	// Stop an ongoing transcription
	// (POST /transcribes/{id}/stop)
	PostTranscribesIdStop(c *gin.Context, id string)
	// Retrieve a list of transcripts
	// (GET /transcripts)
	GetTranscripts(c *gin.Context, params GetTranscriptsParams)
	// Start a transfer
	// (POST /transfers)
	PostTransfers(c *gin.Context)
	// Retrieve a list of trunks.
	// (GET /trunks)
	GetTrunks(c *gin.Context, params GetTrunksParams)
	// Create a new trunk.
	// (POST /trunks)
	PostTrunks(c *gin.Context)
	// Delete a trunk.
	// (DELETE /trunks/{id})
	DeleteTrunksId(c *gin.Context, id string)
	// Retrieve trunk details.
	// (GET /trunks/{id})
	GetTrunksId(c *gin.Context, id string)
	// Update a trunk.
	// (PUT /trunks/{id})
	PutTrunksId(c *gin.Context, id string)
	// Create a new websocket connection.
	// (GET /ws)
	GetWs(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeys(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccesskeysParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeys(c, params)
}

// PostAccesskeys operation middleware
func (siw *ServerInterfaceWrapper) PostAccesskeys(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAccesskeys(c)
}

// DeleteAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccesskeysId(c, id)
}

// GetAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) GetAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccesskeysId(c, id)
}

// PutAccesskeysId operation middleware
func (siw *ServerInterfaceWrapper) PutAccesskeysId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAccesskeysId(c, id)
}

// GetActiveflows operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflows(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActiveflowsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflows(c, params)
}

// PostActiveflows operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflows(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflows(c)
}

// DeleteActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteActiveflowsId(c, id)
}

// GetActiveflowsId operation middleware
func (siw *ServerInterfaceWrapper) GetActiveflowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveflowsId(c, id)
}

// PostActiveflowsIdStop operation middleware
func (siw *ServerInterfaceWrapper) PostActiveflowsIdStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostActiveflowsIdStop(c, id)
}

// GetAgents operation middleware
func (siw *ServerInterfaceWrapper) GetAgents(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAgentsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag_ids", c.Request.URL.Query(), &params.TagIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgents(c, params)
}

// PostAgents operation middleware
func (siw *ServerInterfaceWrapper) PostAgents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAgents(c)
}

// DeleteAgentsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAgentsId(c, id)
}

// GetAgentsId operation middleware
func (siw *ServerInterfaceWrapper) GetAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgentsId(c, id)
}

// PutAgentsId operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsId(c, id)
}

// PutAgentsIdAddresses operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdAddresses(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdAddresses(c, id)
}

// PutAgentsIdPassword operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdPassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdPassword(c, id)
}

// PutAgentsIdPermission operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdPermission(c, id)
}

// PutAgentsIdTagIds operation middleware
func (siw *ServerInterfaceWrapper) PutAgentsIdTagIds(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAgentsIdTagIds(c, id)
}

// GetAvailableNumbers operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableNumbers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableNumbersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "country_code" -------------

	if paramValue := c.Query("country_code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument country_code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "country_code", c.Request.URL.Query(), &params.CountryCode)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailableNumbers(c, params)
}

// GetBillingAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetBillingAccounts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingAccountsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBillingAccounts(c, params)
}

// PostBillingAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccounts(c)
}

// DeleteBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBillingAccountsId(c, id)
}

// GetBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) GetBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBillingAccountsId(c, id)
}

// PutBillingAccountsId operation middleware
func (siw *ServerInterfaceWrapper) PutBillingAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBillingAccountsId(c, id)
}

// PostBillingAccountsIdBalanceAddForce operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccountsIdBalanceAddForce(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccountsIdBalanceAddForce(c, id)
}

// PostBillingAccountsIdBalanceSubtractForce operation middleware
func (siw *ServerInterfaceWrapper) PostBillingAccountsIdBalanceSubtractForce(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBillingAccountsIdBalanceSubtractForce(c, id)
}

// PutBillingAccountsIdPaymentInfo operation middleware
func (siw *ServerInterfaceWrapper) PutBillingAccountsIdPaymentInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBillingAccountsIdPaymentInfo(c, id)
}

// GetCalls operation middleware
func (siw *ServerInterfaceWrapper) GetCalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCalls(c, params)
}

// PostCalls operation middleware
func (siw *ServerInterfaceWrapper) PostCalls(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCalls(c)
}

// DeleteCallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsId(c, id)
}

// GetCallsId operation middleware
func (siw *ServerInterfaceWrapper) GetCallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallsId(c, id)
}

// PostCallsIdHangup operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdHangup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdHangup(c, id)
}

// DeleteCallsIdHold operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdHold(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdHold(c, id)
}

// PostCallsIdHold operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdHold(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdHold(c, id)
}

// GetCallsIdMediaStream operation middleware
func (siw *ServerInterfaceWrapper) GetCallsIdMediaStream(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCallsIdMediaStream(c, id)
}

// DeleteCallsIdMoh operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdMoh(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdMoh(c, id)
}

// PostCallsIdMoh operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdMoh(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdMoh(c, id)
}

// DeleteCallsIdMute operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdMute(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdMute(c, id)
}

// PostCallsIdMute operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdMute(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdMute(c, id)
}

// DeleteCallsIdSilence operation middleware
func (siw *ServerInterfaceWrapper) DeleteCallsIdSilence(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCallsIdSilence(c, id)
}

// PostCallsIdSilence operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdSilence(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdSilence(c, id)
}

// PostCallsIdTalk operation middleware
func (siw *ServerInterfaceWrapper) PostCallsIdTalk(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCallsIdTalk(c, id)
}

// GetCampaigncalls operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigncalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaigncallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigncalls(c, params)
}

// DeleteCampaigncallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaigncallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCampaigncallsId(c, id)
}

// GetCampaigncallsId operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigncallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigncallsId(c, id)
}

// GetCampaigns operation middleware
func (siw *ServerInterfaceWrapper) GetCampaigns(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaigns(c, params)
}

// PostCampaigns operation middleware
func (siw *ServerInterfaceWrapper) PostCampaigns(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCampaigns(c)
}

// DeleteCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCampaignsId(c, id)
}

// GetCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCampaignsId(c, id)
}

// PutCampaignsId operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsId(c, id)
}

// PutCampaignsIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PutCampaignsIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCampaignsIdStatus(c, id)
}

// GetChatbotcalls operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotcalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatbotcallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotcalls(c, params)
}

// DeleteChatbotcallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatbotcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatbotcallsId(c, id)
}

// GetChatbotcallsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotcallsId(c, id)
}

// GetChatbots operation middleware
func (siw *ServerInterfaceWrapper) GetChatbots(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatbotsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbots(c, params)
}

// PostChatbots operation middleware
func (siw *ServerInterfaceWrapper) PostChatbots(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatbots(c)
}

// DeleteChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatbotsId(c, id)
}

// GetChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatbotsId(c, id)
}

// PutChatbotsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatbotsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatbotsId(c, id)
}

// GetChatmessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatmessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatmessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatmessages(c, params)
}

// PostChatmessages operation middleware
func (siw *ServerInterfaceWrapper) PostChatmessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatmessages(c)
}

// DeleteChatmessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatmessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatmessagesId(c, id)
}

// GetChatmessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetChatmessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatmessagesId(c, id)
}

// GetChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatroommessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatroommessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "chatroom_id" -------------

	if paramValue := c.Query("chatroom_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument chatroom_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "chatroom_id", c.Request.URL.Query(), &params.ChatroomId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chatroom_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroommessages(c, params)
}

// PostChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) PostChatroommessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatroommessages(c)
}

// DeleteChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatroommessagesId(c, id)
}

// GetChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroommessagesId(c, id)
}

// GetChatrooms operation middleware
func (siw *ServerInterfaceWrapper) GetChatrooms(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatroomsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "owner_id" -------------

	if paramValue := c.Query("owner_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument owner_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "owner_id", c.Request.URL.Query(), &params.OwnerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owner_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatrooms(c, params)
}

// PostChatrooms operation middleware
func (siw *ServerInterfaceWrapper) PostChatrooms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatrooms(c)
}

// DeleteChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatroomsId(c, id)
}

// GetChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatroomsId(c, id)
}

// PutChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatroomsId(c, id)
}

// GetChats operation middleware
func (siw *ServerInterfaceWrapper) GetChats(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChats(c, params)
}

// PostChats operation middleware
func (siw *ServerInterfaceWrapper) PostChats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChats(c)
}

// DeleteChatsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatsId(c, id)
}

// GetChatsId operation middleware
func (siw *ServerInterfaceWrapper) GetChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChatsId(c, id)
}

// PutChatsId operation middleware
func (siw *ServerInterfaceWrapper) PutChatsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutChatsId(c, id)
}

// PostChatsIdParticipantIds operation middleware
func (siw *ServerInterfaceWrapper) PostChatsIdParticipantIds(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostChatsIdParticipantIds(c, id)
}

// DeleteChatsIdParticipantIdsParticipantId operation middleware
func (siw *ServerInterfaceWrapper) DeleteChatsIdParticipantIdsParticipantId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "participant_id" -------------
	var participantId string

	err = runtime.BindStyledParameterWithOptions("simple", "participant_id", c.Param("participant_id"), &participantId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter participant_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteChatsIdParticipantIdsParticipantId(c, id, participantId)
}

// GetConferencecalls operation middleware
func (siw *ServerInterfaceWrapper) GetConferencecalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConferencecallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencecalls(c, params)
}

// DeleteConferencecallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteConferencecallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteConferencecallsId(c, id)
}

// GetConferencecallsId operation middleware
func (siw *ServerInterfaceWrapper) GetConferencecallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencecallsId(c, id)
}

// GetConferences operation middleware
func (siw *ServerInterfaceWrapper) GetConferences(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConferencesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferences(c, params)
}

// PostConferences operation middleware
func (siw *ServerInterfaceWrapper) PostConferences(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferences(c)
}

// DeleteConferencesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteConferencesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteConferencesId(c, id)
}

// GetConferencesId operation middleware
func (siw *ServerInterfaceWrapper) GetConferencesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencesId(c, id)
}

// PutConferencesId operation middleware
func (siw *ServerInterfaceWrapper) PutConferencesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutConferencesId(c, id)
}

// GetConferencesIdMediaStream operation middleware
func (siw *ServerInterfaceWrapper) GetConferencesIdMediaStream(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConferencesIdMediaStream(c, id)
}

// PostConferencesIdRecordingStart operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdRecordingStart(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdRecordingStart(c, id)
}

// PostConferencesIdRecordingStop operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdRecordingStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdRecordingStop(c, id)
}

// PostConferencesIdTranscribeStart operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdTranscribeStart(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdTranscribeStart(c, id)
}

// PostConferencesIdTranscribeStop operation middleware
func (siw *ServerInterfaceWrapper) PostConferencesIdTranscribeStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConferencesIdTranscribeStop(c, id)
}

// GetConversationAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetConversationAccounts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConversationAccountsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConversationAccounts(c, params)
}

// PostConversationAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostConversationAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConversationAccounts(c)
}

// DeleteConversationAccountsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteConversationAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteConversationAccountsId(c, id)
}

// GetConversationAccountsId operation middleware
func (siw *ServerInterfaceWrapper) GetConversationAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConversationAccountsId(c, id)
}

// PutConversationAccountsId operation middleware
func (siw *ServerInterfaceWrapper) PutConversationAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutConversationAccountsId(c, id)
}

// GetConversations operation middleware
func (siw *ServerInterfaceWrapper) GetConversations(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConversationsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConversations(c, params)
}

// GetConversationsId operation middleware
func (siw *ServerInterfaceWrapper) GetConversationsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConversationsId(c, id)
}

// PutConversationsId operation middleware
func (siw *ServerInterfaceWrapper) PutConversationsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutConversationsId(c, id)
}

// GetConversationsIdMessages operation middleware
func (siw *ServerInterfaceWrapper) GetConversationsIdMessages(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConversationsIdMessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConversationsIdMessages(c, id, params)
}

// PostConversationsIdMessages operation middleware
func (siw *ServerInterfaceWrapper) PostConversationsIdMessages(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConversationsIdMessages(c, id)
}

// GetCustomer operation middleware
func (siw *ServerInterfaceWrapper) GetCustomer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomer(c)
}

// PutCustomer operation middleware
func (siw *ServerInterfaceWrapper) PutCustomer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCustomer(c)
}

// PutCustomerBillingAccountId operation middleware
func (siw *ServerInterfaceWrapper) PutCustomerBillingAccountId(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCustomerBillingAccountId(c)
}

// GetCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetCustomers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomers(c, params)
}

// PostCustomers operation middleware
func (siw *ServerInterfaceWrapper) PostCustomers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCustomers(c)
}

// DeleteCustomersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCustomersId(c, id)
}

// GetCustomersId operation middleware
func (siw *ServerInterfaceWrapper) GetCustomersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCustomersId(c, id)
}

// PutCustomersId operation middleware
func (siw *ServerInterfaceWrapper) PutCustomersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCustomersId(c, id)
}

// PutCustomersIdBillingAccountId operation middleware
func (siw *ServerInterfaceWrapper) PutCustomersIdBillingAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCustomersIdBillingAccountId(c, id)
}

// GetExtensions operation middleware
func (siw *ServerInterfaceWrapper) GetExtensions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExtensionsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExtensions(c, params)
}

// PostExtensions operation middleware
func (siw *ServerInterfaceWrapper) PostExtensions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostExtensions(c)
}

// DeleteExtensionsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteExtensionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteExtensionsId(c, id)
}

// GetExtensionsId operation middleware
func (siw *ServerInterfaceWrapper) GetExtensionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetExtensionsId(c, id)
}

// PutExtensionsId operation middleware
func (siw *ServerInterfaceWrapper) PutExtensionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutExtensionsId(c, id)
}

// GetFiles operation middleware
func (siw *ServerInterfaceWrapper) GetFiles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFilesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFiles(c, params)
}

// PostFiles operation middleware
func (siw *ServerInterfaceWrapper) PostFiles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostFiles(c)
}

// DeleteFilesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteFilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFilesId(c, id)
}

// GetFilesId operation middleware
func (siw *ServerInterfaceWrapper) GetFilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFilesId(c, id)
}

// GetFlows operation middleware
func (siw *ServerInterfaceWrapper) GetFlows(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFlows(c, params)
}

// PostFlows operation middleware
func (siw *ServerInterfaceWrapper) PostFlows(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostFlows(c)
}

// DeleteFlowsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFlowsId(c, id)
}

// GetFlowsId operation middleware
func (siw *ServerInterfaceWrapper) GetFlowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFlowsId(c, id)
}

// PutFlowsId operation middleware
func (siw *ServerInterfaceWrapper) PutFlowsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutFlowsId(c, id)
}

// GetGroupcalls operation middleware
func (siw *ServerInterfaceWrapper) GetGroupcalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupcallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupcalls(c, params)
}

// PostGroupcalls operation middleware
func (siw *ServerInterfaceWrapper) PostGroupcalls(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroupcalls(c)
}

// DeleteGroupcallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupcallsId(c, id)
}

// GetGroupcallsId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupcallsId(c, id)
}

// PostGroupcallsId operation middleware
func (siw *ServerInterfaceWrapper) PostGroupcallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGroupcallsId(c, id)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// GetMessages operation middleware
func (siw *ServerInterfaceWrapper) GetMessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMessages(c, params)
}

// PostMessages operation middleware
func (siw *ServerInterfaceWrapper) PostMessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMessages(c)
}

// DeleteMessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMessagesId(c, id)
}

// GetMessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetMessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMessagesId(c, id)
}

// GetNumbers operation middleware
func (siw *ServerInterfaceWrapper) GetNumbers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNumbersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNumbers(c, params)
}

// PostNumbers operation middleware
func (siw *ServerInterfaceWrapper) PostNumbers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostNumbers(c)
}

// PostNumbersRenew operation middleware
func (siw *ServerInterfaceWrapper) PostNumbersRenew(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostNumbersRenew(c)
}

// DeleteNumbersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNumbersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNumbersId(c, id)
}

// GetNumbersId operation middleware
func (siw *ServerInterfaceWrapper) GetNumbersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNumbersId(c, id)
}

// PutNumbersId operation middleware
func (siw *ServerInterfaceWrapper) PutNumbersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutNumbersId(c, id)
}

// DeleteNumbersIdFlowId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNumbersIdFlowId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNumbersIdFlowId(c, id)
}

// GetNumbersIdFlowId operation middleware
func (siw *ServerInterfaceWrapper) GetNumbersIdFlowId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNumbersIdFlowId(c, id)
}

// PutNumbersIdFlowId operation middleware
func (siw *ServerInterfaceWrapper) PutNumbersIdFlowId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutNumbersIdFlowId(c, id)
}

// GetOutdials operation middleware
func (siw *ServerInterfaceWrapper) GetOutdials(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOutdialsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOutdials(c, params)
}

// PostOutdials operation middleware
func (siw *ServerInterfaceWrapper) PostOutdials(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOutdials(c)
}

// DeleteOutdialsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOutdialsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOutdialsId(c, id)
}

// GetOutdialsId operation middleware
func (siw *ServerInterfaceWrapper) GetOutdialsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOutdialsIdParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOutdialsId(c, id, params)
}

// PutOutdialsId operation middleware
func (siw *ServerInterfaceWrapper) PutOutdialsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOutdialsId(c, id)
}

// PutOutdialsIdCampaignId operation middleware
func (siw *ServerInterfaceWrapper) PutOutdialsIdCampaignId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOutdialsIdCampaignId(c, id)
}

// PutOutdialsIdData operation middleware
func (siw *ServerInterfaceWrapper) PutOutdialsIdData(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOutdialsIdData(c, id)
}

// PostOutdialsIdTargets operation middleware
func (siw *ServerInterfaceWrapper) PostOutdialsIdTargets(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOutdialsIdTargets(c, id)
}

// DeleteOutdialsIdTargetsTargetId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOutdialsIdTargetsTargetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "target_id" -------------
	var targetId string

	err = runtime.BindStyledParameterWithOptions("simple", "target_id", c.Param("target_id"), &targetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter target_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOutdialsIdTargetsTargetId(c, id, targetId)
}

// GetOutdialsIdTargetsTargetId operation middleware
func (siw *ServerInterfaceWrapper) GetOutdialsIdTargetsTargetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "target_id" -------------
	var targetId string

	err = runtime.BindStyledParameterWithOptions("simple", "target_id", c.Param("target_id"), &targetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter target_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOutdialsIdTargetsTargetId(c, id, targetId)
}

// GetOutplans operation middleware
func (siw *ServerInterfaceWrapper) GetOutplans(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOutplansParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOutplans(c, params)
}

// PostOutplans operation middleware
func (siw *ServerInterfaceWrapper) PostOutplans(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOutplans(c)
}

// DeleteOutplansId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOutplansId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOutplansId(c, id)
}

// GetOutplansId operation middleware
func (siw *ServerInterfaceWrapper) GetOutplansId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOutplansId(c, id)
}

// PutOutplansId operation middleware
func (siw *ServerInterfaceWrapper) PutOutplansId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOutplansId(c, id)
}

// GetProviders operation middleware
func (siw *ServerInterfaceWrapper) GetProviders(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvidersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProviders(c, params)
}

// PostProviders operation middleware
func (siw *ServerInterfaceWrapper) PostProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProviders(c)
}

// DeleteProvidersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProvidersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProvidersId(c, id)
}

// GetProvidersId operation middleware
func (siw *ServerInterfaceWrapper) GetProvidersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProvidersId(c, id)
}

// PutProvidersId operation middleware
func (siw *ServerInterfaceWrapper) PutProvidersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProvidersId(c, id)
}

// GetQueuecalls operation middleware
func (siw *ServerInterfaceWrapper) GetQueuecalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQueuecallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQueuecalls(c, params)
}

// PostQueuecallsReferenceIdIdKick operation middleware
func (siw *ServerInterfaceWrapper) PostQueuecallsReferenceIdIdKick(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostQueuecallsReferenceIdIdKick(c, id)
}

// DeleteQueuecallsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteQueuecallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteQueuecallsId(c, id)
}

// GetQueuecallsId operation middleware
func (siw *ServerInterfaceWrapper) GetQueuecallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQueuecallsId(c, id)
}

// PostQueuecallsIdKick operation middleware
func (siw *ServerInterfaceWrapper) PostQueuecallsIdKick(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostQueuecallsIdKick(c, id)
}

// GetQueues operation middleware
func (siw *ServerInterfaceWrapper) GetQueues(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQueuesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQueues(c, params)
}

// PostQueues operation middleware
func (siw *ServerInterfaceWrapper) PostQueues(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostQueues(c)
}

// DeleteQueuesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteQueuesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteQueuesId(c, id)
}

// GetQueuesId operation middleware
func (siw *ServerInterfaceWrapper) GetQueuesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetQueuesId(c, id)
}

// PutQueuesId operation middleware
func (siw *ServerInterfaceWrapper) PutQueuesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutQueuesId(c, id)
}

// PutQueuesIdActions operation middleware
func (siw *ServerInterfaceWrapper) PutQueuesIdActions(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutQueuesIdActions(c, id)
}

// PutQueuesIdRoutingMethod operation middleware
func (siw *ServerInterfaceWrapper) PutQueuesIdRoutingMethod(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutQueuesIdRoutingMethod(c, id)
}

// PutQueuesIdTagIds operation middleware
func (siw *ServerInterfaceWrapper) PutQueuesIdTagIds(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutQueuesIdTagIds(c, id)
}

// GetRecordingfilesId operation middleware
func (siw *ServerInterfaceWrapper) GetRecordingfilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecordingfilesId(c, id)
}

// GetRecordings operation middleware
func (siw *ServerInterfaceWrapper) GetRecordings(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordingsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecordings(c, params)
}

// DeleteRecordingsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecordingsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRecordingsId(c, id)
}

// GetRecordingsId operation middleware
func (siw *ServerInterfaceWrapper) GetRecordingsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecordingsId(c, id)
}

// GetRoutes operation middleware
func (siw *ServerInterfaceWrapper) GetRoutes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRoutesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoutes(c, params)
}

// PostRoutes operation middleware
func (siw *ServerInterfaceWrapper) PostRoutes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRoutes(c)
}

// DeleteRoutesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRoutesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRoutesId(c, id)
}

// GetRoutesId operation middleware
func (siw *ServerInterfaceWrapper) GetRoutesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoutesId(c, id)
}

// PutRoutesId operation middleware
func (siw *ServerInterfaceWrapper) PutRoutesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutRoutesId(c, id)
}

// GetServiceAgentsAgents operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsAgents(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsAgentsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsAgents(c, params)
}

// GetServiceAgentsAgentsId operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsAgentsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsAgentsId(c, id)
}

// GetServiceAgentsCalls operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsCalls(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsCallsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsCalls(c, params)
}

// GetServiceAgentsCallsId operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsCallsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsCallsId(c, id)
}

// GetServiceAgentsChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsChatroommessages(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsChatroommessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "chatroom_id" -------------

	if paramValue := c.Query("chatroom_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument chatroom_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "chatroom_id", c.Request.URL.Query(), &params.ChatroomId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chatroom_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsChatroommessages(c, params)
}

// PostServiceAgentsChatroommessages operation middleware
func (siw *ServerInterfaceWrapper) PostServiceAgentsChatroommessages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostServiceAgentsChatroommessages(c)
}

// DeleteServiceAgentsChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteServiceAgentsChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteServiceAgentsChatroommessagesId(c, id)
}

// GetServiceAgentsChatroommessagesId operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsChatroommessagesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsChatroommessagesId(c, id)
}

// GetServiceAgentsChatrooms operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsChatrooms(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsChatroomsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsChatrooms(c, params)
}

// PostServiceAgentsChatrooms operation middleware
func (siw *ServerInterfaceWrapper) PostServiceAgentsChatrooms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostServiceAgentsChatrooms(c)
}

// DeleteServiceAgentsChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteServiceAgentsChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteServiceAgentsChatroomsId(c, id)
}

// GetServiceAgentsChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsChatroomsId(c, id)
}

// PutServiceAgentsChatroomsId operation middleware
func (siw *ServerInterfaceWrapper) PutServiceAgentsChatroomsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutServiceAgentsChatroomsId(c, id)
}

// GetServiceAgentsConversations operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsConversations(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsConversationsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsConversations(c, params)
}

// GetServiceAgentsConversationsId operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsConversationsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsConversationsId(c, id)
}

// GetServiceAgentsConversationsIdMessages operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsConversationsIdMessages(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsConversationsIdMessagesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsConversationsIdMessages(c, id, params)
}

// PostServiceAgentsConversationsIdMessages operation middleware
func (siw *ServerInterfaceWrapper) PostServiceAgentsConversationsIdMessages(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostServiceAgentsConversationsIdMessages(c, id)
}

// GetServiceAgentsCustomer operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsCustomer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsCustomer(c)
}

// GetServiceAgentsExtensions operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsExtensions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsExtensionsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsExtensions(c, params)
}

// GetServiceAgentsExtensionsId operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsExtensionsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsExtensionsId(c, id)
}

// GetServiceAgentsFiles operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsFiles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceAgentsFilesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsFiles(c, params)
}

// PostServiceAgentsFiles operation middleware
func (siw *ServerInterfaceWrapper) PostServiceAgentsFiles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostServiceAgentsFiles(c)
}

// DeleteServiceAgentsFilesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteServiceAgentsFilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteServiceAgentsFilesId(c, id)
}

// GetServiceAgentsFilesId operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsFilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsFilesId(c, id)
}

// GetServiceAgentsMe operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsMe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsMe(c)
}

// PutServiceAgentsMe operation middleware
func (siw *ServerInterfaceWrapper) PutServiceAgentsMe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutServiceAgentsMe(c)
}

// PutServiceAgentsMeAddresses operation middleware
func (siw *ServerInterfaceWrapper) PutServiceAgentsMeAddresses(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutServiceAgentsMeAddresses(c)
}

// PutServiceAgentsMePassword operation middleware
func (siw *ServerInterfaceWrapper) PutServiceAgentsMePassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutServiceAgentsMePassword(c)
}

// PutServiceAgentsMeStatus operation middleware
func (siw *ServerInterfaceWrapper) PutServiceAgentsMeStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutServiceAgentsMeStatus(c)
}

// GetServiceAgentsWs operation middleware
func (siw *ServerInterfaceWrapper) GetServiceAgentsWs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceAgentsWs(c)
}

// GetStorageAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetStorageAccounts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStorageAccountsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStorageAccounts(c, params)
}

// PostStorageAccounts operation middleware
func (siw *ServerInterfaceWrapper) PostStorageAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostStorageAccounts(c)
}

// DeleteStorageAccountsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteStorageAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteStorageAccountsId(c, id)
}

// GetStorageAccountsId operation middleware
func (siw *ServerInterfaceWrapper) GetStorageAccountsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStorageAccountsId(c, id)
}

// GetStorageFiles operation middleware
func (siw *ServerInterfaceWrapper) GetStorageFiles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStorageFilesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStorageFiles(c, params)
}

// PostStorageFiles operation middleware
func (siw *ServerInterfaceWrapper) PostStorageFiles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostStorageFiles(c)
}

// DeleteStorageFilesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteStorageFilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteStorageFilesId(c, id)
}

// GetStorageFilesId operation middleware
func (siw *ServerInterfaceWrapper) GetStorageFilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStorageFilesId(c, id)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTags(c, params)
}

// PostTags operation middleware
func (siw *ServerInterfaceWrapper) PostTags(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTags(c)
}

// DeleteTagsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTagsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTagsId(c, id)
}

// GetTagsId operation middleware
func (siw *ServerInterfaceWrapper) GetTagsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTagsId(c, id)
}

// PutTagsId operation middleware
func (siw *ServerInterfaceWrapper) PutTagsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id struct {
		Detail *string `json:"detail,omitempty"`
		Name   *string `json:"name,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTagsId(c, id)
}

// GetTranscribes operation middleware
func (siw *ServerInterfaceWrapper) GetTranscribes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTranscribesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTranscribes(c, params)
}

// PostTranscribes operation middleware
func (siw *ServerInterfaceWrapper) PostTranscribes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTranscribes(c)
}

// DeleteTranscribesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTranscribesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTranscribesId(c, id)
}

// GetTranscribesId operation middleware
func (siw *ServerInterfaceWrapper) GetTranscribesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTranscribesId(c, id)
}

// PostTranscribesIdStop operation middleware
func (siw *ServerInterfaceWrapper) PostTranscribesIdStop(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTranscribesIdStop(c, id)
}

// GetTranscripts operation middleware
func (siw *ServerInterfaceWrapper) GetTranscripts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTranscriptsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTranscripts(c, params)
}

// PostTransfers operation middleware
func (siw *ServerInterfaceWrapper) PostTransfers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTransfers(c)
}

// GetTrunks operation middleware
func (siw *ServerInterfaceWrapper) GetTrunks(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrunksParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrunks(c, params)
}

// PostTrunks operation middleware
func (siw *ServerInterfaceWrapper) PostTrunks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTrunks(c)
}

// DeleteTrunksId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTrunksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTrunksId(c, id)
}

// GetTrunksId operation middleware
func (siw *ServerInterfaceWrapper) GetTrunksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrunksId(c, id)
}

// PutTrunksId operation middleware
func (siw *ServerInterfaceWrapper) PutTrunksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTrunksId(c, id)
}

// GetWs operation middleware
func (siw *ServerInterfaceWrapper) GetWs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWs(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accesskeys", wrapper.GetAccesskeys)
	router.POST(options.BaseURL+"/accesskeys", wrapper.PostAccesskeys)
	router.DELETE(options.BaseURL+"/accesskeys/:id", wrapper.DeleteAccesskeysId)
	router.GET(options.BaseURL+"/accesskeys/:id", wrapper.GetAccesskeysId)
	router.PUT(options.BaseURL+"/accesskeys/:id", wrapper.PutAccesskeysId)
	router.GET(options.BaseURL+"/activeflows", wrapper.GetActiveflows)
	router.POST(options.BaseURL+"/activeflows", wrapper.PostActiveflows)
	router.DELETE(options.BaseURL+"/activeflows/:id", wrapper.DeleteActiveflowsId)
	router.GET(options.BaseURL+"/activeflows/:id", wrapper.GetActiveflowsId)
	router.POST(options.BaseURL+"/activeflows/:id/stop", wrapper.PostActiveflowsIdStop)
	router.GET(options.BaseURL+"/agents", wrapper.GetAgents)
	router.POST(options.BaseURL+"/agents", wrapper.PostAgents)
	router.DELETE(options.BaseURL+"/agents/:id", wrapper.DeleteAgentsId)
	router.GET(options.BaseURL+"/agents/:id", wrapper.GetAgentsId)
	router.PUT(options.BaseURL+"/agents/:id", wrapper.PutAgentsId)
	router.PUT(options.BaseURL+"/agents/:id/addresses", wrapper.PutAgentsIdAddresses)
	router.PUT(options.BaseURL+"/agents/:id/password", wrapper.PutAgentsIdPassword)
	router.PUT(options.BaseURL+"/agents/:id/permission", wrapper.PutAgentsIdPermission)
	router.PUT(options.BaseURL+"/agents/:id/tag_ids", wrapper.PutAgentsIdTagIds)
	router.GET(options.BaseURL+"/available_numbers", wrapper.GetAvailableNumbers)
	router.GET(options.BaseURL+"/billing_accounts", wrapper.GetBillingAccounts)
	router.POST(options.BaseURL+"/billing_accounts", wrapper.PostBillingAccounts)
	router.DELETE(options.BaseURL+"/billing_accounts/:id", wrapper.DeleteBillingAccountsId)
	router.GET(options.BaseURL+"/billing_accounts/:id", wrapper.GetBillingAccountsId)
	router.PUT(options.BaseURL+"/billing_accounts/:id", wrapper.PutBillingAccountsId)
	router.POST(options.BaseURL+"/billing_accounts/:id/balance_add_force", wrapper.PostBillingAccountsIdBalanceAddForce)
	router.POST(options.BaseURL+"/billing_accounts/:id/balance_subtract_force", wrapper.PostBillingAccountsIdBalanceSubtractForce)
	router.PUT(options.BaseURL+"/billing_accounts/:id/payment_info", wrapper.PutBillingAccountsIdPaymentInfo)
	router.GET(options.BaseURL+"/calls", wrapper.GetCalls)
	router.POST(options.BaseURL+"/calls", wrapper.PostCalls)
	router.DELETE(options.BaseURL+"/calls/:id", wrapper.DeleteCallsId)
	router.GET(options.BaseURL+"/calls/:id", wrapper.GetCallsId)
	router.POST(options.BaseURL+"/calls/:id/hangup", wrapper.PostCallsIdHangup)
	router.DELETE(options.BaseURL+"/calls/:id/hold", wrapper.DeleteCallsIdHold)
	router.POST(options.BaseURL+"/calls/:id/hold", wrapper.PostCallsIdHold)
	router.GET(options.BaseURL+"/calls/:id/media_stream", wrapper.GetCallsIdMediaStream)
	router.DELETE(options.BaseURL+"/calls/:id/moh", wrapper.DeleteCallsIdMoh)
	router.POST(options.BaseURL+"/calls/:id/moh", wrapper.PostCallsIdMoh)
	router.DELETE(options.BaseURL+"/calls/:id/mute", wrapper.DeleteCallsIdMute)
	router.POST(options.BaseURL+"/calls/:id/mute", wrapper.PostCallsIdMute)
	router.DELETE(options.BaseURL+"/calls/:id/silence", wrapper.DeleteCallsIdSilence)
	router.POST(options.BaseURL+"/calls/:id/silence", wrapper.PostCallsIdSilence)
	router.POST(options.BaseURL+"/calls/:id/talk", wrapper.PostCallsIdTalk)
	router.GET(options.BaseURL+"/campaigncalls", wrapper.GetCampaigncalls)
	router.DELETE(options.BaseURL+"/campaigncalls/:id", wrapper.DeleteCampaigncallsId)
	router.GET(options.BaseURL+"/campaigncalls/:id", wrapper.GetCampaigncallsId)
	router.GET(options.BaseURL+"/campaigns", wrapper.GetCampaigns)
	router.POST(options.BaseURL+"/campaigns", wrapper.PostCampaigns)
	router.DELETE(options.BaseURL+"/campaigns/:id", wrapper.DeleteCampaignsId)
	router.GET(options.BaseURL+"/campaigns/:id", wrapper.GetCampaignsId)
	router.PUT(options.BaseURL+"/campaigns/:id", wrapper.PutCampaignsId)
	router.PUT(options.BaseURL+"/campaigns/:id/status", wrapper.PutCampaignsIdStatus)
	router.GET(options.BaseURL+"/chatbotcalls", wrapper.GetChatbotcalls)
	router.DELETE(options.BaseURL+"/chatbotcalls/:id", wrapper.DeleteChatbotcallsId)
	router.GET(options.BaseURL+"/chatbotcalls/:id", wrapper.GetChatbotcallsId)
	router.GET(options.BaseURL+"/chatbots", wrapper.GetChatbots)
	router.POST(options.BaseURL+"/chatbots", wrapper.PostChatbots)
	router.DELETE(options.BaseURL+"/chatbots/:id", wrapper.DeleteChatbotsId)
	router.GET(options.BaseURL+"/chatbots/:id", wrapper.GetChatbotsId)
	router.PUT(options.BaseURL+"/chatbots/:id", wrapper.PutChatbotsId)
	router.GET(options.BaseURL+"/chatmessages", wrapper.GetChatmessages)
	router.POST(options.BaseURL+"/chatmessages", wrapper.PostChatmessages)
	router.DELETE(options.BaseURL+"/chatmessages/:id", wrapper.DeleteChatmessagesId)
	router.GET(options.BaseURL+"/chatmessages/:id", wrapper.GetChatmessagesId)
	router.GET(options.BaseURL+"/chatroommessages", wrapper.GetChatroommessages)
	router.POST(options.BaseURL+"/chatroommessages", wrapper.PostChatroommessages)
	router.DELETE(options.BaseURL+"/chatroommessages/:id", wrapper.DeleteChatroommessagesId)
	router.GET(options.BaseURL+"/chatroommessages/:id", wrapper.GetChatroommessagesId)
	router.GET(options.BaseURL+"/chatrooms", wrapper.GetChatrooms)
	router.POST(options.BaseURL+"/chatrooms", wrapper.PostChatrooms)
	router.DELETE(options.BaseURL+"/chatrooms/:id", wrapper.DeleteChatroomsId)
	router.GET(options.BaseURL+"/chatrooms/:id", wrapper.GetChatroomsId)
	router.PUT(options.BaseURL+"/chatrooms/:id", wrapper.PutChatroomsId)
	router.GET(options.BaseURL+"/chats", wrapper.GetChats)
	router.POST(options.BaseURL+"/chats", wrapper.PostChats)
	router.DELETE(options.BaseURL+"/chats/:id", wrapper.DeleteChatsId)
	router.GET(options.BaseURL+"/chats/:id", wrapper.GetChatsId)
	router.PUT(options.BaseURL+"/chats/:id", wrapper.PutChatsId)
	router.POST(options.BaseURL+"/chats/:id/participant_ids", wrapper.PostChatsIdParticipantIds)
	router.DELETE(options.BaseURL+"/chats/:id/participant_ids/:participant_id", wrapper.DeleteChatsIdParticipantIdsParticipantId)
	router.GET(options.BaseURL+"/conferencecalls", wrapper.GetConferencecalls)
	router.DELETE(options.BaseURL+"/conferencecalls/:id", wrapper.DeleteConferencecallsId)
	router.GET(options.BaseURL+"/conferencecalls/:id", wrapper.GetConferencecallsId)
	router.GET(options.BaseURL+"/conferences", wrapper.GetConferences)
	router.POST(options.BaseURL+"/conferences", wrapper.PostConferences)
	router.DELETE(options.BaseURL+"/conferences/:id", wrapper.DeleteConferencesId)
	router.GET(options.BaseURL+"/conferences/:id", wrapper.GetConferencesId)
	router.PUT(options.BaseURL+"/conferences/:id", wrapper.PutConferencesId)
	router.GET(options.BaseURL+"/conferences/:id/media_stream", wrapper.GetConferencesIdMediaStream)
	router.POST(options.BaseURL+"/conferences/:id/recording_start", wrapper.PostConferencesIdRecordingStart)
	router.POST(options.BaseURL+"/conferences/:id/recording_stop", wrapper.PostConferencesIdRecordingStop)
	router.POST(options.BaseURL+"/conferences/:id/transcribe_start", wrapper.PostConferencesIdTranscribeStart)
	router.POST(options.BaseURL+"/conferences/:id/transcribe_stop", wrapper.PostConferencesIdTranscribeStop)
	router.GET(options.BaseURL+"/conversation_accounts", wrapper.GetConversationAccounts)
	router.POST(options.BaseURL+"/conversation_accounts", wrapper.PostConversationAccounts)
	router.DELETE(options.BaseURL+"/conversation_accounts/:id", wrapper.DeleteConversationAccountsId)
	router.GET(options.BaseURL+"/conversation_accounts/:id", wrapper.GetConversationAccountsId)
	router.PUT(options.BaseURL+"/conversation_accounts/:id", wrapper.PutConversationAccountsId)
	router.GET(options.BaseURL+"/conversations", wrapper.GetConversations)
	router.GET(options.BaseURL+"/conversations/:id", wrapper.GetConversationsId)
	router.PUT(options.BaseURL+"/conversations/:id", wrapper.PutConversationsId)
	router.GET(options.BaseURL+"/conversations/:id/messages", wrapper.GetConversationsIdMessages)
	router.POST(options.BaseURL+"/conversations/:id/messages", wrapper.PostConversationsIdMessages)
	router.GET(options.BaseURL+"/customer", wrapper.GetCustomer)
	router.PUT(options.BaseURL+"/customer", wrapper.PutCustomer)
	router.PUT(options.BaseURL+"/customer/billing_account_id", wrapper.PutCustomerBillingAccountId)
	router.GET(options.BaseURL+"/customers", wrapper.GetCustomers)
	router.POST(options.BaseURL+"/customers", wrapper.PostCustomers)
	router.DELETE(options.BaseURL+"/customers/:id", wrapper.DeleteCustomersId)
	router.GET(options.BaseURL+"/customers/:id", wrapper.GetCustomersId)
	router.PUT(options.BaseURL+"/customers/:id", wrapper.PutCustomersId)
	router.PUT(options.BaseURL+"/customers/:id/billing_account_id", wrapper.PutCustomersIdBillingAccountId)
	router.GET(options.BaseURL+"/extensions", wrapper.GetExtensions)
	router.POST(options.BaseURL+"/extensions", wrapper.PostExtensions)
	router.DELETE(options.BaseURL+"/extensions/:id", wrapper.DeleteExtensionsId)
	router.GET(options.BaseURL+"/extensions/:id", wrapper.GetExtensionsId)
	router.PUT(options.BaseURL+"/extensions/:id", wrapper.PutExtensionsId)
	router.GET(options.BaseURL+"/files", wrapper.GetFiles)
	router.POST(options.BaseURL+"/files", wrapper.PostFiles)
	router.DELETE(options.BaseURL+"/files/:id", wrapper.DeleteFilesId)
	router.GET(options.BaseURL+"/files/:id", wrapper.GetFilesId)
	router.GET(options.BaseURL+"/flows", wrapper.GetFlows)
	router.POST(options.BaseURL+"/flows", wrapper.PostFlows)
	router.DELETE(options.BaseURL+"/flows/:id", wrapper.DeleteFlowsId)
	router.GET(options.BaseURL+"/flows/:id", wrapper.GetFlowsId)
	router.PUT(options.BaseURL+"/flows/:id", wrapper.PutFlowsId)
	router.GET(options.BaseURL+"/groupcalls", wrapper.GetGroupcalls)
	router.POST(options.BaseURL+"/groupcalls", wrapper.PostGroupcalls)
	router.DELETE(options.BaseURL+"/groupcalls/:id", wrapper.DeleteGroupcallsId)
	router.GET(options.BaseURL+"/groupcalls/:id", wrapper.GetGroupcallsId)
	router.POST(options.BaseURL+"/groupcalls/:id", wrapper.PostGroupcallsId)
	router.GET(options.BaseURL+"/me", wrapper.GetMe)
	router.GET(options.BaseURL+"/messages", wrapper.GetMessages)
	router.POST(options.BaseURL+"/messages", wrapper.PostMessages)
	router.DELETE(options.BaseURL+"/messages/:id", wrapper.DeleteMessagesId)
	router.GET(options.BaseURL+"/messages/:id", wrapper.GetMessagesId)
	router.GET(options.BaseURL+"/numbers", wrapper.GetNumbers)
	router.POST(options.BaseURL+"/numbers", wrapper.PostNumbers)
	router.POST(options.BaseURL+"/numbers/renew", wrapper.PostNumbersRenew)
	router.DELETE(options.BaseURL+"/numbers/:id", wrapper.DeleteNumbersId)
	router.GET(options.BaseURL+"/numbers/:id", wrapper.GetNumbersId)
	router.PUT(options.BaseURL+"/numbers/:id", wrapper.PutNumbersId)
	router.DELETE(options.BaseURL+"/numbers/:id/flow_id", wrapper.DeleteNumbersIdFlowId)
	router.GET(options.BaseURL+"/numbers/:id/flow_id", wrapper.GetNumbersIdFlowId)
	router.PUT(options.BaseURL+"/numbers/:id/flow_id", wrapper.PutNumbersIdFlowId)
	router.GET(options.BaseURL+"/outdials", wrapper.GetOutdials)
	router.POST(options.BaseURL+"/outdials", wrapper.PostOutdials)
	router.DELETE(options.BaseURL+"/outdials/:id", wrapper.DeleteOutdialsId)
	router.GET(options.BaseURL+"/outdials/:id", wrapper.GetOutdialsId)
	router.PUT(options.BaseURL+"/outdials/:id", wrapper.PutOutdialsId)
	router.PUT(options.BaseURL+"/outdials/:id/campaign_id", wrapper.PutOutdialsIdCampaignId)
	router.PUT(options.BaseURL+"/outdials/:id/data", wrapper.PutOutdialsIdData)
	router.POST(options.BaseURL+"/outdials/:id/targets", wrapper.PostOutdialsIdTargets)
	router.DELETE(options.BaseURL+"/outdials/:id/targets/:target_id", wrapper.DeleteOutdialsIdTargetsTargetId)
	router.GET(options.BaseURL+"/outdials/:id/targets/:target_id", wrapper.GetOutdialsIdTargetsTargetId)
	router.GET(options.BaseURL+"/outplans", wrapper.GetOutplans)
	router.POST(options.BaseURL+"/outplans", wrapper.PostOutplans)
	router.DELETE(options.BaseURL+"/outplans/:id", wrapper.DeleteOutplansId)
	router.GET(options.BaseURL+"/outplans/:id", wrapper.GetOutplansId)
	router.PUT(options.BaseURL+"/outplans/:id", wrapper.PutOutplansId)
	router.GET(options.BaseURL+"/providers", wrapper.GetProviders)
	router.POST(options.BaseURL+"/providers", wrapper.PostProviders)
	router.DELETE(options.BaseURL+"/providers/:id", wrapper.DeleteProvidersId)
	router.GET(options.BaseURL+"/providers/:id", wrapper.GetProvidersId)
	router.PUT(options.BaseURL+"/providers/:id", wrapper.PutProvidersId)
	router.GET(options.BaseURL+"/queuecalls", wrapper.GetQueuecalls)
	router.POST(options.BaseURL+"/queuecalls/reference_id/:id/kick", wrapper.PostQueuecallsReferenceIdIdKick)
	router.DELETE(options.BaseURL+"/queuecalls/:id", wrapper.DeleteQueuecallsId)
	router.GET(options.BaseURL+"/queuecalls/:id", wrapper.GetQueuecallsId)
	router.POST(options.BaseURL+"/queuecalls/:id/kick", wrapper.PostQueuecallsIdKick)
	router.GET(options.BaseURL+"/queues", wrapper.GetQueues)
	router.POST(options.BaseURL+"/queues", wrapper.PostQueues)
	router.DELETE(options.BaseURL+"/queues/:id", wrapper.DeleteQueuesId)
	router.GET(options.BaseURL+"/queues/:id", wrapper.GetQueuesId)
	router.PUT(options.BaseURL+"/queues/:id", wrapper.PutQueuesId)
	router.PUT(options.BaseURL+"/queues/:id/actions", wrapper.PutQueuesIdActions)
	router.PUT(options.BaseURL+"/queues/:id/routing_method", wrapper.PutQueuesIdRoutingMethod)
	router.PUT(options.BaseURL+"/queues/:id/tag_ids", wrapper.PutQueuesIdTagIds)
	router.GET(options.BaseURL+"/recordingfiles/:id", wrapper.GetRecordingfilesId)
	router.GET(options.BaseURL+"/recordings", wrapper.GetRecordings)
	router.DELETE(options.BaseURL+"/recordings/:id", wrapper.DeleteRecordingsId)
	router.GET(options.BaseURL+"/recordings/:id", wrapper.GetRecordingsId)
	router.GET(options.BaseURL+"/routes", wrapper.GetRoutes)
	router.POST(options.BaseURL+"/routes", wrapper.PostRoutes)
	router.DELETE(options.BaseURL+"/routes/:id", wrapper.DeleteRoutesId)
	router.GET(options.BaseURL+"/routes/:id", wrapper.GetRoutesId)
	router.PUT(options.BaseURL+"/routes/:id", wrapper.PutRoutesId)
	router.GET(options.BaseURL+"/service_agents/agents", wrapper.GetServiceAgentsAgents)
	router.GET(options.BaseURL+"/service_agents/agents/:id", wrapper.GetServiceAgentsAgentsId)
	router.GET(options.BaseURL+"/service_agents/calls", wrapper.GetServiceAgentsCalls)
	router.GET(options.BaseURL+"/service_agents/calls/:id", wrapper.GetServiceAgentsCallsId)
	router.GET(options.BaseURL+"/service_agents/chatroommessages", wrapper.GetServiceAgentsChatroommessages)
	router.POST(options.BaseURL+"/service_agents/chatroommessages", wrapper.PostServiceAgentsChatroommessages)
	router.DELETE(options.BaseURL+"/service_agents/chatroommessages/:id", wrapper.DeleteServiceAgentsChatroommessagesId)
	router.GET(options.BaseURL+"/service_agents/chatroommessages/:id", wrapper.GetServiceAgentsChatroommessagesId)
	router.GET(options.BaseURL+"/service_agents/chatrooms", wrapper.GetServiceAgentsChatrooms)
	router.POST(options.BaseURL+"/service_agents/chatrooms", wrapper.PostServiceAgentsChatrooms)
	router.DELETE(options.BaseURL+"/service_agents/chatrooms/:id", wrapper.DeleteServiceAgentsChatroomsId)
	router.GET(options.BaseURL+"/service_agents/chatrooms/:id", wrapper.GetServiceAgentsChatroomsId)
	router.PUT(options.BaseURL+"/service_agents/chatrooms/:id", wrapper.PutServiceAgentsChatroomsId)
	router.GET(options.BaseURL+"/service_agents/conversations", wrapper.GetServiceAgentsConversations)
	router.GET(options.BaseURL+"/service_agents/conversations/:id", wrapper.GetServiceAgentsConversationsId)
	router.GET(options.BaseURL+"/service_agents/conversations/:id/messages", wrapper.GetServiceAgentsConversationsIdMessages)
	router.POST(options.BaseURL+"/service_agents/conversations/:id/messages", wrapper.PostServiceAgentsConversationsIdMessages)
	router.GET(options.BaseURL+"/service_agents/customer", wrapper.GetServiceAgentsCustomer)
	router.GET(options.BaseURL+"/service_agents/extensions", wrapper.GetServiceAgentsExtensions)
	router.GET(options.BaseURL+"/service_agents/extensions/:id", wrapper.GetServiceAgentsExtensionsId)
	router.GET(options.BaseURL+"/service_agents/files", wrapper.GetServiceAgentsFiles)
	router.POST(options.BaseURL+"/service_agents/files", wrapper.PostServiceAgentsFiles)
	router.DELETE(options.BaseURL+"/service_agents/files/:id", wrapper.DeleteServiceAgentsFilesId)
	router.GET(options.BaseURL+"/service_agents/files/:id", wrapper.GetServiceAgentsFilesId)
	router.GET(options.BaseURL+"/service_agents/me", wrapper.GetServiceAgentsMe)
	router.PUT(options.BaseURL+"/service_agents/me", wrapper.PutServiceAgentsMe)
	router.PUT(options.BaseURL+"/service_agents/me/addresses", wrapper.PutServiceAgentsMeAddresses)
	router.PUT(options.BaseURL+"/service_agents/me/password", wrapper.PutServiceAgentsMePassword)
	router.PUT(options.BaseURL+"/service_agents/me/status", wrapper.PutServiceAgentsMeStatus)
	router.GET(options.BaseURL+"/service_agents/ws", wrapper.GetServiceAgentsWs)
	router.GET(options.BaseURL+"/storage_accounts", wrapper.GetStorageAccounts)
	router.POST(options.BaseURL+"/storage_accounts", wrapper.PostStorageAccounts)
	router.DELETE(options.BaseURL+"/storage_accounts/:id", wrapper.DeleteStorageAccountsId)
	router.GET(options.BaseURL+"/storage_accounts/:id", wrapper.GetStorageAccountsId)
	router.GET(options.BaseURL+"/storage_files", wrapper.GetStorageFiles)
	router.POST(options.BaseURL+"/storage_files", wrapper.PostStorageFiles)
	router.DELETE(options.BaseURL+"/storage_files/:id", wrapper.DeleteStorageFilesId)
	router.GET(options.BaseURL+"/storage_files/:id", wrapper.GetStorageFilesId)
	router.GET(options.BaseURL+"/tags", wrapper.GetTags)
	router.POST(options.BaseURL+"/tags", wrapper.PostTags)
	router.DELETE(options.BaseURL+"/tags/:id", wrapper.DeleteTagsId)
	router.GET(options.BaseURL+"/tags/:id", wrapper.GetTagsId)
	router.PUT(options.BaseURL+"/tags/:id", wrapper.PutTagsId)
	router.GET(options.BaseURL+"/transcribes", wrapper.GetTranscribes)
	router.POST(options.BaseURL+"/transcribes", wrapper.PostTranscribes)
	router.DELETE(options.BaseURL+"/transcribes/:id", wrapper.DeleteTranscribesId)
	router.GET(options.BaseURL+"/transcribes/:id", wrapper.GetTranscribesId)
	router.POST(options.BaseURL+"/transcribes/:id/stop", wrapper.PostTranscribesIdStop)
	router.GET(options.BaseURL+"/transcripts", wrapper.GetTranscripts)
	router.POST(options.BaseURL+"/transfers", wrapper.PostTransfers)
	router.GET(options.BaseURL+"/trunks", wrapper.GetTrunks)
	router.POST(options.BaseURL+"/trunks", wrapper.PostTrunks)
	router.DELETE(options.BaseURL+"/trunks/:id", wrapper.DeleteTrunksId)
	router.GET(options.BaseURL+"/trunks/:id", wrapper.GetTrunksId)
	router.PUT(options.BaseURL+"/trunks/:id", wrapper.PutTrunksId)
	router.GET(options.BaseURL+"/ws", wrapper.GetWs)
}

type GetAccesskeysRequestObject struct {
	Params GetAccesskeysParams
}

type GetAccesskeysResponseObject interface {
	VisitGetAccesskeysResponse(w http.ResponseWriter) error
}

type GetAccesskeys200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                   `json:"next_page_token,omitempty"`
	Result        *[]externalRef9.Accesskey `json:"result,omitempty"`
}

func (response GetAccesskeys200JSONResponse) VisitGetAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAccesskeysRequestObject struct {
	Body *PostAccesskeysJSONRequestBody
}

type PostAccesskeysResponseObject interface {
	VisitPostAccesskeysResponse(w http.ResponseWriter) error
}

type PostAccesskeys201JSONResponse externalRef9.Accesskey

func (response PostAccesskeys201JSONResponse) VisitPostAccesskeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteAccesskeysIdResponseObject interface {
	VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error
}

type DeleteAccesskeysId204Response struct {
}

func (response DeleteAccesskeysId204Response) VisitDeleteAccesskeysIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetAccesskeysIdRequestObject struct {
	Id string `json:"id"`
}

type GetAccesskeysIdResponseObject interface {
	VisitGetAccesskeysIdResponse(w http.ResponseWriter) error
}

type GetAccesskeysId200JSONResponse externalRef9.Accesskey

func (response GetAccesskeysId200JSONResponse) VisitGetAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAccesskeysIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutAccesskeysIdJSONRequestBody
}

type PutAccesskeysIdResponseObject interface {
	VisitPutAccesskeysIdResponse(w http.ResponseWriter) error
}

type PutAccesskeysId200JSONResponse externalRef9.Accesskey

func (response PutAccesskeysId200JSONResponse) VisitPutAccesskeysIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsRequestObject struct {
	Params GetActiveflowsParams
}

type GetActiveflowsResponseObject interface {
	VisitGetActiveflowsResponse(w http.ResponseWriter) error
}

type GetActiveflows200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef10.Activeflow `json:"result,omitempty"`
}

func (response GetActiveflows200JSONResponse) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflows500Response struct {
}

func (response GetActiveflows500Response) VisitGetActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostActiveflowsRequestObject struct {
	Body *PostActiveflowsJSONRequestBody
}

type PostActiveflowsResponseObject interface {
	VisitPostActiveflowsResponse(w http.ResponseWriter) error
}

type PostActiveflows201JSONResponse externalRef10.Activeflow

func (response PostActiveflows201JSONResponse) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflows400Response struct {
}

func (response PostActiveflows400Response) VisitPostActiveflowsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteActiveflowsIdResponseObject interface {
	VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error
}

type DeleteActiveflowsId204Response struct {
}

func (response DeleteActiveflowsId204Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteActiveflowsId404Response struct {
}

func (response DeleteActiveflowsId404Response) VisitDeleteActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetActiveflowsIdRequestObject struct {
	Id string `json:"id"`
}

type GetActiveflowsIdResponseObject interface {
	VisitGetActiveflowsIdResponse(w http.ResponseWriter) error
}

type GetActiveflowsId200JSONResponse externalRef10.Activeflow

func (response GetActiveflowsId200JSONResponse) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActiveflowsId404Response struct {
}

func (response GetActiveflowsId404Response) VisitGetActiveflowsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostActiveflowsIdStopRequestObject struct {
	Id string `json:"id"`
}

type PostActiveflowsIdStopResponseObject interface {
	VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error
}

type PostActiveflowsIdStop200JSONResponse externalRef10.Activeflow

func (response PostActiveflowsIdStop200JSONResponse) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostActiveflowsIdStop400Response struct {
}

func (response PostActiveflowsIdStop400Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostActiveflowsIdStop404Response struct {
}

func (response PostActiveflowsIdStop404Response) VisitPostActiveflowsIdStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAgentsRequestObject struct {
	Params GetAgentsParams
}

type GetAgentsResponseObject interface {
	VisitGetAgentsResponse(w http.ResponseWriter) error
}

type GetAgents200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string               `json:"next_page_token,omitempty"`
	Result        *[]externalRef0.Agent `json:"result,omitempty"`
}

func (response GetAgents200JSONResponse) VisitGetAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAgentsRequestObject struct {
	Body *PostAgentsJSONRequestBody
}

type PostAgentsResponseObject interface {
	VisitPostAgentsResponse(w http.ResponseWriter) error
}

type PostAgents201JSONResponse externalRef0.Agent

func (response PostAgents201JSONResponse) VisitPostAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAgents400Response struct {
}

func (response PostAgents400Response) VisitPostAgentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAgentsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteAgentsIdResponseObject interface {
	VisitDeleteAgentsIdResponse(w http.ResponseWriter) error
}

type DeleteAgentsId200JSONResponse externalRef0.Agent

func (response DeleteAgentsId200JSONResponse) VisitDeleteAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentsIdRequestObject struct {
	Id string `json:"id"`
}

type GetAgentsIdResponseObject interface {
	VisitGetAgentsIdResponse(w http.ResponseWriter) error
}

type GetAgentsId200JSONResponse externalRef0.Agent

func (response GetAgentsId200JSONResponse) VisitGetAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdJSONRequestBody
}

type PutAgentsIdResponseObject interface {
	VisitPutAgentsIdResponse(w http.ResponseWriter) error
}

type PutAgentsId200JSONResponse externalRef0.Agent

func (response PutAgentsId200JSONResponse) VisitPutAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdAddressesRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdAddressesJSONRequestBody
}

type PutAgentsIdAddressesResponseObject interface {
	VisitPutAgentsIdAddressesResponse(w http.ResponseWriter) error
}

type PutAgentsIdAddresses200JSONResponse externalRef0.Agent

func (response PutAgentsIdAddresses200JSONResponse) VisitPutAgentsIdAddressesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdPasswordRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdPasswordJSONRequestBody
}

type PutAgentsIdPasswordResponseObject interface {
	VisitPutAgentsIdPasswordResponse(w http.ResponseWriter) error
}

type PutAgentsIdPassword200JSONResponse externalRef0.Agent

func (response PutAgentsIdPassword200JSONResponse) VisitPutAgentsIdPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdPermissionRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdPermissionJSONRequestBody
}

type PutAgentsIdPermissionResponseObject interface {
	VisitPutAgentsIdPermissionResponse(w http.ResponseWriter) error
}

type PutAgentsIdPermission200JSONResponse externalRef0.Agent

func (response PutAgentsIdPermission200JSONResponse) VisitPutAgentsIdPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAgentsIdTagIdsRequestObject struct {
	Id   string `json:"id"`
	Body *PutAgentsIdTagIdsJSONRequestBody
}

type PutAgentsIdTagIdsResponseObject interface {
	VisitPutAgentsIdTagIdsResponse(w http.ResponseWriter) error
}

type PutAgentsIdTagIds200JSONResponse externalRef0.Agent

func (response PutAgentsIdTagIds200JSONResponse) VisitPutAgentsIdTagIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAvailableNumbersRequestObject struct {
	Params GetAvailableNumbersParams
}

type GetAvailableNumbersResponseObject interface {
	VisitGetAvailableNumbersResponse(w http.ResponseWriter) error
}

type GetAvailableNumbers200JSONResponse struct {
	Result *[]externalRef12.AvailableNumber `json:"result,omitempty"`
}

func (response GetAvailableNumbers200JSONResponse) VisitGetAvailableNumbersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAvailableNumbers400Response struct {
}

func (response GetAvailableNumbers400Response) VisitGetAvailableNumbersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetBillingAccountsRequestObject struct {
	Params GetBillingAccountsParams
}

type GetBillingAccountsResponseObject interface {
	VisitGetBillingAccountsResponse(w http.ResponseWriter) error
}

type GetBillingAccounts200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef1.Account `json:"result,omitempty"`
}

func (response GetBillingAccounts200JSONResponse) VisitGetBillingAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsRequestObject struct {
	Body *PostBillingAccountsJSONRequestBody
}

type PostBillingAccountsResponseObject interface {
	VisitPostBillingAccountsResponse(w http.ResponseWriter) error
}

type PostBillingAccounts200JSONResponse externalRef1.Account

func (response PostBillingAccounts200JSONResponse) VisitPostBillingAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBillingAccountsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteBillingAccountsIdResponseObject interface {
	VisitDeleteBillingAccountsIdResponse(w http.ResponseWriter) error
}

type DeleteBillingAccountsId200JSONResponse externalRef1.Account

func (response DeleteBillingAccountsId200JSONResponse) VisitDeleteBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBillingAccountsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetBillingAccountsIdResponseObject interface {
	VisitGetBillingAccountsIdResponse(w http.ResponseWriter) error
}

type GetBillingAccountsId200JSONResponse externalRef1.Account

func (response GetBillingAccountsId200JSONResponse) VisitGetBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutBillingAccountsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutBillingAccountsIdJSONRequestBody
}

type PutBillingAccountsIdResponseObject interface {
	VisitPutBillingAccountsIdResponse(w http.ResponseWriter) error
}

type PutBillingAccountsId200JSONResponse externalRef1.Account

func (response PutBillingAccountsId200JSONResponse) VisitPutBillingAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsIdBalanceAddForceRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PostBillingAccountsIdBalanceAddForceJSONRequestBody
}

type PostBillingAccountsIdBalanceAddForceResponseObject interface {
	VisitPostBillingAccountsIdBalanceAddForceResponse(w http.ResponseWriter) error
}

type PostBillingAccountsIdBalanceAddForce200JSONResponse externalRef1.Account

func (response PostBillingAccountsIdBalanceAddForce200JSONResponse) VisitPostBillingAccountsIdBalanceAddForceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBillingAccountsIdBalanceSubtractForceRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PostBillingAccountsIdBalanceSubtractForceJSONRequestBody
}

type PostBillingAccountsIdBalanceSubtractForceResponseObject interface {
	VisitPostBillingAccountsIdBalanceSubtractForceResponse(w http.ResponseWriter) error
}

type PostBillingAccountsIdBalanceSubtractForce200JSONResponse externalRef1.Account

func (response PostBillingAccountsIdBalanceSubtractForce200JSONResponse) VisitPostBillingAccountsIdBalanceSubtractForceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutBillingAccountsIdPaymentInfoRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutBillingAccountsIdPaymentInfoJSONRequestBody
}

type PutBillingAccountsIdPaymentInfoResponseObject interface {
	VisitPutBillingAccountsIdPaymentInfoResponse(w http.ResponseWriter) error
}

type PutBillingAccountsIdPaymentInfo200JSONResponse externalRef1.Account

func (response PutBillingAccountsIdPaymentInfo200JSONResponse) VisitPutBillingAccountsIdPaymentInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallsRequestObject struct {
	Params GetCallsParams
}

type GetCallsResponseObject interface {
	VisitGetCallsResponse(w http.ResponseWriter) error
}

type GetCalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string              `json:"next_page_token,omitempty"`
	Result        *[]externalRef2.Call `json:"result,omitempty"`
}

func (response GetCalls200JSONResponse) VisitGetCallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCallsRequestObject struct {
	Body *PostCallsJSONRequestBody
}

type PostCallsResponseObject interface {
	VisitPostCallsResponse(w http.ResponseWriter) error
}

type PostCalls200JSONResponse struct {
	Calls      *[]externalRef2.Call      `json:"calls,omitempty"`
	Groupcalls *[]externalRef2.Groupcall `json:"groupcalls,omitempty"`
}

func (response PostCalls200JSONResponse) VisitPostCallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdResponseObject interface {
	VisitDeleteCallsIdResponse(w http.ResponseWriter) error
}

type DeleteCallsId200JSONResponse externalRef2.Call

func (response DeleteCallsId200JSONResponse) VisitDeleteCallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCallsIdResponseObject interface {
	VisitGetCallsIdResponse(w http.ResponseWriter) error
}

type GetCallsId200JSONResponse externalRef2.Call

func (response GetCallsId200JSONResponse) VisitGetCallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCallsIdHangupRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdHangupResponseObject interface {
	VisitPostCallsIdHangupResponse(w http.ResponseWriter) error
}

type PostCallsIdHangup200JSONResponse externalRef2.Call

func (response PostCallsIdHangup200JSONResponse) VisitPostCallsIdHangupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCallsIdHoldRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdHoldResponseObject interface {
	VisitDeleteCallsIdHoldResponse(w http.ResponseWriter) error
}

type DeleteCallsIdHold200Response struct {
}

func (response DeleteCallsIdHold200Response) VisitDeleteCallsIdHoldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdHoldRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdHoldResponseObject interface {
	VisitPostCallsIdHoldResponse(w http.ResponseWriter) error
}

type PostCallsIdHold200Response struct {
}

func (response PostCallsIdHold200Response) VisitPostCallsIdHoldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCallsIdMediaStreamRequestObject struct {
	Id string `json:"id"`
}

type GetCallsIdMediaStreamResponseObject interface {
	VisitGetCallsIdMediaStreamResponse(w http.ResponseWriter) error
}

type GetCallsIdMediaStream200Response struct {
}

func (response GetCallsIdMediaStream200Response) VisitGetCallsIdMediaStreamResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdMohRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdMohResponseObject interface {
	VisitDeleteCallsIdMohResponse(w http.ResponseWriter) error
}

type DeleteCallsIdMoh200Response struct {
}

func (response DeleteCallsIdMoh200Response) VisitDeleteCallsIdMohResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdMohRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdMohResponseObject interface {
	VisitPostCallsIdMohResponse(w http.ResponseWriter) error
}

type PostCallsIdMoh200Response struct {
}

func (response PostCallsIdMoh200Response) VisitPostCallsIdMohResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdMuteRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdMuteResponseObject interface {
	VisitDeleteCallsIdMuteResponse(w http.ResponseWriter) error
}

type DeleteCallsIdMute200Response struct {
}

func (response DeleteCallsIdMute200Response) VisitDeleteCallsIdMuteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdMuteRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdMuteResponseObject interface {
	VisitPostCallsIdMuteResponse(w http.ResponseWriter) error
}

type PostCallsIdMute200Response struct {
}

func (response PostCallsIdMute200Response) VisitPostCallsIdMuteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdSilenceRequestObject struct {
	Id string `json:"id"`
}

type DeleteCallsIdSilenceResponseObject interface {
	VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error
}

type DeleteCallsIdSilence200Response struct {
}

func (response DeleteCallsIdSilence200Response) VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCallsIdSilence400Response struct {
}

func (response DeleteCallsIdSilence400Response) VisitDeleteCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostCallsIdSilenceRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdSilenceResponseObject interface {
	VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error
}

type PostCallsIdSilence200Response struct {
}

func (response PostCallsIdSilence200Response) VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallsIdSilence400Response struct {
}

func (response PostCallsIdSilence400Response) VisitPostCallsIdSilenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostCallsIdTalkRequestObject struct {
	Id string `json:"id"`
}

type PostCallsIdTalkResponseObject interface {
	VisitPostCallsIdTalkResponse(w http.ResponseWriter) error
}

type PostCallsIdTalk200Response struct {
}

func (response PostCallsIdTalk200Response) VisitPostCallsIdTalkResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCampaigncallsRequestObject struct {
	Params GetCampaigncallsParams
}

type GetCampaigncallsResponseObject interface {
	VisitGetCampaigncallsResponse(w http.ResponseWriter) error
}

type GetCampaigncalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                      `json:"next_page_token,omitempty"`
	Result        *[]externalRef3.Campaigncall `json:"result,omitempty"`
}

func (response GetCampaigncalls200JSONResponse) VisitGetCampaigncallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCampaigncallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCampaigncallsIdResponseObject interface {
	VisitDeleteCampaigncallsIdResponse(w http.ResponseWriter) error
}

type DeleteCampaigncallsId200JSONResponse externalRef3.Campaigncall

func (response DeleteCampaigncallsId200JSONResponse) VisitDeleteCampaigncallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaigncallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCampaigncallsIdResponseObject interface {
	VisitGetCampaigncallsIdResponse(w http.ResponseWriter) error
}

type GetCampaigncallsId200JSONResponse externalRef3.Campaigncall

func (response GetCampaigncallsId200JSONResponse) VisitGetCampaigncallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaignsRequestObject struct {
	Params GetCampaignsParams
}

type GetCampaignsResponseObject interface {
	VisitGetCampaignsResponse(w http.ResponseWriter) error
}

type GetCampaigns200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef3.Campaign `json:"result,omitempty"`
}

func (response GetCampaigns200JSONResponse) VisitGetCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCampaignsRequestObject struct {
	Body *PostCampaignsJSONRequestBody
}

type PostCampaignsResponseObject interface {
	VisitPostCampaignsResponse(w http.ResponseWriter) error
}

type PostCampaigns200JSONResponse externalRef3.Campaign

func (response PostCampaigns200JSONResponse) VisitPostCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCampaignsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCampaignsIdResponseObject interface {
	VisitDeleteCampaignsIdResponse(w http.ResponseWriter) error
}

type DeleteCampaignsId200JSONResponse externalRef3.Campaign

func (response DeleteCampaignsId200JSONResponse) VisitDeleteCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaignsIdRequestObject struct {
	Id string `json:"id"`
}

type GetCampaignsIdResponseObject interface {
	VisitGetCampaignsIdResponse(w http.ResponseWriter) error
}

type GetCampaignsId200JSONResponse externalRef3.Campaign

func (response GetCampaignsId200JSONResponse) VisitGetCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdJSONRequestBody
}

type PutCampaignsIdResponseObject interface {
	VisitPutCampaignsIdResponse(w http.ResponseWriter) error
}

type PutCampaignsId200JSONResponse externalRef3.Campaign

func (response PutCampaignsId200JSONResponse) VisitPutCampaignsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCampaignsIdStatusRequestObject struct {
	Id   string `json:"id"`
	Body *PutCampaignsIdStatusJSONRequestBody
}

type PutCampaignsIdStatusResponseObject interface {
	VisitPutCampaignsIdStatusResponse(w http.ResponseWriter) error
}

type PutCampaignsIdStatus200JSONResponse externalRef3.Campaign

func (response PutCampaignsIdStatus200JSONResponse) VisitPutCampaignsIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotcallsRequestObject struct {
	Params GetChatbotcallsParams
}

type GetChatbotcallsResponseObject interface {
	VisitGetChatbotcallsResponse(w http.ResponseWriter) error
}

type GetChatbotcalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef5.Chatbotcall `json:"result,omitempty"`
}

func (response GetChatbotcalls200JSONResponse) VisitGetChatbotcallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatbotcallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatbotcallsIdResponseObject interface {
	VisitDeleteChatbotcallsIdResponse(w http.ResponseWriter) error
}

type DeleteChatbotcallsId200JSONResponse externalRef5.Chatbotcall

func (response DeleteChatbotcallsId200JSONResponse) VisitDeleteChatbotcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotcallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatbotcallsIdResponseObject interface {
	VisitGetChatbotcallsIdResponse(w http.ResponseWriter) error
}

type GetChatbotcallsId200JSONResponse externalRef5.Chatbotcall

func (response GetChatbotcallsId200JSONResponse) VisitGetChatbotcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotsRequestObject struct {
	Params GetChatbotsParams
}

type GetChatbotsResponseObject interface {
	VisitGetChatbotsResponse(w http.ResponseWriter) error
}

type GetChatbots200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef5.Chatbot `json:"result,omitempty"`
}

func (response GetChatbots200JSONResponse) VisitGetChatbotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatbotsRequestObject struct {
	Body *PostChatbotsJSONRequestBody
}

type PostChatbotsResponseObject interface {
	VisitPostChatbotsResponse(w http.ResponseWriter) error
}

type PostChatbots200JSONResponse externalRef5.Chatbot

func (response PostChatbots200JSONResponse) VisitPostChatbotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatbotsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatbotsIdResponseObject interface {
	VisitDeleteChatbotsIdResponse(w http.ResponseWriter) error
}

type DeleteChatbotsId200JSONResponse externalRef5.Chatbot

func (response DeleteChatbotsId200JSONResponse) VisitDeleteChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatbotsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatbotsIdResponseObject interface {
	VisitGetChatbotsIdResponse(w http.ResponseWriter) error
}

type GetChatbotsId200JSONResponse externalRef5.Chatbot

func (response GetChatbotsId200JSONResponse) VisitGetChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatbotsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatbotsIdJSONRequestBody
}

type PutChatbotsIdResponseObject interface {
	VisitPutChatbotsIdResponse(w http.ResponseWriter) error
}

type PutChatbotsId200JSONResponse externalRef5.Chatbot

func (response PutChatbotsId200JSONResponse) VisitPutChatbotsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatmessagesRequestObject struct {
	Params GetChatmessagesParams
}

type GetChatmessagesResponseObject interface {
	VisitGetChatmessagesResponse(w http.ResponseWriter) error
}

type GetChatmessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Messagechat `json:"result,omitempty"`
}

func (response GetChatmessages200JSONResponse) VisitGetChatmessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatmessagesRequestObject struct {
	Body *PostChatmessagesJSONRequestBody
}

type PostChatmessagesResponseObject interface {
	VisitPostChatmessagesResponse(w http.ResponseWriter) error
}

type PostChatmessages200JSONResponse externalRef4.Messagechat

func (response PostChatmessages200JSONResponse) VisitPostChatmessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatmessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatmessagesIdResponseObject interface {
	VisitDeleteChatmessagesIdResponse(w http.ResponseWriter) error
}

type DeleteChatmessagesId200JSONResponse externalRef4.Messagechat

func (response DeleteChatmessagesId200JSONResponse) VisitDeleteChatmessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatmessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatmessagesIdResponseObject interface {
	VisitGetChatmessagesIdResponse(w http.ResponseWriter) error
}

type GetChatmessagesId200JSONResponse externalRef4.Messagechat

func (response GetChatmessagesId200JSONResponse) VisitGetChatmessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroommessagesRequestObject struct {
	Params GetChatroommessagesParams
}

type GetChatroommessagesResponseObject interface {
	VisitGetChatroommessagesResponse(w http.ResponseWriter) error
}

type GetChatroommessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                         `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Messagechatroom `json:"result,omitempty"`
}

func (response GetChatroommessages200JSONResponse) VisitGetChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatroommessagesRequestObject struct {
	Body *PostChatroommessagesJSONRequestBody
}

type PostChatroommessagesResponseObject interface {
	VisitPostChatroommessagesResponse(w http.ResponseWriter) error
}

type PostChatroommessages200JSONResponse externalRef4.Messagechatroom

func (response PostChatroommessages200JSONResponse) VisitPostChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatroommessagesIdResponseObject interface {
	VisitDeleteChatroommessagesIdResponse(w http.ResponseWriter) error
}

type DeleteChatroommessagesId200JSONResponse externalRef4.Messagechatroom

func (response DeleteChatroommessagesId200JSONResponse) VisitDeleteChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatroommessagesIdResponseObject interface {
	VisitGetChatroommessagesIdResponse(w http.ResponseWriter) error
}

type GetChatroommessagesId200JSONResponse externalRef4.Messagechatroom

func (response GetChatroommessagesId200JSONResponse) VisitGetChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroomsRequestObject struct {
	Params GetChatroomsParams
}

type GetChatroomsResponseObject interface {
	VisitGetChatroomsResponse(w http.ResponseWriter) error
}

type GetChatrooms200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Chatroom `json:"result,omitempty"`
}

func (response GetChatrooms200JSONResponse) VisitGetChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatroomsRequestObject struct {
	Body *PostChatroomsJSONRequestBody
}

type PostChatroomsResponseObject interface {
	VisitPostChatroomsResponse(w http.ResponseWriter) error
}

type PostChatrooms200JSONResponse externalRef4.Chatroom

func (response PostChatrooms200JSONResponse) VisitPostChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatroomsIdResponseObject interface {
	VisitDeleteChatroomsIdResponse(w http.ResponseWriter) error
}

type DeleteChatroomsId200JSONResponse externalRef4.Chatroom

func (response DeleteChatroomsId200JSONResponse) VisitDeleteChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatroomsIdResponseObject interface {
	VisitGetChatroomsIdResponse(w http.ResponseWriter) error
}

type GetChatroomsId200JSONResponse externalRef4.Chatroom

func (response GetChatroomsId200JSONResponse) VisitGetChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatroomsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatroomsIdJSONRequestBody
}

type PutChatroomsIdResponseObject interface {
	VisitPutChatroomsIdResponse(w http.ResponseWriter) error
}

type PutChatroomsId200JSONResponse externalRef4.Chatroom

func (response PutChatroomsId200JSONResponse) VisitPutChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatsRequestObject struct {
	Params GetChatsParams
}

type GetChatsResponseObject interface {
	VisitGetChatsResponse(w http.ResponseWriter) error
}

type GetChats200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string              `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Chat `json:"result,omitempty"`
}

func (response GetChats200JSONResponse) VisitGetChatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatsRequestObject struct {
	Body *PostChatsJSONRequestBody
}

type PostChatsResponseObject interface {
	VisitPostChatsResponse(w http.ResponseWriter) error
}

type PostChats200JSONResponse externalRef4.Chat

func (response PostChats200JSONResponse) VisitPostChatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteChatsIdResponseObject interface {
	VisitDeleteChatsIdResponse(w http.ResponseWriter) error
}

type DeleteChatsId200JSONResponse externalRef4.Chat

func (response DeleteChatsId200JSONResponse) VisitDeleteChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatsIdRequestObject struct {
	Id string `json:"id"`
}

type GetChatsIdResponseObject interface {
	VisitGetChatsIdResponse(w http.ResponseWriter) error
}

type GetChatsId200JSONResponse externalRef4.Chat

func (response GetChatsId200JSONResponse) VisitGetChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutChatsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutChatsIdJSONRequestBody
}

type PutChatsIdResponseObject interface {
	VisitPutChatsIdResponse(w http.ResponseWriter) error
}

type PutChatsId200JSONResponse externalRef4.Chat

func (response PutChatsId200JSONResponse) VisitPutChatsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostChatsIdParticipantIdsRequestObject struct {
	Id   string `json:"id"`
	Body *PostChatsIdParticipantIdsJSONRequestBody
}

type PostChatsIdParticipantIdsResponseObject interface {
	VisitPostChatsIdParticipantIdsResponse(w http.ResponseWriter) error
}

type PostChatsIdParticipantIds200JSONResponse externalRef4.Chat

func (response PostChatsIdParticipantIds200JSONResponse) VisitPostChatsIdParticipantIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteChatsIdParticipantIdsParticipantIdRequestObject struct {
	Id            string `json:"id"`
	ParticipantId string `json:"participant_id"`
}

type DeleteChatsIdParticipantIdsParticipantIdResponseObject interface {
	VisitDeleteChatsIdParticipantIdsParticipantIdResponse(w http.ResponseWriter) error
}

type DeleteChatsIdParticipantIdsParticipantId200JSONResponse externalRef4.Chat

func (response DeleteChatsIdParticipantIdsParticipantId200JSONResponse) VisitDeleteChatsIdParticipantIdsParticipantIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencecallsRequestObject struct {
	Params GetConferencecallsParams
}

type GetConferencecallsResponseObject interface {
	VisitGetConferencecallsResponse(w http.ResponseWriter) error
}

type GetConferencecalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                        `json:"next_page_token,omitempty"`
	Result        *[]externalRef7.Conferencecall `json:"result,omitempty"`
}

func (response GetConferencecalls200JSONResponse) VisitGetConferencecallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConferencecallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteConferencecallsIdResponseObject interface {
	VisitDeleteConferencecallsIdResponse(w http.ResponseWriter) error
}

type DeleteConferencecallsId200JSONResponse externalRef7.Conferencecall

func (response DeleteConferencecallsId200JSONResponse) VisitDeleteConferencecallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencecallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetConferencecallsIdResponseObject interface {
	VisitGetConferencecallsIdResponse(w http.ResponseWriter) error
}

type GetConferencecallsId200JSONResponse externalRef7.Conferencecall

func (response GetConferencecallsId200JSONResponse) VisitGetConferencecallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencesRequestObject struct {
	Params GetConferencesParams
}

type GetConferencesResponseObject interface {
	VisitGetConferencesResponse(w http.ResponseWriter) error
}

type GetConferences200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                    `json:"next_page_token,omitempty"`
	Result        *[]externalRef7.Conference `json:"result,omitempty"`
}

func (response GetConferences200JSONResponse) VisitGetConferencesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostConferencesRequestObject struct {
	Body *PostConferencesJSONRequestBody
}

type PostConferencesResponseObject interface {
	VisitPostConferencesResponse(w http.ResponseWriter) error
}

type PostConferences200JSONResponse externalRef7.Conference

func (response PostConferences200JSONResponse) VisitPostConferencesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConferencesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteConferencesIdResponseObject interface {
	VisitDeleteConferencesIdResponse(w http.ResponseWriter) error
}

type DeleteConferencesId200JSONResponse externalRef7.Conference

func (response DeleteConferencesId200JSONResponse) VisitDeleteConferencesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencesIdRequestObject struct {
	Id string `json:"id"`
}

type GetConferencesIdResponseObject interface {
	VisitGetConferencesIdResponse(w http.ResponseWriter) error
}

type GetConferencesId200JSONResponse externalRef7.Conference

func (response GetConferencesId200JSONResponse) VisitGetConferencesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutConferencesIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutConferencesIdJSONRequestBody
}

type PutConferencesIdResponseObject interface {
	VisitPutConferencesIdResponse(w http.ResponseWriter) error
}

type PutConferencesId200JSONResponse externalRef7.Conference

func (response PutConferencesId200JSONResponse) VisitPutConferencesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConferencesIdMediaStreamRequestObject struct {
	Id string `json:"id"`
}

type GetConferencesIdMediaStreamResponseObject interface {
	VisitGetConferencesIdMediaStreamResponse(w http.ResponseWriter) error
}

type GetConferencesIdMediaStream200Response struct {
}

func (response GetConferencesIdMediaStream200Response) VisitGetConferencesIdMediaStreamResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdRecordingStartRequestObject struct {
	Id string `json:"id"`
}

type PostConferencesIdRecordingStartResponseObject interface {
	VisitPostConferencesIdRecordingStartResponse(w http.ResponseWriter) error
}

type PostConferencesIdRecordingStart200Response struct {
}

func (response PostConferencesIdRecordingStart200Response) VisitPostConferencesIdRecordingStartResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdRecordingStopRequestObject struct {
	Id string `json:"id"`
}

type PostConferencesIdRecordingStopResponseObject interface {
	VisitPostConferencesIdRecordingStopResponse(w http.ResponseWriter) error
}

type PostConferencesIdRecordingStop200Response struct {
}

func (response PostConferencesIdRecordingStop200Response) VisitPostConferencesIdRecordingStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdTranscribeStartRequestObject struct {
	Id   string `json:"id"`
	Body *PostConferencesIdTranscribeStartJSONRequestBody
}

type PostConferencesIdTranscribeStartResponseObject interface {
	VisitPostConferencesIdTranscribeStartResponse(w http.ResponseWriter) error
}

type PostConferencesIdTranscribeStart200Response struct {
}

func (response PostConferencesIdTranscribeStart200Response) VisitPostConferencesIdTranscribeStartResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostConferencesIdTranscribeStopRequestObject struct {
	Id string `json:"id"`
}

type PostConferencesIdTranscribeStopResponseObject interface {
	VisitPostConferencesIdTranscribeStopResponse(w http.ResponseWriter) error
}

type PostConferencesIdTranscribeStop200Response struct {
}

func (response PostConferencesIdTranscribeStop200Response) VisitPostConferencesIdTranscribeStopResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetConversationAccountsRequestObject struct {
	Params GetConversationAccountsParams
}

type GetConversationAccountsResponseObject interface {
	VisitGetConversationAccountsResponse(w http.ResponseWriter) error
}

type GetConversationAccounts200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef8.Account `json:"result,omitempty"`
}

func (response GetConversationAccounts200JSONResponse) VisitGetConversationAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostConversationAccountsRequestObject struct {
	Body *PostConversationAccountsJSONRequestBody
}

type PostConversationAccountsResponseObject interface {
	VisitPostConversationAccountsResponse(w http.ResponseWriter) error
}

type PostConversationAccounts200JSONResponse externalRef8.Account

func (response PostConversationAccounts200JSONResponse) VisitPostConversationAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConversationAccountsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteConversationAccountsIdResponseObject interface {
	VisitDeleteConversationAccountsIdResponse(w http.ResponseWriter) error
}

type DeleteConversationAccountsId200JSONResponse externalRef8.Account

func (response DeleteConversationAccountsId200JSONResponse) VisitDeleteConversationAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConversationAccountsIdRequestObject struct {
	Id string `json:"id"`
}

type GetConversationAccountsIdResponseObject interface {
	VisitGetConversationAccountsIdResponse(w http.ResponseWriter) error
}

type GetConversationAccountsId200JSONResponse externalRef8.Account

func (response GetConversationAccountsId200JSONResponse) VisitGetConversationAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutConversationAccountsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutConversationAccountsIdJSONRequestBody
}

type PutConversationAccountsIdResponseObject interface {
	VisitPutConversationAccountsIdResponse(w http.ResponseWriter) error
}

type PutConversationAccountsId200JSONResponse externalRef8.Account

func (response PutConversationAccountsId200JSONResponse) VisitPutConversationAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConversationsRequestObject struct {
	Params GetConversationsParams
}

type GetConversationsResponseObject interface {
	VisitGetConversationsResponse(w http.ResponseWriter) error
}

type GetConversations200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                      `json:"next_page_token,omitempty"`
	Result        *[]externalRef8.Conversation `json:"result,omitempty"`
}

func (response GetConversations200JSONResponse) VisitGetConversationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConversationsIdRequestObject struct {
	Id string `json:"id"`
}

type GetConversationsIdResponseObject interface {
	VisitGetConversationsIdResponse(w http.ResponseWriter) error
}

type GetConversationsId200JSONResponse externalRef8.Conversation

func (response GetConversationsId200JSONResponse) VisitGetConversationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutConversationsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutConversationsIdJSONRequestBody
}

type PutConversationsIdResponseObject interface {
	VisitPutConversationsIdResponse(w http.ResponseWriter) error
}

type PutConversationsId200JSONResponse externalRef8.Conversation

func (response PutConversationsId200JSONResponse) VisitPutConversationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConversationsIdMessagesRequestObject struct {
	Id     string `json:"id"`
	Params GetConversationsIdMessagesParams
}

type GetConversationsIdMessagesResponseObject interface {
	VisitGetConversationsIdMessagesResponse(w http.ResponseWriter) error
}

type GetConversationsIdMessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef8.Message `json:"result,omitempty"`
}

func (response GetConversationsIdMessages200JSONResponse) VisitGetConversationsIdMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostConversationsIdMessagesRequestObject struct {
	Id   string `json:"id"`
	Body *PostConversationsIdMessagesJSONRequestBody
}

type PostConversationsIdMessagesResponseObject interface {
	VisitPostConversationsIdMessagesResponse(w http.ResponseWriter) error
}

type PostConversationsIdMessages200JSONResponse externalRef8.Message

func (response PostConversationsIdMessages200JSONResponse) VisitPostConversationsIdMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCustomerRequestObject struct {
}

type GetCustomerResponseObject interface {
	VisitGetCustomerResponse(w http.ResponseWriter) error
}

type GetCustomer200JSONResponse externalRef9.Customer

func (response GetCustomer200JSONResponse) VisitGetCustomerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCustomerRequestObject struct {
	Body *PutCustomerJSONRequestBody
}

type PutCustomerResponseObject interface {
	VisitPutCustomerResponse(w http.ResponseWriter) error
}

type PutCustomer200JSONResponse externalRef9.Customer

func (response PutCustomer200JSONResponse) VisitPutCustomerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCustomerBillingAccountIdRequestObject struct {
	Body *PutCustomerBillingAccountIdJSONRequestBody
}

type PutCustomerBillingAccountIdResponseObject interface {
	VisitPutCustomerBillingAccountIdResponse(w http.ResponseWriter) error
}

type PutCustomerBillingAccountId200JSONResponse externalRef9.Customer

func (response PutCustomerBillingAccountId200JSONResponse) VisitPutCustomerBillingAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCustomersRequestObject struct {
	Params GetCustomersParams
}

type GetCustomersResponseObject interface {
	VisitGetCustomersResponse(w http.ResponseWriter) error
}

type GetCustomers200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef9.Customer `json:"result,omitempty"`
}

func (response GetCustomers200JSONResponse) VisitGetCustomersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCustomersRequestObject struct {
	Body *PostCustomersJSONRequestBody
}

type PostCustomersResponseObject interface {
	VisitPostCustomersResponse(w http.ResponseWriter) error
}

type PostCustomers200JSONResponse externalRef9.Customer

func (response PostCustomers200JSONResponse) VisitPostCustomersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCustomersIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteCustomersIdResponseObject interface {
	VisitDeleteCustomersIdResponse(w http.ResponseWriter) error
}

type DeleteCustomersId200JSONResponse externalRef9.Customer

func (response DeleteCustomersId200JSONResponse) VisitDeleteCustomersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCustomersIdRequestObject struct {
	Id string `json:"id"`
}

type GetCustomersIdResponseObject interface {
	VisitGetCustomersIdResponse(w http.ResponseWriter) error
}

type GetCustomersId200JSONResponse externalRef9.Customer

func (response GetCustomersId200JSONResponse) VisitGetCustomersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCustomersIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutCustomersIdJSONRequestBody
}

type PutCustomersIdResponseObject interface {
	VisitPutCustomersIdResponse(w http.ResponseWriter) error
}

type PutCustomersId200JSONResponse externalRef9.Customer

func (response PutCustomersId200JSONResponse) VisitPutCustomersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutCustomersIdBillingAccountIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutCustomersIdBillingAccountIdJSONRequestBody
}

type PutCustomersIdBillingAccountIdResponseObject interface {
	VisitPutCustomersIdBillingAccountIdResponse(w http.ResponseWriter) error
}

type PutCustomersIdBillingAccountId200JSONResponse externalRef9.Customer

func (response PutCustomersIdBillingAccountId200JSONResponse) VisitPutCustomersIdBillingAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExtensionsRequestObject struct {
	Params GetExtensionsParams
}

type GetExtensionsResponseObject interface {
	VisitGetExtensionsResponse(w http.ResponseWriter) error
}

type GetExtensions200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                    `json:"next_page_token,omitempty"`
	Result        *[]externalRef16.Extension `json:"result,omitempty"`
}

func (response GetExtensions200JSONResponse) VisitGetExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExtensionsRequestObject struct {
	Body *PostExtensionsJSONRequestBody
}

type PostExtensionsResponseObject interface {
	VisitPostExtensionsResponse(w http.ResponseWriter) error
}

type PostExtensions200JSONResponse externalRef16.Extension

func (response PostExtensions200JSONResponse) VisitPostExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteExtensionsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteExtensionsIdResponseObject interface {
	VisitDeleteExtensionsIdResponse(w http.ResponseWriter) error
}

type DeleteExtensionsId200JSONResponse externalRef16.Extension

func (response DeleteExtensionsId200JSONResponse) VisitDeleteExtensionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExtensionsIdRequestObject struct {
	Id string `json:"id"`
}

type GetExtensionsIdResponseObject interface {
	VisitGetExtensionsIdResponse(w http.ResponseWriter) error
}

type GetExtensionsId200JSONResponse externalRef16.Extension

func (response GetExtensionsId200JSONResponse) VisitGetExtensionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutExtensionsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutExtensionsIdJSONRequestBody
}

type PutExtensionsIdResponseObject interface {
	VisitPutExtensionsIdResponse(w http.ResponseWriter) error
}

type PutExtensionsId200JSONResponse externalRef16.Extension

func (response PutExtensionsId200JSONResponse) VisitPutExtensionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFilesRequestObject struct {
	Params GetFilesParams
}

type GetFilesResponseObject interface {
	VisitGetFilesResponse(w http.ResponseWriter) error
}

type GetFiles200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string               `json:"next_page_token,omitempty"`
	Result        *[]externalRef18.File `json:"result,omitempty"`
}

func (response GetFiles200JSONResponse) VisitGetFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFilesRequestObject struct {
	Body *multipart.Reader
}

type PostFilesResponseObject interface {
	VisitPostFilesResponse(w http.ResponseWriter) error
}

type PostFiles200JSONResponse externalRef18.File

func (response PostFiles200JSONResponse) VisitPostFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFilesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteFilesIdResponseObject interface {
	VisitDeleteFilesIdResponse(w http.ResponseWriter) error
}

type DeleteFilesId200JSONResponse externalRef18.File

func (response DeleteFilesId200JSONResponse) VisitDeleteFilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFilesIdRequestObject struct {
	Id string `json:"id"`
}

type GetFilesIdResponseObject interface {
	VisitGetFilesIdResponse(w http.ResponseWriter) error
}

type GetFilesId200JSONResponse externalRef18.File

func (response GetFilesId200JSONResponse) VisitGetFilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlowsRequestObject struct {
	Params GetFlowsParams
}

type GetFlowsResponseObject interface {
	VisitGetFlowsResponse(w http.ResponseWriter) error
}

type GetFlows200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string               `json:"next_page_token,omitempty"`
	Result        *[]externalRef10.Flow `json:"result,omitempty"`
}

func (response GetFlows200JSONResponse) VisitGetFlowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFlowsRequestObject struct {
	Body *PostFlowsJSONRequestBody
}

type PostFlowsResponseObject interface {
	VisitPostFlowsResponse(w http.ResponseWriter) error
}

type PostFlows200JSONResponse externalRef10.Flow

func (response PostFlows200JSONResponse) VisitPostFlowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlowsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteFlowsIdResponseObject interface {
	VisitDeleteFlowsIdResponse(w http.ResponseWriter) error
}

type DeleteFlowsId200JSONResponse externalRef10.Flow

func (response DeleteFlowsId200JSONResponse) VisitDeleteFlowsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlowsIdRequestObject struct {
	Id string `json:"id"`
}

type GetFlowsIdResponseObject interface {
	VisitGetFlowsIdResponse(w http.ResponseWriter) error
}

type GetFlowsId200JSONResponse externalRef10.Flow

func (response GetFlowsId200JSONResponse) VisitGetFlowsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutFlowsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutFlowsIdJSONRequestBody
}

type PutFlowsIdResponseObject interface {
	VisitPutFlowsIdResponse(w http.ResponseWriter) error
}

type PutFlowsId200JSONResponse externalRef10.Flow

func (response PutFlowsId200JSONResponse) VisitPutFlowsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupcallsRequestObject struct {
	Params GetGroupcallsParams
}

type GetGroupcallsResponseObject interface {
	VisitGetGroupcallsResponse(w http.ResponseWriter) error
}

type GetGroupcalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                   `json:"next_page_token,omitempty"`
	Result        *[]externalRef2.Groupcall `json:"result,omitempty"`
}

func (response GetGroupcalls200JSONResponse) VisitGetGroupcallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupcallsRequestObject struct {
	Body *PostGroupcallsJSONRequestBody
}

type PostGroupcallsResponseObject interface {
	VisitPostGroupcallsResponse(w http.ResponseWriter) error
}

type PostGroupcalls200JSONResponse externalRef2.Groupcall

func (response PostGroupcalls200JSONResponse) VisitPostGroupcallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupcallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteGroupcallsIdResponseObject interface {
	VisitDeleteGroupcallsIdResponse(w http.ResponseWriter) error
}

type DeleteGroupcallsId200JSONResponse externalRef2.Groupcall

func (response DeleteGroupcallsId200JSONResponse) VisitDeleteGroupcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupcallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetGroupcallsIdResponseObject interface {
	VisitGetGroupcallsIdResponse(w http.ResponseWriter) error
}

type GetGroupcallsId200JSONResponse externalRef2.Groupcall

func (response GetGroupcallsId200JSONResponse) VisitGetGroupcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupcallsIdRequestObject struct {
	Id string `json:"id"`
}

type PostGroupcallsIdResponseObject interface {
	VisitPostGroupcallsIdResponse(w http.ResponseWriter) error
}

type PostGroupcallsId200JSONResponse externalRef2.Groupcall

func (response PostGroupcallsId200JSONResponse) VisitPostGroupcallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200JSONResponse externalRef0.Agent

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMessagesRequestObject struct {
	Params GetMessagesParams
}

type GetMessagesResponseObject interface {
	VisitGetMessagesResponse(w http.ResponseWriter) error
}

type GetMessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef11.Message `json:"result,omitempty"`
}

func (response GetMessages200JSONResponse) VisitGetMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMessagesRequestObject struct {
	Body *PostMessagesJSONRequestBody
}

type PostMessagesResponseObject interface {
	VisitPostMessagesResponse(w http.ResponseWriter) error
}

type PostMessages200JSONResponse externalRef11.Message

func (response PostMessages200JSONResponse) VisitPostMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteMessagesIdResponseObject interface {
	VisitDeleteMessagesIdResponse(w http.ResponseWriter) error
}

type DeleteMessagesId200JSONResponse externalRef11.Message

func (response DeleteMessagesId200JSONResponse) VisitDeleteMessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetMessagesIdResponseObject interface {
	VisitGetMessagesIdResponse(w http.ResponseWriter) error
}

type GetMessagesId200JSONResponse externalRef11.Message

func (response GetMessagesId200JSONResponse) VisitGetMessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNumbersRequestObject struct {
	Params GetNumbersParams
}

type GetNumbersResponseObject interface {
	VisitGetNumbersResponse(w http.ResponseWriter) error
}

type GetNumbers200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef12.Number `json:"result,omitempty"`
}

func (response GetNumbers200JSONResponse) VisitGetNumbersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostNumbersRequestObject struct {
	Body *PostNumbersJSONRequestBody
}

type PostNumbersResponseObject interface {
	VisitPostNumbersResponse(w http.ResponseWriter) error
}

type PostNumbers200JSONResponse externalRef12.Number

func (response PostNumbers200JSONResponse) VisitPostNumbersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostNumbersRenewRequestObject struct {
	Body *PostNumbersRenewJSONRequestBody
}

type PostNumbersRenewResponseObject interface {
	VisitPostNumbersRenewResponse(w http.ResponseWriter) error
}

type PostNumbersRenew200JSONResponse []externalRef12.Number

func (response PostNumbersRenew200JSONResponse) VisitPostNumbersRenewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNumbersIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteNumbersIdResponseObject interface {
	VisitDeleteNumbersIdResponse(w http.ResponseWriter) error
}

type DeleteNumbersId200JSONResponse externalRef12.Number

func (response DeleteNumbersId200JSONResponse) VisitDeleteNumbersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNumbersIdRequestObject struct {
	Id string `json:"id"`
}

type GetNumbersIdResponseObject interface {
	VisitGetNumbersIdResponse(w http.ResponseWriter) error
}

type GetNumbersId200JSONResponse externalRef12.Number

func (response GetNumbersId200JSONResponse) VisitGetNumbersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutNumbersIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutNumbersIdJSONRequestBody
}

type PutNumbersIdResponseObject interface {
	VisitPutNumbersIdResponse(w http.ResponseWriter) error
}

type PutNumbersId200JSONResponse externalRef12.Number

func (response PutNumbersId200JSONResponse) VisitPutNumbersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNumbersIdFlowIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteNumbersIdFlowIdResponseObject interface {
	VisitDeleteNumbersIdFlowIdResponse(w http.ResponseWriter) error
}

type DeleteNumbersIdFlowId200JSONResponse externalRef12.Number

func (response DeleteNumbersIdFlowId200JSONResponse) VisitDeleteNumbersIdFlowIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNumbersIdFlowIdRequestObject struct {
	Id string `json:"id"`
}

type GetNumbersIdFlowIdResponseObject interface {
	VisitGetNumbersIdFlowIdResponse(w http.ResponseWriter) error
}

type GetNumbersIdFlowId200JSONResponse externalRef12.Number

func (response GetNumbersIdFlowId200JSONResponse) VisitGetNumbersIdFlowIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutNumbersIdFlowIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutNumbersIdFlowIdJSONRequestBody
}

type PutNumbersIdFlowIdResponseObject interface {
	VisitPutNumbersIdFlowIdResponse(w http.ResponseWriter) error
}

type PutNumbersIdFlowId200JSONResponse externalRef12.Number

func (response PutNumbersIdFlowId200JSONResponse) VisitPutNumbersIdFlowIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOutdialsRequestObject struct {
	Params GetOutdialsParams
}

type GetOutdialsResponseObject interface {
	VisitGetOutdialsResponse(w http.ResponseWriter) error
}

type GetOutdials200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef13.Outdial `json:"result,omitempty"`
}

func (response GetOutdials200JSONResponse) VisitGetOutdialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostOutdialsRequestObject struct {
	Body *PostOutdialsJSONRequestBody
}

type PostOutdialsResponseObject interface {
	VisitPostOutdialsResponse(w http.ResponseWriter) error
}

type PostOutdials200JSONResponse externalRef13.Outdial

func (response PostOutdials200JSONResponse) VisitPostOutdialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOutdialsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteOutdialsIdResponseObject interface {
	VisitDeleteOutdialsIdResponse(w http.ResponseWriter) error
}

type DeleteOutdialsId200JSONResponse externalRef13.Outdial

func (response DeleteOutdialsId200JSONResponse) VisitDeleteOutdialsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOutdialsIdRequestObject struct {
	Id     string `json:"id"`
	Params GetOutdialsIdParams
}

type GetOutdialsIdResponseObject interface {
	VisitGetOutdialsIdResponse(w http.ResponseWriter) error
}

type GetOutdialsId200JSONResponse externalRef13.Outdial

func (response GetOutdialsId200JSONResponse) VisitGetOutdialsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutOutdialsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutOutdialsIdJSONRequestBody
}

type PutOutdialsIdResponseObject interface {
	VisitPutOutdialsIdResponse(w http.ResponseWriter) error
}

type PutOutdialsId200JSONResponse externalRef13.Outdial

func (response PutOutdialsId200JSONResponse) VisitPutOutdialsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutOutdialsIdCampaignIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutOutdialsIdCampaignIdJSONRequestBody
}

type PutOutdialsIdCampaignIdResponseObject interface {
	VisitPutOutdialsIdCampaignIdResponse(w http.ResponseWriter) error
}

type PutOutdialsIdCampaignId200JSONResponse externalRef13.Outdial

func (response PutOutdialsIdCampaignId200JSONResponse) VisitPutOutdialsIdCampaignIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutOutdialsIdDataRequestObject struct {
	Id   string `json:"id"`
	Body *PutOutdialsIdDataJSONRequestBody
}

type PutOutdialsIdDataResponseObject interface {
	VisitPutOutdialsIdDataResponse(w http.ResponseWriter) error
}

type PutOutdialsIdData200JSONResponse externalRef13.Outdial

func (response PutOutdialsIdData200JSONResponse) VisitPutOutdialsIdDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostOutdialsIdTargetsRequestObject struct {
	Id   string `json:"id"`
	Body *PostOutdialsIdTargetsJSONRequestBody
}

type PostOutdialsIdTargetsResponseObject interface {
	VisitPostOutdialsIdTargetsResponse(w http.ResponseWriter) error
}

type PostOutdialsIdTargets200JSONResponse externalRef13.Outdialtarget

func (response PostOutdialsIdTargets200JSONResponse) VisitPostOutdialsIdTargetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOutdialsIdTargetsTargetIdRequestObject struct {
	Id       string `json:"id"`
	TargetId string `json:"target_id"`
}

type DeleteOutdialsIdTargetsTargetIdResponseObject interface {
	VisitDeleteOutdialsIdTargetsTargetIdResponse(w http.ResponseWriter) error
}

type DeleteOutdialsIdTargetsTargetId200JSONResponse externalRef13.Outdialtarget

func (response DeleteOutdialsIdTargetsTargetId200JSONResponse) VisitDeleteOutdialsIdTargetsTargetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOutdialsIdTargetsTargetIdRequestObject struct {
	Id       string `json:"id"`
	TargetId string `json:"target_id"`
}

type GetOutdialsIdTargetsTargetIdResponseObject interface {
	VisitGetOutdialsIdTargetsTargetIdResponse(w http.ResponseWriter) error
}

type GetOutdialsIdTargetsTargetId200JSONResponse externalRef13.Outdialtarget

func (response GetOutdialsIdTargetsTargetId200JSONResponse) VisitGetOutdialsIdTargetsTargetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOutplansRequestObject struct {
	Params GetOutplansParams
}

type GetOutplansResponseObject interface {
	VisitGetOutplansResponse(w http.ResponseWriter) error
}

type GetOutplans200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef3.Outplan `json:"result,omitempty"`
}

func (response GetOutplans200JSONResponse) VisitGetOutplansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostOutplansRequestObject struct {
	Body *PostOutplansJSONRequestBody
}

type PostOutplansResponseObject interface {
	VisitPostOutplansResponse(w http.ResponseWriter) error
}

type PostOutplans200JSONResponse externalRef3.Outplan

func (response PostOutplans200JSONResponse) VisitPostOutplansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOutplansIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteOutplansIdResponseObject interface {
	VisitDeleteOutplansIdResponse(w http.ResponseWriter) error
}

type DeleteOutplansId200JSONResponse externalRef3.Outplan

func (response DeleteOutplansId200JSONResponse) VisitDeleteOutplansIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOutplansIdRequestObject struct {
	Id string `json:"id"`
}

type GetOutplansIdResponseObject interface {
	VisitGetOutplansIdResponse(w http.ResponseWriter) error
}

type GetOutplansId200JSONResponse externalRef3.Outplan

func (response GetOutplansId200JSONResponse) VisitGetOutplansIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutOutplansIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutOutplansIdJSONRequestBody
}

type PutOutplansIdResponseObject interface {
	VisitPutOutplansIdResponse(w http.ResponseWriter) error
}

type PutOutplansId200JSONResponse externalRef3.Outplan

func (response PutOutplansId200JSONResponse) VisitPutOutplansIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvidersRequestObject struct {
	Params GetProvidersParams
}

type GetProvidersResponseObject interface {
	VisitGetProvidersResponse(w http.ResponseWriter) error
}

type GetProviders200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                   `json:"next_page_token,omitempty"`
	Result        *[]externalRef17.Provider `json:"result,omitempty"`
}

func (response GetProviders200JSONResponse) VisitGetProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProvidersRequestObject struct {
	Body *PostProvidersJSONRequestBody
}

type PostProvidersResponseObject interface {
	VisitPostProvidersResponse(w http.ResponseWriter) error
}

type PostProviders200JSONResponse externalRef17.Provider

func (response PostProviders200JSONResponse) VisitPostProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvidersIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteProvidersIdResponseObject interface {
	VisitDeleteProvidersIdResponse(w http.ResponseWriter) error
}

type DeleteProvidersId200JSONResponse externalRef17.Provider

func (response DeleteProvidersId200JSONResponse) VisitDeleteProvidersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvidersIdRequestObject struct {
	Id string `json:"id"`
}

type GetProvidersIdResponseObject interface {
	VisitGetProvidersIdResponse(w http.ResponseWriter) error
}

type GetProvidersId200JSONResponse externalRef17.Provider

func (response GetProvidersId200JSONResponse) VisitGetProvidersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutProvidersIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutProvidersIdJSONRequestBody
}

type PutProvidersIdResponseObject interface {
	VisitPutProvidersIdResponse(w http.ResponseWriter) error
}

type PutProvidersId200JSONResponse externalRef17.Provider

func (response PutProvidersId200JSONResponse) VisitPutProvidersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQueuecallsRequestObject struct {
	Params GetQueuecallsParams
}

type GetQueuecallsResponseObject interface {
	VisitGetQueuecallsResponse(w http.ResponseWriter) error
}

type GetQueuecalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                    `json:"next_page_token,omitempty"`
	Result        *[]externalRef15.Queuecall `json:"result,omitempty"`
}

func (response GetQueuecalls200JSONResponse) VisitGetQueuecallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostQueuecallsReferenceIdIdKickRequestObject struct {
	Id string `json:"id"`
}

type PostQueuecallsReferenceIdIdKickResponseObject interface {
	VisitPostQueuecallsReferenceIdIdKickResponse(w http.ResponseWriter) error
}

type PostQueuecallsReferenceIdIdKick200JSONResponse externalRef15.Queuecall

func (response PostQueuecallsReferenceIdIdKick200JSONResponse) VisitPostQueuecallsReferenceIdIdKickResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteQueuecallsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteQueuecallsIdResponseObject interface {
	VisitDeleteQueuecallsIdResponse(w http.ResponseWriter) error
}

type DeleteQueuecallsId200JSONResponse externalRef15.Queuecall

func (response DeleteQueuecallsId200JSONResponse) VisitDeleteQueuecallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQueuecallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetQueuecallsIdResponseObject interface {
	VisitGetQueuecallsIdResponse(w http.ResponseWriter) error
}

type GetQueuecallsId200JSONResponse externalRef15.Queuecall

func (response GetQueuecallsId200JSONResponse) VisitGetQueuecallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostQueuecallsIdKickRequestObject struct {
	Id string `json:"id"`
}

type PostQueuecallsIdKickResponseObject interface {
	VisitPostQueuecallsIdKickResponse(w http.ResponseWriter) error
}

type PostQueuecallsIdKick200JSONResponse externalRef15.Queuecall

func (response PostQueuecallsIdKick200JSONResponse) VisitPostQueuecallsIdKickResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQueuesRequestObject struct {
	Params GetQueuesParams
}

type GetQueuesResponseObject interface {
	VisitGetQueuesResponse(w http.ResponseWriter) error
}

type GetQueues200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                `json:"next_page_token,omitempty"`
	Result        *[]externalRef15.Queue `json:"result,omitempty"`
}

func (response GetQueues200JSONResponse) VisitGetQueuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostQueuesRequestObject struct {
	Body *PostQueuesJSONRequestBody
}

type PostQueuesResponseObject interface {
	VisitPostQueuesResponse(w http.ResponseWriter) error
}

type PostQueues200JSONResponse externalRef15.Queue

func (response PostQueues200JSONResponse) VisitPostQueuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteQueuesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteQueuesIdResponseObject interface {
	VisitDeleteQueuesIdResponse(w http.ResponseWriter) error
}

type DeleteQueuesId200JSONResponse externalRef15.Queue

func (response DeleteQueuesId200JSONResponse) VisitDeleteQueuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQueuesIdRequestObject struct {
	Id string `json:"id"`
}

type GetQueuesIdResponseObject interface {
	VisitGetQueuesIdResponse(w http.ResponseWriter) error
}

type GetQueuesId200JSONResponse externalRef15.Queue

func (response GetQueuesId200JSONResponse) VisitGetQueuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutQueuesIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutQueuesIdJSONRequestBody
}

type PutQueuesIdResponseObject interface {
	VisitPutQueuesIdResponse(w http.ResponseWriter) error
}

type PutQueuesId200JSONResponse externalRef15.Queue

func (response PutQueuesId200JSONResponse) VisitPutQueuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutQueuesIdActionsRequestObject struct {
	Id   string `json:"id"`
	Body *PutQueuesIdActionsJSONRequestBody
}

type PutQueuesIdActionsResponseObject interface {
	VisitPutQueuesIdActionsResponse(w http.ResponseWriter) error
}

type PutQueuesIdActions200JSONResponse externalRef15.Queue

func (response PutQueuesIdActions200JSONResponse) VisitPutQueuesIdActionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutQueuesIdRoutingMethodRequestObject struct {
	Id   string `json:"id"`
	Body *PutQueuesIdRoutingMethodJSONRequestBody
}

type PutQueuesIdRoutingMethodResponseObject interface {
	VisitPutQueuesIdRoutingMethodResponse(w http.ResponseWriter) error
}

type PutQueuesIdRoutingMethod200JSONResponse externalRef15.Queue

func (response PutQueuesIdRoutingMethod200JSONResponse) VisitPutQueuesIdRoutingMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutQueuesIdTagIdsRequestObject struct {
	Id   string `json:"id"`
	Body *PutQueuesIdTagIdsJSONRequestBody
}

type PutQueuesIdTagIdsResponseObject interface {
	VisitPutQueuesIdTagIdsResponse(w http.ResponseWriter) error
}

type PutQueuesIdTagIds200JSONResponse externalRef15.Queue

func (response PutQueuesIdTagIds200JSONResponse) VisitPutQueuesIdTagIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordingfilesIdRequestObject struct {
	Id string `json:"id"`
}

type GetRecordingfilesIdResponseObject interface {
	VisitGetRecordingfilesIdResponse(w http.ResponseWriter) error
}

type GetRecordingfilesId307JSONResponse string

func (response GetRecordingfilesId307JSONResponse) VisitGetRecordingfilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordingfilesId400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response GetRecordingfilesId400JSONResponse) VisitGetRecordingfilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordingfilesId404JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response GetRecordingfilesId404JSONResponse) VisitGetRecordingfilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordingsRequestObject struct {
	Params GetRecordingsParams
}

type GetRecordingsResponseObject interface {
	VisitGetRecordingsResponse(w http.ResponseWriter) error
}

type GetRecordings200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                   `json:"next_page_token,omitempty"`
	Result        *[]externalRef2.Recording `json:"result,omitempty"`
}

func (response GetRecordings200JSONResponse) VisitGetRecordingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecordingsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteRecordingsIdResponseObject interface {
	VisitDeleteRecordingsIdResponse(w http.ResponseWriter) error
}

type DeleteRecordingsId200JSONResponse externalRef2.Recording

func (response DeleteRecordingsId200JSONResponse) VisitDeleteRecordingsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRecordingsId400Response struct {
}

func (response DeleteRecordingsId400Response) VisitDeleteRecordingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetRecordingsIdRequestObject struct {
	Id string `json:"id"`
}

type GetRecordingsIdResponseObject interface {
	VisitGetRecordingsIdResponse(w http.ResponseWriter) error
}

type GetRecordingsId200JSONResponse externalRef2.Recording

func (response GetRecordingsId200JSONResponse) VisitGetRecordingsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordingsId400Response struct {
}

func (response GetRecordingsId400Response) VisitGetRecordingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetRecordingsId404Response struct {
}

func (response GetRecordingsId404Response) VisitGetRecordingsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetRoutesRequestObject struct {
	Params GetRoutesParams
}

type GetRoutesResponseObject interface {
	VisitGetRoutesResponse(w http.ResponseWriter) error
}

type GetRoutes200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                `json:"next_page_token,omitempty"`
	Result        *[]externalRef17.Route `json:"result,omitempty"`
}

func (response GetRoutes200JSONResponse) VisitGetRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRoutesRequestObject struct {
	Body *PostRoutesJSONRequestBody
}

type PostRoutesResponseObject interface {
	VisitPostRoutesResponse(w http.ResponseWriter) error
}

type PostRoutes200JSONResponse externalRef17.Route

func (response PostRoutes200JSONResponse) VisitPostRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoutesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteRoutesIdResponseObject interface {
	VisitDeleteRoutesIdResponse(w http.ResponseWriter) error
}

type DeleteRoutesId200JSONResponse externalRef17.Route

func (response DeleteRoutesId200JSONResponse) VisitDeleteRoutesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoutesIdRequestObject struct {
	Id string `json:"id"`
}

type GetRoutesIdResponseObject interface {
	VisitGetRoutesIdResponse(w http.ResponseWriter) error
}

type GetRoutesId200JSONResponse externalRef17.Route

func (response GetRoutesId200JSONResponse) VisitGetRoutesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutRoutesIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutRoutesIdJSONRequestBody
}

type PutRoutesIdResponseObject interface {
	VisitPutRoutesIdResponse(w http.ResponseWriter) error
}

type PutRoutesId200JSONResponse externalRef17.Route

func (response PutRoutesId200JSONResponse) VisitPutRoutesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsAgentsRequestObject struct {
	Params GetServiceAgentsAgentsParams
}

type GetServiceAgentsAgentsResponseObject interface {
	VisitGetServiceAgentsAgentsResponse(w http.ResponseWriter) error
}

type GetServiceAgentsAgents200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string               `json:"next_page_token,omitempty"`
	Result        *[]externalRef0.Agent `json:"result,omitempty"`
}

func (response GetServiceAgentsAgents200JSONResponse) VisitGetServiceAgentsAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsAgentsIdRequestObject struct {
	Id string `json:"id"`
}

type GetServiceAgentsAgentsIdResponseObject interface {
	VisitGetServiceAgentsAgentsIdResponse(w http.ResponseWriter) error
}

type GetServiceAgentsAgentsId200JSONResponse externalRef0.Agent

func (response GetServiceAgentsAgentsId200JSONResponse) VisitGetServiceAgentsAgentsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsCallsRequestObject struct {
	Params GetServiceAgentsCallsParams
}

type GetServiceAgentsCallsResponseObject interface {
	VisitGetServiceAgentsCallsResponse(w http.ResponseWriter) error
}

type GetServiceAgentsCalls200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string              `json:"next_page_token,omitempty"`
	Result        *[]externalRef2.Call `json:"result,omitempty"`
}

func (response GetServiceAgentsCalls200JSONResponse) VisitGetServiceAgentsCallsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsCallsIdRequestObject struct {
	Id string `json:"id"`
}

type GetServiceAgentsCallsIdResponseObject interface {
	VisitGetServiceAgentsCallsIdResponse(w http.ResponseWriter) error
}

type GetServiceAgentsCallsId200JSONResponse externalRef2.Call

func (response GetServiceAgentsCallsId200JSONResponse) VisitGetServiceAgentsCallsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsChatroommessagesRequestObject struct {
	Params GetServiceAgentsChatroommessagesParams
}

type GetServiceAgentsChatroommessagesResponseObject interface {
	VisitGetServiceAgentsChatroommessagesResponse(w http.ResponseWriter) error
}

type GetServiceAgentsChatroommessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                         `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Messagechatroom `json:"result,omitempty"`
}

func (response GetServiceAgentsChatroommessages200JSONResponse) VisitGetServiceAgentsChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostServiceAgentsChatroommessagesRequestObject struct {
	Body *PostServiceAgentsChatroommessagesJSONRequestBody
}

type PostServiceAgentsChatroommessagesResponseObject interface {
	VisitPostServiceAgentsChatroommessagesResponse(w http.ResponseWriter) error
}

type PostServiceAgentsChatroommessages200JSONResponse externalRef4.Messagechatroom

func (response PostServiceAgentsChatroommessages200JSONResponse) VisitPostServiceAgentsChatroommessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteServiceAgentsChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteServiceAgentsChatroommessagesIdResponseObject interface {
	VisitDeleteServiceAgentsChatroommessagesIdResponse(w http.ResponseWriter) error
}

type DeleteServiceAgentsChatroommessagesId200JSONResponse externalRef4.Messagechatroom

func (response DeleteServiceAgentsChatroommessagesId200JSONResponse) VisitDeleteServiceAgentsChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsChatroommessagesIdRequestObject struct {
	Id string `json:"id"`
}

type GetServiceAgentsChatroommessagesIdResponseObject interface {
	VisitGetServiceAgentsChatroommessagesIdResponse(w http.ResponseWriter) error
}

type GetServiceAgentsChatroommessagesId200JSONResponse externalRef4.Messagechatroom

func (response GetServiceAgentsChatroommessagesId200JSONResponse) VisitGetServiceAgentsChatroommessagesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsChatroomsRequestObject struct {
	Params GetServiceAgentsChatroomsParams
}

type GetServiceAgentsChatroomsResponseObject interface {
	VisitGetServiceAgentsChatroomsResponse(w http.ResponseWriter) error
}

type GetServiceAgentsChatrooms200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef4.Chatroom `json:"result,omitempty"`
}

func (response GetServiceAgentsChatrooms200JSONResponse) VisitGetServiceAgentsChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostServiceAgentsChatroomsRequestObject struct {
	Body *PostServiceAgentsChatroomsJSONRequestBody
}

type PostServiceAgentsChatroomsResponseObject interface {
	VisitPostServiceAgentsChatroomsResponse(w http.ResponseWriter) error
}

type PostServiceAgentsChatrooms200JSONResponse externalRef4.Chatroom

func (response PostServiceAgentsChatrooms200JSONResponse) VisitPostServiceAgentsChatroomsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteServiceAgentsChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteServiceAgentsChatroomsIdResponseObject interface {
	VisitDeleteServiceAgentsChatroomsIdResponse(w http.ResponseWriter) error
}

type DeleteServiceAgentsChatroomsId200JSONResponse externalRef4.Chatroom

func (response DeleteServiceAgentsChatroomsId200JSONResponse) VisitDeleteServiceAgentsChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsChatroomsIdRequestObject struct {
	Id string `json:"id"`
}

type GetServiceAgentsChatroomsIdResponseObject interface {
	VisitGetServiceAgentsChatroomsIdResponse(w http.ResponseWriter) error
}

type GetServiceAgentsChatroomsId200JSONResponse externalRef4.Chatroom

func (response GetServiceAgentsChatroomsId200JSONResponse) VisitGetServiceAgentsChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutServiceAgentsChatroomsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutServiceAgentsChatroomsIdJSONRequestBody
}

type PutServiceAgentsChatroomsIdResponseObject interface {
	VisitPutServiceAgentsChatroomsIdResponse(w http.ResponseWriter) error
}

type PutServiceAgentsChatroomsId200JSONResponse externalRef4.Chatroom

func (response PutServiceAgentsChatroomsId200JSONResponse) VisitPutServiceAgentsChatroomsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsConversationsRequestObject struct {
	Params GetServiceAgentsConversationsParams
}

type GetServiceAgentsConversationsResponseObject interface {
	VisitGetServiceAgentsConversationsResponse(w http.ResponseWriter) error
}

type GetServiceAgentsConversations200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                      `json:"next_page_token,omitempty"`
	Result        *[]externalRef8.Conversation `json:"result,omitempty"`
}

func (response GetServiceAgentsConversations200JSONResponse) VisitGetServiceAgentsConversationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsConversationsIdRequestObject struct {
	Id string `json:"id"`
}

type GetServiceAgentsConversationsIdResponseObject interface {
	VisitGetServiceAgentsConversationsIdResponse(w http.ResponseWriter) error
}

type GetServiceAgentsConversationsId200JSONResponse externalRef8.Conversation

func (response GetServiceAgentsConversationsId200JSONResponse) VisitGetServiceAgentsConversationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsConversationsIdMessagesRequestObject struct {
	Id     string `json:"id"`
	Params GetServiceAgentsConversationsIdMessagesParams
}

type GetServiceAgentsConversationsIdMessagesResponseObject interface {
	VisitGetServiceAgentsConversationsIdMessagesResponse(w http.ResponseWriter) error
}

type GetServiceAgentsConversationsIdMessages200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                 `json:"next_page_token,omitempty"`
	Result        *[]externalRef8.Message `json:"result,omitempty"`
}

func (response GetServiceAgentsConversationsIdMessages200JSONResponse) VisitGetServiceAgentsConversationsIdMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostServiceAgentsConversationsIdMessagesRequestObject struct {
	Id   string `json:"id"`
	Body *PostServiceAgentsConversationsIdMessagesJSONRequestBody
}

type PostServiceAgentsConversationsIdMessagesResponseObject interface {
	VisitPostServiceAgentsConversationsIdMessagesResponse(w http.ResponseWriter) error
}

type PostServiceAgentsConversationsIdMessages200JSONResponse externalRef8.Message

func (response PostServiceAgentsConversationsIdMessages200JSONResponse) VisitPostServiceAgentsConversationsIdMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsCustomerRequestObject struct {
}

type GetServiceAgentsCustomerResponseObject interface {
	VisitGetServiceAgentsCustomerResponse(w http.ResponseWriter) error
}

type GetServiceAgentsCustomer200JSONResponse externalRef9.Customer

func (response GetServiceAgentsCustomer200JSONResponse) VisitGetServiceAgentsCustomerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsExtensionsRequestObject struct {
	Params GetServiceAgentsExtensionsParams
}

type GetServiceAgentsExtensionsResponseObject interface {
	VisitGetServiceAgentsExtensionsResponse(w http.ResponseWriter) error
}

type GetServiceAgentsExtensions200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                    `json:"next_page_token,omitempty"`
	Result        *[]externalRef16.Extension `json:"result,omitempty"`
}

func (response GetServiceAgentsExtensions200JSONResponse) VisitGetServiceAgentsExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsExtensionsIdRequestObject struct {
	Id string `json:"id"`
}

type GetServiceAgentsExtensionsIdResponseObject interface {
	VisitGetServiceAgentsExtensionsIdResponse(w http.ResponseWriter) error
}

type GetServiceAgentsExtensionsId200JSONResponse externalRef16.Extension

func (response GetServiceAgentsExtensionsId200JSONResponse) VisitGetServiceAgentsExtensionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsFilesRequestObject struct {
	Params GetServiceAgentsFilesParams
}

type GetServiceAgentsFilesResponseObject interface {
	VisitGetServiceAgentsFilesResponse(w http.ResponseWriter) error
}

type GetServiceAgentsFiles200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string               `json:"next_page_token,omitempty"`
	Result        *[]externalRef18.File `json:"result,omitempty"`
}

func (response GetServiceAgentsFiles200JSONResponse) VisitGetServiceAgentsFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostServiceAgentsFilesRequestObject struct {
	Body *multipart.Reader
}

type PostServiceAgentsFilesResponseObject interface {
	VisitPostServiceAgentsFilesResponse(w http.ResponseWriter) error
}

type PostServiceAgentsFiles200JSONResponse externalRef18.File

func (response PostServiceAgentsFiles200JSONResponse) VisitPostServiceAgentsFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteServiceAgentsFilesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteServiceAgentsFilesIdResponseObject interface {
	VisitDeleteServiceAgentsFilesIdResponse(w http.ResponseWriter) error
}

type DeleteServiceAgentsFilesId200JSONResponse externalRef18.File

func (response DeleteServiceAgentsFilesId200JSONResponse) VisitDeleteServiceAgentsFilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsFilesIdRequestObject struct {
	Id string `json:"id"`
}

type GetServiceAgentsFilesIdResponseObject interface {
	VisitGetServiceAgentsFilesIdResponse(w http.ResponseWriter) error
}

type GetServiceAgentsFilesId200JSONResponse externalRef18.File

func (response GetServiceAgentsFilesId200JSONResponse) VisitGetServiceAgentsFilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsMeRequestObject struct {
}

type GetServiceAgentsMeResponseObject interface {
	VisitGetServiceAgentsMeResponse(w http.ResponseWriter) error
}

type GetServiceAgentsMe200JSONResponse externalRef0.Agent

func (response GetServiceAgentsMe200JSONResponse) VisitGetServiceAgentsMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutServiceAgentsMeRequestObject struct {
	Body *PutServiceAgentsMeJSONRequestBody
}

type PutServiceAgentsMeResponseObject interface {
	VisitPutServiceAgentsMeResponse(w http.ResponseWriter) error
}

type PutServiceAgentsMe200JSONResponse externalRef0.Agent

func (response PutServiceAgentsMe200JSONResponse) VisitPutServiceAgentsMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutServiceAgentsMeAddressesRequestObject struct {
	Body *PutServiceAgentsMeAddressesJSONRequestBody
}

type PutServiceAgentsMeAddressesResponseObject interface {
	VisitPutServiceAgentsMeAddressesResponse(w http.ResponseWriter) error
}

type PutServiceAgentsMeAddresses200JSONResponse externalRef0.Agent

func (response PutServiceAgentsMeAddresses200JSONResponse) VisitPutServiceAgentsMeAddressesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutServiceAgentsMePasswordRequestObject struct {
	Body *PutServiceAgentsMePasswordJSONRequestBody
}

type PutServiceAgentsMePasswordResponseObject interface {
	VisitPutServiceAgentsMePasswordResponse(w http.ResponseWriter) error
}

type PutServiceAgentsMePassword200JSONResponse externalRef0.Agent

func (response PutServiceAgentsMePassword200JSONResponse) VisitPutServiceAgentsMePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutServiceAgentsMeStatusRequestObject struct {
	Body *PutServiceAgentsMeStatusJSONRequestBody
}

type PutServiceAgentsMeStatusResponseObject interface {
	VisitPutServiceAgentsMeStatusResponse(w http.ResponseWriter) error
}

type PutServiceAgentsMeStatus200JSONResponse externalRef0.Agent

func (response PutServiceAgentsMeStatus200JSONResponse) VisitPutServiceAgentsMeStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceAgentsWsRequestObject struct {
}

type GetServiceAgentsWsResponseObject interface {
	VisitGetServiceAgentsWsResponse(w http.ResponseWriter) error
}

type GetStorageAccountsRequestObject struct {
	Params GetStorageAccountsParams
}

type GetStorageAccountsResponseObject interface {
	VisitGetStorageAccountsResponse(w http.ResponseWriter) error
}

type GetStorageAccounts200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Result        *[]externalRef18.Account `json:"result,omitempty"`
}

func (response GetStorageAccounts200JSONResponse) VisitGetStorageAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostStorageAccountsRequestObject struct {
	Body *PostStorageAccountsJSONRequestBody
}

type PostStorageAccountsResponseObject interface {
	VisitPostStorageAccountsResponse(w http.ResponseWriter) error
}

type PostStorageAccounts200JSONResponse externalRef18.Account

func (response PostStorageAccounts200JSONResponse) VisitPostStorageAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStorageAccountsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteStorageAccountsIdResponseObject interface {
	VisitDeleteStorageAccountsIdResponse(w http.ResponseWriter) error
}

type DeleteStorageAccountsId200JSONResponse externalRef18.Account

func (response DeleteStorageAccountsId200JSONResponse) VisitDeleteStorageAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStorageAccountsIdRequestObject struct {
	Id string `json:"id"`
}

type GetStorageAccountsIdResponseObject interface {
	VisitGetStorageAccountsIdResponse(w http.ResponseWriter) error
}

type GetStorageAccountsId200JSONResponse externalRef18.Account

func (response GetStorageAccountsId200JSONResponse) VisitGetStorageAccountsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStorageFilesRequestObject struct {
	Params GetStorageFilesParams
}

type GetStorageFilesResponseObject interface {
	VisitGetStorageFilesResponse(w http.ResponseWriter) error
}

type GetStorageFiles200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string               `json:"next_page_token,omitempty"`
	Result        *[]externalRef18.File `json:"result,omitempty"`
}

func (response GetStorageFiles200JSONResponse) VisitGetStorageFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostStorageFilesRequestObject struct {
	Body *multipart.Reader
}

type PostStorageFilesResponseObject interface {
	VisitPostStorageFilesResponse(w http.ResponseWriter) error
}

type PostStorageFiles200JSONResponse externalRef18.File

func (response PostStorageFiles200JSONResponse) VisitPostStorageFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStorageFilesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteStorageFilesIdResponseObject interface {
	VisitDeleteStorageFilesIdResponse(w http.ResponseWriter) error
}

type DeleteStorageFilesId200JSONResponse externalRef18.File

func (response DeleteStorageFilesId200JSONResponse) VisitDeleteStorageFilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStorageFilesIdRequestObject struct {
	Id string `json:"id"`
}

type GetStorageFilesIdResponseObject interface {
	VisitGetStorageFilesIdResponse(w http.ResponseWriter) error
}

type GetStorageFilesId200JSONResponse externalRef18.File

func (response GetStorageFilesId200JSONResponse) VisitGetStorageFilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
	Params GetTagsParams
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string              `json:"next_page_token,omitempty"`
	Result        *[]externalRef19.Tag `json:"result,omitempty"`
}

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTagsRequestObject struct {
	Body *PostTagsJSONRequestBody
}

type PostTagsResponseObject interface {
	VisitPostTagsResponse(w http.ResponseWriter) error
}

type PostTags200JSONResponse externalRef19.Tag

func (response PostTags200JSONResponse) VisitPostTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteTagsIdResponseObject interface {
	VisitDeleteTagsIdResponse(w http.ResponseWriter) error
}

type DeleteTagsId200JSONResponse externalRef19.Tag

func (response DeleteTagsId200JSONResponse) VisitDeleteTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsIdRequestObject struct {
	Id string `json:"id"`
}

type GetTagsIdResponseObject interface {
	VisitGetTagsIdResponse(w http.ResponseWriter) error
}

type GetTagsId200JSONResponse externalRef19.Tag

func (response GetTagsId200JSONResponse) VisitGetTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutTagsIdRequestObject struct {
	Id struct {
		Detail *string `json:"detail,omitempty"`
		Name   *string `json:"name,omitempty"`
	} `json:"id"`
}

type PutTagsIdResponseObject interface {
	VisitPutTagsIdResponse(w http.ResponseWriter) error
}

type PutTagsId200JSONResponse externalRef19.Tag

func (response PutTagsId200JSONResponse) VisitPutTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTranscribesRequestObject struct {
	Params GetTranscribesParams
}

type GetTranscribesResponseObject interface {
	VisitGetTranscribesResponse(w http.ResponseWriter) error
}

type GetTranscribes200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef20.Transcribe `json:"result,omitempty"`
}

func (response GetTranscribes200JSONResponse) VisitGetTranscribesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTranscribesRequestObject struct {
	Body *PostTranscribesJSONRequestBody
}

type PostTranscribesResponseObject interface {
	VisitPostTranscribesResponse(w http.ResponseWriter) error
}

type PostTranscribes200JSONResponse externalRef20.Transcribe

func (response PostTranscribes200JSONResponse) VisitPostTranscribesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTranscribesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteTranscribesIdResponseObject interface {
	VisitDeleteTranscribesIdResponse(w http.ResponseWriter) error
}

type DeleteTranscribesId200JSONResponse externalRef20.Transcribe

func (response DeleteTranscribesId200JSONResponse) VisitDeleteTranscribesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTranscribesIdRequestObject struct {
	Id string `json:"id"`
}

type GetTranscribesIdResponseObject interface {
	VisitGetTranscribesIdResponse(w http.ResponseWriter) error
}

type GetTranscribesId200JSONResponse externalRef20.Transcribe

func (response GetTranscribesId200JSONResponse) VisitGetTranscribesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTranscribesIdStopRequestObject struct {
	Id string `json:"id"`
}

type PostTranscribesIdStopResponseObject interface {
	VisitPostTranscribesIdStopResponse(w http.ResponseWriter) error
}

type PostTranscribesIdStop200JSONResponse externalRef20.Transcribe

func (response PostTranscribesIdStop200JSONResponse) VisitPostTranscribesIdStopResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTranscriptsRequestObject struct {
	Params GetTranscriptsParams
}

type GetTranscriptsResponseObject interface {
	VisitGetTranscriptsResponse(w http.ResponseWriter) error
}

type GetTranscripts200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                     `json:"next_page_token,omitempty"`
	Result        *[]externalRef20.Transcript `json:"result,omitempty"`
}

func (response GetTranscripts200JSONResponse) VisitGetTranscriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTransfersRequestObject struct {
	Body *PostTransfersJSONRequestBody
}

type PostTransfersResponseObject interface {
	VisitPostTransfersResponse(w http.ResponseWriter) error
}

type PostTransfers200JSONResponse externalRef21.Transfer

func (response PostTransfers200JSONResponse) VisitPostTransfersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrunksRequestObject struct {
	Params GetTrunksParams
}

type GetTrunksResponseObject interface {
	VisitGetTrunksResponse(w http.ResponseWriter) error
}

type GetTrunks200JSONResponse struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string                `json:"next_page_token,omitempty"`
	Result        *[]externalRef16.Trunk `json:"result,omitempty"`
}

func (response GetTrunks200JSONResponse) VisitGetTrunksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTrunksRequestObject struct {
	Body *PostTrunksJSONRequestBody
}

type PostTrunksResponseObject interface {
	VisitPostTrunksResponse(w http.ResponseWriter) error
}

type PostTrunks200JSONResponse externalRef16.Trunk

func (response PostTrunks200JSONResponse) VisitPostTrunksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTrunksIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteTrunksIdResponseObject interface {
	VisitDeleteTrunksIdResponse(w http.ResponseWriter) error
}

type DeleteTrunksId200JSONResponse externalRef16.Trunk

func (response DeleteTrunksId200JSONResponse) VisitDeleteTrunksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrunksIdRequestObject struct {
	Id string `json:"id"`
}

type GetTrunksIdResponseObject interface {
	VisitGetTrunksIdResponse(w http.ResponseWriter) error
}

type GetTrunksId200JSONResponse externalRef16.Trunk

func (response GetTrunksId200JSONResponse) VisitGetTrunksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutTrunksIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutTrunksIdJSONRequestBody
}

type PutTrunksIdResponseObject interface {
	VisitPutTrunksIdResponse(w http.ResponseWriter) error
}

type PutTrunksId200JSONResponse externalRef16.Trunk

func (response PutTrunksId200JSONResponse) VisitPutTrunksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWsRequestObject struct {
}

type GetWsResponseObject interface {
	VisitGetWsResponse(w http.ResponseWriter) error
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of accesskeys
	// (GET /accesskeys)
	GetAccesskeys(ctx context.Context, request GetAccesskeysRequestObject) (GetAccesskeysResponseObject, error)
	// Create a new accesskey.
	// (POST /accesskeys)
	PostAccesskeys(ctx context.Context, request PostAccesskeysRequestObject) (PostAccesskeysResponseObject, error)
	// Delete an accesskey
	// (DELETE /accesskeys/{id})
	DeleteAccesskeysId(ctx context.Context, request DeleteAccesskeysIdRequestObject) (DeleteAccesskeysIdResponseObject, error)
	// Get details of an accesskey
	// (GET /accesskeys/{id})
	GetAccesskeysId(ctx context.Context, request GetAccesskeysIdRequestObject) (GetAccesskeysIdResponseObject, error)
	// Update an accesskey
	// (PUT /accesskeys/{id})
	PutAccesskeysId(ctx context.Context, request PutAccesskeysIdRequestObject) (PutAccesskeysIdResponseObject, error)
	// List all activeflows
	// (GET /activeflows)
	GetActiveflows(ctx context.Context, request GetActiveflowsRequestObject) (GetActiveflowsResponseObject, error)
	// Create a new activeflow
	// (POST /activeflows)
	PostActiveflows(ctx context.Context, request PostActiveflowsRequestObject) (PostActiveflowsResponseObject, error)
	// Delete an active flow
	// (DELETE /activeflows/{id})
	DeleteActiveflowsId(ctx context.Context, request DeleteActiveflowsIdRequestObject) (DeleteActiveflowsIdResponseObject, error)
	// Get an active flow by ID
	// (GET /activeflows/{id})
	GetActiveflowsId(ctx context.Context, request GetActiveflowsIdRequestObject) (GetActiveflowsIdResponseObject, error)
	// Stop an active flow
	// (POST /activeflows/{id}/stop)
	PostActiveflowsIdStop(ctx context.Context, request PostActiveflowsIdStopRequestObject) (PostActiveflowsIdStopResponseObject, error)
	// List agents
	// (GET /agents)
	GetAgents(ctx context.Context, request GetAgentsRequestObject) (GetAgentsResponseObject, error)
	// Create a new agent
	// (POST /agents)
	PostAgents(ctx context.Context, request PostAgentsRequestObject) (PostAgentsResponseObject, error)
	// Delete the agent
	// (DELETE /agents/{id})
	DeleteAgentsId(ctx context.Context, request DeleteAgentsIdRequestObject) (DeleteAgentsIdResponseObject, error)
	// Get the agent
	// (GET /agents/{id})
	GetAgentsId(ctx context.Context, request GetAgentsIdRequestObject) (GetAgentsIdResponseObject, error)
	// Update an agent
	// (PUT /agents/{id})
	PutAgentsId(ctx context.Context, request PutAgentsIdRequestObject) (PutAgentsIdResponseObject, error)
	// Update an agent's addresses
	// (PUT /agents/{id}/addresses)
	PutAgentsIdAddresses(ctx context.Context, request PutAgentsIdAddressesRequestObject) (PutAgentsIdAddressesResponseObject, error)
	// Update an agent's password
	// (PUT /agents/{id}/password)
	PutAgentsIdPassword(ctx context.Context, request PutAgentsIdPasswordRequestObject) (PutAgentsIdPasswordResponseObject, error)
	// Update an agent's permission
	// (PUT /agents/{id}/permission)
	PutAgentsIdPermission(ctx context.Context, request PutAgentsIdPermissionRequestObject) (PutAgentsIdPermissionResponseObject, error)
	// Update an agent's tag IDs
	// (PUT /agents/{id}/tag_ids)
	PutAgentsIdTagIds(ctx context.Context, request PutAgentsIdTagIdsRequestObject) (PutAgentsIdTagIdsResponseObject, error)
	// List available numbers
	// (GET /available_numbers)
	GetAvailableNumbers(ctx context.Context, request GetAvailableNumbersRequestObject) (GetAvailableNumbersResponseObject, error)
	// Get list of billing accounts
	// (GET /billing_accounts)
	GetBillingAccounts(ctx context.Context, request GetBillingAccountsRequestObject) (GetBillingAccountsResponseObject, error)
	// Create a new billing account
	// (POST /billing_accounts)
	PostBillingAccounts(ctx context.Context, request PostBillingAccountsRequestObject) (PostBillingAccountsResponseObject, error)
	// Delete billing account
	// (DELETE /billing_accounts/{id})
	DeleteBillingAccountsId(ctx context.Context, request DeleteBillingAccountsIdRequestObject) (DeleteBillingAccountsIdResponseObject, error)
	// Get detailed billing account info
	// (GET /billing_accounts/{id})
	GetBillingAccountsId(ctx context.Context, request GetBillingAccountsIdRequestObject) (GetBillingAccountsIdResponseObject, error)
	// Update billing account
	// (PUT /billing_accounts/{id})
	PutBillingAccountsId(ctx context.Context, request PutBillingAccountsIdRequestObject) (PutBillingAccountsIdResponseObject, error)
	// Add balance to billing account
	// (POST /billing_accounts/{id}/balance_add_force)
	PostBillingAccountsIdBalanceAddForce(ctx context.Context, request PostBillingAccountsIdBalanceAddForceRequestObject) (PostBillingAccountsIdBalanceAddForceResponseObject, error)
	// Subtract balance from billing account
	// (POST /billing_accounts/{id}/balance_subtract_force)
	PostBillingAccountsIdBalanceSubtractForce(ctx context.Context, request PostBillingAccountsIdBalanceSubtractForceRequestObject) (PostBillingAccountsIdBalanceSubtractForceResponseObject, error)
	// Update billing account's payment info
	// (PUT /billing_accounts/{id}/payment_info)
	PutBillingAccountsIdPaymentInfo(ctx context.Context, request PutBillingAccountsIdPaymentInfoRequestObject) (PutBillingAccountsIdPaymentInfoResponseObject, error)
	// Get list of calls
	// (GET /calls)
	GetCalls(ctx context.Context, request GetCallsRequestObject) (GetCallsResponseObject, error)
	// Make an outbound call
	// (POST /calls)
	PostCalls(ctx context.Context, request PostCallsRequestObject) (PostCallsResponseObject, error)
	// Delete up the call
	// (DELETE /calls/{id})
	DeleteCallsId(ctx context.Context, request DeleteCallsIdRequestObject) (DeleteCallsIdResponseObject, error)
	// Get detail call info
	// (GET /calls/{id})
	GetCallsId(ctx context.Context, request GetCallsIdRequestObject) (GetCallsIdResponseObject, error)
	// Hang up the call
	// (POST /calls/{id}/hangup)
	PostCallsIdHangup(ctx context.Context, request PostCallsIdHangupRequestObject) (PostCallsIdHangupResponseObject, error)
	// Unhold the call
	// (DELETE /calls/{id}/hold)
	DeleteCallsIdHold(ctx context.Context, request DeleteCallsIdHoldRequestObject) (DeleteCallsIdHoldResponseObject, error)
	// Hold the call
	// (POST /calls/{id}/hold)
	PostCallsIdHold(ctx context.Context, request PostCallsIdHoldRequestObject) (PostCallsIdHoldResponseObject, error)
	// Get media stream for the call
	// (GET /calls/{id}/media_stream)
	GetCallsIdMediaStream(ctx context.Context, request GetCallsIdMediaStreamRequestObject) (GetCallsIdMediaStreamResponseObject, error)
	// Disable Music on Hold (MOH)
	// (DELETE /calls/{id}/moh)
	DeleteCallsIdMoh(ctx context.Context, request DeleteCallsIdMohRequestObject) (DeleteCallsIdMohResponseObject, error)
	// Enable Music on Hold (MOH)
	// (POST /calls/{id}/moh)
	PostCallsIdMoh(ctx context.Context, request PostCallsIdMohRequestObject) (PostCallsIdMohResponseObject, error)
	// Unmute the call
	// (DELETE /calls/{id}/mute)
	DeleteCallsIdMute(ctx context.Context, request DeleteCallsIdMuteRequestObject) (DeleteCallsIdMuteResponseObject, error)
	// Mute the call
	// (POST /calls/{id}/mute)
	PostCallsIdMute(ctx context.Context, request PostCallsIdMuteRequestObject) (PostCallsIdMuteResponseObject, error)
	// Un-silence a call
	// (DELETE /calls/{id}/silence)
	DeleteCallsIdSilence(ctx context.Context, request DeleteCallsIdSilenceRequestObject) (DeleteCallsIdSilenceResponseObject, error)
	// Silence a call
	// (POST /calls/{id}/silence)
	PostCallsIdSilence(ctx context.Context, request PostCallsIdSilenceRequestObject) (PostCallsIdSilenceResponseObject, error)
	// Talk to the call
	// (POST /calls/{id}/talk)
	PostCallsIdTalk(ctx context.Context, request PostCallsIdTalkRequestObject) (PostCallsIdTalkResponseObject, error)
	// Get list of campaign calls
	// (GET /campaigncalls)
	GetCampaigncalls(ctx context.Context, request GetCampaigncallsRequestObject) (GetCampaigncallsResponseObject, error)
	// Delete a campaign call
	// (DELETE /campaigncalls/{id})
	DeleteCampaigncallsId(ctx context.Context, request DeleteCampaigncallsIdRequestObject) (DeleteCampaigncallsIdResponseObject, error)
	// Get campaign call details
	// (GET /campaigncalls/{id})
	GetCampaigncallsId(ctx context.Context, request GetCampaigncallsIdRequestObject) (GetCampaigncallsIdResponseObject, error)
	// Get a list of campaigns
	// (GET /campaigns)
	GetCampaigns(ctx context.Context, request GetCampaignsRequestObject) (GetCampaignsResponseObject, error)
	// Create a new campaign
	// (POST /campaigns)
	PostCampaigns(ctx context.Context, request PostCampaignsRequestObject) (PostCampaignsResponseObject, error)
	// Delete a campaign
	// (DELETE /campaigns/{id})
	DeleteCampaignsId(ctx context.Context, request DeleteCampaignsIdRequestObject) (DeleteCampaignsIdResponseObject, error)
	// Get campaign details
	// (GET /campaigns/{id})
	GetCampaignsId(ctx context.Context, request GetCampaignsIdRequestObject) (GetCampaignsIdResponseObject, error)
	// Update a campaign
	// (PUT /campaigns/{id})
	PutCampaignsId(ctx context.Context, request PutCampaignsIdRequestObject) (PutCampaignsIdResponseObject, error)
	// Update campaign status
	// (PUT /campaigns/{id}/status)
	PutCampaignsIdStatus(ctx context.Context, request PutCampaignsIdStatusRequestObject) (PutCampaignsIdStatusResponseObject, error)
	// Gets a list of chatbot calls
	// (GET /chatbotcalls)
	GetChatbotcalls(ctx context.Context, request GetChatbotcallsRequestObject) (GetChatbotcallsResponseObject, error)
	// Delete a specific chatbot call
	// (DELETE /chatbotcalls/{id})
	DeleteChatbotcallsId(ctx context.Context, request DeleteChatbotcallsIdRequestObject) (DeleteChatbotcallsIdResponseObject, error)
	// Get details of a specific chatbot call
	// (GET /chatbotcalls/{id})
	GetChatbotcallsId(ctx context.Context, request GetChatbotcallsIdRequestObject) (GetChatbotcallsIdResponseObject, error)
	// Gets a list of chatbots.
	// (GET /chatbots)
	GetChatbots(ctx context.Context, request GetChatbotsRequestObject) (GetChatbotsResponseObject, error)
	// Create a new chatbot.
	// (POST /chatbots)
	PostChatbots(ctx context.Context, request PostChatbotsRequestObject) (PostChatbotsResponseObject, error)
	// Delete a chatbot.
	// (DELETE /chatbots/{id})
	DeleteChatbotsId(ctx context.Context, request DeleteChatbotsIdRequestObject) (DeleteChatbotsIdResponseObject, error)
	// Get chatbot details.
	// (GET /chatbots/{id})
	GetChatbotsId(ctx context.Context, request GetChatbotsIdRequestObject) (GetChatbotsIdResponseObject, error)
	// Update a chatbot.
	// (PUT /chatbots/{id})
	PutChatbotsId(ctx context.Context, request PutChatbotsIdRequestObject) (PutChatbotsIdResponseObject, error)
	// Retrieve a list of chat messages
	// (GET /chatmessages)
	GetChatmessages(ctx context.Context, request GetChatmessagesRequestObject) (GetChatmessagesResponseObject, error)
	// Create a new chat message
	// (POST /chatmessages)
	PostChatmessages(ctx context.Context, request PostChatmessagesRequestObject) (PostChatmessagesResponseObject, error)
	// Delete a chat message
	// (DELETE /chatmessages/{id})
	DeleteChatmessagesId(ctx context.Context, request DeleteChatmessagesIdRequestObject) (DeleteChatmessagesIdResponseObject, error)
	// Retrieve details of a chat message
	// (GET /chatmessages/{id})
	GetChatmessagesId(ctx context.Context, request GetChatmessagesIdRequestObject) (GetChatmessagesIdResponseObject, error)
	// Retrieve a list of chatroom messages
	// (GET /chatroommessages)
	GetChatroommessages(ctx context.Context, request GetChatroommessagesRequestObject) (GetChatroommessagesResponseObject, error)
	// Create a new chatroom message
	// (POST /chatroommessages)
	PostChatroommessages(ctx context.Context, request PostChatroommessagesRequestObject) (PostChatroommessagesResponseObject, error)
	// Delete a chatroom message
	// (DELETE /chatroommessages/{id})
	DeleteChatroommessagesId(ctx context.Context, request DeleteChatroommessagesIdRequestObject) (DeleteChatroommessagesIdResponseObject, error)
	// Get details of a specific chatroom message
	// (GET /chatroommessages/{id})
	GetChatroommessagesId(ctx context.Context, request GetChatroommessagesIdRequestObject) (GetChatroommessagesIdResponseObject, error)
	// Gets a list of chatrooms.
	// (GET /chatrooms)
	GetChatrooms(ctx context.Context, request GetChatroomsRequestObject) (GetChatroomsResponseObject, error)
	// Create a new chatroom.
	// (POST /chatrooms)
	PostChatrooms(ctx context.Context, request PostChatroomsRequestObject) (PostChatroomsResponseObject, error)
	// Delete a chatroom.
	// (DELETE /chatrooms/{id})
	DeleteChatroomsId(ctx context.Context, request DeleteChatroomsIdRequestObject) (DeleteChatroomsIdResponseObject, error)
	// Get chatroom details.
	// (GET /chatrooms/{id})
	GetChatroomsId(ctx context.Context, request GetChatroomsIdRequestObject) (GetChatroomsIdResponseObject, error)
	// Update a chatroom.
	// (PUT /chatrooms/{id})
	PutChatroomsId(ctx context.Context, request PutChatroomsIdRequestObject) (PutChatroomsIdResponseObject, error)
	// Gets a list of chats.
	// (GET /chats)
	GetChats(ctx context.Context, request GetChatsRequestObject) (GetChatsResponseObject, error)
	// Create a new chat.
	// (POST /chats)
	PostChats(ctx context.Context, request PostChatsRequestObject) (PostChatsResponseObject, error)
	// Delete a chat.
	// (DELETE /chats/{id})
	DeleteChatsId(ctx context.Context, request DeleteChatsIdRequestObject) (DeleteChatsIdResponseObject, error)
	// Get details of a specific chat.
	// (GET /chats/{id})
	GetChatsId(ctx context.Context, request GetChatsIdRequestObject) (GetChatsIdResponseObject, error)
	// Update a chat.
	// (PUT /chats/{id})
	PutChatsId(ctx context.Context, request PutChatsIdRequestObject) (PutChatsIdResponseObject, error)
	// Add a participant to a chat.
	// (POST /chats/{id}/participant_ids)
	PostChatsIdParticipantIds(ctx context.Context, request PostChatsIdParticipantIdsRequestObject) (PostChatsIdParticipantIdsResponseObject, error)
	// Remove a participant from a chat.
	// (DELETE /chats/{id}/participant_ids/{participant_id})
	DeleteChatsIdParticipantIdsParticipantId(ctx context.Context, request DeleteChatsIdParticipantIdsParticipantIdRequestObject) (DeleteChatsIdParticipantIdsParticipantIdResponseObject, error)
	// Get list of conference calls
	// (GET /conferencecalls)
	GetConferencecalls(ctx context.Context, request GetConferencecallsRequestObject) (GetConferencecallsResponseObject, error)
	// Remove a conference call
	// (DELETE /conferencecalls/{id})
	DeleteConferencecallsId(ctx context.Context, request DeleteConferencecallsIdRequestObject) (DeleteConferencecallsIdResponseObject, error)
	// Get conference call details
	// (GET /conferencecalls/{id})
	GetConferencecallsId(ctx context.Context, request GetConferencecallsIdRequestObject) (GetConferencecallsIdResponseObject, error)
	// Get list of conferences
	// (GET /conferences)
	GetConferences(ctx context.Context, request GetConferencesRequestObject) (GetConferencesResponseObject, error)
	// Create a new conference
	// (POST /conferences)
	PostConferences(ctx context.Context, request PostConferencesRequestObject) (PostConferencesResponseObject, error)
	// Delete a conference
	// (DELETE /conferences/{id})
	DeleteConferencesId(ctx context.Context, request DeleteConferencesIdRequestObject) (DeleteConferencesIdResponseObject, error)
	// Get conference details
	// (GET /conferences/{id})
	GetConferencesId(ctx context.Context, request GetConferencesIdRequestObject) (GetConferencesIdResponseObject, error)
	// Update conference details
	// (PUT /conferences/{id})
	PutConferencesId(ctx context.Context, request PutConferencesIdRequestObject) (PutConferencesIdResponseObject, error)
	// Start media streaming for a conference
	// (GET /conferences/{id}/media_stream)
	GetConferencesIdMediaStream(ctx context.Context, request GetConferencesIdMediaStreamRequestObject) (GetConferencesIdMediaStreamResponseObject, error)
	// Start conference recording
	// (POST /conferences/{id}/recording_start)
	PostConferencesIdRecordingStart(ctx context.Context, request PostConferencesIdRecordingStartRequestObject) (PostConferencesIdRecordingStartResponseObject, error)
	// Stop conference recording
	// (POST /conferences/{id}/recording_stop)
	PostConferencesIdRecordingStop(ctx context.Context, request PostConferencesIdRecordingStopRequestObject) (PostConferencesIdRecordingStopResponseObject, error)
	// Start conference transcription
	// (POST /conferences/{id}/transcribe_start)
	PostConferencesIdTranscribeStart(ctx context.Context, request PostConferencesIdTranscribeStartRequestObject) (PostConferencesIdTranscribeStartResponseObject, error)
	// Stop conference transcription
	// (POST /conferences/{id}/transcribe_stop)
	PostConferencesIdTranscribeStop(ctx context.Context, request PostConferencesIdTranscribeStopRequestObject) (PostConferencesIdTranscribeStopResponseObject, error)
	// Gets a list of conversation accounts
	// (GET /conversation_accounts)
	GetConversationAccounts(ctx context.Context, request GetConversationAccountsRequestObject) (GetConversationAccountsResponseObject, error)
	// Create a new conversation account
	// (POST /conversation_accounts)
	PostConversationAccounts(ctx context.Context, request PostConversationAccountsRequestObject) (PostConversationAccountsResponseObject, error)
	// Delete a conversation account
	// (DELETE /conversation_accounts/{id})
	DeleteConversationAccountsId(ctx context.Context, request DeleteConversationAccountsIdRequestObject) (DeleteConversationAccountsIdResponseObject, error)
	// Get details of a conversation account
	// (GET /conversation_accounts/{id})
	GetConversationAccountsId(ctx context.Context, request GetConversationAccountsIdRequestObject) (GetConversationAccountsIdResponseObject, error)
	// Update a conversation account
	// (PUT /conversation_accounts/{id})
	PutConversationAccountsId(ctx context.Context, request PutConversationAccountsIdRequestObject) (PutConversationAccountsIdResponseObject, error)
	// Gets a list of conversations
	// (GET /conversations)
	GetConversations(ctx context.Context, request GetConversationsRequestObject) (GetConversationsResponseObject, error)
	// Returns detailed conversation info
	// (GET /conversations/{id})
	GetConversationsId(ctx context.Context, request GetConversationsIdRequestObject) (GetConversationsIdResponseObject, error)
	// Update conversation info
	// (PUT /conversations/{id})
	PutConversationsId(ctx context.Context, request PutConversationsIdRequestObject) (PutConversationsIdResponseObject, error)
	// Gets a list of conversation messages
	// (GET /conversations/{id}/messages)
	GetConversationsIdMessages(ctx context.Context, request GetConversationsIdMessagesRequestObject) (GetConversationsIdMessagesResponseObject, error)
	// Send a message
	// (POST /conversations/{id}/messages)
	PostConversationsIdMessages(ctx context.Context, request PostConversationsIdMessagesRequestObject) (PostConversationsIdMessagesResponseObject, error)
	// Get customer info
	// (GET /customer)
	GetCustomer(ctx context.Context, request GetCustomerRequestObject) (GetCustomerResponseObject, error)
	// Update a customer
	// (PUT /customer)
	PutCustomer(ctx context.Context, request PutCustomerRequestObject) (PutCustomerResponseObject, error)
	// Update a customer's billing account ID
	// (PUT /customer/billing_account_id)
	PutCustomerBillingAccountId(ctx context.Context, request PutCustomerBillingAccountIdRequestObject) (PutCustomerBillingAccountIdResponseObject, error)
	// Gets a list of customers.
	// (GET /customers)
	GetCustomers(ctx context.Context, request GetCustomersRequestObject) (GetCustomersResponseObject, error)
	// Create a new customer.
	// (POST /customers)
	PostCustomers(ctx context.Context, request PostCustomersRequestObject) (PostCustomersResponseObject, error)
	// Delete a customer.
	// (DELETE /customers/{id})
	DeleteCustomersId(ctx context.Context, request DeleteCustomersIdRequestObject) (DeleteCustomersIdResponseObject, error)
	// Retrieve customer details.
	// (GET /customers/{id})
	GetCustomersId(ctx context.Context, request GetCustomersIdRequestObject) (GetCustomersIdResponseObject, error)
	// Update a customer.
	// (PUT /customers/{id})
	PutCustomersId(ctx context.Context, request PutCustomersIdRequestObject) (PutCustomersIdResponseObject, error)
	// Update a customer's billing account ID.
	// (PUT /customers/{id}/billing_account_id)
	PutCustomersIdBillingAccountId(ctx context.Context, request PutCustomersIdBillingAccountIdRequestObject) (PutCustomersIdBillingAccountIdResponseObject, error)
	// Get a list of extensions
	// (GET /extensions)
	GetExtensions(ctx context.Context, request GetExtensionsRequestObject) (GetExtensionsResponseObject, error)
	// Create a new extension
	// (POST /extensions)
	PostExtensions(ctx context.Context, request PostExtensionsRequestObject) (PostExtensionsResponseObject, error)
	// Delete an extension
	// (DELETE /extensions/{id})
	DeleteExtensionsId(ctx context.Context, request DeleteExtensionsIdRequestObject) (DeleteExtensionsIdResponseObject, error)
	// Get extension details
	// (GET /extensions/{id})
	GetExtensionsId(ctx context.Context, request GetExtensionsIdRequestObject) (GetExtensionsIdResponseObject, error)
	// Update an extension
	// (PUT /extensions/{id})
	PutExtensionsId(ctx context.Context, request PutExtensionsIdRequestObject) (PutExtensionsIdResponseObject, error)
	// Gets a list of files
	// (GET /files)
	GetFiles(ctx context.Context, request GetFilesRequestObject) (GetFilesResponseObject, error)
	// Upload file
	// (POST /files)
	PostFiles(ctx context.Context, request PostFilesRequestObject) (PostFilesResponseObject, error)
	// Delete a file
	// (DELETE /files/{id})
	DeleteFilesId(ctx context.Context, request DeleteFilesIdRequestObject) (DeleteFilesIdResponseObject, error)
	// Returns detail file info
	// (GET /files/{id})
	GetFilesId(ctx context.Context, request GetFilesIdRequestObject) (GetFilesIdResponseObject, error)
	// Retrieve a list of flows
	// (GET /flows)
	GetFlows(ctx context.Context, request GetFlowsRequestObject) (GetFlowsResponseObject, error)
	// Create a new flow
	// (POST /flows)
	PostFlows(ctx context.Context, request PostFlowsRequestObject) (PostFlowsResponseObject, error)
	// Delete a flow
	// (DELETE /flows/{id})
	DeleteFlowsId(ctx context.Context, request DeleteFlowsIdRequestObject) (DeleteFlowsIdResponseObject, error)
	// Retrieve flow details
	// (GET /flows/{id})
	GetFlowsId(ctx context.Context, request GetFlowsIdRequestObject) (GetFlowsIdResponseObject, error)
	// Update a flow
	// (PUT /flows/{id})
	PutFlowsId(ctx context.Context, request PutFlowsIdRequestObject) (PutFlowsIdResponseObject, error)
	// Get a list of groupcalls
	// (GET /groupcalls)
	GetGroupcalls(ctx context.Context, request GetGroupcallsRequestObject) (GetGroupcallsResponseObject, error)
	// Create a new groupcall
	// (POST /groupcalls)
	PostGroupcalls(ctx context.Context, request PostGroupcallsRequestObject) (PostGroupcallsResponseObject, error)
	// Delete a groupcall
	// (DELETE /groupcalls/{id})
	DeleteGroupcallsId(ctx context.Context, request DeleteGroupcallsIdRequestObject) (DeleteGroupcallsIdResponseObject, error)
	// Get detailed information of a groupcall
	// (GET /groupcalls/{id})
	GetGroupcallsId(ctx context.Context, request GetGroupcallsIdRequestObject) (GetGroupcallsIdResponseObject, error)
	// Hangup the groupcall
	// (POST /groupcalls/{id})
	PostGroupcallsId(ctx context.Context, request PostGroupcallsIdRequestObject) (PostGroupcallsIdResponseObject, error)
	// Get the logged-in agent
	// (GET /me)
	GetMe(ctx context.Context, request GetMeRequestObject) (GetMeResponseObject, error)
	// List all messages
	// (GET /messages)
	GetMessages(ctx context.Context, request GetMessagesRequestObject) (GetMessagesResponseObject, error)
	// Send a message and return the sent message
	// (POST /messages)
	PostMessages(ctx context.Context, request PostMessagesRequestObject) (PostMessagesResponseObject, error)
	// Delete a message by ID
	// (DELETE /messages/{id})
	DeleteMessagesId(ctx context.Context, request DeleteMessagesIdRequestObject) (DeleteMessagesIdResponseObject, error)
	// Get a message by ID
	// (GET /messages/{id})
	GetMessagesId(ctx context.Context, request GetMessagesIdRequestObject) (GetMessagesIdResponseObject, error)
	// List order numbers
	// (GET /numbers)
	GetNumbers(ctx context.Context, request GetNumbersRequestObject) (GetNumbersResponseObject, error)
	// Create a new number
	// (POST /numbers)
	PostNumbers(ctx context.Context, request PostNumbersRequestObject) (PostNumbersResponseObject, error)
	// Renew the numbers
	// (POST /numbers/renew)
	PostNumbersRenew(ctx context.Context, request PostNumbersRenewRequestObject) (PostNumbersRenewResponseObject, error)
	// Delete order number by ID
	// (DELETE /numbers/{id})
	DeleteNumbersId(ctx context.Context, request DeleteNumbersIdRequestObject) (DeleteNumbersIdResponseObject, error)
	// Get order number by ID
	// (GET /numbers/{id})
	GetNumbersId(ctx context.Context, request GetNumbersIdRequestObject) (GetNumbersIdResponseObject, error)
	// Update order number by ID
	// (PUT /numbers/{id})
	PutNumbersId(ctx context.Context, request PutNumbersIdRequestObject) (PutNumbersIdResponseObject, error)
	// Delete order number by ID
	// (DELETE /numbers/{id}/flow_id)
	DeleteNumbersIdFlowId(ctx context.Context, request DeleteNumbersIdFlowIdRequestObject) (DeleteNumbersIdFlowIdResponseObject, error)
	// Get order number by ID
	// (GET /numbers/{id}/flow_id)
	GetNumbersIdFlowId(ctx context.Context, request GetNumbersIdFlowIdRequestObject) (GetNumbersIdFlowIdResponseObject, error)
	// Update order number by ID
	// (PUT /numbers/{id}/flow_id)
	PutNumbersIdFlowId(ctx context.Context, request PutNumbersIdFlowIdRequestObject) (PutNumbersIdFlowIdResponseObject, error)
	// Retrieve a list of outdials.
	// (GET /outdials)
	GetOutdials(ctx context.Context, request GetOutdialsRequestObject) (GetOutdialsResponseObject, error)
	// Create a new outdial.
	// (POST /outdials)
	PostOutdials(ctx context.Context, request PostOutdialsRequestObject) (PostOutdialsResponseObject, error)
	// Delete an existing outdial.
	// (DELETE /outdials/{id})
	DeleteOutdialsId(ctx context.Context, request DeleteOutdialsIdRequestObject) (DeleteOutdialsIdResponseObject, error)
	// Retrieve an outdial by its ID.
	// (GET /outdials/{id})
	GetOutdialsId(ctx context.Context, request GetOutdialsIdRequestObject) (GetOutdialsIdResponseObject, error)
	// Update an outdial.
	// (PUT /outdials/{id})
	PutOutdialsId(ctx context.Context, request PutOutdialsIdRequestObject) (PutOutdialsIdResponseObject, error)
	// Update an outdial's campaign ID.
	// (PUT /outdials/{id}/campaign_id)
	PutOutdialsIdCampaignId(ctx context.Context, request PutOutdialsIdCampaignIdRequestObject) (PutOutdialsIdCampaignIdResponseObject, error)
	// Update an outdial's data.
	// (PUT /outdials/{id}/data)
	PutOutdialsIdData(ctx context.Context, request PutOutdialsIdDataRequestObject) (PutOutdialsIdDataResponseObject, error)
	// Create a new target for an outdial.
	// (POST /outdials/{id}/targets)
	PostOutdialsIdTargets(ctx context.Context, request PostOutdialsIdTargetsRequestObject) (PostOutdialsIdTargetsResponseObject, error)
	// Delete an outdial target.
	// (DELETE /outdials/{id}/targets/{target_id})
	DeleteOutdialsIdTargetsTargetId(ctx context.Context, request DeleteOutdialsIdTargetsTargetIdRequestObject) (DeleteOutdialsIdTargetsTargetIdResponseObject, error)
	// Retrieve an outdial target by its ID.
	// (GET /outdials/{id}/targets/{target_id})
	GetOutdialsIdTargetsTargetId(ctx context.Context, request GetOutdialsIdTargetsTargetIdRequestObject) (GetOutdialsIdTargetsTargetIdResponseObject, error)
	// Retrieve a list of outplans.
	// (GET /outplans)
	GetOutplans(ctx context.Context, request GetOutplansRequestObject) (GetOutplansResponseObject, error)
	// Create a new outplan.
	// (POST /outplans)
	PostOutplans(ctx context.Context, request PostOutplansRequestObject) (PostOutplansResponseObject, error)
	// Delete an existing outplan.
	// (DELETE /outplans/{id})
	DeleteOutplansId(ctx context.Context, request DeleteOutplansIdRequestObject) (DeleteOutplansIdResponseObject, error)
	// Retrieve outplan details by ID.
	// (GET /outplans/{id})
	GetOutplansId(ctx context.Context, request GetOutplansIdRequestObject) (GetOutplansIdResponseObject, error)
	// Update dial information of an existing outplan.
	// (PUT /outplans/{id})
	PutOutplansId(ctx context.Context, request PutOutplansIdRequestObject) (PutOutplansIdResponseObject, error)
	// List providers of the given customer
	// (GET /providers)
	GetProviders(ctx context.Context, request GetProvidersRequestObject) (GetProvidersResponseObject, error)
	// Create a new provider
	// (POST /providers)
	PostProviders(ctx context.Context, request PostProvidersRequestObject) (PostProvidersResponseObject, error)
	// Delete provider by ID
	// (DELETE /providers/{id})
	DeleteProvidersId(ctx context.Context, request DeleteProvidersIdRequestObject) (DeleteProvidersIdResponseObject, error)
	// Get provider by ID
	// (GET /providers/{id})
	GetProvidersId(ctx context.Context, request GetProvidersIdRequestObject) (GetProvidersIdResponseObject, error)
	// Update provider information
	// (PUT /providers/{id})
	PutProvidersId(ctx context.Context, request PutProvidersIdRequestObject) (PutProvidersIdResponseObject, error)
	// List queue calls
	// (GET /queuecalls)
	GetQueuecalls(ctx context.Context, request GetQueuecallsRequestObject) (GetQueuecallsResponseObject, error)
	// Kick a queue call by reference ID
	// (POST /queuecalls/reference_id/{id}/kick)
	PostQueuecallsReferenceIdIdKick(ctx context.Context, request PostQueuecallsReferenceIdIdKickRequestObject) (PostQueuecallsReferenceIdIdKickResponseObject, error)
	// Delete a queue call
	// (DELETE /queuecalls/{id})
	DeleteQueuecallsId(ctx context.Context, request DeleteQueuecallsIdRequestObject) (DeleteQueuecallsIdResponseObject, error)
	// Get detailed queue call information
	// (GET /queuecalls/{id})
	GetQueuecallsId(ctx context.Context, request GetQueuecallsIdRequestObject) (GetQueuecallsIdResponseObject, error)
	// Kick a queue call from the queue
	// (POST /queuecalls/{id}/kick)
	PostQueuecallsIdKick(ctx context.Context, request PostQueuecallsIdKickRequestObject) (PostQueuecallsIdKickResponseObject, error)
	// List queues of the customer
	// (GET /queues)
	GetQueues(ctx context.Context, request GetQueuesRequestObject) (GetQueuesResponseObject, error)
	// Create a new queue
	// (POST /queues)
	PostQueues(ctx context.Context, request PostQueuesRequestObject) (PostQueuesResponseObject, error)
	// Delete a queue by ID
	// (DELETE /queues/{id})
	DeleteQueuesId(ctx context.Context, request DeleteQueuesIdRequestObject) (DeleteQueuesIdResponseObject, error)
	// Get the queue by ID
	// (GET /queues/{id})
	GetQueuesId(ctx context.Context, request GetQueuesIdRequestObject) (GetQueuesIdResponseObject, error)
	// Update the queue details
	// (PUT /queues/{id})
	PutQueuesId(ctx context.Context, request PutQueuesIdRequestObject) (PutQueuesIdResponseObject, error)
	// Update the queue's action handle
	// (PUT /queues/{id}/actions)
	PutQueuesIdActions(ctx context.Context, request PutQueuesIdActionsRequestObject) (PutQueuesIdActionsResponseObject, error)
	// Update the queue's routing method
	// (PUT /queues/{id}/routing_method)
	PutQueuesIdRoutingMethod(ctx context.Context, request PutQueuesIdRoutingMethodRequestObject) (PutQueuesIdRoutingMethodResponseObject, error)
	// Update the queue's tag IDs
	// (PUT /queues/{id}/tag_ids)
	PutQueuesIdTagIds(ctx context.Context, request PutQueuesIdTagIdsRequestObject) (PutQueuesIdTagIdsResponseObject, error)
	// Download the recording file
	// (GET /recordingfiles/{id})
	GetRecordingfilesId(ctx context.Context, request GetRecordingfilesIdRequestObject) (GetRecordingfilesIdResponseObject, error)
	// List recordings
	// (GET /recordings)
	GetRecordings(ctx context.Context, request GetRecordingsRequestObject) (GetRecordingsResponseObject, error)
	// Delete recording
	// (DELETE /recordings/{id})
	DeleteRecordingsId(ctx context.Context, request DeleteRecordingsIdRequestObject) (DeleteRecordingsIdResponseObject, error)
	// Get recording details
	// (GET /recordings/{id})
	GetRecordingsId(ctx context.Context, request GetRecordingsIdRequestObject) (GetRecordingsIdResponseObject, error)
	// List routes
	// (GET /routes)
	GetRoutes(ctx context.Context, request GetRoutesRequestObject) (GetRoutesResponseObject, error)
	// Create a new route
	// (POST /routes)
	PostRoutes(ctx context.Context, request PostRoutesRequestObject) (PostRoutesResponseObject, error)
	// Delete the route
	// (DELETE /routes/{id})
	DeleteRoutesId(ctx context.Context, request DeleteRoutesIdRequestObject) (DeleteRoutesIdResponseObject, error)
	// Get a route
	// (GET /routes/{id})
	GetRoutesId(ctx context.Context, request GetRoutesIdRequestObject) (GetRoutesIdResponseObject, error)
	// Update a route
	// (PUT /routes/{id})
	PutRoutesId(ctx context.Context, request PutRoutesIdRequestObject) (PutRoutesIdResponseObject, error)
	// Retrieve a list of service agents
	// (GET /service_agents/agents)
	GetServiceAgentsAgents(ctx context.Context, request GetServiceAgentsAgentsRequestObject) (GetServiceAgentsAgentsResponseObject, error)
	// Retrieve detailed information of a service agent
	// (GET /service_agents/agents/{id})
	GetServiceAgentsAgentsId(ctx context.Context, request GetServiceAgentsAgentsIdRequestObject) (GetServiceAgentsAgentsIdResponseObject, error)
	// Retrieve a list of calls for the given customer
	// (GET /service_agents/calls)
	GetServiceAgentsCalls(ctx context.Context, request GetServiceAgentsCallsRequestObject) (GetServiceAgentsCallsResponseObject, error)
	// Retrieve detailed information of a specific call
	// (GET /service_agents/calls/{id})
	GetServiceAgentsCallsId(ctx context.Context, request GetServiceAgentsCallsIdRequestObject) (GetServiceAgentsCallsIdResponseObject, error)
	// Retrieve a list of chatroom messages
	// (GET /service_agents/chatroommessages)
	GetServiceAgentsChatroommessages(ctx context.Context, request GetServiceAgentsChatroommessagesRequestObject) (GetServiceAgentsChatroommessagesResponseObject, error)
	// Create a new chatroom message
	// (POST /service_agents/chatroommessages)
	PostServiceAgentsChatroommessages(ctx context.Context, request PostServiceAgentsChatroommessagesRequestObject) (PostServiceAgentsChatroommessagesResponseObject, error)
	// Delete a specific chatroom message
	// (DELETE /service_agents/chatroommessages/{id})
	DeleteServiceAgentsChatroommessagesId(ctx context.Context, request DeleteServiceAgentsChatroommessagesIdRequestObject) (DeleteServiceAgentsChatroommessagesIdResponseObject, error)
	// Retrieve detailed information of a specific chatroom message
	// (GET /service_agents/chatroommessages/{id})
	GetServiceAgentsChatroommessagesId(ctx context.Context, request GetServiceAgentsChatroommessagesIdRequestObject) (GetServiceAgentsChatroommessagesIdResponseObject, error)
	// Get list of chatrooms
	// (GET /service_agents/chatrooms)
	GetServiceAgentsChatrooms(ctx context.Context, request GetServiceAgentsChatroomsRequestObject) (GetServiceAgentsChatroomsResponseObject, error)
	// Create a new chatroom and return the created chatroom's details
	// (POST /service_agents/chatrooms)
	PostServiceAgentsChatrooms(ctx context.Context, request PostServiceAgentsChatroomsRequestObject) (PostServiceAgentsChatroomsResponseObject, error)
	// Delete a chatroom and return the deleted chatroom's details
	// (DELETE /service_agents/chatrooms/{id})
	DeleteServiceAgentsChatroomsId(ctx context.Context, request DeleteServiceAgentsChatroomsIdRequestObject) (DeleteServiceAgentsChatroomsIdResponseObject, error)
	// Get detailed information of a chatroom
	// (GET /service_agents/chatrooms/{id})
	GetServiceAgentsChatroomsId(ctx context.Context, request GetServiceAgentsChatroomsIdRequestObject) (GetServiceAgentsChatroomsIdResponseObject, error)
	// Update the chatroom and return the updated information
	// (PUT /service_agents/chatrooms/{id})
	PutServiceAgentsChatroomsId(ctx context.Context, request PutServiceAgentsChatroomsIdRequestObject) (PutServiceAgentsChatroomsIdResponseObject, error)
	// Get list of conversations
	// (GET /service_agents/conversations)
	GetServiceAgentsConversations(ctx context.Context, request GetServiceAgentsConversationsRequestObject) (GetServiceAgentsConversationsResponseObject, error)
	// Get detailed conversation info
	// (GET /service_agents/conversations/{id})
	GetServiceAgentsConversationsId(ctx context.Context, request GetServiceAgentsConversationsIdRequestObject) (GetServiceAgentsConversationsIdResponseObject, error)
	// Get list of conversation messages
	// (GET /service_agents/conversations/{id}/messages)
	GetServiceAgentsConversationsIdMessages(ctx context.Context, request GetServiceAgentsConversationsIdMessagesRequestObject) (GetServiceAgentsConversationsIdMessagesResponseObject, error)
	// Send a message to the conversation
	// (POST /service_agents/conversations/{id}/messages)
	PostServiceAgentsConversationsIdMessages(ctx context.Context, request PostServiceAgentsConversationsIdMessagesRequestObject) (PostServiceAgentsConversationsIdMessagesResponseObject, error)
	// Get customer details
	// (GET /service_agents/customer)
	GetServiceAgentsCustomer(ctx context.Context, request GetServiceAgentsCustomerRequestObject) (GetServiceAgentsCustomerResponseObject, error)
	// Get list of extensions
	// (GET /service_agents/extensions)
	GetServiceAgentsExtensions(ctx context.Context, request GetServiceAgentsExtensionsRequestObject) (GetServiceAgentsExtensionsResponseObject, error)
	// Get extension details
	// (GET /service_agents/extensions/{id})
	GetServiceAgentsExtensionsId(ctx context.Context, request GetServiceAgentsExtensionsIdRequestObject) (GetServiceAgentsExtensionsIdResponseObject, error)
	// Get list of files
	// (GET /service_agents/files)
	GetServiceAgentsFiles(ctx context.Context, request GetServiceAgentsFilesRequestObject) (GetServiceAgentsFilesResponseObject, error)
	// Upload a file
	// (POST /service_agents/files)
	PostServiceAgentsFiles(ctx context.Context, request PostServiceAgentsFilesRequestObject) (PostServiceAgentsFilesResponseObject, error)
	// Delete a file
	// (DELETE /service_agents/files/{id})
	DeleteServiceAgentsFilesId(ctx context.Context, request DeleteServiceAgentsFilesIdRequestObject) (DeleteServiceAgentsFilesIdResponseObject, error)
	// Get file details
	// (GET /service_agents/files/{id})
	GetServiceAgentsFilesId(ctx context.Context, request GetServiceAgentsFilesIdRequestObject) (GetServiceAgentsFilesIdResponseObject, error)
	// Get authenticated agent's details
	// (GET /service_agents/me)
	GetServiceAgentsMe(ctx context.Context, request GetServiceAgentsMeRequestObject) (GetServiceAgentsMeResponseObject, error)
	// Update authenticated agent's information
	// (PUT /service_agents/me)
	PutServiceAgentsMe(ctx context.Context, request PutServiceAgentsMeRequestObject) (PutServiceAgentsMeResponseObject, error)
	// Update authenticated agent's addresses
	// (PUT /service_agents/me/addresses)
	PutServiceAgentsMeAddresses(ctx context.Context, request PutServiceAgentsMeAddressesRequestObject) (PutServiceAgentsMeAddressesResponseObject, error)
	// Update authenticated agent's password
	// (PUT /service_agents/me/password)
	PutServiceAgentsMePassword(ctx context.Context, request PutServiceAgentsMePasswordRequestObject) (PutServiceAgentsMePasswordResponseObject, error)
	// Update authenticated agent's status
	// (PUT /service_agents/me/status)
	PutServiceAgentsMeStatus(ctx context.Context, request PutServiceAgentsMeStatusRequestObject) (PutServiceAgentsMeStatusResponseObject, error)
	// Establish a WebSocket connection
	// (GET /service_agents/ws)
	GetServiceAgentsWs(ctx context.Context, request GetServiceAgentsWsRequestObject) (GetServiceAgentsWsResponseObject, error)
	// Get a list of storage accounts
	// (GET /storage_accounts)
	GetStorageAccounts(ctx context.Context, request GetStorageAccountsRequestObject) (GetStorageAccountsResponseObject, error)
	// Create a new storage account
	// (POST /storage_accounts)
	PostStorageAccounts(ctx context.Context, request PostStorageAccountsRequestObject) (PostStorageAccountsResponseObject, error)
	// Delete a specific storage account
	// (DELETE /storage_accounts/{id})
	DeleteStorageAccountsId(ctx context.Context, request DeleteStorageAccountsIdRequestObject) (DeleteStorageAccountsIdResponseObject, error)
	// Get details of a specific storage account
	// (GET /storage_accounts/{id})
	GetStorageAccountsId(ctx context.Context, request GetStorageAccountsIdRequestObject) (GetStorageAccountsIdResponseObject, error)
	// Get a list of files
	// (GET /storage_files)
	GetStorageFiles(ctx context.Context, request GetStorageFilesRequestObject) (GetStorageFilesResponseObject, error)
	// Upload a file and create a call with it
	// (POST /storage_files)
	PostStorageFiles(ctx context.Context, request PostStorageFilesRequestObject) (PostStorageFilesResponseObject, error)
	// Delete a file
	// (DELETE /storage_files/{id})
	DeleteStorageFilesId(ctx context.Context, request DeleteStorageFilesIdRequestObject) (DeleteStorageFilesIdResponseObject, error)
	// Get file details by ID
	// (GET /storage_files/{id})
	GetStorageFilesId(ctx context.Context, request GetStorageFilesIdRequestObject) (GetStorageFilesIdResponseObject, error)
	// List tags
	// (GET /tags)
	GetTags(ctx context.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// Create a new tag.
	// (POST /tags)
	PostTags(ctx context.Context, request PostTagsRequestObject) (PostTagsResponseObject, error)
	// Delete the tag
	// (DELETE /tags/{id})
	DeleteTagsId(ctx context.Context, request DeleteTagsIdRequestObject) (DeleteTagsIdResponseObject, error)
	// Get the tag
	// (GET /tags/{id})
	GetTagsId(ctx context.Context, request GetTagsIdRequestObject) (GetTagsIdResponseObject, error)
	// Update the tag info
	// (PUT /tags/{id})
	PutTagsId(ctx context.Context, request PutTagsIdRequestObject) (PutTagsIdResponseObject, error)
	// Get list of transcribes
	// (GET /transcribes)
	GetTranscribes(ctx context.Context, request GetTranscribesRequestObject) (GetTranscribesResponseObject, error)
	// Create a transcribe
	// (POST /transcribes)
	PostTranscribes(ctx context.Context, request PostTranscribesRequestObject) (PostTranscribesResponseObject, error)
	// Delete a transcribe
	// (DELETE /transcribes/{id})
	DeleteTranscribesId(ctx context.Context, request DeleteTranscribesIdRequestObject) (DeleteTranscribesIdResponseObject, error)
	// Get detailed transcribe info
	// (GET /transcribes/{id})
	GetTranscribesId(ctx context.Context, request GetTranscribesIdRequestObject) (GetTranscribesIdResponseObject, error)
	// Stop an ongoing transcription
	// (POST /transcribes/{id}/stop)
	PostTranscribesIdStop(ctx context.Context, request PostTranscribesIdStopRequestObject) (PostTranscribesIdStopResponseObject, error)
	// Retrieve a list of transcripts
	// (GET /transcripts)
	GetTranscripts(ctx context.Context, request GetTranscriptsRequestObject) (GetTranscriptsResponseObject, error)
	// Start a transfer
	// (POST /transfers)
	PostTransfers(ctx context.Context, request PostTransfersRequestObject) (PostTransfersResponseObject, error)
	// Retrieve a list of trunks.
	// (GET /trunks)
	GetTrunks(ctx context.Context, request GetTrunksRequestObject) (GetTrunksResponseObject, error)
	// Create a new trunk.
	// (POST /trunks)
	PostTrunks(ctx context.Context, request PostTrunksRequestObject) (PostTrunksResponseObject, error)
	// Delete a trunk.
	// (DELETE /trunks/{id})
	DeleteTrunksId(ctx context.Context, request DeleteTrunksIdRequestObject) (DeleteTrunksIdResponseObject, error)
	// Retrieve trunk details.
	// (GET /trunks/{id})
	GetTrunksId(ctx context.Context, request GetTrunksIdRequestObject) (GetTrunksIdResponseObject, error)
	// Update a trunk.
	// (PUT /trunks/{id})
	PutTrunksId(ctx context.Context, request PutTrunksIdRequestObject) (PutTrunksIdResponseObject, error)
	// Create a new websocket connection.
	// (GET /ws)
	GetWs(ctx context.Context, request GetWsRequestObject) (GetWsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAccesskeys operation middleware
func (sh *strictHandler) GetAccesskeys(ctx *gin.Context, params GetAccesskeysParams) {
	var request GetAccesskeysRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeys(ctx, request.(GetAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAccesskeys operation middleware
func (sh *strictHandler) PostAccesskeys(ctx *gin.Context) {
	var request PostAccesskeysRequestObject

	var body PostAccesskeysJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccesskeys(ctx, request.(PostAccesskeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccesskeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAccesskeysResponseObject); ok {
		if err := validResponse.VisitPostAccesskeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccesskeysId operation middleware
func (sh *strictHandler) DeleteAccesskeysId(ctx *gin.Context, id string) {
	var request DeleteAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccesskeysId(ctx, request.(DeleteAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitDeleteAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccesskeysId operation middleware
func (sh *strictHandler) GetAccesskeysId(ctx *gin.Context, id string) {
	var request GetAccesskeysIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccesskeysId(ctx, request.(GetAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitGetAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAccesskeysId operation middleware
func (sh *strictHandler) PutAccesskeysId(ctx *gin.Context, id string) {
	var request PutAccesskeysIdRequestObject

	request.Id = id

	var body PutAccesskeysIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAccesskeysId(ctx, request.(PutAccesskeysIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAccesskeysId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAccesskeysIdResponseObject); ok {
		if err := validResponse.VisitPutAccesskeysIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflows operation middleware
func (sh *strictHandler) GetActiveflows(ctx *gin.Context, params GetActiveflowsParams) {
	var request GetActiveflowsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflows(ctx, request.(GetActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflows operation middleware
func (sh *strictHandler) PostActiveflows(ctx *gin.Context) {
	var request PostActiveflowsRequestObject

	var body PostActiveflowsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflows(ctx, request.(PostActiveflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteActiveflowsId operation middleware
func (sh *strictHandler) DeleteActiveflowsId(ctx *gin.Context, id string) {
	var request DeleteActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActiveflowsId(ctx, request.(DeleteActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitDeleteActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActiveflowsId operation middleware
func (sh *strictHandler) GetActiveflowsId(ctx *gin.Context, id string) {
	var request GetActiveflowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActiveflowsId(ctx, request.(GetActiveflowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetActiveflowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActiveflowsIdResponseObject); ok {
		if err := validResponse.VisitGetActiveflowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostActiveflowsIdStop operation middleware
func (sh *strictHandler) PostActiveflowsIdStop(ctx *gin.Context, id string) {
	var request PostActiveflowsIdStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActiveflowsIdStop(ctx, request.(PostActiveflowsIdStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActiveflowsIdStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostActiveflowsIdStopResponseObject); ok {
		if err := validResponse.VisitPostActiveflowsIdStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgents operation middleware
func (sh *strictHandler) GetAgents(ctx *gin.Context, params GetAgentsParams) {
	var request GetAgentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgents(ctx, request.(GetAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAgentsResponseObject); ok {
		if err := validResponse.VisitGetAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAgents operation middleware
func (sh *strictHandler) PostAgents(ctx *gin.Context) {
	var request PostAgentsRequestObject

	var body PostAgentsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAgents(ctx, request.(PostAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAgentsResponseObject); ok {
		if err := validResponse.VisitPostAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAgentsId operation middleware
func (sh *strictHandler) DeleteAgentsId(ctx *gin.Context, id string) {
	var request DeleteAgentsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAgentsId(ctx, request.(DeleteAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAgentsIdResponseObject); ok {
		if err := validResponse.VisitDeleteAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgentsId operation middleware
func (sh *strictHandler) GetAgentsId(ctx *gin.Context, id string) {
	var request GetAgentsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgentsId(ctx, request.(GetAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAgentsIdResponseObject); ok {
		if err := validResponse.VisitGetAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsId operation middleware
func (sh *strictHandler) PutAgentsId(ctx *gin.Context, id string) {
	var request PutAgentsIdRequestObject

	request.Id = id

	var body PutAgentsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsId(ctx, request.(PutAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdAddresses operation middleware
func (sh *strictHandler) PutAgentsIdAddresses(ctx *gin.Context, id string) {
	var request PutAgentsIdAddressesRequestObject

	request.Id = id

	var body PutAgentsIdAddressesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdAddresses(ctx, request.(PutAgentsIdAddressesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdAddresses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdAddressesResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdAddressesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdPassword operation middleware
func (sh *strictHandler) PutAgentsIdPassword(ctx *gin.Context, id string) {
	var request PutAgentsIdPasswordRequestObject

	request.Id = id

	var body PutAgentsIdPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdPassword(ctx, request.(PutAgentsIdPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdPasswordResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdPermission operation middleware
func (sh *strictHandler) PutAgentsIdPermission(ctx *gin.Context, id string) {
	var request PutAgentsIdPermissionRequestObject

	request.Id = id

	var body PutAgentsIdPermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdPermission(ctx, request.(PutAgentsIdPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdPermissionResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAgentsIdTagIds operation middleware
func (sh *strictHandler) PutAgentsIdTagIds(ctx *gin.Context, id string) {
	var request PutAgentsIdTagIdsRequestObject

	request.Id = id

	var body PutAgentsIdTagIdsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAgentsIdTagIds(ctx, request.(PutAgentsIdTagIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAgentsIdTagIds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAgentsIdTagIdsResponseObject); ok {
		if err := validResponse.VisitPutAgentsIdTagIdsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAvailableNumbers operation middleware
func (sh *strictHandler) GetAvailableNumbers(ctx *gin.Context, params GetAvailableNumbersParams) {
	var request GetAvailableNumbersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAvailableNumbers(ctx, request.(GetAvailableNumbersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAvailableNumbers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAvailableNumbersResponseObject); ok {
		if err := validResponse.VisitGetAvailableNumbersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBillingAccounts operation middleware
func (sh *strictHandler) GetBillingAccounts(ctx *gin.Context, params GetBillingAccountsParams) {
	var request GetBillingAccountsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBillingAccounts(ctx, request.(GetBillingAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBillingAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBillingAccountsResponseObject); ok {
		if err := validResponse.VisitGetBillingAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccounts operation middleware
func (sh *strictHandler) PostBillingAccounts(ctx *gin.Context) {
	var request PostBillingAccountsRequestObject

	var body PostBillingAccountsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccounts(ctx, request.(PostBillingAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteBillingAccountsId operation middleware
func (sh *strictHandler) DeleteBillingAccountsId(ctx *gin.Context, id openapi_types.UUID) {
	var request DeleteBillingAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBillingAccountsId(ctx, request.(DeleteBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitDeleteBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBillingAccountsId operation middleware
func (sh *strictHandler) GetBillingAccountsId(ctx *gin.Context, id openapi_types.UUID) {
	var request GetBillingAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBillingAccountsId(ctx, request.(GetBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitGetBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutBillingAccountsId operation middleware
func (sh *strictHandler) PutBillingAccountsId(ctx *gin.Context, id openapi_types.UUID) {
	var request PutBillingAccountsIdRequestObject

	request.Id = id

	var body PutBillingAccountsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBillingAccountsId(ctx, request.(PutBillingAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBillingAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutBillingAccountsIdResponseObject); ok {
		if err := validResponse.VisitPutBillingAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccountsIdBalanceAddForce operation middleware
func (sh *strictHandler) PostBillingAccountsIdBalanceAddForce(ctx *gin.Context, id openapi_types.UUID) {
	var request PostBillingAccountsIdBalanceAddForceRequestObject

	request.Id = id

	var body PostBillingAccountsIdBalanceAddForceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccountsIdBalanceAddForce(ctx, request.(PostBillingAccountsIdBalanceAddForceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccountsIdBalanceAddForce")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsIdBalanceAddForceResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsIdBalanceAddForceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBillingAccountsIdBalanceSubtractForce operation middleware
func (sh *strictHandler) PostBillingAccountsIdBalanceSubtractForce(ctx *gin.Context, id openapi_types.UUID) {
	var request PostBillingAccountsIdBalanceSubtractForceRequestObject

	request.Id = id

	var body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBillingAccountsIdBalanceSubtractForce(ctx, request.(PostBillingAccountsIdBalanceSubtractForceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBillingAccountsIdBalanceSubtractForce")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostBillingAccountsIdBalanceSubtractForceResponseObject); ok {
		if err := validResponse.VisitPostBillingAccountsIdBalanceSubtractForceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutBillingAccountsIdPaymentInfo operation middleware
func (sh *strictHandler) PutBillingAccountsIdPaymentInfo(ctx *gin.Context, id openapi_types.UUID) {
	var request PutBillingAccountsIdPaymentInfoRequestObject

	request.Id = id

	var body PutBillingAccountsIdPaymentInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBillingAccountsIdPaymentInfo(ctx, request.(PutBillingAccountsIdPaymentInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBillingAccountsIdPaymentInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutBillingAccountsIdPaymentInfoResponseObject); ok {
		if err := validResponse.VisitPutBillingAccountsIdPaymentInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCalls operation middleware
func (sh *strictHandler) GetCalls(ctx *gin.Context, params GetCallsParams) {
	var request GetCallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCalls(ctx, request.(GetCallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsResponseObject); ok {
		if err := validResponse.VisitGetCallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCalls operation middleware
func (sh *strictHandler) PostCalls(ctx *gin.Context) {
	var request PostCallsRequestObject

	var body PostCallsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCalls(ctx, request.(PostCallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsResponseObject); ok {
		if err := validResponse.VisitPostCallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsId operation middleware
func (sh *strictHandler) DeleteCallsId(ctx *gin.Context, id string) {
	var request DeleteCallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsId(ctx, request.(DeleteCallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCallsId operation middleware
func (sh *strictHandler) GetCallsId(ctx *gin.Context, id string) {
	var request GetCallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallsId(ctx, request.(GetCallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsIdResponseObject); ok {
		if err := validResponse.VisitGetCallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdHangup operation middleware
func (sh *strictHandler) PostCallsIdHangup(ctx *gin.Context, id string) {
	var request PostCallsIdHangupRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdHangup(ctx, request.(PostCallsIdHangupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdHangup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdHangupResponseObject); ok {
		if err := validResponse.VisitPostCallsIdHangupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdHold operation middleware
func (sh *strictHandler) DeleteCallsIdHold(ctx *gin.Context, id string) {
	var request DeleteCallsIdHoldRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdHold(ctx, request.(DeleteCallsIdHoldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdHold")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdHoldResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdHoldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdHold operation middleware
func (sh *strictHandler) PostCallsIdHold(ctx *gin.Context, id string) {
	var request PostCallsIdHoldRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdHold(ctx, request.(PostCallsIdHoldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdHold")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdHoldResponseObject); ok {
		if err := validResponse.VisitPostCallsIdHoldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCallsIdMediaStream operation middleware
func (sh *strictHandler) GetCallsIdMediaStream(ctx *gin.Context, id string) {
	var request GetCallsIdMediaStreamRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallsIdMediaStream(ctx, request.(GetCallsIdMediaStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallsIdMediaStream")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCallsIdMediaStreamResponseObject); ok {
		if err := validResponse.VisitGetCallsIdMediaStreamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdMoh operation middleware
func (sh *strictHandler) DeleteCallsIdMoh(ctx *gin.Context, id string) {
	var request DeleteCallsIdMohRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdMoh(ctx, request.(DeleteCallsIdMohRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdMoh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdMohResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdMohResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdMoh operation middleware
func (sh *strictHandler) PostCallsIdMoh(ctx *gin.Context, id string) {
	var request PostCallsIdMohRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdMoh(ctx, request.(PostCallsIdMohRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdMoh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdMohResponseObject); ok {
		if err := validResponse.VisitPostCallsIdMohResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdMute operation middleware
func (sh *strictHandler) DeleteCallsIdMute(ctx *gin.Context, id string) {
	var request DeleteCallsIdMuteRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdMute(ctx, request.(DeleteCallsIdMuteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdMute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdMuteResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdMuteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdMute operation middleware
func (sh *strictHandler) PostCallsIdMute(ctx *gin.Context, id string) {
	var request PostCallsIdMuteRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdMute(ctx, request.(PostCallsIdMuteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdMute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdMuteResponseObject); ok {
		if err := validResponse.VisitPostCallsIdMuteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCallsIdSilence operation middleware
func (sh *strictHandler) DeleteCallsIdSilence(ctx *gin.Context, id string) {
	var request DeleteCallsIdSilenceRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCallsIdSilence(ctx, request.(DeleteCallsIdSilenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCallsIdSilence")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCallsIdSilenceResponseObject); ok {
		if err := validResponse.VisitDeleteCallsIdSilenceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdSilence operation middleware
func (sh *strictHandler) PostCallsIdSilence(ctx *gin.Context, id string) {
	var request PostCallsIdSilenceRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdSilence(ctx, request.(PostCallsIdSilenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdSilence")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdSilenceResponseObject); ok {
		if err := validResponse.VisitPostCallsIdSilenceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCallsIdTalk operation middleware
func (sh *strictHandler) PostCallsIdTalk(ctx *gin.Context, id string) {
	var request PostCallsIdTalkRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallsIdTalk(ctx, request.(PostCallsIdTalkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallsIdTalk")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCallsIdTalkResponseObject); ok {
		if err := validResponse.VisitPostCallsIdTalkResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigncalls operation middleware
func (sh *strictHandler) GetCampaigncalls(ctx *gin.Context, params GetCampaigncallsParams) {
	var request GetCampaigncallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigncalls(ctx, request.(GetCampaigncallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigncalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaigncallsResponseObject); ok {
		if err := validResponse.VisitGetCampaigncallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCampaigncallsId operation middleware
func (sh *strictHandler) DeleteCampaigncallsId(ctx *gin.Context, id string) {
	var request DeleteCampaigncallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCampaigncallsId(ctx, request.(DeleteCampaigncallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCampaigncallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCampaigncallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCampaigncallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigncallsId operation middleware
func (sh *strictHandler) GetCampaigncallsId(ctx *gin.Context, id string) {
	var request GetCampaigncallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigncallsId(ctx, request.(GetCampaigncallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigncallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaigncallsIdResponseObject); ok {
		if err := validResponse.VisitGetCampaigncallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaigns operation middleware
func (sh *strictHandler) GetCampaigns(ctx *gin.Context, params GetCampaignsParams) {
	var request GetCampaignsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaigns(ctx, request.(GetCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaignsResponseObject); ok {
		if err := validResponse.VisitGetCampaignsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCampaigns operation middleware
func (sh *strictHandler) PostCampaigns(ctx *gin.Context) {
	var request PostCampaignsRequestObject

	var body PostCampaignsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCampaigns(ctx, request.(PostCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCampaignsResponseObject); ok {
		if err := validResponse.VisitPostCampaignsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCampaignsId operation middleware
func (sh *strictHandler) DeleteCampaignsId(ctx *gin.Context, id string) {
	var request DeleteCampaignsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCampaignsId(ctx, request.(DeleteCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCampaignsIdResponseObject); ok {
		if err := validResponse.VisitDeleteCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCampaignsId operation middleware
func (sh *strictHandler) GetCampaignsId(ctx *gin.Context, id string) {
	var request GetCampaignsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaignsId(ctx, request.(GetCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCampaignsIdResponseObject); ok {
		if err := validResponse.VisitGetCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsId operation middleware
func (sh *strictHandler) PutCampaignsId(ctx *gin.Context, id string) {
	var request PutCampaignsIdRequestObject

	request.Id = id

	var body PutCampaignsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsId(ctx, request.(PutCampaignsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCampaignsIdStatus operation middleware
func (sh *strictHandler) PutCampaignsIdStatus(ctx *gin.Context, id string) {
	var request PutCampaignsIdStatusRequestObject

	request.Id = id

	var body PutCampaignsIdStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCampaignsIdStatus(ctx, request.(PutCampaignsIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCampaignsIdStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCampaignsIdStatusResponseObject); ok {
		if err := validResponse.VisitPutCampaignsIdStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotcalls operation middleware
func (sh *strictHandler) GetChatbotcalls(ctx *gin.Context, params GetChatbotcallsParams) {
	var request GetChatbotcallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotcalls(ctx, request.(GetChatbotcallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotcalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotcallsResponseObject); ok {
		if err := validResponse.VisitGetChatbotcallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatbotcallsId operation middleware
func (sh *strictHandler) DeleteChatbotcallsId(ctx *gin.Context, id string) {
	var request DeleteChatbotcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatbotcallsId(ctx, request.(DeleteChatbotcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatbotcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatbotcallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatbotcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotcallsId operation middleware
func (sh *strictHandler) GetChatbotcallsId(ctx *gin.Context, id string) {
	var request GetChatbotcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotcallsId(ctx, request.(GetChatbotcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotcallsIdResponseObject); ok {
		if err := validResponse.VisitGetChatbotcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbots operation middleware
func (sh *strictHandler) GetChatbots(ctx *gin.Context, params GetChatbotsParams) {
	var request GetChatbotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbots(ctx, request.(GetChatbotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotsResponseObject); ok {
		if err := validResponse.VisitGetChatbotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatbots operation middleware
func (sh *strictHandler) PostChatbots(ctx *gin.Context) {
	var request PostChatbotsRequestObject

	var body PostChatbotsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatbots(ctx, request.(PostChatbotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatbots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatbotsResponseObject); ok {
		if err := validResponse.VisitPostChatbotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatbotsId operation middleware
func (sh *strictHandler) DeleteChatbotsId(ctx *gin.Context, id string) {
	var request DeleteChatbotsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatbotsId(ctx, request.(DeleteChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatbotsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatbotsId operation middleware
func (sh *strictHandler) GetChatbotsId(ctx *gin.Context, id string) {
	var request GetChatbotsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatbotsId(ctx, request.(GetChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatbotsIdResponseObject); ok {
		if err := validResponse.VisitGetChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatbotsId operation middleware
func (sh *strictHandler) PutChatbotsId(ctx *gin.Context, id string) {
	var request PutChatbotsIdRequestObject

	request.Id = id

	var body PutChatbotsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatbotsId(ctx, request.(PutChatbotsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatbotsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatbotsIdResponseObject); ok {
		if err := validResponse.VisitPutChatbotsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatmessages operation middleware
func (sh *strictHandler) GetChatmessages(ctx *gin.Context, params GetChatmessagesParams) {
	var request GetChatmessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatmessages(ctx, request.(GetChatmessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatmessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatmessagesResponseObject); ok {
		if err := validResponse.VisitGetChatmessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatmessages operation middleware
func (sh *strictHandler) PostChatmessages(ctx *gin.Context) {
	var request PostChatmessagesRequestObject

	var body PostChatmessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatmessages(ctx, request.(PostChatmessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatmessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatmessagesResponseObject); ok {
		if err := validResponse.VisitPostChatmessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatmessagesId operation middleware
func (sh *strictHandler) DeleteChatmessagesId(ctx *gin.Context, id string) {
	var request DeleteChatmessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatmessagesId(ctx, request.(DeleteChatmessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatmessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatmessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatmessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatmessagesId operation middleware
func (sh *strictHandler) GetChatmessagesId(ctx *gin.Context, id string) {
	var request GetChatmessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatmessagesId(ctx, request.(GetChatmessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatmessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatmessagesIdResponseObject); ok {
		if err := validResponse.VisitGetChatmessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroommessages operation middleware
func (sh *strictHandler) GetChatroommessages(ctx *gin.Context, params GetChatroommessagesParams) {
	var request GetChatroommessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroommessages(ctx, request.(GetChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroommessagesResponseObject); ok {
		if err := validResponse.VisitGetChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatroommessages operation middleware
func (sh *strictHandler) PostChatroommessages(ctx *gin.Context) {
	var request PostChatroommessagesRequestObject

	var body PostChatroommessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatroommessages(ctx, request.(PostChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatroommessagesResponseObject); ok {
		if err := validResponse.VisitPostChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatroommessagesId operation middleware
func (sh *strictHandler) DeleteChatroommessagesId(ctx *gin.Context, id string) {
	var request DeleteChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatroommessagesId(ctx, request.(DeleteChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroommessagesId operation middleware
func (sh *strictHandler) GetChatroommessagesId(ctx *gin.Context, id string) {
	var request GetChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroommessagesId(ctx, request.(GetChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitGetChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatrooms operation middleware
func (sh *strictHandler) GetChatrooms(ctx *gin.Context, params GetChatroomsParams) {
	var request GetChatroomsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatrooms(ctx, request.(GetChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroomsResponseObject); ok {
		if err := validResponse.VisitGetChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatrooms operation middleware
func (sh *strictHandler) PostChatrooms(ctx *gin.Context) {
	var request PostChatroomsRequestObject

	var body PostChatroomsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatrooms(ctx, request.(PostChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatroomsResponseObject); ok {
		if err := validResponse.VisitPostChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatroomsId operation middleware
func (sh *strictHandler) DeleteChatroomsId(ctx *gin.Context, id string) {
	var request DeleteChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatroomsId(ctx, request.(DeleteChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatroomsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatroomsId operation middleware
func (sh *strictHandler) GetChatroomsId(ctx *gin.Context, id string) {
	var request GetChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatroomsId(ctx, request.(GetChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatroomsIdResponseObject); ok {
		if err := validResponse.VisitGetChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatroomsId operation middleware
func (sh *strictHandler) PutChatroomsId(ctx *gin.Context, id string) {
	var request PutChatroomsIdRequestObject

	request.Id = id

	var body PutChatroomsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatroomsId(ctx, request.(PutChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatroomsIdResponseObject); ok {
		if err := validResponse.VisitPutChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChats operation middleware
func (sh *strictHandler) GetChats(ctx *gin.Context, params GetChatsParams) {
	var request GetChatsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChats(ctx, request.(GetChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatsResponseObject); ok {
		if err := validResponse.VisitGetChatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChats operation middleware
func (sh *strictHandler) PostChats(ctx *gin.Context) {
	var request PostChatsRequestObject

	var body PostChatsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChats(ctx, request.(PostChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatsResponseObject); ok {
		if err := validResponse.VisitPostChatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatsId operation middleware
func (sh *strictHandler) DeleteChatsId(ctx *gin.Context, id string) {
	var request DeleteChatsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatsId(ctx, request.(DeleteChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatsIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatsId operation middleware
func (sh *strictHandler) GetChatsId(ctx *gin.Context, id string) {
	var request GetChatsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatsId(ctx, request.(GetChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetChatsIdResponseObject); ok {
		if err := validResponse.VisitGetChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutChatsId operation middleware
func (sh *strictHandler) PutChatsId(ctx *gin.Context, id string) {
	var request PutChatsIdRequestObject

	request.Id = id

	var body PutChatsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutChatsId(ctx, request.(PutChatsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutChatsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutChatsIdResponseObject); ok {
		if err := validResponse.VisitPutChatsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostChatsIdParticipantIds operation middleware
func (sh *strictHandler) PostChatsIdParticipantIds(ctx *gin.Context, id string) {
	var request PostChatsIdParticipantIdsRequestObject

	request.Id = id

	var body PostChatsIdParticipantIdsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostChatsIdParticipantIds(ctx, request.(PostChatsIdParticipantIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostChatsIdParticipantIds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostChatsIdParticipantIdsResponseObject); ok {
		if err := validResponse.VisitPostChatsIdParticipantIdsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChatsIdParticipantIdsParticipantId operation middleware
func (sh *strictHandler) DeleteChatsIdParticipantIdsParticipantId(ctx *gin.Context, id string, participantId string) {
	var request DeleteChatsIdParticipantIdsParticipantIdRequestObject

	request.Id = id
	request.ParticipantId = participantId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChatsIdParticipantIdsParticipantId(ctx, request.(DeleteChatsIdParticipantIdsParticipantIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChatsIdParticipantIdsParticipantId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteChatsIdParticipantIdsParticipantIdResponseObject); ok {
		if err := validResponse.VisitDeleteChatsIdParticipantIdsParticipantIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencecalls operation middleware
func (sh *strictHandler) GetConferencecalls(ctx *gin.Context, params GetConferencecallsParams) {
	var request GetConferencecallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencecalls(ctx, request.(GetConferencecallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencecalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencecallsResponseObject); ok {
		if err := validResponse.VisitGetConferencecallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConferencecallsId operation middleware
func (sh *strictHandler) DeleteConferencecallsId(ctx *gin.Context, id string) {
	var request DeleteConferencecallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConferencecallsId(ctx, request.(DeleteConferencecallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConferencecallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteConferencecallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteConferencecallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencecallsId operation middleware
func (sh *strictHandler) GetConferencecallsId(ctx *gin.Context, id string) {
	var request GetConferencecallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencecallsId(ctx, request.(GetConferencecallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencecallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencecallsIdResponseObject); ok {
		if err := validResponse.VisitGetConferencecallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferences operation middleware
func (sh *strictHandler) GetConferences(ctx *gin.Context, params GetConferencesParams) {
	var request GetConferencesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferences(ctx, request.(GetConferencesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferences")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencesResponseObject); ok {
		if err := validResponse.VisitGetConferencesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferences operation middleware
func (sh *strictHandler) PostConferences(ctx *gin.Context) {
	var request PostConferencesRequestObject

	var body PostConferencesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferences(ctx, request.(PostConferencesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferences")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesResponseObject); ok {
		if err := validResponse.VisitPostConferencesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConferencesId operation middleware
func (sh *strictHandler) DeleteConferencesId(ctx *gin.Context, id string) {
	var request DeleteConferencesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConferencesId(ctx, request.(DeleteConferencesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConferencesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteConferencesIdResponseObject); ok {
		if err := validResponse.VisitDeleteConferencesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencesId operation middleware
func (sh *strictHandler) GetConferencesId(ctx *gin.Context, id string) {
	var request GetConferencesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencesId(ctx, request.(GetConferencesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencesIdResponseObject); ok {
		if err := validResponse.VisitGetConferencesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutConferencesId operation middleware
func (sh *strictHandler) PutConferencesId(ctx *gin.Context, id string) {
	var request PutConferencesIdRequestObject

	request.Id = id

	var body PutConferencesIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutConferencesId(ctx, request.(PutConferencesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutConferencesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutConferencesIdResponseObject); ok {
		if err := validResponse.VisitPutConferencesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConferencesIdMediaStream operation middleware
func (sh *strictHandler) GetConferencesIdMediaStream(ctx *gin.Context, id string) {
	var request GetConferencesIdMediaStreamRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConferencesIdMediaStream(ctx, request.(GetConferencesIdMediaStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConferencesIdMediaStream")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConferencesIdMediaStreamResponseObject); ok {
		if err := validResponse.VisitGetConferencesIdMediaStreamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdRecordingStart operation middleware
func (sh *strictHandler) PostConferencesIdRecordingStart(ctx *gin.Context, id string) {
	var request PostConferencesIdRecordingStartRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdRecordingStart(ctx, request.(PostConferencesIdRecordingStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdRecordingStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdRecordingStartResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdRecordingStartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdRecordingStop operation middleware
func (sh *strictHandler) PostConferencesIdRecordingStop(ctx *gin.Context, id string) {
	var request PostConferencesIdRecordingStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdRecordingStop(ctx, request.(PostConferencesIdRecordingStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdRecordingStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdRecordingStopResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdRecordingStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdTranscribeStart operation middleware
func (sh *strictHandler) PostConferencesIdTranscribeStart(ctx *gin.Context, id string) {
	var request PostConferencesIdTranscribeStartRequestObject

	request.Id = id

	var body PostConferencesIdTranscribeStartJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdTranscribeStart(ctx, request.(PostConferencesIdTranscribeStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdTranscribeStart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdTranscribeStartResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdTranscribeStartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConferencesIdTranscribeStop operation middleware
func (sh *strictHandler) PostConferencesIdTranscribeStop(ctx *gin.Context, id string) {
	var request PostConferencesIdTranscribeStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConferencesIdTranscribeStop(ctx, request.(PostConferencesIdTranscribeStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConferencesIdTranscribeStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConferencesIdTranscribeStopResponseObject); ok {
		if err := validResponse.VisitPostConferencesIdTranscribeStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConversationAccounts operation middleware
func (sh *strictHandler) GetConversationAccounts(ctx *gin.Context, params GetConversationAccountsParams) {
	var request GetConversationAccountsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConversationAccounts(ctx, request.(GetConversationAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConversationAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConversationAccountsResponseObject); ok {
		if err := validResponse.VisitGetConversationAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConversationAccounts operation middleware
func (sh *strictHandler) PostConversationAccounts(ctx *gin.Context) {
	var request PostConversationAccountsRequestObject

	var body PostConversationAccountsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConversationAccounts(ctx, request.(PostConversationAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConversationAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConversationAccountsResponseObject); ok {
		if err := validResponse.VisitPostConversationAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConversationAccountsId operation middleware
func (sh *strictHandler) DeleteConversationAccountsId(ctx *gin.Context, id string) {
	var request DeleteConversationAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConversationAccountsId(ctx, request.(DeleteConversationAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConversationAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteConversationAccountsIdResponseObject); ok {
		if err := validResponse.VisitDeleteConversationAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConversationAccountsId operation middleware
func (sh *strictHandler) GetConversationAccountsId(ctx *gin.Context, id string) {
	var request GetConversationAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConversationAccountsId(ctx, request.(GetConversationAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConversationAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConversationAccountsIdResponseObject); ok {
		if err := validResponse.VisitGetConversationAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutConversationAccountsId operation middleware
func (sh *strictHandler) PutConversationAccountsId(ctx *gin.Context, id string) {
	var request PutConversationAccountsIdRequestObject

	request.Id = id

	var body PutConversationAccountsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutConversationAccountsId(ctx, request.(PutConversationAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutConversationAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutConversationAccountsIdResponseObject); ok {
		if err := validResponse.VisitPutConversationAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConversations operation middleware
func (sh *strictHandler) GetConversations(ctx *gin.Context, params GetConversationsParams) {
	var request GetConversationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConversations(ctx, request.(GetConversationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConversations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConversationsResponseObject); ok {
		if err := validResponse.VisitGetConversationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConversationsId operation middleware
func (sh *strictHandler) GetConversationsId(ctx *gin.Context, id string) {
	var request GetConversationsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConversationsId(ctx, request.(GetConversationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConversationsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConversationsIdResponseObject); ok {
		if err := validResponse.VisitGetConversationsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutConversationsId operation middleware
func (sh *strictHandler) PutConversationsId(ctx *gin.Context, id string) {
	var request PutConversationsIdRequestObject

	request.Id = id

	var body PutConversationsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutConversationsId(ctx, request.(PutConversationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutConversationsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutConversationsIdResponseObject); ok {
		if err := validResponse.VisitPutConversationsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConversationsIdMessages operation middleware
func (sh *strictHandler) GetConversationsIdMessages(ctx *gin.Context, id string, params GetConversationsIdMessagesParams) {
	var request GetConversationsIdMessagesRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConversationsIdMessages(ctx, request.(GetConversationsIdMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConversationsIdMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetConversationsIdMessagesResponseObject); ok {
		if err := validResponse.VisitGetConversationsIdMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostConversationsIdMessages operation middleware
func (sh *strictHandler) PostConversationsIdMessages(ctx *gin.Context, id string) {
	var request PostConversationsIdMessagesRequestObject

	request.Id = id

	var body PostConversationsIdMessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostConversationsIdMessages(ctx, request.(PostConversationsIdMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostConversationsIdMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostConversationsIdMessagesResponseObject); ok {
		if err := validResponse.VisitPostConversationsIdMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCustomer operation middleware
func (sh *strictHandler) GetCustomer(ctx *gin.Context) {
	var request GetCustomerRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCustomer(ctx, request.(GetCustomerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCustomer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCustomerResponseObject); ok {
		if err := validResponse.VisitGetCustomerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCustomer operation middleware
func (sh *strictHandler) PutCustomer(ctx *gin.Context) {
	var request PutCustomerRequestObject

	var body PutCustomerJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCustomer(ctx, request.(PutCustomerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCustomer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCustomerResponseObject); ok {
		if err := validResponse.VisitPutCustomerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCustomerBillingAccountId operation middleware
func (sh *strictHandler) PutCustomerBillingAccountId(ctx *gin.Context) {
	var request PutCustomerBillingAccountIdRequestObject

	var body PutCustomerBillingAccountIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCustomerBillingAccountId(ctx, request.(PutCustomerBillingAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCustomerBillingAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCustomerBillingAccountIdResponseObject); ok {
		if err := validResponse.VisitPutCustomerBillingAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCustomers operation middleware
func (sh *strictHandler) GetCustomers(ctx *gin.Context, params GetCustomersParams) {
	var request GetCustomersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCustomers(ctx, request.(GetCustomersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCustomers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCustomersResponseObject); ok {
		if err := validResponse.VisitGetCustomersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCustomers operation middleware
func (sh *strictHandler) PostCustomers(ctx *gin.Context) {
	var request PostCustomersRequestObject

	var body PostCustomersJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCustomers(ctx, request.(PostCustomersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCustomers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCustomersResponseObject); ok {
		if err := validResponse.VisitPostCustomersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCustomersId operation middleware
func (sh *strictHandler) DeleteCustomersId(ctx *gin.Context, id string) {
	var request DeleteCustomersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCustomersId(ctx, request.(DeleteCustomersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCustomersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCustomersIdResponseObject); ok {
		if err := validResponse.VisitDeleteCustomersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCustomersId operation middleware
func (sh *strictHandler) GetCustomersId(ctx *gin.Context, id string) {
	var request GetCustomersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCustomersId(ctx, request.(GetCustomersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCustomersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCustomersIdResponseObject); ok {
		if err := validResponse.VisitGetCustomersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCustomersId operation middleware
func (sh *strictHandler) PutCustomersId(ctx *gin.Context, id string) {
	var request PutCustomersIdRequestObject

	request.Id = id

	var body PutCustomersIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCustomersId(ctx, request.(PutCustomersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCustomersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCustomersIdResponseObject); ok {
		if err := validResponse.VisitPutCustomersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutCustomersIdBillingAccountId operation middleware
func (sh *strictHandler) PutCustomersIdBillingAccountId(ctx *gin.Context, id string) {
	var request PutCustomersIdBillingAccountIdRequestObject

	request.Id = id

	var body PutCustomersIdBillingAccountIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCustomersIdBillingAccountId(ctx, request.(PutCustomersIdBillingAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCustomersIdBillingAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutCustomersIdBillingAccountIdResponseObject); ok {
		if err := validResponse.VisitPutCustomersIdBillingAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExtensions operation middleware
func (sh *strictHandler) GetExtensions(ctx *gin.Context, params GetExtensionsParams) {
	var request GetExtensionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExtensions(ctx, request.(GetExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExtensions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetExtensionsResponseObject); ok {
		if err := validResponse.VisitGetExtensionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostExtensions operation middleware
func (sh *strictHandler) PostExtensions(ctx *gin.Context) {
	var request PostExtensionsRequestObject

	var body PostExtensionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostExtensions(ctx, request.(PostExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExtensions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostExtensionsResponseObject); ok {
		if err := validResponse.VisitPostExtensionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteExtensionsId operation middleware
func (sh *strictHandler) DeleteExtensionsId(ctx *gin.Context, id string) {
	var request DeleteExtensionsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteExtensionsId(ctx, request.(DeleteExtensionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteExtensionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteExtensionsIdResponseObject); ok {
		if err := validResponse.VisitDeleteExtensionsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExtensionsId operation middleware
func (sh *strictHandler) GetExtensionsId(ctx *gin.Context, id string) {
	var request GetExtensionsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExtensionsId(ctx, request.(GetExtensionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExtensionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetExtensionsIdResponseObject); ok {
		if err := validResponse.VisitGetExtensionsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutExtensionsId operation middleware
func (sh *strictHandler) PutExtensionsId(ctx *gin.Context, id string) {
	var request PutExtensionsIdRequestObject

	request.Id = id

	var body PutExtensionsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutExtensionsId(ctx, request.(PutExtensionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutExtensionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutExtensionsIdResponseObject); ok {
		if err := validResponse.VisitPutExtensionsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFiles operation middleware
func (sh *strictHandler) GetFiles(ctx *gin.Context, params GetFilesParams) {
	var request GetFilesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFiles(ctx, request.(GetFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFilesResponseObject); ok {
		if err := validResponse.VisitGetFilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostFiles operation middleware
func (sh *strictHandler) PostFiles(ctx *gin.Context) {
	var request PostFilesRequestObject

	if reader, err := ctx.Request.MultipartReader(); err == nil {
		request.Body = reader
	} else {
		ctx.Error(err)
		return
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFiles(ctx, request.(PostFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostFilesResponseObject); ok {
		if err := validResponse.VisitPostFilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFilesId operation middleware
func (sh *strictHandler) DeleteFilesId(ctx *gin.Context, id string) {
	var request DeleteFilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFilesId(ctx, request.(DeleteFilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteFilesIdResponseObject); ok {
		if err := validResponse.VisitDeleteFilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFilesId operation middleware
func (sh *strictHandler) GetFilesId(ctx *gin.Context, id string) {
	var request GetFilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFilesId(ctx, request.(GetFilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFilesIdResponseObject); ok {
		if err := validResponse.VisitGetFilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlows operation middleware
func (sh *strictHandler) GetFlows(ctx *gin.Context, params GetFlowsParams) {
	var request GetFlowsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlows(ctx, request.(GetFlowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFlowsResponseObject); ok {
		if err := validResponse.VisitGetFlowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostFlows operation middleware
func (sh *strictHandler) PostFlows(ctx *gin.Context) {
	var request PostFlowsRequestObject

	var body PostFlowsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFlows(ctx, request.(PostFlowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFlows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostFlowsResponseObject); ok {
		if err := validResponse.VisitPostFlowsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlowsId operation middleware
func (sh *strictHandler) DeleteFlowsId(ctx *gin.Context, id string) {
	var request DeleteFlowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlowsId(ctx, request.(DeleteFlowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteFlowsIdResponseObject); ok {
		if err := validResponse.VisitDeleteFlowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlowsId operation middleware
func (sh *strictHandler) GetFlowsId(ctx *gin.Context, id string) {
	var request GetFlowsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlowsId(ctx, request.(GetFlowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFlowsIdResponseObject); ok {
		if err := validResponse.VisitGetFlowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutFlowsId operation middleware
func (sh *strictHandler) PutFlowsId(ctx *gin.Context, id string) {
	var request PutFlowsIdRequestObject

	request.Id = id

	var body PutFlowsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutFlowsId(ctx, request.(PutFlowsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutFlowsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutFlowsIdResponseObject); ok {
		if err := validResponse.VisitPutFlowsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupcalls operation middleware
func (sh *strictHandler) GetGroupcalls(ctx *gin.Context, params GetGroupcallsParams) {
	var request GetGroupcallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupcalls(ctx, request.(GetGroupcallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupcalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupcallsResponseObject); ok {
		if err := validResponse.VisitGetGroupcallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostGroupcalls operation middleware
func (sh *strictHandler) PostGroupcalls(ctx *gin.Context) {
	var request PostGroupcallsRequestObject

	var body PostGroupcallsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostGroupcalls(ctx, request.(PostGroupcallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGroupcalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostGroupcallsResponseObject); ok {
		if err := validResponse.VisitPostGroupcallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroupcallsId operation middleware
func (sh *strictHandler) DeleteGroupcallsId(ctx *gin.Context, id string) {
	var request DeleteGroupcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroupcallsId(ctx, request.(DeleteGroupcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroupcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteGroupcallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteGroupcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupcallsId operation middleware
func (sh *strictHandler) GetGroupcallsId(ctx *gin.Context, id string) {
	var request GetGroupcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupcallsId(ctx, request.(GetGroupcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupcallsIdResponseObject); ok {
		if err := validResponse.VisitGetGroupcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostGroupcallsId operation middleware
func (sh *strictHandler) PostGroupcallsId(ctx *gin.Context, id string) {
	var request PostGroupcallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostGroupcallsId(ctx, request.(PostGroupcallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGroupcallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostGroupcallsIdResponseObject); ok {
		if err := validResponse.VisitPostGroupcallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(ctx *gin.Context) {
	var request GetMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx, request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		if err := validResponse.VisitGetMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessages operation middleware
func (sh *strictHandler) GetMessages(ctx *gin.Context, params GetMessagesParams) {
	var request GetMessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessages(ctx, request.(GetMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMessagesResponseObject); ok {
		if err := validResponse.VisitGetMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostMessages operation middleware
func (sh *strictHandler) PostMessages(ctx *gin.Context) {
	var request PostMessagesRequestObject

	var body PostMessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMessages(ctx, request.(PostMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostMessagesResponseObject); ok {
		if err := validResponse.VisitPostMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMessagesId operation middleware
func (sh *strictHandler) DeleteMessagesId(ctx *gin.Context, id string) {
	var request DeleteMessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMessagesId(ctx, request.(DeleteMessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteMessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteMessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessagesId operation middleware
func (sh *strictHandler) GetMessagesId(ctx *gin.Context, id string) {
	var request GetMessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessagesId(ctx, request.(GetMessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMessagesIdResponseObject); ok {
		if err := validResponse.VisitGetMessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNumbers operation middleware
func (sh *strictHandler) GetNumbers(ctx *gin.Context, params GetNumbersParams) {
	var request GetNumbersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNumbers(ctx, request.(GetNumbersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNumbers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNumbersResponseObject); ok {
		if err := validResponse.VisitGetNumbersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostNumbers operation middleware
func (sh *strictHandler) PostNumbers(ctx *gin.Context) {
	var request PostNumbersRequestObject

	var body PostNumbersJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostNumbers(ctx, request.(PostNumbersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostNumbers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostNumbersResponseObject); ok {
		if err := validResponse.VisitPostNumbersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostNumbersRenew operation middleware
func (sh *strictHandler) PostNumbersRenew(ctx *gin.Context) {
	var request PostNumbersRenewRequestObject

	var body PostNumbersRenewJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostNumbersRenew(ctx, request.(PostNumbersRenewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostNumbersRenew")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostNumbersRenewResponseObject); ok {
		if err := validResponse.VisitPostNumbersRenewResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteNumbersId operation middleware
func (sh *strictHandler) DeleteNumbersId(ctx *gin.Context, id string) {
	var request DeleteNumbersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNumbersId(ctx, request.(DeleteNumbersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNumbersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteNumbersIdResponseObject); ok {
		if err := validResponse.VisitDeleteNumbersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNumbersId operation middleware
func (sh *strictHandler) GetNumbersId(ctx *gin.Context, id string) {
	var request GetNumbersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNumbersId(ctx, request.(GetNumbersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNumbersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNumbersIdResponseObject); ok {
		if err := validResponse.VisitGetNumbersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutNumbersId operation middleware
func (sh *strictHandler) PutNumbersId(ctx *gin.Context, id string) {
	var request PutNumbersIdRequestObject

	request.Id = id

	var body PutNumbersIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutNumbersId(ctx, request.(PutNumbersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutNumbersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutNumbersIdResponseObject); ok {
		if err := validResponse.VisitPutNumbersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteNumbersIdFlowId operation middleware
func (sh *strictHandler) DeleteNumbersIdFlowId(ctx *gin.Context, id string) {
	var request DeleteNumbersIdFlowIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNumbersIdFlowId(ctx, request.(DeleteNumbersIdFlowIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNumbersIdFlowId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteNumbersIdFlowIdResponseObject); ok {
		if err := validResponse.VisitDeleteNumbersIdFlowIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNumbersIdFlowId operation middleware
func (sh *strictHandler) GetNumbersIdFlowId(ctx *gin.Context, id string) {
	var request GetNumbersIdFlowIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNumbersIdFlowId(ctx, request.(GetNumbersIdFlowIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNumbersIdFlowId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNumbersIdFlowIdResponseObject); ok {
		if err := validResponse.VisitGetNumbersIdFlowIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutNumbersIdFlowId operation middleware
func (sh *strictHandler) PutNumbersIdFlowId(ctx *gin.Context, id string) {
	var request PutNumbersIdFlowIdRequestObject

	request.Id = id

	var body PutNumbersIdFlowIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutNumbersIdFlowId(ctx, request.(PutNumbersIdFlowIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutNumbersIdFlowId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutNumbersIdFlowIdResponseObject); ok {
		if err := validResponse.VisitPutNumbersIdFlowIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOutdials operation middleware
func (sh *strictHandler) GetOutdials(ctx *gin.Context, params GetOutdialsParams) {
	var request GetOutdialsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOutdials(ctx, request.(GetOutdialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOutdials")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOutdialsResponseObject); ok {
		if err := validResponse.VisitGetOutdialsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOutdials operation middleware
func (sh *strictHandler) PostOutdials(ctx *gin.Context) {
	var request PostOutdialsRequestObject

	var body PostOutdialsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostOutdials(ctx, request.(PostOutdialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOutdials")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostOutdialsResponseObject); ok {
		if err := validResponse.VisitPostOutdialsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOutdialsId operation middleware
func (sh *strictHandler) DeleteOutdialsId(ctx *gin.Context, id string) {
	var request DeleteOutdialsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOutdialsId(ctx, request.(DeleteOutdialsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOutdialsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteOutdialsIdResponseObject); ok {
		if err := validResponse.VisitDeleteOutdialsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOutdialsId operation middleware
func (sh *strictHandler) GetOutdialsId(ctx *gin.Context, id string, params GetOutdialsIdParams) {
	var request GetOutdialsIdRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOutdialsId(ctx, request.(GetOutdialsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOutdialsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOutdialsIdResponseObject); ok {
		if err := validResponse.VisitGetOutdialsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutOutdialsId operation middleware
func (sh *strictHandler) PutOutdialsId(ctx *gin.Context, id string) {
	var request PutOutdialsIdRequestObject

	request.Id = id

	var body PutOutdialsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutOutdialsId(ctx, request.(PutOutdialsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutOutdialsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutOutdialsIdResponseObject); ok {
		if err := validResponse.VisitPutOutdialsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutOutdialsIdCampaignId operation middleware
func (sh *strictHandler) PutOutdialsIdCampaignId(ctx *gin.Context, id string) {
	var request PutOutdialsIdCampaignIdRequestObject

	request.Id = id

	var body PutOutdialsIdCampaignIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutOutdialsIdCampaignId(ctx, request.(PutOutdialsIdCampaignIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutOutdialsIdCampaignId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutOutdialsIdCampaignIdResponseObject); ok {
		if err := validResponse.VisitPutOutdialsIdCampaignIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutOutdialsIdData operation middleware
func (sh *strictHandler) PutOutdialsIdData(ctx *gin.Context, id string) {
	var request PutOutdialsIdDataRequestObject

	request.Id = id

	var body PutOutdialsIdDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutOutdialsIdData(ctx, request.(PutOutdialsIdDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutOutdialsIdData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutOutdialsIdDataResponseObject); ok {
		if err := validResponse.VisitPutOutdialsIdDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOutdialsIdTargets operation middleware
func (sh *strictHandler) PostOutdialsIdTargets(ctx *gin.Context, id string) {
	var request PostOutdialsIdTargetsRequestObject

	request.Id = id

	var body PostOutdialsIdTargetsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostOutdialsIdTargets(ctx, request.(PostOutdialsIdTargetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOutdialsIdTargets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostOutdialsIdTargetsResponseObject); ok {
		if err := validResponse.VisitPostOutdialsIdTargetsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOutdialsIdTargetsTargetId operation middleware
func (sh *strictHandler) DeleteOutdialsIdTargetsTargetId(ctx *gin.Context, id string, targetId string) {
	var request DeleteOutdialsIdTargetsTargetIdRequestObject

	request.Id = id
	request.TargetId = targetId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOutdialsIdTargetsTargetId(ctx, request.(DeleteOutdialsIdTargetsTargetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOutdialsIdTargetsTargetId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteOutdialsIdTargetsTargetIdResponseObject); ok {
		if err := validResponse.VisitDeleteOutdialsIdTargetsTargetIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOutdialsIdTargetsTargetId operation middleware
func (sh *strictHandler) GetOutdialsIdTargetsTargetId(ctx *gin.Context, id string, targetId string) {
	var request GetOutdialsIdTargetsTargetIdRequestObject

	request.Id = id
	request.TargetId = targetId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOutdialsIdTargetsTargetId(ctx, request.(GetOutdialsIdTargetsTargetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOutdialsIdTargetsTargetId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOutdialsIdTargetsTargetIdResponseObject); ok {
		if err := validResponse.VisitGetOutdialsIdTargetsTargetIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOutplans operation middleware
func (sh *strictHandler) GetOutplans(ctx *gin.Context, params GetOutplansParams) {
	var request GetOutplansRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOutplans(ctx, request.(GetOutplansRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOutplans")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOutplansResponseObject); ok {
		if err := validResponse.VisitGetOutplansResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOutplans operation middleware
func (sh *strictHandler) PostOutplans(ctx *gin.Context) {
	var request PostOutplansRequestObject

	var body PostOutplansJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostOutplans(ctx, request.(PostOutplansRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOutplans")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostOutplansResponseObject); ok {
		if err := validResponse.VisitPostOutplansResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOutplansId operation middleware
func (sh *strictHandler) DeleteOutplansId(ctx *gin.Context, id string) {
	var request DeleteOutplansIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOutplansId(ctx, request.(DeleteOutplansIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOutplansId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteOutplansIdResponseObject); ok {
		if err := validResponse.VisitDeleteOutplansIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOutplansId operation middleware
func (sh *strictHandler) GetOutplansId(ctx *gin.Context, id string) {
	var request GetOutplansIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOutplansId(ctx, request.(GetOutplansIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOutplansId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOutplansIdResponseObject); ok {
		if err := validResponse.VisitGetOutplansIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutOutplansId operation middleware
func (sh *strictHandler) PutOutplansId(ctx *gin.Context, id string) {
	var request PutOutplansIdRequestObject

	request.Id = id

	var body PutOutplansIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutOutplansId(ctx, request.(PutOutplansIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutOutplansId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutOutplansIdResponseObject); ok {
		if err := validResponse.VisitPutOutplansIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProviders operation middleware
func (sh *strictHandler) GetProviders(ctx *gin.Context, params GetProvidersParams) {
	var request GetProvidersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProviders(ctx, request.(GetProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProviders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProvidersResponseObject); ok {
		if err := validResponse.VisitGetProvidersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProviders operation middleware
func (sh *strictHandler) PostProviders(ctx *gin.Context) {
	var request PostProvidersRequestObject

	var body PostProvidersJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProviders(ctx, request.(PostProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProviders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostProvidersResponseObject); ok {
		if err := validResponse.VisitPostProvidersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProvidersId operation middleware
func (sh *strictHandler) DeleteProvidersId(ctx *gin.Context, id string) {
	var request DeleteProvidersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProvidersId(ctx, request.(DeleteProvidersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProvidersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProvidersIdResponseObject); ok {
		if err := validResponse.VisitDeleteProvidersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvidersId operation middleware
func (sh *strictHandler) GetProvidersId(ctx *gin.Context, id string) {
	var request GetProvidersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvidersId(ctx, request.(GetProvidersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvidersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProvidersIdResponseObject); ok {
		if err := validResponse.VisitGetProvidersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutProvidersId operation middleware
func (sh *strictHandler) PutProvidersId(ctx *gin.Context, id string) {
	var request PutProvidersIdRequestObject

	request.Id = id

	var body PutProvidersIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutProvidersId(ctx, request.(PutProvidersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutProvidersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutProvidersIdResponseObject); ok {
		if err := validResponse.VisitPutProvidersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQueuecalls operation middleware
func (sh *strictHandler) GetQueuecalls(ctx *gin.Context, params GetQueuecallsParams) {
	var request GetQueuecallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetQueuecalls(ctx, request.(GetQueuecallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQueuecalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetQueuecallsResponseObject); ok {
		if err := validResponse.VisitGetQueuecallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostQueuecallsReferenceIdIdKick operation middleware
func (sh *strictHandler) PostQueuecallsReferenceIdIdKick(ctx *gin.Context, id string) {
	var request PostQueuecallsReferenceIdIdKickRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostQueuecallsReferenceIdIdKick(ctx, request.(PostQueuecallsReferenceIdIdKickRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostQueuecallsReferenceIdIdKick")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostQueuecallsReferenceIdIdKickResponseObject); ok {
		if err := validResponse.VisitPostQueuecallsReferenceIdIdKickResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteQueuecallsId operation middleware
func (sh *strictHandler) DeleteQueuecallsId(ctx *gin.Context, id string) {
	var request DeleteQueuecallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteQueuecallsId(ctx, request.(DeleteQueuecallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteQueuecallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteQueuecallsIdResponseObject); ok {
		if err := validResponse.VisitDeleteQueuecallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQueuecallsId operation middleware
func (sh *strictHandler) GetQueuecallsId(ctx *gin.Context, id string) {
	var request GetQueuecallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetQueuecallsId(ctx, request.(GetQueuecallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQueuecallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetQueuecallsIdResponseObject); ok {
		if err := validResponse.VisitGetQueuecallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostQueuecallsIdKick operation middleware
func (sh *strictHandler) PostQueuecallsIdKick(ctx *gin.Context, id string) {
	var request PostQueuecallsIdKickRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostQueuecallsIdKick(ctx, request.(PostQueuecallsIdKickRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostQueuecallsIdKick")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostQueuecallsIdKickResponseObject); ok {
		if err := validResponse.VisitPostQueuecallsIdKickResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQueues operation middleware
func (sh *strictHandler) GetQueues(ctx *gin.Context, params GetQueuesParams) {
	var request GetQueuesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetQueues(ctx, request.(GetQueuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQueues")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetQueuesResponseObject); ok {
		if err := validResponse.VisitGetQueuesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostQueues operation middleware
func (sh *strictHandler) PostQueues(ctx *gin.Context) {
	var request PostQueuesRequestObject

	var body PostQueuesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostQueues(ctx, request.(PostQueuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostQueues")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostQueuesResponseObject); ok {
		if err := validResponse.VisitPostQueuesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteQueuesId operation middleware
func (sh *strictHandler) DeleteQueuesId(ctx *gin.Context, id string) {
	var request DeleteQueuesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteQueuesId(ctx, request.(DeleteQueuesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteQueuesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteQueuesIdResponseObject); ok {
		if err := validResponse.VisitDeleteQueuesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQueuesId operation middleware
func (sh *strictHandler) GetQueuesId(ctx *gin.Context, id string) {
	var request GetQueuesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetQueuesId(ctx, request.(GetQueuesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQueuesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetQueuesIdResponseObject); ok {
		if err := validResponse.VisitGetQueuesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutQueuesId operation middleware
func (sh *strictHandler) PutQueuesId(ctx *gin.Context, id string) {
	var request PutQueuesIdRequestObject

	request.Id = id

	var body PutQueuesIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutQueuesId(ctx, request.(PutQueuesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutQueuesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutQueuesIdResponseObject); ok {
		if err := validResponse.VisitPutQueuesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutQueuesIdActions operation middleware
func (sh *strictHandler) PutQueuesIdActions(ctx *gin.Context, id string) {
	var request PutQueuesIdActionsRequestObject

	request.Id = id

	var body PutQueuesIdActionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutQueuesIdActions(ctx, request.(PutQueuesIdActionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutQueuesIdActions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutQueuesIdActionsResponseObject); ok {
		if err := validResponse.VisitPutQueuesIdActionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutQueuesIdRoutingMethod operation middleware
func (sh *strictHandler) PutQueuesIdRoutingMethod(ctx *gin.Context, id string) {
	var request PutQueuesIdRoutingMethodRequestObject

	request.Id = id

	var body PutQueuesIdRoutingMethodJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutQueuesIdRoutingMethod(ctx, request.(PutQueuesIdRoutingMethodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutQueuesIdRoutingMethod")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutQueuesIdRoutingMethodResponseObject); ok {
		if err := validResponse.VisitPutQueuesIdRoutingMethodResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutQueuesIdTagIds operation middleware
func (sh *strictHandler) PutQueuesIdTagIds(ctx *gin.Context, id string) {
	var request PutQueuesIdTagIdsRequestObject

	request.Id = id

	var body PutQueuesIdTagIdsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutQueuesIdTagIds(ctx, request.(PutQueuesIdTagIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutQueuesIdTagIds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutQueuesIdTagIdsResponseObject); ok {
		if err := validResponse.VisitPutQueuesIdTagIdsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecordingfilesId operation middleware
func (sh *strictHandler) GetRecordingfilesId(ctx *gin.Context, id string) {
	var request GetRecordingfilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecordingfilesId(ctx, request.(GetRecordingfilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecordingfilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordingfilesIdResponseObject); ok {
		if err := validResponse.VisitGetRecordingfilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecordings operation middleware
func (sh *strictHandler) GetRecordings(ctx *gin.Context, params GetRecordingsParams) {
	var request GetRecordingsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecordings(ctx, request.(GetRecordingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecordings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordingsResponseObject); ok {
		if err := validResponse.VisitGetRecordingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRecordingsId operation middleware
func (sh *strictHandler) DeleteRecordingsId(ctx *gin.Context, id string) {
	var request DeleteRecordingsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRecordingsId(ctx, request.(DeleteRecordingsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRecordingsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRecordingsIdResponseObject); ok {
		if err := validResponse.VisitDeleteRecordingsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecordingsId operation middleware
func (sh *strictHandler) GetRecordingsId(ctx *gin.Context, id string) {
	var request GetRecordingsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecordingsId(ctx, request.(GetRecordingsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecordingsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecordingsIdResponseObject); ok {
		if err := validResponse.VisitGetRecordingsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoutes operation middleware
func (sh *strictHandler) GetRoutes(ctx *gin.Context, params GetRoutesParams) {
	var request GetRoutesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoutes(ctx, request.(GetRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoutes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRoutesResponseObject); ok {
		if err := validResponse.VisitGetRoutesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRoutes operation middleware
func (sh *strictHandler) PostRoutes(ctx *gin.Context) {
	var request PostRoutesRequestObject

	var body PostRoutesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRoutes(ctx, request.(PostRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRoutes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRoutesResponseObject); ok {
		if err := validResponse.VisitPostRoutesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRoutesId operation middleware
func (sh *strictHandler) DeleteRoutesId(ctx *gin.Context, id string) {
	var request DeleteRoutesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRoutesId(ctx, request.(DeleteRoutesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRoutesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRoutesIdResponseObject); ok {
		if err := validResponse.VisitDeleteRoutesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoutesId operation middleware
func (sh *strictHandler) GetRoutesId(ctx *gin.Context, id string) {
	var request GetRoutesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoutesId(ctx, request.(GetRoutesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoutesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRoutesIdResponseObject); ok {
		if err := validResponse.VisitGetRoutesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutRoutesId operation middleware
func (sh *strictHandler) PutRoutesId(ctx *gin.Context, id string) {
	var request PutRoutesIdRequestObject

	request.Id = id

	var body PutRoutesIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutRoutesId(ctx, request.(PutRoutesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutRoutesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutRoutesIdResponseObject); ok {
		if err := validResponse.VisitPutRoutesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsAgents operation middleware
func (sh *strictHandler) GetServiceAgentsAgents(ctx *gin.Context, params GetServiceAgentsAgentsParams) {
	var request GetServiceAgentsAgentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsAgents(ctx, request.(GetServiceAgentsAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsAgents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsAgentsResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsAgentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsAgentsId operation middleware
func (sh *strictHandler) GetServiceAgentsAgentsId(ctx *gin.Context, id string) {
	var request GetServiceAgentsAgentsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsAgentsId(ctx, request.(GetServiceAgentsAgentsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsAgentsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsAgentsIdResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsAgentsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsCalls operation middleware
func (sh *strictHandler) GetServiceAgentsCalls(ctx *gin.Context, params GetServiceAgentsCallsParams) {
	var request GetServiceAgentsCallsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsCalls(ctx, request.(GetServiceAgentsCallsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsCalls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsCallsResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsCallsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsCallsId operation middleware
func (sh *strictHandler) GetServiceAgentsCallsId(ctx *gin.Context, id string) {
	var request GetServiceAgentsCallsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsCallsId(ctx, request.(GetServiceAgentsCallsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsCallsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsCallsIdResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsCallsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsChatroommessages operation middleware
func (sh *strictHandler) GetServiceAgentsChatroommessages(ctx *gin.Context, params GetServiceAgentsChatroommessagesParams) {
	var request GetServiceAgentsChatroommessagesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsChatroommessages(ctx, request.(GetServiceAgentsChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsChatroommessagesResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostServiceAgentsChatroommessages operation middleware
func (sh *strictHandler) PostServiceAgentsChatroommessages(ctx *gin.Context) {
	var request PostServiceAgentsChatroommessagesRequestObject

	var body PostServiceAgentsChatroommessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostServiceAgentsChatroommessages(ctx, request.(PostServiceAgentsChatroommessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostServiceAgentsChatroommessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostServiceAgentsChatroommessagesResponseObject); ok {
		if err := validResponse.VisitPostServiceAgentsChatroommessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteServiceAgentsChatroommessagesId operation middleware
func (sh *strictHandler) DeleteServiceAgentsChatroommessagesId(ctx *gin.Context, id string) {
	var request DeleteServiceAgentsChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteServiceAgentsChatroommessagesId(ctx, request.(DeleteServiceAgentsChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteServiceAgentsChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteServiceAgentsChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitDeleteServiceAgentsChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsChatroommessagesId operation middleware
func (sh *strictHandler) GetServiceAgentsChatroommessagesId(ctx *gin.Context, id string) {
	var request GetServiceAgentsChatroommessagesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsChatroommessagesId(ctx, request.(GetServiceAgentsChatroommessagesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsChatroommessagesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsChatroommessagesIdResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsChatroommessagesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsChatrooms operation middleware
func (sh *strictHandler) GetServiceAgentsChatrooms(ctx *gin.Context, params GetServiceAgentsChatroomsParams) {
	var request GetServiceAgentsChatroomsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsChatrooms(ctx, request.(GetServiceAgentsChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsChatroomsResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostServiceAgentsChatrooms operation middleware
func (sh *strictHandler) PostServiceAgentsChatrooms(ctx *gin.Context) {
	var request PostServiceAgentsChatroomsRequestObject

	var body PostServiceAgentsChatroomsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostServiceAgentsChatrooms(ctx, request.(PostServiceAgentsChatroomsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostServiceAgentsChatrooms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostServiceAgentsChatroomsResponseObject); ok {
		if err := validResponse.VisitPostServiceAgentsChatroomsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteServiceAgentsChatroomsId operation middleware
func (sh *strictHandler) DeleteServiceAgentsChatroomsId(ctx *gin.Context, id string) {
	var request DeleteServiceAgentsChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteServiceAgentsChatroomsId(ctx, request.(DeleteServiceAgentsChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteServiceAgentsChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteServiceAgentsChatroomsIdResponseObject); ok {
		if err := validResponse.VisitDeleteServiceAgentsChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsChatroomsId operation middleware
func (sh *strictHandler) GetServiceAgentsChatroomsId(ctx *gin.Context, id string) {
	var request GetServiceAgentsChatroomsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsChatroomsId(ctx, request.(GetServiceAgentsChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsChatroomsIdResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutServiceAgentsChatroomsId operation middleware
func (sh *strictHandler) PutServiceAgentsChatroomsId(ctx *gin.Context, id string) {
	var request PutServiceAgentsChatroomsIdRequestObject

	request.Id = id

	var body PutServiceAgentsChatroomsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutServiceAgentsChatroomsId(ctx, request.(PutServiceAgentsChatroomsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutServiceAgentsChatroomsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutServiceAgentsChatroomsIdResponseObject); ok {
		if err := validResponse.VisitPutServiceAgentsChatroomsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsConversations operation middleware
func (sh *strictHandler) GetServiceAgentsConversations(ctx *gin.Context, params GetServiceAgentsConversationsParams) {
	var request GetServiceAgentsConversationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsConversations(ctx, request.(GetServiceAgentsConversationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsConversations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsConversationsResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsConversationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsConversationsId operation middleware
func (sh *strictHandler) GetServiceAgentsConversationsId(ctx *gin.Context, id string) {
	var request GetServiceAgentsConversationsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsConversationsId(ctx, request.(GetServiceAgentsConversationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsConversationsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsConversationsIdResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsConversationsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsConversationsIdMessages operation middleware
func (sh *strictHandler) GetServiceAgentsConversationsIdMessages(ctx *gin.Context, id string, params GetServiceAgentsConversationsIdMessagesParams) {
	var request GetServiceAgentsConversationsIdMessagesRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsConversationsIdMessages(ctx, request.(GetServiceAgentsConversationsIdMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsConversationsIdMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsConversationsIdMessagesResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsConversationsIdMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostServiceAgentsConversationsIdMessages operation middleware
func (sh *strictHandler) PostServiceAgentsConversationsIdMessages(ctx *gin.Context, id string) {
	var request PostServiceAgentsConversationsIdMessagesRequestObject

	request.Id = id

	var body PostServiceAgentsConversationsIdMessagesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostServiceAgentsConversationsIdMessages(ctx, request.(PostServiceAgentsConversationsIdMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostServiceAgentsConversationsIdMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostServiceAgentsConversationsIdMessagesResponseObject); ok {
		if err := validResponse.VisitPostServiceAgentsConversationsIdMessagesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsCustomer operation middleware
func (sh *strictHandler) GetServiceAgentsCustomer(ctx *gin.Context) {
	var request GetServiceAgentsCustomerRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsCustomer(ctx, request.(GetServiceAgentsCustomerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsCustomer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsCustomerResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsCustomerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsExtensions operation middleware
func (sh *strictHandler) GetServiceAgentsExtensions(ctx *gin.Context, params GetServiceAgentsExtensionsParams) {
	var request GetServiceAgentsExtensionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsExtensions(ctx, request.(GetServiceAgentsExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsExtensions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsExtensionsResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsExtensionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsExtensionsId operation middleware
func (sh *strictHandler) GetServiceAgentsExtensionsId(ctx *gin.Context, id string) {
	var request GetServiceAgentsExtensionsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsExtensionsId(ctx, request.(GetServiceAgentsExtensionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsExtensionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsExtensionsIdResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsExtensionsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsFiles operation middleware
func (sh *strictHandler) GetServiceAgentsFiles(ctx *gin.Context, params GetServiceAgentsFilesParams) {
	var request GetServiceAgentsFilesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsFiles(ctx, request.(GetServiceAgentsFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsFiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsFilesResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsFilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostServiceAgentsFiles operation middleware
func (sh *strictHandler) PostServiceAgentsFiles(ctx *gin.Context) {
	var request PostServiceAgentsFilesRequestObject

	if reader, err := ctx.Request.MultipartReader(); err == nil {
		request.Body = reader
	} else {
		ctx.Error(err)
		return
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostServiceAgentsFiles(ctx, request.(PostServiceAgentsFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostServiceAgentsFiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostServiceAgentsFilesResponseObject); ok {
		if err := validResponse.VisitPostServiceAgentsFilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteServiceAgentsFilesId operation middleware
func (sh *strictHandler) DeleteServiceAgentsFilesId(ctx *gin.Context, id string) {
	var request DeleteServiceAgentsFilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteServiceAgentsFilesId(ctx, request.(DeleteServiceAgentsFilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteServiceAgentsFilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteServiceAgentsFilesIdResponseObject); ok {
		if err := validResponse.VisitDeleteServiceAgentsFilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsFilesId operation middleware
func (sh *strictHandler) GetServiceAgentsFilesId(ctx *gin.Context, id string) {
	var request GetServiceAgentsFilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsFilesId(ctx, request.(GetServiceAgentsFilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsFilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsFilesIdResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsFilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsMe operation middleware
func (sh *strictHandler) GetServiceAgentsMe(ctx *gin.Context) {
	var request GetServiceAgentsMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsMe(ctx, request.(GetServiceAgentsMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsMeResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutServiceAgentsMe operation middleware
func (sh *strictHandler) PutServiceAgentsMe(ctx *gin.Context) {
	var request PutServiceAgentsMeRequestObject

	var body PutServiceAgentsMeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutServiceAgentsMe(ctx, request.(PutServiceAgentsMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutServiceAgentsMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutServiceAgentsMeResponseObject); ok {
		if err := validResponse.VisitPutServiceAgentsMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutServiceAgentsMeAddresses operation middleware
func (sh *strictHandler) PutServiceAgentsMeAddresses(ctx *gin.Context) {
	var request PutServiceAgentsMeAddressesRequestObject

	var body PutServiceAgentsMeAddressesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutServiceAgentsMeAddresses(ctx, request.(PutServiceAgentsMeAddressesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutServiceAgentsMeAddresses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutServiceAgentsMeAddressesResponseObject); ok {
		if err := validResponse.VisitPutServiceAgentsMeAddressesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutServiceAgentsMePassword operation middleware
func (sh *strictHandler) PutServiceAgentsMePassword(ctx *gin.Context) {
	var request PutServiceAgentsMePasswordRequestObject

	var body PutServiceAgentsMePasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutServiceAgentsMePassword(ctx, request.(PutServiceAgentsMePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutServiceAgentsMePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutServiceAgentsMePasswordResponseObject); ok {
		if err := validResponse.VisitPutServiceAgentsMePasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutServiceAgentsMeStatus operation middleware
func (sh *strictHandler) PutServiceAgentsMeStatus(ctx *gin.Context) {
	var request PutServiceAgentsMeStatusRequestObject

	var body PutServiceAgentsMeStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutServiceAgentsMeStatus(ctx, request.(PutServiceAgentsMeStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutServiceAgentsMeStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutServiceAgentsMeStatusResponseObject); ok {
		if err := validResponse.VisitPutServiceAgentsMeStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceAgentsWs operation middleware
func (sh *strictHandler) GetServiceAgentsWs(ctx *gin.Context) {
	var request GetServiceAgentsWsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceAgentsWs(ctx, request.(GetServiceAgentsWsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceAgentsWs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceAgentsWsResponseObject); ok {
		if err := validResponse.VisitGetServiceAgentsWsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStorageAccounts operation middleware
func (sh *strictHandler) GetStorageAccounts(ctx *gin.Context, params GetStorageAccountsParams) {
	var request GetStorageAccountsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStorageAccounts(ctx, request.(GetStorageAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStorageAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStorageAccountsResponseObject); ok {
		if err := validResponse.VisitGetStorageAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostStorageAccounts operation middleware
func (sh *strictHandler) PostStorageAccounts(ctx *gin.Context) {
	var request PostStorageAccountsRequestObject

	var body PostStorageAccountsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostStorageAccounts(ctx, request.(PostStorageAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostStorageAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostStorageAccountsResponseObject); ok {
		if err := validResponse.VisitPostStorageAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteStorageAccountsId operation middleware
func (sh *strictHandler) DeleteStorageAccountsId(ctx *gin.Context, id string) {
	var request DeleteStorageAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteStorageAccountsId(ctx, request.(DeleteStorageAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteStorageAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteStorageAccountsIdResponseObject); ok {
		if err := validResponse.VisitDeleteStorageAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStorageAccountsId operation middleware
func (sh *strictHandler) GetStorageAccountsId(ctx *gin.Context, id string) {
	var request GetStorageAccountsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStorageAccountsId(ctx, request.(GetStorageAccountsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStorageAccountsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStorageAccountsIdResponseObject); ok {
		if err := validResponse.VisitGetStorageAccountsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStorageFiles operation middleware
func (sh *strictHandler) GetStorageFiles(ctx *gin.Context, params GetStorageFilesParams) {
	var request GetStorageFilesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStorageFiles(ctx, request.(GetStorageFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStorageFiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStorageFilesResponseObject); ok {
		if err := validResponse.VisitGetStorageFilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostStorageFiles operation middleware
func (sh *strictHandler) PostStorageFiles(ctx *gin.Context) {
	var request PostStorageFilesRequestObject

	if reader, err := ctx.Request.MultipartReader(); err == nil {
		request.Body = reader
	} else {
		ctx.Error(err)
		return
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostStorageFiles(ctx, request.(PostStorageFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostStorageFiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostStorageFilesResponseObject); ok {
		if err := validResponse.VisitPostStorageFilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteStorageFilesId operation middleware
func (sh *strictHandler) DeleteStorageFilesId(ctx *gin.Context, id string) {
	var request DeleteStorageFilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteStorageFilesId(ctx, request.(DeleteStorageFilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteStorageFilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteStorageFilesIdResponseObject); ok {
		if err := validResponse.VisitDeleteStorageFilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStorageFilesId operation middleware
func (sh *strictHandler) GetStorageFilesId(ctx *gin.Context, id string) {
	var request GetStorageFilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStorageFilesId(ctx, request.(GetStorageFilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStorageFilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStorageFilesIdResponseObject); ok {
		if err := validResponse.VisitGetStorageFilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(ctx *gin.Context, params GetTagsParams) {
	var request GetTagsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx, request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		if err := validResponse.VisitGetTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTags operation middleware
func (sh *strictHandler) PostTags(ctx *gin.Context) {
	var request PostTagsRequestObject

	var body PostTagsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTags(ctx, request.(PostTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTagsResponseObject); ok {
		if err := validResponse.VisitPostTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTagsId operation middleware
func (sh *strictHandler) DeleteTagsId(ctx *gin.Context, id string) {
	var request DeleteTagsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTagsId(ctx, request.(DeleteTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTagsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTagsIdResponseObject); ok {
		if err := validResponse.VisitDeleteTagsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTagsId operation middleware
func (sh *strictHandler) GetTagsId(ctx *gin.Context, id string) {
	var request GetTagsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTagsId(ctx, request.(GetTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTagsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagsIdResponseObject); ok {
		if err := validResponse.VisitGetTagsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutTagsId operation middleware
func (sh *strictHandler) PutTagsId(ctx *gin.Context, id struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}) {
	var request PutTagsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTagsId(ctx, request.(PutTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTagsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutTagsIdResponseObject); ok {
		if err := validResponse.VisitPutTagsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTranscribes operation middleware
func (sh *strictHandler) GetTranscribes(ctx *gin.Context, params GetTranscribesParams) {
	var request GetTranscribesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTranscribes(ctx, request.(GetTranscribesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTranscribes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTranscribesResponseObject); ok {
		if err := validResponse.VisitGetTranscribesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTranscribes operation middleware
func (sh *strictHandler) PostTranscribes(ctx *gin.Context) {
	var request PostTranscribesRequestObject

	var body PostTranscribesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTranscribes(ctx, request.(PostTranscribesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTranscribes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTranscribesResponseObject); ok {
		if err := validResponse.VisitPostTranscribesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTranscribesId operation middleware
func (sh *strictHandler) DeleteTranscribesId(ctx *gin.Context, id string) {
	var request DeleteTranscribesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTranscribesId(ctx, request.(DeleteTranscribesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTranscribesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTranscribesIdResponseObject); ok {
		if err := validResponse.VisitDeleteTranscribesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTranscribesId operation middleware
func (sh *strictHandler) GetTranscribesId(ctx *gin.Context, id string) {
	var request GetTranscribesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTranscribesId(ctx, request.(GetTranscribesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTranscribesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTranscribesIdResponseObject); ok {
		if err := validResponse.VisitGetTranscribesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTranscribesIdStop operation middleware
func (sh *strictHandler) PostTranscribesIdStop(ctx *gin.Context, id string) {
	var request PostTranscribesIdStopRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTranscribesIdStop(ctx, request.(PostTranscribesIdStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTranscribesIdStop")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTranscribesIdStopResponseObject); ok {
		if err := validResponse.VisitPostTranscribesIdStopResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTranscripts operation middleware
func (sh *strictHandler) GetTranscripts(ctx *gin.Context, params GetTranscriptsParams) {
	var request GetTranscriptsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTranscripts(ctx, request.(GetTranscriptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTranscripts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTranscriptsResponseObject); ok {
		if err := validResponse.VisitGetTranscriptsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTransfers operation middleware
func (sh *strictHandler) PostTransfers(ctx *gin.Context) {
	var request PostTransfersRequestObject

	var body PostTransfersJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTransfers(ctx, request.(PostTransfersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTransfers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTransfersResponseObject); ok {
		if err := validResponse.VisitPostTransfersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTrunks operation middleware
func (sh *strictHandler) GetTrunks(ctx *gin.Context, params GetTrunksParams) {
	var request GetTrunksRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrunks(ctx, request.(GetTrunksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrunks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTrunksResponseObject); ok {
		if err := validResponse.VisitGetTrunksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTrunks operation middleware
func (sh *strictHandler) PostTrunks(ctx *gin.Context) {
	var request PostTrunksRequestObject

	var body PostTrunksJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTrunks(ctx, request.(PostTrunksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTrunks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTrunksResponseObject); ok {
		if err := validResponse.VisitPostTrunksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTrunksId operation middleware
func (sh *strictHandler) DeleteTrunksId(ctx *gin.Context, id string) {
	var request DeleteTrunksIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTrunksId(ctx, request.(DeleteTrunksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTrunksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTrunksIdResponseObject); ok {
		if err := validResponse.VisitDeleteTrunksIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTrunksId operation middleware
func (sh *strictHandler) GetTrunksId(ctx *gin.Context, id string) {
	var request GetTrunksIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrunksId(ctx, request.(GetTrunksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrunksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTrunksIdResponseObject); ok {
		if err := validResponse.VisitGetTrunksIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutTrunksId operation middleware
func (sh *strictHandler) PutTrunksId(ctx *gin.Context, id string) {
	var request PutTrunksIdRequestObject

	request.Id = id

	var body PutTrunksIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTrunksId(ctx, request.(PutTrunksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTrunksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutTrunksIdResponseObject); ok {
		if err := validResponse.VisitPutTrunksIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWs operation middleware
func (sh *strictHandler) GetWs(ctx *gin.Context) {
	var request GetWsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWs(ctx, request.(GetWsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWsResponseObject); ok {
		if err := validResponse.VisitGetWsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
