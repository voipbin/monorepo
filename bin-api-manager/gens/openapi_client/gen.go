// Package openapi_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi_client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AgentManagerAgentPermission.
const (
	AgentManagerPermissionAll               AgentManagerAgentPermission = 65535
	AgentManagerPermissionCustomerAdmin     AgentManagerAgentPermission = 32
	AgentManagerPermissionCustomerAgent     AgentManagerAgentPermission = 16
	AgentManagerPermissionCustomerAll       AgentManagerAgentPermission = 240
	AgentManagerPermissionCustomerManager   AgentManagerAgentPermission = 64
	AgentManagerPermissionNone              AgentManagerAgentPermission = 0
	AgentManagerPermissionProjectAll        AgentManagerAgentPermission = 15
	AgentManagerPermissionProjectSuperAdmin AgentManagerAgentPermission = 1
)

// Defines values for AgentManagerAgentRingMethod.
const (
	AgentManagerAgentRingMethodLinear  AgentManagerAgentRingMethod = "linear"
	AgentManagerAgentRingMethodRingAll AgentManagerAgentRingMethod = "ringall"
)

// Defines values for AgentManagerAgentStatus.
const (
	AgentManagerAgentStatusAvailable AgentManagerAgentStatus = "available"
	AgentManagerAgentStatusAway      AgentManagerAgentStatus = "away"
	AgentManagerAgentStatusBusy      AgentManagerAgentStatus = "busy"
	AgentManagerAgentStatusNone      AgentManagerAgentStatus = ""
	AgentManagerAgentStatusOffline   AgentManagerAgentStatus = "offline"
	AgentManagerAgentStatusRinging   AgentManagerAgentStatus = "ringing"
)

// Defines values for BillingManagerAccountPaymentMethod.
const (
	BillingManagerAccountPaymentMethodCreditCard BillingManagerAccountPaymentMethod = "credit card"
	BillingManagerAccountPaymentMethodNone       BillingManagerAccountPaymentMethod = ""
)

// Defines values for BillingManagerAccountPaymentType.
const (
	BillingManagerAccountPaymentTypeNone    BillingManagerAccountPaymentType = ""
	BillingManagerAccountPaymentTypePrepaid BillingManagerAccountPaymentType = "prepaid"
)

// Defines values for BillingManagerBillingStatus.
const (
	BillingManagerBillingStatusEnd         BillingManagerBillingStatus = "end"
	BillingManagerBillingStatusFinished    BillingManagerBillingStatus = "finished"
	BillingManagerBillingStatusPending     BillingManagerBillingStatus = "pending"
	BillingManagerBillingStatusProgressing BillingManagerBillingStatus = "progressing"
)

// Defines values for BillingManagerBillingreferenceType.
const (
	BillingManagerBillingreferenceTypeCall        BillingManagerBillingreferenceType = "call"
	BillingManagerBillingreferenceTypeNone        BillingManagerBillingreferenceType = ""
	BillingManagerBillingreferenceTypeNumber      BillingManagerBillingreferenceType = "number"
	BillingManagerBillingreferenceTypeNumberRenew BillingManagerBillingreferenceType = "number_renew"
	BillingManagerBillingreferenceTypeSMS         BillingManagerBillingreferenceType = "sms"
)

// Defines values for CallManagerCallDirection.
const (
	CallManagerCallDirectionIncoming CallManagerCallDirection = "incoming"
	CallManagerCallDirectionOutgoing CallManagerCallDirection = "outgoing"
)

// Defines values for CallManagerCallHangupBy.
const (
	CallManagerCallHangupByLocal  CallManagerCallHangupBy = "local"
	CallManagerCallHangupByNone   CallManagerCallHangupBy = ""
	CallManagerCallHangupByRemote CallManagerCallHangupBy = "remote"
)

// Defines values for CallManagerCallHangupReason.
const (
	CallManagerCallHangupReasonAMD      CallManagerCallHangupReason = "amd"
	CallManagerCallHangupReasonBusy     CallManagerCallHangupReason = "busy"
	CallManagerCallHangupReasonCancel   CallManagerCallHangupReason = "cancel"
	CallManagerCallHangupReasonDialout  CallManagerCallHangupReason = "dialout"
	CallManagerCallHangupReasonFailed   CallManagerCallHangupReason = "failed"
	CallManagerCallHangupReasonNoanswer CallManagerCallHangupReason = "noanswer"
	CallManagerCallHangupReasonNone     CallManagerCallHangupReason = ""
	CallManagerCallHangupReasonNormal   CallManagerCallHangupReason = "normal"
	CallManagerCallHangupReasonTimeout  CallManagerCallHangupReason = "timeout"
)

// Defines values for CallManagerCallMuteDirection.
const (
	CallManagerCallMuteDirectionBoth CallManagerCallMuteDirection = "both"
	CallManagerCallMuteDirectionIn   CallManagerCallMuteDirection = "in"
	CallManagerCallMuteDirectionNone CallManagerCallMuteDirection = ""
	CallManagerCallMuteDirectionOut  CallManagerCallMuteDirection = "out"
)

// Defines values for CallManagerCallStatus.
const (
	CallManagerCallStatusCanceling   CallManagerCallStatus = "canceling"
	CallManagerCallStatusDialing     CallManagerCallStatus = "dialing"
	CallManagerCallStatusHangup      CallManagerCallStatus = "hangup"
	CallManagerCallStatusProgressing CallManagerCallStatus = "progressing"
	CallManagerCallStatusRinging     CallManagerCallStatus = "ringing"
	CallManagerCallStatusTerminating CallManagerCallStatus = "terminating"
)

// Defines values for CallManagerCallType.
const (
	CallManagerCallTypeConference CallManagerCallType = "conference"
	CallManagerCallTypeFlow       CallManagerCallType = "flow"
	CallManagerCallTypeNone       CallManagerCallType = ""
	CallManagerCallTypeSIPService CallManagerCallType = "sip-service"
)

// Defines values for CallManagerGroupcallAnswerMethod.
const (
	CallManagerGroupcallAnswerMethodHangupOthers CallManagerGroupcallAnswerMethod = "hangup_others"
	CallManagerGroupcallAnswerMethodNone         CallManagerGroupcallAnswerMethod = ""
)

// Defines values for CallManagerGroupcallRingMethod.
const (
	CallManagerGroupcallRingMethodLinear  CallManagerGroupcallRingMethod = "linear"
	CallManagerGroupcallRingMethodNone    CallManagerGroupcallRingMethod = ""
	CallManagerGroupcallRingMethodRingAll CallManagerGroupcallRingMethod = "ring_all"
)

// Defines values for CallManagerGroupcallStatus.
const (
	CallManagerGroupcallStatusHangingup   CallManagerGroupcallStatus = "hangingup"
	CallManagerGroupcallStatusHangup      CallManagerGroupcallStatus = "hangup"
	CallManagerGroupcallStatusProgressing CallManagerGroupcallStatus = "progressing"
)

// Defines values for CallManagerRecordingFormat.
const (
	Wav CallManagerRecordingFormat = "wav"
)

// Defines values for CallManagerRecordingReferenceType.
const (
	CallManagerRecordingReferenceTypeCall       CallManagerRecordingReferenceType = "call"
	CallManagerRecordingReferenceTypeConfbridge CallManagerRecordingReferenceType = "confbridge"
)

// Defines values for CallManagerRecordingStatus.
const (
	CallManagerRecordingStatusEnded      CallManagerRecordingStatus = "ended"
	CallManagerRecordingStatusInitiating CallManagerRecordingStatus = "initiating"
	CallManagerRecordingStatusRecording  CallManagerRecordingStatus = "recording"
	CallManagerRecordingStatusStopping   CallManagerRecordingStatus = "stopping"
)

// Defines values for CampaignManagerCampaignEndHandle.
const (
	CampaignManagerCampaignEndHandleContinue CampaignManagerCampaignEndHandle = "continue"
	CampaignManagerCampaignEndHandleStop     CampaignManagerCampaignEndHandle = "stop"
)

// Defines values for CampaignManagerCampaignExecute.
const (
	CampaignManagerCampaignExecuteRun  CampaignManagerCampaignExecute = "run"
	CampaignManagerCampaignExecuteStop CampaignManagerCampaignExecute = "stop"
)

// Defines values for CampaignManagerCampaignStatus.
const (
	CampaignManagerCampaignStatusRun      CampaignManagerCampaignStatus = "run"
	CampaignManagerCampaignStatusStop     CampaignManagerCampaignStatus = "stop"
	CampaignManagerCampaignStatusStopping CampaignManagerCampaignStatus = "stopping"
)

// Defines values for CampaignManagerCampaignType.
const (
	CampaignManagerCampaignTypeCall CampaignManagerCampaignType = "call"
	CampaignManagerCampaignTypeFlow CampaignManagerCampaignType = "flow"
)

// Defines values for CampaignManagerCampaigncallReferenceType.
const (
	CampaignManagerCampaigncallReferenceTypeCall CampaignManagerCampaigncallReferenceType = "call"
	CampaignManagerCampaigncallReferenceTypeFlow CampaignManagerCampaigncallReferenceType = "flow"
	CampaignManagerCampaigncallReferenceTypeNone CampaignManagerCampaigncallReferenceType = "none"
)

// Defines values for CampaignManagerCampaigncallResult.
const (
	CampaignManagerCampaigncallResultFail    CampaignManagerCampaigncallResult = "fail"
	CampaignManagerCampaigncallResultNone    CampaignManagerCampaigncallResult = ""
	CampaignManagerCampaigncallResultSuccess CampaignManagerCampaigncallResult = "success"
)

// Defines values for CampaignManagerCampaigncallStatus.
const (
	CampaignManagerCampaigncallStatusDialing     CampaignManagerCampaigncallStatus = "dialing"
	CampaignManagerCampaigncallStatusDone        CampaignManagerCampaigncallStatus = "done"
	CampaignManagerCampaigncallStatusProgressing CampaignManagerCampaigncallStatus = "progressing"
)

// Defines values for ChatManagerChatType.
const (
	ChatManagerChatTypeGroup  ChatManagerChatType = "group"
	ChatManagerChatTypeNormal ChatManagerChatType = "normal"
)

// Defines values for ChatManagerChatroomType.
const (
	ChatManagerChatroomTypeGroup   ChatManagerChatroomType = "group"
	ChatManagerChatroomTypeNormal  ChatManagerChatroomType = "normal"
	ChatManagerChatroomTypeUnknown ChatManagerChatroomType = "unknown"
)

// Defines values for ChatManagerMediaType.
const (
	ChatManagerMediaTypeAddress ChatManagerMediaType = "address"
	ChatManagerMediaTypeAgent   ChatManagerMediaType = "agent"
	ChatManagerMediaTypeFile    ChatManagerMediaType = "file"
	ChatManagerMediaTypeLink    ChatManagerMediaType = "link"
)

// Defines values for ChatManagerMessagechatType.
const (
	ChatManagerMessagechatTypeNormal ChatManagerMessagechatType = "normal"
	ChatManagerMessagechatTypeSystem ChatManagerMessagechatType = "system"
)

// Defines values for ChatManagerMessagechatroomType.
const (
	ChatManagerMessagechatroomTypeNormal  ChatManagerMessagechatroomType = "normal"
	ChatManagerMessagechatroomTypeSystem  ChatManagerMessagechatroomType = "system"
	ChatManagerMessagechatroomTypeUnknown ChatManagerMessagechatroomType = ""
)

// Defines values for ChatbotManagerChatbotEngineType.
const (
	ChatbotManagerChatbotEngineTypeChatGPT ChatbotManagerChatbotEngineType = "chatGPT"
	ChatbotManagerChatbotEngineTypeClova   ChatbotManagerChatbotEngineType = "clova"
)

// Defines values for ChatbotManagerChatbotcallGender.
const (
	ChatbotManagerChatbotcallGenderFemale  ChatbotManagerChatbotcallGender = "female"
	ChatbotManagerChatbotcallGenderMale    ChatbotManagerChatbotcallGender = "male"
	ChatbotManagerChatbotcallGenderNeutral ChatbotManagerChatbotcallGender = "neutral"
)

// Defines values for ChatbotManagerChatbotcallStatus.
const (
	ChatbotManagerChatbotcallStatusEnd         ChatbotManagerChatbotcallStatus = "end"
	ChatbotManagerChatbotcallStatusInitiating  ChatbotManagerChatbotcallStatus = "initiating"
	ChatbotManagerChatbotcallStatusProgressing ChatbotManagerChatbotcallStatus = "progressing"
)

// Defines values for ChatbotManagerChatbotcallreferenceType.
const (
	ChatbotManagerChatbotcallreferenceTypeCall ChatbotManagerChatbotcallreferenceType = "call"
)

// Defines values for CommonAddressType.
const (
	CommonAddressTypeAgent      CommonAddressType = "agent"
	CommonAddressTypeConference CommonAddressType = "conference"
	CommonAddressTypeExtension  CommonAddressType = "extension"
	CommonAddressTypeLine       CommonAddressType = "line"
	CommonAddressTypeNone       CommonAddressType = ""
	CommonAddressTypeSIP        CommonAddressType = "sip"
	CommonAddressTypeTel        CommonAddressType = "tel"
)

// Defines values for ConferenceManagerConferenceStatus.
const (
	ConferenceManagerConferenceStatusProgressing ConferenceManagerConferenceStatus = "progressing"
	ConferenceManagerConferenceStatusStarting    ConferenceManagerConferenceStatus = "starting"
	ConferenceManagerConferenceStatusTerminated  ConferenceManagerConferenceStatus = "terminated"
	ConferenceManagerConferenceStatusTerminating ConferenceManagerConferenceStatus = "terminating"
)

// Defines values for ConferenceManagerConferenceType.
const (
	ConferenceManagerConferenceTypeConference ConferenceManagerConferenceType = "conference"
	ConferenceManagerConferenceTypeConnect    ConferenceManagerConferenceType = "connect"
	ConferenceManagerConferenceTypeNone       ConferenceManagerConferenceType = ""
	ConferenceManagerConferenceTypeQueue      ConferenceManagerConferenceType = "queue"
)

// Defines values for ConferenceManagerConferencecallReferenceType.
const (
	ConferenceManagerConferencecallReferenceTypeCall ConferenceManagerConferencecallReferenceType = "call"
)

// Defines values for ConferenceManagerConferencecallStatus.
const (
	ConferenceManagerConferencecallStatusJoined  ConferenceManagerConferencecallStatus = "joined"
	ConferenceManagerConferencecallStatusJoining ConferenceManagerConferencecallStatus = "joining"
	ConferenceManagerConferencecallStatusLeaved  ConferenceManagerConferencecallStatus = "leaved"
	ConferenceManagerConferencecallStatusLeaving ConferenceManagerConferencecallStatus = "leaving"
)

// Defines values for ConversationManagerAccountType.
const (
	ConversationManagerAccountTypeLine ConversationManagerAccountType = "line"
	ConversationManagerAccountTypeSMS  ConversationManagerAccountType = "sms"
)

// Defines values for ConversationManagerConversationReferenceType.
const (
	ConversationManagerConversationReferenceTypeLine    ConversationManagerConversationReferenceType = "line"
	ConversationManagerConversationReferenceTypeMessage ConversationManagerConversationReferenceType = "message"
	ConversationManagerConversationReferenceTypeNone    ConversationManagerConversationReferenceType = ""
)

// Defines values for ConversationManagerMediaType.
const (
	ConversationManagerMediaTypeAudio    ConversationManagerMediaType = "audio"
	ConversationManagerMediaTypeFile     ConversationManagerMediaType = "file"
	ConversationManagerMediaTypeFlex     ConversationManagerMediaType = "flex"
	ConversationManagerMediaTypeImage    ConversationManagerMediaType = "image"
	ConversationManagerMediaTypeImagemap ConversationManagerMediaType = "imagemap"
	ConversationManagerMediaTypeLocation ConversationManagerMediaType = "location"
	ConversationManagerMediaTypeSticker  ConversationManagerMediaType = "sticker"
	ConversationManagerMediaTypeTemplate ConversationManagerMediaType = "template"
	ConversationManagerMediaTypeVideo    ConversationManagerMediaType = "video"
)

// Defines values for ConversationManagerMessageDirection.
const (
	ConversationManagerMessageDirectionIncoming ConversationManagerMessageDirection = "incoming"
	ConversationManagerMessageDirectionOutgoing ConversationManagerMessageDirection = "outgoing"
)

// Defines values for ConversationManagerMessageReferenceType.
const (
	ConversationManagerMessageReferenceTypeCall     ConversationManagerMessageReferenceType = "call"
	ConversationManagerMessageReferenceTypeCampaign ConversationManagerMessageReferenceType = "campaign"
	ConversationManagerMessageReferenceTypeNone     ConversationManagerMessageReferenceType = "none"
)

// Defines values for ConversationManagerMessageStatus.
const (
	ConversationManagerMessageStatusFailed   ConversationManagerMessageStatus = "failed"
	ConversationManagerMessageStatusReceived ConversationManagerMessageStatus = "received"
	ConversationManagerMessageStatusSending  ConversationManagerMessageStatus = "sending"
	ConversationManagerMessageStatusSent     ConversationManagerMessageStatus = "sent"
)

// Defines values for CustomerManagerCustomerWebhookMethod.
const (
	CustomerManagerCustomerWebhookMethodDelete CustomerManagerCustomerWebhookMethod = "DELETE"
	CustomerManagerCustomerWebhookMethodGet    CustomerManagerCustomerWebhookMethod = "GET"
	CustomerManagerCustomerWebhookMethodNone   CustomerManagerCustomerWebhookMethod = ""
	CustomerManagerCustomerWebhookMethodPost   CustomerManagerCustomerWebhookMethod = "POST"
	CustomerManagerCustomerWebhookMethodPut    CustomerManagerCustomerWebhookMethod = "PUT"
)

// Defines values for FlowManagerActionType.
const (
	FlowManagerActionTypeAMD                 FlowManagerActionType = "amd"
	FlowManagerActionTypeAnswer              FlowManagerActionType = "answer"
	FlowManagerActionTypeBeep                FlowManagerActionType = "beep"
	FlowManagerActionTypeBranch              FlowManagerActionType = "branch"
	FlowManagerActionTypeCall                FlowManagerActionType = "call"
	FlowManagerActionTypeChatbotTalk         FlowManagerActionType = "chatbot_talk"
	FlowManagerActionTypeConditionCallDigits FlowManagerActionType = "condition_call_digits"
	FlowManagerActionTypeConditionCallStatus FlowManagerActionType = "condition_call_status"
	FlowManagerActionTypeConditionDatetime   FlowManagerActionType = "condition_datetime"
	FlowManagerActionTypeConditionVariable   FlowManagerActionType = "condition_variable"
	FlowManagerActionTypeConfbridgeJoin      FlowManagerActionType = "confbridge_join"
	FlowManagerActionTypeConferenceJoin      FlowManagerActionType = "conference_join"
	FlowManagerActionTypeConnect             FlowManagerActionType = "connect"
	FlowManagerActionTypeConversationSend    FlowManagerActionType = "conversation_send"
	FlowManagerActionTypeDigitsReceive       FlowManagerActionType = "digits_receive"
	FlowManagerActionTypeDigitsSend          FlowManagerActionType = "digits_send"
	FlowManagerActionTypeEcho                FlowManagerActionType = "echo"
	FlowManagerActionTypeExternalMediaStart  FlowManagerActionType = "external_media_start"
	FlowManagerActionTypeExternalMediaStop   FlowManagerActionType = "external_media_stop"
	FlowManagerActionTypeFetch               FlowManagerActionType = "fetch"
	FlowManagerActionTypeFetchFlow           FlowManagerActionType = "fetch_flow"
	FlowManagerActionTypeGoto                FlowManagerActionType = "goto"
	FlowManagerActionTypeHangup              FlowManagerActionType = "hangup"
	FlowManagerActionTypeMessageSend         FlowManagerActionType = "message_send"
	FlowManagerActionTypeMute                FlowManagerActionType = "mute"
	FlowManagerActionTypePlay                FlowManagerActionType = "play"
	FlowManagerActionTypeQueueJoin           FlowManagerActionType = "queue_join"
	FlowManagerActionTypeRecordingStart      FlowManagerActionType = "recording_start"
	FlowManagerActionTypeRecordingStop       FlowManagerActionType = "recording_stop"
	FlowManagerActionTypeSleep               FlowManagerActionType = "sleep"
	FlowManagerActionTypeStop                FlowManagerActionType = "stop"
	FlowManagerActionTypeStreamEcho          FlowManagerActionType = "stream_echo"
	FlowManagerActionTypeTalk                FlowManagerActionType = "talk"
	FlowManagerActionTypeTranscribeRecording FlowManagerActionType = "transcribe_recording"
	FlowManagerActionTypeTranscribeStart     FlowManagerActionType = "transcribe_start"
	FlowManagerActionTypeTranscribeStop      FlowManagerActionType = "transcribe_stop"
	FlowManagerActionTypeVariableSet         FlowManagerActionType = "variable_set"
	FlowManagerActionTypeWebhookSend         FlowManagerActionType = "webhook_send"
)

// Defines values for FlowManagerActiveflowStatus.
const (
	FlowManagerActiveflowStatusEnded   FlowManagerActiveflowStatus = "ended"
	FlowManagerActiveflowStatusNone    FlowManagerActiveflowStatus = ""
	FlowManagerActiveflowStatusRunning FlowManagerActiveflowStatus = "running"
)

// Defines values for FlowManagerFlowType.
const (
	FlowManagerFlowTypeCampaign   FlowManagerFlowType = "campaign"
	FlowManagerFlowTypeConference FlowManagerFlowType = "conference"
	FlowManagerFlowTypeFlow       FlowManagerFlowType = "flow"
	FlowManagerFlowTypeQueue      FlowManagerFlowType = "queue"
	FlowManagerFlowTypeTransfer   FlowManagerFlowType = "transfer"
)

// Defines values for FlowManagerReferenceType.
const (
	FlowManagerReferenceTypeCall    FlowManagerReferenceType = "call"
	FlowManagerReferenceTypeMessage FlowManagerReferenceType = "message"
	FlowManagerReferenceTypeNone    FlowManagerReferenceType = ""
)

// Defines values for MessageManagerMessageDirection.
const (
	MessageManagerMessageDirectionInbound  MessageManagerMessageDirection = "inbound"
	MessageManagerMessageDirectionOutbound MessageManagerMessageDirection = "outbound"
)

// Defines values for MessageManagerMessageProviderName.
const (
	MessageManagerMessageProviderNameMessagebird MessageManagerMessageProviderName = "messagebird"
	MessageManagerMessageProviderNameTelnyx      MessageManagerMessageProviderName = "telnyx"
	MessageManagerMessageProviderNameTwilio      MessageManagerMessageProviderName = "twilio"
)

// Defines values for MessageManagerMessageType.
const (
	MessageManagerMessageTypeSMS MessageManagerMessageType = "sms"
)

// Defines values for MessageManagerTargetStatus.
const (
	MessageManagerTargetStatusDLRTimeout MessageManagerTargetStatus = "dlr_timeout"
	MessageManagerTargetStatusDelivered  MessageManagerTargetStatus = "delivered"
	MessageManagerTargetStatusFailed     MessageManagerTargetStatus = "failed"
	MessageManagerTargetStatusGWTimeout  MessageManagerTargetStatus = "gw_timeout"
	MessageManagerTargetStatusQueued     MessageManagerTargetStatus = "queued"
	MessageManagerTargetStatusReceived   MessageManagerTargetStatus = "received"
	MessageManagerTargetStatusSent       MessageManagerTargetStatus = "sent"
)

// Defines values for NumberManagerAvailableNumber.
const (
	NumberManagerAvailableNumberFeatureEmergency NumberManagerAvailableNumber = "emergency"
	NumberManagerAvailableNumberFeatureFax       NumberManagerAvailableNumber = "fax"
	NumberManagerAvailableNumberFeatureMMS       NumberManagerAvailableNumber = "mms"
	NumberManagerAvailableNumberFeatureSMS       NumberManagerAvailableNumber = "sms"
	NumberManagerAvailableNumberFeatureVoice     NumberManagerAvailableNumber = "voice"
)

// Defines values for NumberManagerNumberProviderName.
const (
	NumberManagerProviderNameMessagebird NumberManagerNumberProviderName = "messagebird"
	NumberManagerProviderNameTelnyx      NumberManagerNumberProviderName = "telnyx"
	NumberManagerProviderNameTwilio      NumberManagerNumberProviderName = "twilio"
)

// Defines values for NumberManagerNumberStatus.
const (
	NumberManagerStatusActive  NumberManagerNumberStatus = "active"
	NumberManagerStatusDeleted NumberManagerNumberStatus = "deleted"
)

// Defines values for OutdialManagerOutdialtargetStatus.
const (
	OutdialManagerOutdialtargetStatusDone        OutdialManagerOutdialtargetStatus = "done"
	OutdialManagerOutdialtargetStatusIdle        OutdialManagerOutdialtargetStatus = "idle"
	OutdialManagerOutdialtargetStatusProgressing OutdialManagerOutdialtargetStatus = "progressing"
)

// Defines values for QueueManagerQueueRoutingMethod.
const (
	QueueManagerQueueRoutingMethodNone   QueueManagerQueueRoutingMethod = ""
	QueueManagerQueueRoutingMethodRandom QueueManagerQueueRoutingMethod = "random"
)

// Defines values for QueueManagerQueuecallReferenceType.
const (
	QueueManagerQueuecallReferenceTypeCall QueueManagerQueuecallReferenceType = "call"
)

// Defines values for QueueManagerQueuecallStatus.
const (
	QueueManagerQueuecallStatusAbandoned  QueueManagerQueuecallStatus = "abandoned"
	QueueManagerQueuecallStatusConnecting QueueManagerQueuecallStatus = "connecting"
	QueueManagerQueuecallStatusDone       QueueManagerQueuecallStatus = "done"
	QueueManagerQueuecallStatusInitiating QueueManagerQueuecallStatus = "initiating"
	QueueManagerQueuecallStatusKicking    QueueManagerQueuecallStatus = "kicking"
	QueueManagerQueuecallStatusService    QueueManagerQueuecallStatus = "service"
	QueueManagerQueuecallStatusWaiting    QueueManagerQueuecallStatus = "waiting"
)

// Defines values for RegistrarManagerAuthType.
const (
	RegistrarManagerAuthTypeBasic RegistrarManagerAuthType = "basic"
	RegistrarManagerAuthTypeIP    RegistrarManagerAuthType = "ip"
)

// Defines values for RouteManagerProviderType.
const (
	RouteManagerProviderTypeSIP RouteManagerProviderType = "sip"
)

// Defines values for StorageManagerFileReferenceType.
const (
	StorageManagerFileReferenceTypeNone      StorageManagerFileReferenceType = ""
	StorageManagerFileReferenceTypeNormal    StorageManagerFileReferenceType = "normal"
	StorageManagerFileReferenceTypeRecording StorageManagerFileReferenceType = "recording"
)

// Defines values for TranscribeManagerTranscribeDirection.
const (
	TranscribeManagerTranscribeDirectionBoth TranscribeManagerTranscribeDirection = "both"
	TranscribeManagerTranscribeDirectionIn   TranscribeManagerTranscribeDirection = "in"
	TranscribeManagerTranscribeDirectionOut  TranscribeManagerTranscribeDirection = "out"
)

// Defines values for TranscribeManagerTranscribeReferenceType.
const (
	TranscribeManagerTranscribeReferenceTypeCall       TranscribeManagerTranscribeReferenceType = "call"
	TranscribeManagerTranscribeReferenceTypeConfbridge TranscribeManagerTranscribeReferenceType = "confbridge"
	TranscribeManagerTranscribeReferenceTypeRecording  TranscribeManagerTranscribeReferenceType = "recording"
	TranscribeManagerTranscribeReferenceTypeUnknown    TranscribeManagerTranscribeReferenceType = "unknown"
)

// Defines values for TranscribeManagerTranscribeStatus.
const (
	TranscribeManagerTranscribeStatusDone        TranscribeManagerTranscribeStatus = "done"
	TranscribeManagerTranscribeStatusProgressing TranscribeManagerTranscribeStatus = "progressing"
)

// Defines values for TranscribeManagerTranscriptDirection.
const (
	TranscribeManagerTranscriptDirectionBoth TranscribeManagerTranscriptDirection = "both"
	TranscribeManagerTranscriptDirectionIn   TranscribeManagerTranscriptDirection = "in"
	TranscribeManagerTranscriptDirectionOut  TranscribeManagerTranscriptDirection = "out"
)

// Defines values for TransferManagerTransferType.
const (
	TransferManagerTransferTypeAttended TransferManagerTransferType = "attended"
	TransferManagerTransferTypeBlind    TransferManagerTransferType = "blind"
)

// AgentManagerAgent Represents an agent resource.
type AgentManagerAgent struct {
	// Addresses Agent's endpoint addresses.
	Addresses *[]CommonAddress `json:"addresses,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Agent's detail.
	Detail *string `json:"detail,omitempty"`
	Id     *string `json:"id,omitempty"`

	// Name Agent's name.
	Name *string `json:"name,omitempty"`

	// Permission Permission type
	Permission *AgentManagerAgentPermission `json:"permission,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *AgentManagerAgentRingMethod `json:"ring_method,omitempty"`

	// Status Agent's status
	Status *AgentManagerAgentStatus `json:"status,omitempty"`

	// TagIds Agent's tag IDs.
	TagIds *[]string `json:"tag_ids,omitempty"`

	// TmCreate Created timestamp.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Deleted timestamp.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Updated timestamp.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Username Agent's username.
	Username *string `json:"username,omitempty"`
}

// AgentManagerAgentPermission Permission type
type AgentManagerAgentPermission uint64

// AgentManagerAgentRingMethod Represents an agent resource.
type AgentManagerAgentRingMethod string

// AgentManagerAgentStatus Agent's status
type AgentManagerAgentStatus string

// BillingManagerAccount defines model for BillingManagerAccount.
type BillingManagerAccount struct {
	// Balance The balance of the account in USD.
	Balance *float32 `json:"balance,omitempty"`

	// CustomerId The unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Additional details about the account.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier of the account.
	Id *string `json:"id,omitempty"`

	// Name The name of the account.
	Name *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`

	// TmCreate The timestamp when the account was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The timestamp when the account was deleted, if applicable.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate The timestamp when the account was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// BillingManagerAccountPaymentMethod The method of payment used for the account.
type BillingManagerAccountPaymentMethod string

// BillingManagerAccountPaymentType The type of payment associated with the account.
type BillingManagerAccountPaymentType string

// BillingManagerBilling defines model for BillingManagerBilling.
type BillingManagerBilling struct {
	// AccountId The billing account ID.
	AccountId *string `json:"account_id,omitempty"`

	// BillingUnitCount The total count of billing units.
	BillingUnitCount *float32 `json:"billing_unit_count,omitempty"`

	// CostPerUnit The cost per billing unit.
	CostPerUnit *float32 `json:"cost_per_unit,omitempty"`

	// CostTotal The total cost of this billing.
	CostTotal *float32 `json:"cost_total,omitempty"`

	// CustomerId The customer's unique identifier.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id The unique identifier of the billing.
	Id *string `json:"id,omitempty"`

	// ReferenceId The ID of the reference related to this billing.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType The type of reference associated with this billing.
	ReferenceType *BillingManagerBillingreferenceType `json:"reference_type,omitempty"`

	// Status Status of the billing.
	Status *BillingManagerBillingStatus `json:"status,omitempty"`

	// TmBillingEnd The end timestamp of the billing period.
	TmBillingEnd *time.Time `json:"tm_billing_end,omitempty"`

	// TmBillingStart The start timestamp of the billing period.
	TmBillingStart *time.Time `json:"tm_billing_start,omitempty"`

	// TmCreate The creation timestamp.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The deletion timestamp, if applicable.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate The last update timestamp.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// BillingManagerBillingStatus Status of the billing.
type BillingManagerBillingStatus string

// BillingManagerBillingreferenceType The type of reference associated with this billing.
type BillingManagerBillingreferenceType string

// CallManagerCall defines model for CallManagerCall.
type CallManagerCall struct {
	Action *FlowManagerAction `json:"action,omitempty"`

	// ActiveflowId Active flow ID
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// ChainedCallIds Chained call IDs
	ChainedCallIds *[]string `json:"chained_call_ids,omitempty"`

	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// Direction Call direction
	Direction *CallManagerCallDirection `json:"direction,omitempty"`

	// FlowId Flow ID
	FlowId *string `json:"flow_id,omitempty"`

	// GroupcallId Group call ID, indicates if this call is part of a group call
	GroupcallId *string `json:"groupcall_id,omitempty"`

	// HangupBy Indicates who hung up the call
	HangupBy *CallManagerCallHangupBy `json:"hangup_by,omitempty"`

	// HangupReason Reason for call hangup
	HangupReason *CallManagerCallHangupReason `json:"hangup_reason,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// MasterCallId Master call ID
	MasterCallId *string `json:"master_call_id,omitempty"`

	// MuteDirection Possible mute directions for the call
	MuteDirection *CallManagerCallMuteDirection `json:"mute_direction,omitempty"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// RecordingId Current recording ID
	RecordingId *string `json:"recording_id,omitempty"`

	// RecordingIds Recording IDs
	RecordingIds *[]string `json:"recording_ids,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Call status
	Status *CallManagerCallStatus `json:"status,omitempty"`

	// TmCreate Creation timestamp
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Deletion timestamp
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmHangup Timestamp for call hangup
	TmHangup *time.Time `json:"tm_hangup,omitempty"`

	// TmProgressing Timestamp for call progressing
	TmProgressing *time.Time `json:"tm_progressing,omitempty"`

	// TmRinging Timestamp for call ringing
	TmRinging *time.Time `json:"tm_ringing,omitempty"`

	// TmUpdate Update timestamp
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Call type
	Type *CallManagerCallType `json:"type,omitempty"`
}

// CallManagerCallDirection Call direction
type CallManagerCallDirection string

// CallManagerCallHangupBy Indicates who hung up the call
type CallManagerCallHangupBy string

// CallManagerCallHangupReason Reason for call hangup
type CallManagerCallHangupReason string

// CallManagerCallMuteDirection Possible mute directions for the call
type CallManagerCallMuteDirection string

// CallManagerCallStatus Call status
type CallManagerCallStatus string

// CallManagerCallType Call type
type CallManagerCallType string

// CallManagerGroupcall Call or group call information
type CallManagerGroupcall struct {
	// AnswerCallId ID of the answered call
	AnswerCallId *string `json:"answer_call_id,omitempty"`

	// AnswerGroupcallId ID of the answered group call
	AnswerGroupcallId *string `json:"answer_groupcall_id,omitempty"`

	// AnswerMethod Method to handle answered calls
	AnswerMethod *CallManagerGroupcallAnswerMethod `json:"answer_method,omitempty"`

	// CallCount Number of remaining calls in the current dial
	CallCount *int `json:"call_count,omitempty"`

	// CallIds List of associated call IDs
	CallIds *[]string `json:"call_ids,omitempty"`

	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Destinations List of destination addresses
	Destinations *[]CommonAddress `json:"destinations,omitempty"`

	// DialIndex Current dial index, valid only when the ring method is "ring_all"
	DialIndex *int `json:"dial_index"`

	// FlowId ID of the associated flow
	FlowId *string `json:"flow_id,omitempty"`

	// GroupcallCount Number of remaining group calls in the current dial
	GroupcallCount *int `json:"groupcall_count,omitempty"`

	// GroupcallIds List of associated group call IDs
	GroupcallIds *[]string `json:"groupcall_ids,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// MasterCallId ID of the master call, if applicable
	MasterCallId *string `json:"master_call_id"`

	// MasterGroupcallId ID of the master group call, if applicable
	MasterGroupcallId *string `json:"master_groupcall_id"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// RingMethod Method used for dialing
	RingMethod *CallManagerGroupcallRingMethod `json:"ring_method,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Current status of the call or group call
	Status *CallManagerGroupcallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the call was created
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the call was deleted
	TmDelete *time.Time `json:"tm_delete"`

	// TmUpdate Timestamp when the call was last updated
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// CallManagerGroupcallAnswerMethod Method to handle answered calls
type CallManagerGroupcallAnswerMethod string

// CallManagerGroupcallRingMethod Method used for dialing
type CallManagerGroupcallRingMethod string

// CallManagerGroupcallStatus Current status of the call or group call
type CallManagerGroupcallStatus string

// CallManagerRecording defines model for CallManagerRecording.
type CallManagerRecording struct {
	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Format The format of the recording.
	Format *CallManagerRecordingFormat `json:"format,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// ReferenceId The UUID of the reference.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference for the recording.
	ReferenceType *CallManagerRecordingReferenceType `json:"reference_type,omitempty"`

	// Status The status of the recording.
	Status *CallManagerRecordingStatus `json:"status,omitempty"`

	// TmCreate The creation timestamp of the recording.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The timestamp when the recording was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmEnd The end timestamp of the recording.
	TmEnd *time.Time `json:"tm_end,omitempty"`

	// TmStart The start timestamp of the recording.
	TmStart *time.Time `json:"tm_start,omitempty"`

	// TmUpdate The last update timestamp of the recording.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// CallManagerRecordingFormat The format of the recording.
type CallManagerRecordingFormat string

// CallManagerRecordingReferenceType Type of reference for the recording.
type CallManagerRecordingReferenceType string

// CallManagerRecordingStatus The status of the recording.
type CallManagerRecordingStatus string

// CampaignManagerCampaign defines model for CampaignManagerCampaign.
type CampaignManagerCampaign struct {
	Actions    *[]FlowManagerAction `json:"actions,omitempty"`
	CustomerId *string              `json:"customer_id,omitempty"`
	Detail     *string              `json:"detail,omitempty"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle      *CampaignManagerCampaignEndHandle `json:"end_handle,omitempty"`
	Id             *string                           `json:"id,omitempty"`
	Name           *string                           `json:"name,omitempty"`
	NextCampaignId *string                           `json:"next_campaign_id,omitempty"`
	OutdialId      *string                           `json:"outdial_id,omitempty"`
	OutplanId      *string                           `json:"outplan_id,omitempty"`
	QueueId        *string                           `json:"queue_id,omitempty"`
	ServiceLevel   *int                              `json:"service_level,omitempty"`

	// Status Status of the campaign.
	Status   *CampaignManagerCampaignStatus `json:"status,omitempty"`
	TmCreate *time.Time                     `json:"tm_create,omitempty"`
	TmDelete *time.Time                     `json:"tm_delete,omitempty"`
	TmUpdate *time.Time                     `json:"tm_update,omitempty"`

	// Type Type of campaign.
	Type *CampaignManagerCampaignType `json:"type,omitempty"`
}

// CampaignManagerCampaignEndHandle Behavior of the campaign after outdial has no more targets.
type CampaignManagerCampaignEndHandle string

// CampaignManagerCampaignExecute Execution action for the campaign.
type CampaignManagerCampaignExecute string

// CampaignManagerCampaignStatus Status of the campaign.
type CampaignManagerCampaignStatus string

// CampaignManagerCampaignType Type of campaign.
type CampaignManagerCampaignType string

// CampaignManagerCampaigncall defines model for CampaignManagerCampaigncall.
type CampaignManagerCampaigncall struct {
	// ActiveflowId Identifier of the active flow.
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// CampaignId Identifier of the campaign.
	CampaignId *string `json:"campaign_id,omitempty"`

	// CustomerId Identifier of the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// DestinationIndex Index of the destination.
	DestinationIndex *int `json:"destination_index,omitempty"`

	// FlowId Identifier of the flow.
	FlowId *string `json:"flow_id,omitempty"`

	// Id Unique identifier of the campaign call.
	Id *string `json:"id,omitempty"`

	// OutdialId Identifier of the outbound dial.
	OutdialId *string `json:"outdial_id,omitempty"`

	// OutdialTargetId Identifier of the outbound dial target.
	OutdialTargetId *string `json:"outdial_target_id,omitempty"`

	// OutplanId Identifier of the outbound plan.
	OutplanId *string `json:"outplan_id,omitempty"`

	// QueueId Identifier of the queue.
	QueueId *string `json:"queue_id,omitempty"`

	// ReferenceId Identifier of the reference.
	ReferenceId   *string                                   `json:"reference_id,omitempty"`
	ReferenceType *CampaignManagerCampaigncallReferenceType `json:"reference_type,omitempty"`
	Result        *CampaignManagerCampaigncallResult        `json:"result,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress                     `json:"source,omitempty"`
	Status *CampaignManagerCampaigncallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the campaign call was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the campaign call was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the campaign call was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TryCount Number of dialing attempts.
	TryCount *int `json:"try_count,omitempty"`
}

// CampaignManagerCampaigncallReferenceType defines model for CampaignManagerCampaigncallReferenceType.
type CampaignManagerCampaigncallReferenceType string

// CampaignManagerCampaigncallResult defines model for CampaignManagerCampaigncallResult.
type CampaignManagerCampaigncallResult string

// CampaignManagerCampaigncallStatus defines model for CampaignManagerCampaigncallStatus.
type CampaignManagerCampaigncallStatus string

// CampaignManagerOutplan defines model for CampaignManagerOutplan.
type CampaignManagerOutplan struct {
	// CustomerId Identifier of the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the outplan.
	Detail *string `json:"detail,omitempty"`

	// DialTimeout Dial timeout in milliseconds.
	DialTimeout *int `json:"dial_timeout,omitempty"`

	// Id Unique identifier of the outplan.
	Id *string `json:"id,omitempty"`

	// MaxTryCount0 Maximum number of tries for level 0.
	MaxTryCount0 *int `json:"max_try_count_0,omitempty"`

	// MaxTryCount1 Maximum number of tries for level 1.
	MaxTryCount1 *int `json:"max_try_count_1,omitempty"`

	// MaxTryCount2 Maximum number of tries for level 2.
	MaxTryCount2 *int `json:"max_try_count_2,omitempty"`

	// MaxTryCount3 Maximum number of tries for level 3.
	MaxTryCount3 *int `json:"max_try_count_3,omitempty"`

	// MaxTryCount4 Maximum number of tries for level 4.
	MaxTryCount4 *int `json:"max_try_count_4,omitempty"`

	// Name Name of the outplan.
	Name *string `json:"name,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// TmCreate Timestamp when the outplan was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the outplan was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the outplan was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TryInterval Interval between dialing attempts in milliseconds.
	TryInterval *int `json:"try_interval,omitempty"`
}

// ChatManagerChat defines model for ChatManagerChat.
type ChatManagerChat struct {
	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chat.
	Detail *string `json:"detail,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Name Name of the chat.
	Name *string `json:"name,omitempty"`

	// ParticipantIds List of participant IDs (agent IDs).
	ParticipantIds *[]string `json:"participant_ids,omitempty"`

	// RoomOwnerId Owned agent's ID.
	RoomOwnerId *string `json:"room_owner_id,omitempty"`

	// TmCreate Timestamp when the chat was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chat was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chat was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the chat.
	Type *ChatManagerChatType `json:"type,omitempty"`
}

// ChatManagerChatType Type of the chat.
type ChatManagerChatType string

// ChatManagerChatroom defines model for ChatManagerChatroom.
type ChatManagerChatroom struct {
	// ChatId Associated chat ID.
	ChatId *string `json:"chat_id,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chat room.
	Detail *string `json:"detail,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Name Name of the chat room.
	Name *string `json:"name,omitempty"`

	// OwnerId Resource's owner ID.
	OwnerId   *string `json:"owner_id,omitempty"`
	OwnerType *string `json:"owner_type,omitempty"`

	// ParticipantIds List of participant agent IDs.
	ParticipantIds *[]string `json:"participant_ids,omitempty"`

	// RoomOwnerId Chat room's owner agent ID.
	RoomOwnerId *string `json:"room_owner_id,omitempty"`

	// TmCreate Timestamp when the chat room was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chat room was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chat room was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the chat room.
	Type *ChatManagerChatroomType `json:"type,omitempty"`
}

// ChatManagerChatroomType Type of the chat room.
type ChatManagerChatroomType string

// ChatManagerMedia defines model for ChatManagerMedia.
type ChatManagerMedia struct {
	// Address Contains source or destination detail info.
	Address *CommonAddress `json:"address,omitempty"`

	// Agent Represents an agent resource.
	Agent *AgentManagerAgent `json:"agent,omitempty"`

	// FileId Valid only if the type is `file`.
	FileId *string `json:"file_id,omitempty"`

	// LinkUrl Valid only if the type is `link`.
	LinkUrl *string `json:"link_url,omitempty"`

	// Type Type of the media content.
	Type *ChatManagerMediaType `json:"type,omitempty"`
}

// ChatManagerMediaType Type of the media content.
type ChatManagerMediaType string

// ChatManagerMessagechat defines model for ChatManagerMessagechat.
type ChatManagerMessagechat struct {
	// ChatId Associated chat ID.
	ChatId *string `json:"chat_id,omitempty"`

	// Id Unique identifier (inherited from commonidentity.Identity).
	Id *string `json:"id,omitempty"`

	// Medias List of associated media objects.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Text Text content of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message chat was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message chat was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message chat was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the message chat.
	Type *ChatManagerMessagechatType `json:"type,omitempty"`
}

// ChatManagerMessagechatType Type of the message chat.
type ChatManagerMessagechatType string

// ChatManagerMessagechatroom defines model for ChatManagerMessagechatroom.
type ChatManagerMessagechatroom struct {
	// ChatroomId Associated chat room ID.
	ChatroomId *string `json:"chatroom_id,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Medias List of associated media objects.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// MessagechatId Associated message chat ID.
	MessagechatId *string `json:"messagechat_id,omitempty"`

	// OwnerId Resource's owner ID.
	OwnerId   *string `json:"owner_id,omitempty"`
	OwnerType *string `json:"owner_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Text Text content of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message chat room was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message chat room was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message chat room was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Type of the message in the chat room.
	Type *ChatManagerMessagechatroomType `json:"type,omitempty"`
}

// ChatManagerMessagechatroomType Type of the message in the chat room.
type ChatManagerMessagechatroomType string

// ChatbotManagerChatbot defines model for ChatbotManagerChatbot.
type ChatbotManagerChatbot struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chatbot.
	Detail *string `json:"detail,omitempty"`

	// EngineType Type of engine used by the chatbot.
	EngineType *ChatbotManagerChatbotEngineType `json:"engine_type,omitempty"`

	// Id Unique identifier of the chatbot.
	Id *string `json:"id,omitempty"`

	// InitPrompt Initial prompt to configure the chatbot's behavior.
	InitPrompt *string `json:"init_prompt,omitempty"`

	// Name Name of the chatbot.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the chatbot was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chatbot was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chatbot was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// ChatbotManagerChatbotEngineType Type of engine used by the chatbot.
type ChatbotManagerChatbotEngineType string

// ChatbotManagerChatbotcall defines model for ChatbotManagerChatbotcall.
type ChatbotManagerChatbotcall struct {
	// ActiveflowId Unique identifier for the active flow.
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// ChatbotId Unique identifier of the associated chatbot.
	ChatbotId *string `json:"chatbot_id,omitempty"`

	// ConfbridgeId Unique identifier for the conference bridge.
	ConfbridgeId *string `json:"confbridge_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Gender Gender associated with the chatbot call.
	Gender *ChatbotManagerChatbotcallGender `json:"gender,omitempty"`

	// Id Unique identifier for the chatbot call.
	Id *string `json:"id,omitempty"`

	// Language Language used during the chatbot call.
	Language *string `json:"language,omitempty"`

	// ReferenceId Unique identifier for the reference.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference associated with the chatbot call.
	ReferenceType *ChatbotManagerChatbotcallreferenceType `json:"reference_type,omitempty"`

	// Status Status of the chatbot call.
	Status *ChatbotManagerChatbotcallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the chatbot call was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chatbot call was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmEnd Timestamp when the chatbot call ended.
	TmEnd *time.Time `json:"tm_end,omitempty"`

	// TmUpdate Timestamp when the chatbot call was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TranscribeId Unique identifier for the transcription service.
	TranscribeId *string `json:"transcribe_id,omitempty"`
}

// ChatbotManagerChatbotcallGender Gender associated with the chatbot call.
type ChatbotManagerChatbotcallGender string

// ChatbotManagerChatbotcallMessage defines model for ChatbotManagerChatbotcallMessage.
type ChatbotManagerChatbotcallMessage struct {
	// Content Content of the message.
	Content *string `json:"content,omitempty"`

	// Role Role of the entity in the conversation.
	Role *string `json:"role,omitempty"`
}

// ChatbotManagerChatbotcallStatus Status of the chatbot call.
type ChatbotManagerChatbotcallStatus string

// ChatbotManagerChatbotcallreferenceType Type of reference associated with the chatbot call.
type ChatbotManagerChatbotcallreferenceType string

// CommonAddress Contains source or destination detail info.
type CommonAddress struct {
	// Detail Detail description.
	Detail *string `json:"detail,omitempty"`

	// Name Name.
	Name *string `json:"name,omitempty"`

	// Target Address endpoint.
	Target *string `json:"target,omitempty"`

	// TargetName Address's name.
	TargetName *string `json:"target_name,omitempty"`

	// Type Type of address.
	Type *CommonAddressType `json:"type,omitempty"`
}

// CommonAddressType Type of address.
type CommonAddressType string

// CommonPagination defines model for CommonPagination.
type CommonPagination struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// ConferenceManagerConference defines model for ConferenceManagerConference.
type ConferenceManagerConference struct {
	// ConferencecallIds List of associated conference call IDs.
	ConferencecallIds *[]string `json:"conferencecall_ids,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Data Custom data associated with the conference.
	Data *map[string]interface{} `json:"data,omitempty"`

	// Detail Detailed information about the conference.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the conference.
	Id *string `json:"id,omitempty"`

	// Name Name of the conference.
	Name *string `json:"name,omitempty"`

	// PostActions Post-actions to execute after the conference ends.
	PostActions *[]FlowManagerAction `json:"post_actions,omitempty"`

	// PreActions Pre-actions to execute before the conference starts.
	PreActions *[]FlowManagerAction `json:"pre_actions,omitempty"`

	// RecordingId ID of the main recording associated with the conference.
	RecordingId *string `json:"recording_id,omitempty"`

	// RecordingIds List of associated recording IDs.
	RecordingIds *[]string `json:"recording_ids,omitempty"`

	// Status Status of the conference.
	Status *ConferenceManagerConferenceStatus `json:"status,omitempty"`

	// Timeout Timeout for the conference in seconds.
	Timeout *int32 `json:"timeout,omitempty"`

	// TmCreate Timestamp when the conference was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conference was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmEnd Timestamp when the conference ended.
	TmEnd *string `json:"tm_end,omitempty"`

	// TmUpdate Timestamp when the conference was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TranscribeId ID of the main transcription associated with the conference.
	TranscribeId *string `json:"transcribe_id,omitempty"`

	// TranscribeIds List of associated transcription IDs.
	TranscribeIds *[]string `json:"transcribe_ids,omitempty"`

	// Type Types of conferences.
	Type *ConferenceManagerConferenceType `json:"type,omitempty"`
}

// ConferenceManagerConferenceStatus Status of the conference.
type ConferenceManagerConferenceStatus string

// ConferenceManagerConferenceType Types of conferences.
type ConferenceManagerConferenceType string

// ConferenceManagerConferencecall defines model for ConferenceManagerConferencecall.
type ConferenceManagerConferencecall struct {
	// ConferenceId Unique identifier of the associated conference.
	ConferenceId *string `json:"conference_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id Unique identifier for the conference call.
	Id *string `json:"id,omitempty"`

	// ReferenceId Unique identifier of the reference (e.g., call ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of the reference associated with the conference call.
	ReferenceType *ConferenceManagerConferencecallReferenceType `json:"reference_type,omitempty"`

	// Status Status of the conference call.
	Status *ConferenceManagerConferencecallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the conference call was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conference call was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the conference call was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConferenceManagerConferencecallReferenceType Type of the reference associated with the conference call.
type ConferenceManagerConferencecallReferenceType string

// ConferenceManagerConferencecallStatus Status of the conference call.
type ConferenceManagerConferencecallStatus string

// ConversationManagerAccount defines model for ConversationManagerAccount.
type ConversationManagerAccount struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the account.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the account.
	Id *string `json:"id,omitempty"`

	// Name Name of the account.
	Name *string `json:"name,omitempty"`

	// Secret Secret associated with the account.
	Secret *string `json:"secret,omitempty"`

	// TmCreate Timestamp when the account was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the account was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the account was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Token Token, usually an API token, associated with the account.
	Token *string `json:"token,omitempty"`

	// Type Type of the account.
	Type *ConversationManagerAccountType `json:"type,omitempty"`
}

// ConversationManagerAccountType Type of the account.
type ConversationManagerAccountType string

// ConversationManagerConversation defines model for ConversationManagerConversation.
type ConversationManagerConversation struct {
	// AccountId Unique identifier of the associated account.
	AccountId *string `json:"account_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the conversation.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the conversation.
	Id *string `json:"id,omitempty"`

	// Name Name of the conversation.
	Name *string `json:"name,omitempty"`

	// Participants List of participants in the conversation.
	Participants *[]CommonAddress `json:"participants,omitempty"`

	// ReferenceId Unique identifier for the reference (e.g., message ID, line ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of the reference for the conversation.
	ReferenceType *ConversationManagerConversationReferenceType `json:"reference_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// TmCreate Timestamp when the conversation was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conversation was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the conversation was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConversationManagerConversationReferenceType Type of the reference for the conversation.
type ConversationManagerConversationReferenceType string

// ConversationManagerMedia defines model for ConversationManagerMedia.
type ConversationManagerMedia struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Filename Filename of the media.
	Filename *string `json:"filename,omitempty"`

	// Id Unique identifier for the media.
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when the media was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the media was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the media was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the media.
	Type *ConversationManagerMediaType `json:"type,omitempty"`
}

// ConversationManagerMediaType Type of the media.
type ConversationManagerMediaType string

// ConversationManagerMessage defines model for ConversationManagerMessage.
type ConversationManagerMessage struct {
	// ConversationId Unique identifier of the conversation.
	ConversationId *string `json:"conversation_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Direction Direction of the message (incoming or outgoing).
	Direction *ConversationManagerMessageDirection `json:"direction,omitempty"`

	// Id Unique identifier for the message.
	Id *string `json:"id,omitempty"`

	// Medias List of media associated with the message.
	Medias *[]ConversationManagerMedia `json:"medias,omitempty"`

	// ReferenceId The reference ID for the message (e.g., related call ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference associated with the message (e.g., call, campaign).
	ReferenceType *ConversationManagerMessageReferenceType `json:"reference_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Status of the message.
	Status *ConversationManagerMessageStatus `json:"status,omitempty"`

	// Text The message content.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConversationManagerMessageDirection Direction of the message (incoming or outgoing).
type ConversationManagerMessageDirection string

// ConversationManagerMessageReferenceType Type of reference associated with the message (e.g., call, campaign).
type ConversationManagerMessageReferenceType string

// ConversationManagerMessageStatus Status of the message.
type ConversationManagerMessageStatus string

// CustomerManagerAccesskey defines model for CustomerManagerAccesskey.
type CustomerManagerAccesskey struct {
	CustomerId *string    `json:"customer_id,omitempty"`
	Detail     *string    `json:"detail,omitempty"`
	Id         *string    `json:"id,omitempty"`
	Name       *string    `json:"name,omitempty"`
	TmCreate   *time.Time `json:"tm_create,omitempty"`
	TmDelete   *time.Time `json:"tm_delete,omitempty"`
	TmExpire   *time.Time `json:"tm_expire,omitempty"`
	TmUpdate   *time.Time `json:"tm_update,omitempty"`
	Token      *string    `json:"token,omitempty"`
}

// CustomerManagerCustomer defines model for CustomerManagerCustomer.
type CustomerManagerCustomer struct {
	// Address Address of the customer.
	Address *string `json:"address,omitempty"`

	// BillingAccountId The ID of the customer's default billing account.
	BillingAccountId *string `json:"billing_account_id,omitempty"`

	// Detail Details about the customer.
	Detail *string `json:"detail,omitempty"`

	// Email Email address of the customer.
	Email *string `json:"email,omitempty"`

	// Id Unique identifier for the customer.
	Id *string `json:"id,omitempty"`

	// Name Name of the customer.
	Name *string `json:"name,omitempty"`

	// PhoneNumber Phone number of the customer.
	PhoneNumber *string `json:"phone_number,omitempty"`

	// TmCreate Timestamp when the customer was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the customer was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the customer was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod *CustomerManagerCustomerWebhookMethod `json:"webhook_method,omitempty"`

	// WebhookUri URI for the customer's webhook.
	WebhookUri *string `json:"webhook_uri,omitempty"`
}

// CustomerManagerCustomerWebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
type CustomerManagerCustomerWebhookMethod string

// FlowManagerAction defines model for FlowManagerAction.
type FlowManagerAction struct {
	// Id The unique identifier
	Id string `json:"id"`

	// NextId The identifier of the next item
	NextId *string `json:"next_id,omitempty"`

	// Option Additional options
	Option *map[string]interface{} `json:"option,omitempty"`

	// TmExecute Timestamp or time to execute
	TmExecute *string `json:"tm_execute,omitempty"`

	// Type Type of the action.
	Type FlowManagerActionType `json:"type"`
}

// FlowManagerActionType Type of the action.
type FlowManagerActionType string

// FlowManagerActiveflow defines model for FlowManagerActiveflow.
type FlowManagerActiveflow struct {
	CurrentAction *FlowManagerAction `json:"current_action,omitempty"`

	// CustomerId ID of the customer associated with the flow.
	CustomerId *string `json:"customer_id,omitempty"`

	// ExecutedActions List of actions that have been executed.
	ExecutedActions *[]FlowManagerAction `json:"executed_actions,omitempty"`

	// FlowId ID of the flow definition.
	FlowId *string `json:"flow_id,omitempty"`

	// ForwardActionId ID of the next action to be executed.
	ForwardActionId *string `json:"forward_action_id,omitempty"`

	// Id Unique identifier for the activeflow.
	Id *string `json:"id,omitempty"`

	// ReferenceId ID of the reference object.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Reference type of activeflow.
	ReferenceType *FlowManagerReferenceType `json:"reference_type,omitempty"`

	// Status Status of the activeflow.
	Status *FlowManagerActiveflowStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the flow was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the flow was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the flow was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// FlowManagerActiveflowStatus Status of the activeflow.
type FlowManagerActiveflowStatus string

// FlowManagerFlow defines model for FlowManagerFlow.
type FlowManagerFlow struct {
	// Actions List of actions associated with the flow.
	Actions *[]FlowManagerAction `json:"actions,omitempty"`

	// CustomerId Unique identifier for the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed description of the flow.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the flow.
	Id *string `json:"id,omitempty"`

	// Name Name of the flow.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the flow was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the flow was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the flow was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the flow.
	Type *FlowManagerFlowType `json:"type,omitempty"`
}

// FlowManagerFlowType Type of the flow.
type FlowManagerFlowType string

// FlowManagerReferenceType Reference type of activeflow.
type FlowManagerReferenceType string

// MessageManagerMessage defines model for MessageManagerMessage.
type MessageManagerMessage struct {
	// CustomerId Unique identifier for the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Direction Direction of the message.
	Direction *MessageManagerMessageDirection `json:"direction,omitempty"`

	// Id Unique identifier for the message.
	Id *string `json:"id,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Targets List of target addresses to which the message is sent.
	Targets *[]MessageManagerTarget `json:"targets,omitempty"`

	// Text The text delivered in the body of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the message.
	Type *MessageManagerMessageType `json:"type,omitempty"`
}

// MessageManagerMessageDirection Direction of the message.
type MessageManagerMessageDirection string

// MessageManagerMessageProviderName Name of the message provider.
type MessageManagerMessageProviderName string

// MessageManagerMessageType Type of the message.
type MessageManagerMessageType string

// MessageManagerTarget defines model for MessageManagerTarget.
type MessageManagerTarget struct {
	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// Parts The number of message parts (if the message is split).
	Parts *int `json:"parts,omitempty"`

	// Status The status of the message for the target.
	Status *MessageManagerTargetStatus `json:"status,omitempty"`

	// TmUpdate Timestamp when the target message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// MessageManagerTargetStatus The status of the message for the target.
type MessageManagerTargetStatus string

// NumberManagerAvailableNumber A feature supported by the phone number.
type NumberManagerAvailableNumber string

// NumberManagerAvailableNumberFeature defines model for NumberManagerAvailableNumberFeature.
type NumberManagerAvailableNumberFeature struct {
	// Country The country where the number is available.
	Country *string `json:"country,omitempty"`

	// Features The list of features supported by the number.
	Features *[]NumberManagerAvailableNumberFeature `json:"features,omitempty"`

	// Number The available phone number.
	Number *string `json:"number,omitempty"`

	// PostalCode The postal code associated with the number.
	PostalCode *string `json:"postal_code,omitempty"`

	// Region The region within the country.
	Region *string `json:"region,omitempty"`
}

// NumberManagerNumber defines model for NumberManagerNumber.
type NumberManagerNumber struct {
	// CallFlowId The ID of the associated call flow.
	CallFlowId *string `json:"call_flow_id,omitempty"`

	// CustomerId The customer ID associated with the number.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Additional details about the number.
	Detail *string `json:"detail,omitempty"`

	// EmergencyEnabled Whether emergency services are enabled for the number.
	EmergencyEnabled *bool `json:"emergency_enabled,omitempty"`

	// Id The unique identifier for the number.
	Id *string `json:"id,omitempty"`

	// MessageFlowId The ID of the associated message flow.
	MessageFlowId *string `json:"message_flow_id,omitempty"`

	// Name The name of the number.
	Name *string `json:"name,omitempty"`

	// Number The phone number.
	Number *string `json:"number,omitempty"`

	// Status The status of the number.
	Status *NumberManagerNumberStatus `json:"status,omitempty"`

	// T38Enabled Whether T38 is enabled for the number.
	T38Enabled *bool `json:"t38_enabled,omitempty"`

	// TmCreate The timestamp of when the number was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete The timestamp of when the number was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmPurchase The timestamp of when the number was purchased.
	TmPurchase *string `json:"tm_purchase,omitempty"`

	// TmRenew The timestamp of when the number was renewed.
	TmRenew *string `json:"tm_renew,omitempty"`

	// TmUpdate The timestamp of when the number was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// NumberManagerNumberProviderName The provider name for the number.
type NumberManagerNumberProviderName string

// NumberManagerNumberStatus The status of the number.
type NumberManagerNumberStatus string

// OutdialManagerOutdial defines model for OutdialManagerOutdial.
type OutdialManagerOutdial struct {
	// CampaignId The unique identifier for the campaign associated with the outdial.
	CampaignId *string `json:"campaign_id,omitempty"`

	// CustomerId The unique identifier for the customer associated with the outdial.
	CustomerId *string `json:"customer_id,omitempty"`

	// Data The data associated with the outdial.
	Data *string `json:"data,omitempty"`

	// Detail The detailed description of the outdial.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the outdial.
	Id *string `json:"id,omitempty"`

	// Name The name of the outdial.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the outdial was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the outdial was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the outdial was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// OutdialManagerOutdialtarget defines model for OutdialManagerOutdialtarget.
type OutdialManagerOutdialtarget struct {
	// Data The data associated with the outdial.
	Data *string `json:"data,omitempty"`

	// Destination0 Contains source or destination detail info.
	Destination0 *CommonAddress `json:"destination_0,omitempty"`

	// Destination1 Contains source or destination detail info.
	Destination1 *CommonAddress `json:"destination_1,omitempty"`

	// Destination2 Contains source or destination detail info.
	Destination2 *CommonAddress `json:"destination_2,omitempty"`

	// Destination3 Contains source or destination detail info.
	Destination3 *CommonAddress `json:"destination_3,omitempty"`

	// Destination4 Contains source or destination detail info.
	Destination4 *CommonAddress `json:"destination_4,omitempty"`

	// Detail Additional details about the outdial.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the outdial.
	Id *string `json:"id,omitempty"`

	// Name The name of the outdial.
	Name *string `json:"name,omitempty"`

	// OutdialId The outdial reference ID.
	OutdialId *string `json:"outdial_id,omitempty"`

	// Status The status of the outdial.
	Status *OutdialManagerOutdialtargetStatus `json:"status,omitempty"`

	// TmCreate The creation timestamp.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete The deletion timestamp.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate The update timestamp.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TryCount0 The try count for destination 0.
	TryCount0 *int `json:"try_count_0,omitempty"`

	// TryCount1 The try count for destination 1.
	TryCount1 *int `json:"try_count_1,omitempty"`

	// TryCount2 The try count for destination 2.
	TryCount2 *int `json:"try_count_2,omitempty"`

	// TryCount3 The try count for destination 3.
	TryCount3 *int `json:"try_count_3,omitempty"`

	// TryCount4 The try count for destination 4.
	TryCount4 *int `json:"try_count_4,omitempty"`
}

// OutdialManagerOutdialtargetStatus The status of the outdial.
type OutdialManagerOutdialtargetStatus string

// QueueManagerQueue defines model for QueueManagerQueue.
type QueueManagerQueue struct {
	CustomerId          *string                         `json:"customer_id,omitempty"`
	Detail              *string                         `json:"detail,omitempty"`
	Id                  *string                         `json:"id,omitempty"`
	Name                *string                         `json:"name,omitempty"`
	RoutingMethod       *QueueManagerQueueRoutingMethod `json:"routing_method,omitempty"`
	ServiceQueuecallIds *[]string                       `json:"service_queuecall_ids,omitempty"`

	// ServiceTimeout Service queue timeout in milliseconds.
	ServiceTimeout *int      `json:"service_timeout,omitempty"`
	TagIds         *[]string `json:"tag_ids,omitempty"`
	TmCreate       *string   `json:"tm_create,omitempty"`
	TmDelete       *string   `json:"tm_delete,omitempty"`
	TmUpdate       *string   `json:"tm_update,omitempty"`

	// TotalAbandonedCount Total abandoned call count.
	TotalAbandonedCount *int `json:"total_abandoned_count,omitempty"`

	// TotalIncomingCount Total incoming call count.
	TotalIncomingCount *int `json:"total_incoming_count,omitempty"`

	// TotalServicedCount Total serviced call count.
	TotalServicedCount *int                 `json:"total_serviced_count,omitempty"`
	WaitActions        *[]FlowManagerAction `json:"wait_actions,omitempty"`
	WaitQueuecallIds   *[]string            `json:"wait_queuecall_ids,omitempty"`

	// WaitTimeout Wait queue timeout in milliseconds.
	WaitTimeout *int `json:"wait_timeout,omitempty"`
}

// QueueManagerQueueRoutingMethod defines model for QueueManagerQueueRoutingMethod.
type QueueManagerQueueRoutingMethod string

// QueueManagerQueuecall defines model for QueueManagerQueuecall.
type QueueManagerQueuecall struct {
	CustomerId *string `json:"customer_id,omitempty"`

	// DurationService Duration for service in milliseconds
	DurationService *int `json:"duration_service,omitempty"`

	// DurationWaiting Duration for waiting in milliseconds
	DurationWaiting *int                                `json:"duration_waiting,omitempty"`
	Id              *string                             `json:"id,omitempty"`
	ReferenceId     *string                             `json:"reference_id,omitempty"`
	ReferenceType   *QueueManagerQueuecallReferenceType `json:"reference_type,omitempty"`

	// ServiceAgentId The ID of the service agent handling the queue call
	ServiceAgentId *string                      `json:"service_agent_id,omitempty"`
	Status         *QueueManagerQueuecallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the queue call was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the queue call was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmService Timestamp when the queue call started service
	TmService *string `json:"tm_service,omitempty"`

	// TmUpdate Timestamp when the queue call was last updated
	TmUpdate *string `json:"tm_update,omitempty"`
}

// QueueManagerQueuecallReferenceType defines model for QueueManagerQueuecallReferenceType.
type QueueManagerQueuecallReferenceType string

// QueueManagerQueuecallStatus defines model for QueueManagerQueuecallStatus.
type QueueManagerQueuecallStatus string

// RegistrarManagerAuthType Defines the authentication type. Can be 'basic' or 'ip'.
type RegistrarManagerAuthType string

// RegistrarManagerExtension defines model for RegistrarManagerExtension.
type RegistrarManagerExtension struct {
	CustomerId *string `json:"customer_id,omitempty"`
	Detail     *string `json:"detail,omitempty"`

	// DomainName Domain name, same as the customer_id, used by Kamailio's INVITE validation
	DomainName *string `json:"domain_name,omitempty"`
	Extension  *string `json:"extension,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	Password   *string `json:"password,omitempty"`

	// TmCreate Timestamp when the extension was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the extension was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the extension was last updated
	TmUpdate *string `json:"tm_update,omitempty"`

	// Username Username, same as the Extension, used by Kamailio's INVITE validation
	Username *string `json:"username,omitempty"`
}

// RegistrarManagerTrunk defines model for RegistrarManagerTrunk.
type RegistrarManagerTrunk struct {
	AllowedIps *[]string                   `json:"allowed_ips,omitempty"`
	AuthTypes  *[]RegistrarManagerAuthType `json:"auth_types,omitempty"`
	CustomerId *string                     `json:"customer_id,omitempty"`
	Detail     *string                     `json:"detail,omitempty"`
	DomainName *string                     `json:"domain_name,omitempty"`
	Id         *string                     `json:"id,omitempty"`
	Name       *string                     `json:"name,omitempty"`
	Password   *string                     `json:"password,omitempty"`

	// TmCreate Timestamp when the trunk was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the trunk was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the trunk was last updated
	TmUpdate *string `json:"tm_update,omitempty"`
	Username *string `json:"username,omitempty"`
}

// RouteManagerProvider defines model for RouteManagerProvider.
type RouteManagerProvider struct {
	// Detail The details about the provider.
	Detail *string `json:"detail,omitempty"`

	// Hostname The destination hostname for the provider.
	Hostname *string `json:"hostname,omitempty"`

	// Id The unique identifier for the provider.
	Id *string `json:"id,omitempty"`

	// Name The name of the provider.
	Name *string `json:"name,omitempty"`

	// TechHeaders The tech headers, valid only for SIP type providers.
	TechHeaders *map[string]string `json:"tech_headers,omitempty"`

	// TechPostfix The tech postfix, valid only for SIP type providers.
	TechPostfix *string `json:"tech_postfix,omitempty"`

	// TechPrefix The tech prefix, valid only for SIP type providers.
	TechPrefix *string `json:"tech_prefix,omitempty"`

	// TmCreate Timestamp when the provider was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the provider was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the provider was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// Type Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
	Type *RouteManagerProviderType `json:"type,omitempty"`
}

// RouteManagerProviderType Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
type RouteManagerProviderType string

// RouteManagerRoute defines model for RouteManagerRoute.
type RouteManagerRoute struct {
	// CustomerId The customer ID associated with the route.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail The details about the route.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the route.
	Id *string `json:"id,omitempty"`

	// Name The name of the route.
	Name *string `json:"name,omitempty"`

	// Priority The priority of the route, used for routing decisions.
	Priority *int `json:"priority,omitempty"`

	// ProviderId The unique identifier of the provider associated with this route.
	ProviderId *string `json:"provider_id,omitempty"`

	// Target The target destination for the route (e.g., country code or 'all').
	Target *string `json:"target,omitempty"`

	// TmCreate Timestamp when the route was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the route was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the route was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// StorageManagerAccount defines model for StorageManagerAccount.
type StorageManagerAccount struct {
	// CustomerId The customer ID associated with the account.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id The unique identifier for the account.
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when the account was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the account was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the account was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// TotalFileCount The total number of files in the account.
	TotalFileCount *int64 `json:"total_file_count,omitempty"`

	// TotalFileSize The total file size in bytes.
	TotalFileSize *int64 `json:"total_file_size,omitempty"`
}

// StorageManagerFile defines model for StorageManagerFile.
type StorageManagerFile struct {
	// CustomerId The customer ID associated with the file.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail The details of the file.
	Detail *string `json:"detail,omitempty"`

	// Filename The filename of the file.
	Filename *string `json:"filename,omitempty"`

	// Filesize The size of the file in bytes.
	Filesize *int64 `json:"filesize,omitempty"`

	// Id The unique identifier for the file.
	Id *string `json:"id,omitempty"`

	// Name The name of the file.
	Name *string `json:"name,omitempty"`

	// OwnerId The owner ID of the file.
	OwnerId *string `json:"owner_id,omitempty"`

	// ReferenceId The reference ID associated with the file.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType The reference type of the file.
	ReferenceType *StorageManagerFileReferenceType `json:"reference_type,omitempty"`

	// TmCreate Timestamp when the file was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the file was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmDownloadExpire The timestamp when the download link expires.
	TmDownloadExpire *time.Time `json:"tm_download_expire,omitempty"`

	// TmUpdate Timestamp when the file was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`

	// UriDownload The URI for downloading the file.
	UriDownload *string `json:"uri_download,omitempty"`
}

// StorageManagerFileReferenceType The reference type of the file.
type StorageManagerFileReferenceType string

// TagManagerTag defines model for TagManagerTag.
type TagManagerTag struct {
	// Detail The details about the tag.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the tag.
	Id *string `json:"id,omitempty"`

	// Name The name of the tag.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the tag was created.
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the tag was deleted.
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the tag was last updated.
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// TranscribeManagerTranscribe defines model for TranscribeManagerTranscribe.
type TranscribeManagerTranscribe struct {
	// CustomerId Customer ID
	CustomerId *string                               `json:"customer_id,omitempty"`
	Direction  *TranscribeManagerTranscribeDirection `json:"direction,omitempty"`

	// Id Transcribe id
	Id *string `json:"id,omitempty"`

	// Language BCP47 type's language code.
	Language *string `json:"language,omitempty"`

	// ReferenceId Call/Conference/Recording's ID
	ReferenceId   *string                                   `json:"reference_id,omitempty"`
	ReferenceType *TranscribeManagerTranscribeReferenceType `json:"reference_type,omitempty"`
	Status        *TranscribeManagerTranscribeStatus        `json:"status,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *time.Time `json:"tm_create,omitempty"`

	// TmDelete Timestamp when deleted
	TmDelete *time.Time `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when updated
	TmUpdate *time.Time `json:"tm_update,omitempty"`
}

// TranscribeManagerTranscribeDirection defines model for TranscribeManagerTranscribeDirection.
type TranscribeManagerTranscribeDirection string

// TranscribeManagerTranscribeReferenceType defines model for TranscribeManagerTranscribeReferenceType.
type TranscribeManagerTranscribeReferenceType string

// TranscribeManagerTranscribeStatus defines model for TranscribeManagerTranscribeStatus.
type TranscribeManagerTranscribeStatus string

// TranscribeManagerTranscript defines model for TranscribeManagerTranscript.
type TranscribeManagerTranscript struct {
	Direction *TranscribeManagerTranscriptDirection `json:"direction,omitempty"`

	// Id Transcript ID
	Id *string `json:"id,omitempty"`

	// Message Transcript message
	Message *string `json:"message,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmTranscript Timestamp for the transcript
	TmTranscript *string `json:"tm_transcript,omitempty"`

	// TranscribeId Transcribe ID
	TranscribeId *string `json:"transcribe_id,omitempty"`
}

// TranscribeManagerTranscriptDirection defines model for TranscribeManagerTranscriptDirection.
type TranscribeManagerTranscriptDirection string

// TransferManagerTransfer defines model for TransferManagerTransfer.
type TransferManagerTransfer struct {
	// ConfbridgeId Conference Bridge ID
	ConfbridgeId *string `json:"confbridge_id,omitempty"`

	// CustomerId Customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// GroupcallId Created Groupcall ID
	GroupcallId *string `json:"groupcall_id,omitempty"`

	// Id Transfer ID
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when updated
	TmUpdate *string `json:"tm_update,omitempty"`

	// TransfereeAddresses List of transferee addresses
	TransfereeAddresses *[]CommonAddress `json:"transferee_addresses,omitempty"`

	// TransfereeCallId Transferee Call ID
	TransfereeCallId *string `json:"transferee_call_id,omitempty"`

	// TransfererCallId Transferer Call ID
	TransfererCallId *string                      `json:"transferer_call_id,omitempty"`
	Type             *TransferManagerTransferType `json:"type,omitempty"`
}

// TransferManagerTransferType defines model for TransferManagerTransferType.
type TransferManagerTransferType string

// PageSize defines model for PageSize.
type PageSize = int

// PageToken defines model for PageToken.
type PageToken = string

// GetAccesskeysParams defines parameters for GetAccesskeys.
type GetAccesskeysParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostAccesskeysJSONBody defines parameters for PostAccesskeys.
type PostAccesskeysJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Expire *int    `json:"expire,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PutAccesskeysIdJSONBody defines parameters for PutAccesskeysId.
type PutAccesskeysIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// GetActiveflowsParams defines parameters for GetActiveflows.
type GetActiveflowsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostActiveflowsJSONBody defines parameters for PostActiveflows.
type PostActiveflowsJSONBody struct {
	Actions *[]FlowManagerAction `json:"actions,omitempty"`

	// FlowId Flow id of.
	FlowId *string `json:"flow_id,omitempty"`

	// Id ID of the activeflow.
	Id *string `json:"id,omitempty"`
}

// GetAgentsParams defines parameters for GetAgents.
type GetAgentsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// TagIds Comma separated tag ids.
	TagIds *string `form:"tag_ids,omitempty" json:"tag_ids,omitempty"`

	// Status Agent status.
	Status *AgentManagerAgentStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PostAgentsJSONBody defines parameters for PostAgents.
type PostAgentsJSONBody struct {
	Addresses []CommonAddress `json:"addresses"`
	Detail    string          `json:"detail"`
	Name      string          `json:"name"`
	Password  string          `json:"password"`

	// Permission Permission type
	Permission AgentManagerAgentPermission `json:"permission"`

	// RingMethod Represents an agent resource.
	RingMethod AgentManagerAgentRingMethod `json:"ring_method"`
	TagIds     []string                    `json:"tag_ids"`
	Username   string                      `json:"username"`
}

// PutAgentsIdJSONBody defines parameters for PutAgentsId.
type PutAgentsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *AgentManagerAgentRingMethod `json:"ring_method,omitempty"`
}

// PutAgentsIdAddressesJSONBody defines parameters for PutAgentsIdAddresses.
type PutAgentsIdAddressesJSONBody struct {
	Addresses *[]CommonAddress `json:"addresses,omitempty"`
}

// PutAgentsIdPasswordJSONBody defines parameters for PutAgentsIdPassword.
type PutAgentsIdPasswordJSONBody struct {
	Password *string `json:"password,omitempty"`
}

// PutAgentsIdPermissionJSONBody defines parameters for PutAgentsIdPermission.
type PutAgentsIdPermissionJSONBody struct {
	// Permission Permission type
	Permission *AgentManagerAgentPermission `json:"permission,omitempty"`
}

// PutAgentsIdStatusJSONBody defines parameters for PutAgentsIdStatus.
type PutAgentsIdStatusJSONBody struct {
	// Status Agent's status
	Status *AgentManagerAgentStatus `json:"status,omitempty"`
}

// PutAgentsIdTagIdsJSONBody defines parameters for PutAgentsIdTagIds.
type PutAgentsIdTagIdsJSONBody struct {
	TagIds *[]string `json:"tag_ids,omitempty"`
}

// GetAvailableNumbersParams defines parameters for GetAvailableNumbers.
type GetAvailableNumbersParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// CountryCode The ISO country code.
	CountryCode string `form:"country_code" json:"country_code"`
}

// GetBillingAccountsParams defines parameters for GetBillingAccounts.
type GetBillingAccountsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostBillingAccountsJSONBody defines parameters for PostBillingAccounts.
type PostBillingAccountsJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`
}

// PutBillingAccountsIdJSONBody defines parameters for PutBillingAccountsId.
type PutBillingAccountsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PostBillingAccountsIdBalanceAddForceJSONBody defines parameters for PostBillingAccountsIdBalanceAddForce.
type PostBillingAccountsIdBalanceAddForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PostBillingAccountsIdBalanceSubtractForceJSONBody defines parameters for PostBillingAccountsIdBalanceSubtractForce.
type PostBillingAccountsIdBalanceSubtractForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PutBillingAccountsIdPaymentInfoJSONBody defines parameters for PutBillingAccountsIdPaymentInfo.
type PutBillingAccountsIdPaymentInfoJSONBody struct {
	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`
}

// GetBillingsParams defines parameters for GetBillings.
type GetBillingsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCallsParams defines parameters for GetCalls.
type GetCallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCallsJSONBody defines parameters for PostCalls.
type PostCallsJSONBody struct {
	Actions      *[]FlowManagerAction `json:"actions,omitempty"`
	Destinations *[]CommonAddress     `json:"destinations,omitempty"`
	FlowId       *string              `json:"flow_id,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`
}

// GetCallsIdMediaStreamParams defines parameters for GetCallsIdMediaStream.
type GetCallsIdMediaStreamParams struct {
	Encapsulation *string `form:"encapsulation,omitempty" json:"encapsulation,omitempty"`
}

// DeleteCallsIdMuteJSONBody defines parameters for DeleteCallsIdMute.
type DeleteCallsIdMuteJSONBody struct {
	// Direction Possible mute directions for the call
	Direction *CallManagerCallMuteDirection `json:"direction,omitempty"`
}

// PostCallsIdMuteJSONBody defines parameters for PostCallsIdMute.
type PostCallsIdMuteJSONBody struct {
	// Direction Possible mute directions for the call
	Direction *CallManagerCallMuteDirection `json:"direction,omitempty"`
}

// PostCallsIdTalkJSONBody defines parameters for PostCallsIdTalk.
type PostCallsIdTalkJSONBody struct {
	Gender   *string `json:"gender,omitempty"`
	Language *string `json:"language,omitempty"`
	Text     *string `json:"text,omitempty"`
}

// GetCampaigncallsParams defines parameters for GetCampaigncalls.
type GetCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCampaignsParams defines parameters for GetCampaigns.
type GetCampaignsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCampaignsJSONBody defines parameters for PostCampaigns.
type PostCampaignsJSONBody struct {
	// Actions Actions associated with the campaign
	Actions []FlowManagerAction `json:"actions"`

	// Detail Detailed description of the campaign
	Detail string `json:"detail"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle CampaignManagerCampaignEndHandle `json:"end_handle"`

	// Name Name of the campaign
	Name string `json:"name"`

	// NextCampaignId ID of the next campaign
	NextCampaignId string `json:"next_campaign_id"`

	// OutdialId Outdial ID for the campaign
	OutdialId string `json:"outdial_id"`

	// OutplanId Outplan ID for the campaign
	OutplanId string `json:"outplan_id"`

	// QueueId Queue ID for the campaign
	QueueId string `json:"queue_id"`

	// ServiceLevel Service level of the campaign
	ServiceLevel int `json:"service_level"`

	// Type Type of campaign.
	Type CampaignManagerCampaignType `json:"type"`
}

// PutCampaignsIdJSONBody defines parameters for PutCampaignsId.
type PutCampaignsIdJSONBody struct {
	// Detail Updated details of the campaign
	Detail string `json:"detail"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle CampaignManagerCampaignEndHandle `json:"end_handle"`

	// Name Updated name of the campaign
	Name string `json:"name"`

	// ServiceLevel Updated service level of the campaign
	ServiceLevel int `json:"service_level"`

	// Type Type of campaign.
	Type CampaignManagerCampaignType `json:"type"`
}

// PutCampaignsIdActionsJSONBody defines parameters for PutCampaignsIdActions.
type PutCampaignsIdActionsJSONBody struct {
	Actions []FlowManagerAction `json:"actions"`
}

// GetCampaignsIdCampaigncallsParams defines parameters for GetCampaignsIdCampaigncalls.
type GetCampaignsIdCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PutCampaignsIdNextCampaignIdJSONBody defines parameters for PutCampaignsIdNextCampaignId.
type PutCampaignsIdNextCampaignIdJSONBody struct {
	// NextCampaignId The next campaign's id.
	NextCampaignId string `json:"next_campaign_id"`
}

// PutCampaignsIdResourceInfoJSONBody defines parameters for PutCampaignsIdResourceInfo.
type PutCampaignsIdResourceInfoJSONBody struct {
	// NextCampaignId next campaign's id.
	NextCampaignId string `json:"next_campaign_id"`

	// OutdialId outplan's id.
	OutdialId string `json:"outdial_id"`

	// OutplanId outplan's id.
	OutplanId string `json:"outplan_id"`

	// QueueId queue's id.
	QueueId string `json:"queue_id"`
}

// PutCampaignsIdServiceLevelJSONBody defines parameters for PutCampaignsIdServiceLevel.
type PutCampaignsIdServiceLevelJSONBody struct {
	// ServiceLevel The campaign's service level.
	ServiceLevel int `json:"service_level"`
}

// PutCampaignsIdStatusJSONBody defines parameters for PutCampaignsIdStatus.
type PutCampaignsIdStatusJSONBody struct {
	// Status Status of the campaign.
	Status CampaignManagerCampaignStatus `json:"status"`
}

// GetChatbotcallsParams defines parameters for GetChatbotcalls.
type GetChatbotcallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetChatbotsParams defines parameters for GetChatbots.
type GetChatbotsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatbotsJSONBody defines parameters for PostChatbots.
type PostChatbotsJSONBody struct {
	Detail string `json:"detail"`

	// EngineType Type of engine used by the chatbot.
	EngineType ChatbotManagerChatbotEngineType `json:"engine_type"`
	InitPrompt string                          `json:"init_prompt"`
	Name       string                          `json:"name"`
}

// PutChatbotsIdJSONBody defines parameters for PutChatbotsId.
type PutChatbotsIdJSONBody struct {
	Detail string `json:"detail"`

	// EngineType Type of engine used by the chatbot.
	EngineType ChatbotManagerChatbotEngineType `json:"engine_type"`
	InitPrompt string                          `json:"init_prompt"`
	Name       string                          `json:"name"`
}

// GetChatmessagesParams defines parameters for GetChatmessages.
type GetChatmessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatId The chat id.
	ChatId string `form:"chat_id" json:"chat_id"`
}

// PostChatmessagesJSONBody defines parameters for PostChatmessages.
type PostChatmessagesJSONBody struct {
	ChatId string              `json:"chat_id"`
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source CommonAddress `json:"source"`
	Text   string        `json:"text"`

	// Type Type of the message chat.
	Type ChatManagerMessagechatType `json:"type"`
}

// GetChatroommessagesParams defines parameters for GetChatroommessages.
type GetChatroommessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatroomId The ID of the chatroom
	ChatroomId string `form:"chatroom_id" json:"chatroom_id"`
}

// PostChatroommessagesJSONBody defines parameters for PostChatroommessages.
type PostChatroommessagesJSONBody struct {
	// ChatroomId ID of the chatroom.
	ChatroomId string `json:"chatroom_id"`

	// Medias List of media URLs.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Text Text of the message.
	Text string `json:"text"`
}

// GetChatroomsParams defines parameters for GetChatrooms.
type GetChatroomsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// OwnerId The ID of the chatroom owner.
	OwnerId string `form:"owner_id" json:"owner_id"`
}

// PostChatroomsJSONBody defines parameters for PostChatrooms.
type PostChatroomsJSONBody struct {
	// Detail Additional details of the chatroom.
	Detail string `json:"detail"`

	// Name The name of the chatroom.
	Name string `json:"name"`

	// ParticipantIds The ID of the participant.
	ParticipantIds []string `json:"participant_ids"`
}

// PutChatroomsIdJSONBody defines parameters for PutChatroomsId.
type PutChatroomsIdJSONBody struct {
	// Detail The new details of the chatroom.
	Detail string `json:"detail"`

	// Name The new name of the chatroom.
	Name string `json:"name"`
}

// GetChatsParams defines parameters for GetChats.
type GetChatsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatsJSONBody defines parameters for PostChats.
type PostChatsJSONBody struct {
	Detail         string   `json:"detail"`
	Name           string   `json:"name"`
	OwnerId        string   `json:"owner_id"`
	ParticipantIds []string `json:"participant_ids"`

	// Type Type of the chat.
	Type ChatManagerChatType `json:"type"`
}

// PutChatsIdJSONBody defines parameters for PutChatsId.
type PutChatsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// PostChatsIdParticipantIdsJSONBody defines parameters for PostChatsIdParticipantIds.
type PostChatsIdParticipantIdsJSONBody struct {
	ParticipantId string `json:"participant_id"`
}

// PutChatsIdRoomOwnerIdJSONBody defines parameters for PutChatsIdRoomOwnerId.
type PutChatsIdRoomOwnerIdJSONBody struct {
	RoomOwnerId string `json:"room_owner_id"`
}

// GetConferencecallsParams defines parameters for GetConferencecalls.
type GetConferencecallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetConferencesParams defines parameters for GetConferences.
type GetConferencesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConferencesJSONBody defines parameters for PostConferences.
type PostConferencesJSONBody struct {
	Data        map[string]interface{} `json:"data"`
	Detail      string                 `json:"detail"`
	Name        string                 `json:"name"`
	PostActions []FlowManagerAction    `json:"post_actions"`
	PreActions  []FlowManagerAction    `json:"pre_actions"`
	Timeout     int                    `json:"timeout"`

	// Type Types of conferences.
	Type ConferenceManagerConferenceType `json:"type"`
}

// PutConferencesIdJSONBody defines parameters for PutConferencesId.
type PutConferencesIdJSONBody struct {
	Detail      string              `json:"detail"`
	Name        string              `json:"name"`
	PostActions []FlowManagerAction `json:"post_actions"`
	PreActions  []FlowManagerAction `json:"pre_actions"`
	Timeout     int                 `json:"timeout"`
}

// GetConferencesIdMediaStreamParams defines parameters for GetConferencesIdMediaStream.
type GetConferencesIdMediaStreamParams struct {
	// Encapsulation The encapsulation for media stream.
	Encapsulation string `form:"encapsulation" json:"encapsulation"`
}

// PostConferencesIdTranscribeStartJSONBody defines parameters for PostConferencesIdTranscribeStart.
type PostConferencesIdTranscribeStartJSONBody struct {
	// Language The language for transcription.
	Language string `json:"language"`
}

// PostAccesskeysJSONRequestBody defines body for PostAccesskeys for application/json ContentType.
type PostAccesskeysJSONRequestBody PostAccesskeysJSONBody

// PutAccesskeysIdJSONRequestBody defines body for PutAccesskeysId for application/json ContentType.
type PutAccesskeysIdJSONRequestBody PutAccesskeysIdJSONBody

// PostActiveflowsJSONRequestBody defines body for PostActiveflows for application/json ContentType.
type PostActiveflowsJSONRequestBody PostActiveflowsJSONBody

// PostAgentsJSONRequestBody defines body for PostAgents for application/json ContentType.
type PostAgentsJSONRequestBody PostAgentsJSONBody

// PutAgentsIdJSONRequestBody defines body for PutAgentsId for application/json ContentType.
type PutAgentsIdJSONRequestBody PutAgentsIdJSONBody

// PutAgentsIdAddressesJSONRequestBody defines body for PutAgentsIdAddresses for application/json ContentType.
type PutAgentsIdAddressesJSONRequestBody PutAgentsIdAddressesJSONBody

// PutAgentsIdPasswordJSONRequestBody defines body for PutAgentsIdPassword for application/json ContentType.
type PutAgentsIdPasswordJSONRequestBody PutAgentsIdPasswordJSONBody

// PutAgentsIdPermissionJSONRequestBody defines body for PutAgentsIdPermission for application/json ContentType.
type PutAgentsIdPermissionJSONRequestBody PutAgentsIdPermissionJSONBody

// PutAgentsIdStatusJSONRequestBody defines body for PutAgentsIdStatus for application/json ContentType.
type PutAgentsIdStatusJSONRequestBody PutAgentsIdStatusJSONBody

// PutAgentsIdTagIdsJSONRequestBody defines body for PutAgentsIdTagIds for application/json ContentType.
type PutAgentsIdTagIdsJSONRequestBody PutAgentsIdTagIdsJSONBody

// PostBillingAccountsJSONRequestBody defines body for PostBillingAccounts for application/json ContentType.
type PostBillingAccountsJSONRequestBody PostBillingAccountsJSONBody

// PutBillingAccountsIdJSONRequestBody defines body for PutBillingAccountsId for application/json ContentType.
type PutBillingAccountsIdJSONRequestBody PutBillingAccountsIdJSONBody

// PostBillingAccountsIdBalanceAddForceJSONRequestBody defines body for PostBillingAccountsIdBalanceAddForce for application/json ContentType.
type PostBillingAccountsIdBalanceAddForceJSONRequestBody PostBillingAccountsIdBalanceAddForceJSONBody

// PostBillingAccountsIdBalanceSubtractForceJSONRequestBody defines body for PostBillingAccountsIdBalanceSubtractForce for application/json ContentType.
type PostBillingAccountsIdBalanceSubtractForceJSONRequestBody PostBillingAccountsIdBalanceSubtractForceJSONBody

// PutBillingAccountsIdPaymentInfoJSONRequestBody defines body for PutBillingAccountsIdPaymentInfo for application/json ContentType.
type PutBillingAccountsIdPaymentInfoJSONRequestBody PutBillingAccountsIdPaymentInfoJSONBody

// PostCallsJSONRequestBody defines body for PostCalls for application/json ContentType.
type PostCallsJSONRequestBody PostCallsJSONBody

// DeleteCallsIdMuteJSONRequestBody defines body for DeleteCallsIdMute for application/json ContentType.
type DeleteCallsIdMuteJSONRequestBody DeleteCallsIdMuteJSONBody

// PostCallsIdMuteJSONRequestBody defines body for PostCallsIdMute for application/json ContentType.
type PostCallsIdMuteJSONRequestBody PostCallsIdMuteJSONBody

// PostCallsIdTalkJSONRequestBody defines body for PostCallsIdTalk for application/json ContentType.
type PostCallsIdTalkJSONRequestBody PostCallsIdTalkJSONBody

// PostCampaignsJSONRequestBody defines body for PostCampaigns for application/json ContentType.
type PostCampaignsJSONRequestBody PostCampaignsJSONBody

// PutCampaignsIdJSONRequestBody defines body for PutCampaignsId for application/json ContentType.
type PutCampaignsIdJSONRequestBody PutCampaignsIdJSONBody

// PutCampaignsIdActionsJSONRequestBody defines body for PutCampaignsIdActions for application/json ContentType.
type PutCampaignsIdActionsJSONRequestBody PutCampaignsIdActionsJSONBody

// PutCampaignsIdNextCampaignIdJSONRequestBody defines body for PutCampaignsIdNextCampaignId for application/json ContentType.
type PutCampaignsIdNextCampaignIdJSONRequestBody PutCampaignsIdNextCampaignIdJSONBody

// PutCampaignsIdResourceInfoJSONRequestBody defines body for PutCampaignsIdResourceInfo for application/json ContentType.
type PutCampaignsIdResourceInfoJSONRequestBody PutCampaignsIdResourceInfoJSONBody

// PutCampaignsIdServiceLevelJSONRequestBody defines body for PutCampaignsIdServiceLevel for application/json ContentType.
type PutCampaignsIdServiceLevelJSONRequestBody PutCampaignsIdServiceLevelJSONBody

// PutCampaignsIdStatusJSONRequestBody defines body for PutCampaignsIdStatus for application/json ContentType.
type PutCampaignsIdStatusJSONRequestBody PutCampaignsIdStatusJSONBody

// PostChatbotsJSONRequestBody defines body for PostChatbots for application/json ContentType.
type PostChatbotsJSONRequestBody PostChatbotsJSONBody

// PutChatbotsIdJSONRequestBody defines body for PutChatbotsId for application/json ContentType.
type PutChatbotsIdJSONRequestBody PutChatbotsIdJSONBody

// PostChatmessagesJSONRequestBody defines body for PostChatmessages for application/json ContentType.
type PostChatmessagesJSONRequestBody PostChatmessagesJSONBody

// PostChatroommessagesJSONRequestBody defines body for PostChatroommessages for application/json ContentType.
type PostChatroommessagesJSONRequestBody PostChatroommessagesJSONBody

// PostChatroomsJSONRequestBody defines body for PostChatrooms for application/json ContentType.
type PostChatroomsJSONRequestBody PostChatroomsJSONBody

// PutChatroomsIdJSONRequestBody defines body for PutChatroomsId for application/json ContentType.
type PutChatroomsIdJSONRequestBody PutChatroomsIdJSONBody

// PostChatsJSONRequestBody defines body for PostChats for application/json ContentType.
type PostChatsJSONRequestBody PostChatsJSONBody

// PutChatsIdJSONRequestBody defines body for PutChatsId for application/json ContentType.
type PutChatsIdJSONRequestBody PutChatsIdJSONBody

// PostChatsIdParticipantIdsJSONRequestBody defines body for PostChatsIdParticipantIds for application/json ContentType.
type PostChatsIdParticipantIdsJSONRequestBody PostChatsIdParticipantIdsJSONBody

// PutChatsIdRoomOwnerIdJSONRequestBody defines body for PutChatsIdRoomOwnerId for application/json ContentType.
type PutChatsIdRoomOwnerIdJSONRequestBody PutChatsIdRoomOwnerIdJSONBody

// PostConferencesJSONRequestBody defines body for PostConferences for application/json ContentType.
type PostConferencesJSONRequestBody PostConferencesJSONBody

// PutConferencesIdJSONRequestBody defines body for PutConferencesId for application/json ContentType.
type PutConferencesIdJSONRequestBody PutConferencesIdJSONBody

// PostConferencesIdTranscribeStartJSONRequestBody defines body for PostConferencesIdTranscribeStart for application/json ContentType.
type PostConferencesIdTranscribeStartJSONRequestBody PostConferencesIdTranscribeStartJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccesskeys request
	GetAccesskeys(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccesskeysWithBody request with any body
	PostAccesskeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccesskeys(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccesskeysId request
	DeleteAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccesskeysId request
	GetAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccesskeysIdWithBody request with any body
	PutAccesskeysIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccesskeysId(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveflows request
	GetActiveflows(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActiveflowsWithBody request with any body
	PostActiveflowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActiveflows(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActiveflowsId request
	DeleteActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveflowsId request
	GetActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActiveflowsIdStop request
	PostActiveflowsIdStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgents request
	GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAgentsWithBody request with any body
	PostAgentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAgents(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgentsId request
	DeleteAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentsId request
	GetAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdWithBody request with any body
	PutAgentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsId(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdAddressesWithBody request with any body
	PutAgentsIdAddressesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdAddresses(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdPasswordWithBody request with any body
	PutAgentsIdPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdPassword(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdPermissionWithBody request with any body
	PutAgentsIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdPermission(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdStatusWithBody request with any body
	PutAgentsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdStatus(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdTagIdsWithBody request with any body
	PutAgentsIdTagIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdTagIds(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvailableNumbers request
	GetAvailableNumbers(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingAccounts request
	GetBillingAccounts(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingAccountsWithBody request with any body
	PostBillingAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingAccounts(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBillingAccountsId request
	DeleteBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingAccountsId request
	GetBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBillingAccountsIdWithBody request with any body
	PutBillingAccountsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBillingAccountsId(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingAccountsIdBalanceAddForceWithBody request with any body
	PostBillingAccountsIdBalanceAddForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingAccountsIdBalanceAddForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingAccountsIdBalanceSubtractForceWithBody request with any body
	PostBillingAccountsIdBalanceSubtractForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingAccountsIdBalanceSubtractForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBillingAccountsIdPaymentInfoWithBody request with any body
	PutBillingAccountsIdPaymentInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBillingAccountsIdPaymentInfo(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillings request
	GetBillings(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCalls request
	GetCalls(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsWithBody request with any body
	PostCallsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCalls(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsId request
	DeleteCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCallsId request
	GetCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdHangup request
	PostCallsIdHangup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdHold request
	DeleteCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdHold request
	PostCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCallsIdMediaStream request
	GetCallsIdMediaStream(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdMoh request
	DeleteCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdMoh request
	PostCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdMuteWithBody request with any body
	DeleteCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCallsIdMute(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdMuteWithBody request with any body
	PostCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCallsIdMute(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdSilence request
	DeleteCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdSilence request
	PostCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdTalkWithBody request with any body
	PostCallsIdTalkWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCallsIdTalk(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaigncalls request
	GetCampaigncalls(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCampaigncallsId request
	DeleteCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaigncallsId request
	GetCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaigns request
	GetCampaigns(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCampaignsWithBody request with any body
	PostCampaignsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCampaigns(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCampaignsId request
	DeleteCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsId request
	GetCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdWithBody request with any body
	PutCampaignsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsId(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdActionsWithBody request with any body
	PutCampaignsIdActionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdActions(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsIdCampaigncalls request
	GetCampaignsIdCampaigncalls(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdNextCampaignIdWithBody request with any body
	PutCampaignsIdNextCampaignIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdNextCampaignId(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdResourceInfoWithBody request with any body
	PutCampaignsIdResourceInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdResourceInfo(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdServiceLevelWithBody request with any body
	PutCampaignsIdServiceLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdServiceLevel(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdStatusWithBody request with any body
	PutCampaignsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdStatus(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbotcalls request
	GetChatbotcalls(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatbotcallsId request
	DeleteChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbotcallsId request
	GetChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbots request
	GetChatbots(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatbotsWithBody request with any body
	PostChatbotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatbots(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatbotsId request
	DeleteChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbotsId request
	GetChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatbotsIdWithBody request with any body
	PutChatbotsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatbotsId(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatmessages request
	GetChatmessages(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatmessagesWithBody request with any body
	PostChatmessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatmessages(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatmessagesId request
	DeleteChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatmessagesId request
	GetChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatroommessages request
	GetChatroommessages(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatroommessagesWithBody request with any body
	PostChatroommessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatroommessages(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatroommessagesId request
	DeleteChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatroommessagesId request
	GetChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatrooms request
	GetChatrooms(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatroomsWithBody request with any body
	PostChatroomsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatrooms(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatroomsId request
	DeleteChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatroomsId request
	GetChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatroomsIdWithBody request with any body
	PutChatroomsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatroomsId(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChats request
	GetChats(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatsWithBody request with any body
	PostChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChats(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatsId request
	DeleteChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatsId request
	GetChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatsIdWithBody request with any body
	PutChatsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatsId(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatsIdParticipantIdsWithBody request with any body
	PostChatsIdParticipantIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatsIdParticipantIds(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatsIdParticipantIdsParticipantId request
	DeleteChatsIdParticipantIdsParticipantId(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatsIdRoomOwnerIdWithBody request with any body
	PutChatsIdRoomOwnerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatsIdRoomOwnerId(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencecalls request
	GetConferencecalls(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConferencecallsId request
	DeleteConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencecallsId request
	GetConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferences request
	GetConferences(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesWithBody request with any body
	PostConferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConferences(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConferencesId request
	DeleteConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencesId request
	GetConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConferencesIdWithBody request with any body
	PutConferencesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConferencesId(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencesIdMediaStream request
	GetConferencesIdMediaStream(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdRecordingStart request
	PostConferencesIdRecordingStart(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdRecordingStop request
	PostConferencesIdRecordingStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdTranscribeStartWithBody request with any body
	PostConferencesIdTranscribeStartWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConferencesIdTranscribeStart(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdTranscribeStop request
	PostConferencesIdTranscribeStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccesskeys(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccesskeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccesskeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccesskeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccesskeys(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccesskeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccesskeysIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccesskeysIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccesskeysIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccesskeysIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccesskeysId(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccesskeysIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveflows(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActiveflowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActiveflowsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActiveflows(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActiveflowsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActiveflowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveflowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActiveflowsIdStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActiveflowsIdStopRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAgentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAgentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAgents(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAgentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsId(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdAddressesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdAddressesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdAddresses(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdAddressesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPasswordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPassword(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPasswordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPermissionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPermission(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPermissionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdStatus(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdTagIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdTagIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdTagIds(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdTagIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvailableNumbers(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailableNumbersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingAccounts(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccounts(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBillingAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsId(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceAddForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceAddForceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceAddForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceAddForceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceSubtractForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceSubtractForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceSubtractForceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsIdPaymentInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdPaymentInfoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsIdPaymentInfo(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdPaymentInfoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillings(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCalls(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCalls(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdHangup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdHangupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdHoldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdHoldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallsIdMediaStream(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallsIdMediaStreamRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdMohRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdMohRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdMuteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdMute(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdMuteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdMuteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdMute(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdMuteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdSilenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdSilenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdTalkWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdTalkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdTalk(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdTalkRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigncalls(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaigncallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCampaigncallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaigncallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigns(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaignsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaigns(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCampaignsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsId(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdActionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdActionsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdActions(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdActionsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsIdCampaigncalls(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsIdCampaigncallsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdNextCampaignIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdNextCampaignIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdNextCampaignId(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdNextCampaignIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdResourceInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdResourceInfoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdResourceInfo(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdResourceInfoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdServiceLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdServiceLevelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdServiceLevel(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdServiceLevelRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdStatus(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbotcalls(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotcallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatbotcallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotcallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbots(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatbotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatbotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatbots(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatbotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatbotsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatbotsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatbotsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatbotsId(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatbotsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatmessages(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatmessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatmessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatmessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatmessages(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatmessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatmessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatmessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatroommessages(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroommessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatroommessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroommessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatroommessages(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroommessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatroommessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroommessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatrooms(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroomsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatroomsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroomsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatrooms(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroomsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatroomsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroomsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatroomsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatroomsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatroomsId(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatroomsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChats(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChats(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsId(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatsIdParticipantIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsIdParticipantIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatsIdParticipantIds(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsIdParticipantIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatsIdParticipantIdsParticipantId(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatsIdParticipantIdsParticipantIdRequest(c.Server, id, participantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsIdRoomOwnerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRoomOwnerIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsIdRoomOwnerId(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRoomOwnerIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencecalls(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencecallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConferencecallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencecallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferences(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferences(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConferencesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConferencesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConferencesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConferencesId(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConferencesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencesIdMediaStream(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencesIdMediaStreamRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdRecordingStart(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdRecordingStartRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdRecordingStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdRecordingStopRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdTranscribeStartWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdTranscribeStartRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdTranscribeStart(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdTranscribeStartRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdTranscribeStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdTranscribeStopRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccesskeysRequest generates requests for GetAccesskeys
func NewGetAccesskeysRequest(server string, params *GetAccesskeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccesskeysRequest calls the generic PostAccesskeys builder with application/json body
func NewPostAccesskeysRequest(server string, body PostAccesskeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccesskeysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccesskeysRequestWithBody generates requests for PostAccesskeys with any type of body
func NewPostAccesskeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccesskeysIdRequest generates requests for DeleteAccesskeysId
func NewDeleteAccesskeysIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccesskeysIdRequest generates requests for GetAccesskeysId
func NewGetAccesskeysIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAccesskeysIdRequest calls the generic PutAccesskeysId builder with application/json body
func NewPutAccesskeysIdRequest(server string, id string, body PutAccesskeysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccesskeysIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAccesskeysIdRequestWithBody generates requests for PutAccesskeysId with any type of body
func NewPutAccesskeysIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActiveflowsRequest generates requests for GetActiveflows
func NewGetActiveflowsRequest(server string, params *GetActiveflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActiveflowsRequest calls the generic PostActiveflows builder with application/json body
func NewPostActiveflowsRequest(server string, body PostActiveflowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActiveflowsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostActiveflowsRequestWithBody generates requests for PostActiveflows with any type of body
func NewPostActiveflowsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteActiveflowsIdRequest generates requests for DeleteActiveflowsId
func NewDeleteActiveflowsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActiveflowsIdRequest generates requests for GetActiveflowsId
func NewGetActiveflowsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActiveflowsIdStopRequest generates requests for PostActiveflowsIdStop
func NewPostActiveflowsIdStopRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentsRequest generates requests for GetAgents
func NewGetAgentsRequest(server string, params *GetAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag_ids", runtime.ParamLocationQuery, *params.TagIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAgentsRequest calls the generic PostAgents builder with application/json body
func NewPostAgentsRequest(server string, body PostAgentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAgentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAgentsRequestWithBody generates requests for PostAgents with any type of body
func NewPostAgentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAgentsIdRequest generates requests for DeleteAgentsId
func NewDeleteAgentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentsIdRequest generates requests for GetAgentsId
func NewGetAgentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAgentsIdRequest calls the generic PutAgentsId builder with application/json body
func NewPutAgentsIdRequest(server string, id string, body PutAgentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdRequestWithBody generates requests for PutAgentsId with any type of body
func NewPutAgentsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdAddressesRequest calls the generic PutAgentsIdAddresses builder with application/json body
func NewPutAgentsIdAddressesRequest(server string, id string, body PutAgentsIdAddressesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdAddressesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdAddressesRequestWithBody generates requests for PutAgentsIdAddresses with any type of body
func NewPutAgentsIdAddressesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdPasswordRequest calls the generic PutAgentsIdPassword builder with application/json body
func NewPutAgentsIdPasswordRequest(server string, id string, body PutAgentsIdPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdPasswordRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdPasswordRequestWithBody generates requests for PutAgentsIdPassword with any type of body
func NewPutAgentsIdPasswordRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdPermissionRequest calls the generic PutAgentsIdPermission builder with application/json body
func NewPutAgentsIdPermissionRequest(server string, id string, body PutAgentsIdPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdPermissionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdPermissionRequestWithBody generates requests for PutAgentsIdPermission with any type of body
func NewPutAgentsIdPermissionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/permission", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdStatusRequest calls the generic PutAgentsIdStatus builder with application/json body
func NewPutAgentsIdStatusRequest(server string, id string, body PutAgentsIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdStatusRequestWithBody generates requests for PutAgentsIdStatus with any type of body
func NewPutAgentsIdStatusRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdTagIdsRequest calls the generic PutAgentsIdTagIds builder with application/json body
func NewPutAgentsIdTagIdsRequest(server string, id string, body PutAgentsIdTagIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdTagIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdTagIdsRequestWithBody generates requests for PutAgentsIdTagIds with any type of body
func NewPutAgentsIdTagIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/tag_ids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvailableNumbersRequest generates requests for GetAvailableNumbers
func NewGetAvailableNumbersRequest(server string, params *GetAvailableNumbersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available_numbers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingAccountsRequest generates requests for GetBillingAccounts
func NewGetBillingAccountsRequest(server string, params *GetBillingAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBillingAccountsRequest calls the generic PostBillingAccounts builder with application/json body
func NewPostBillingAccountsRequest(server string, body PostBillingAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBillingAccountsRequestWithBody generates requests for PostBillingAccounts with any type of body
func NewPostBillingAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBillingAccountsIdRequest generates requests for DeleteBillingAccountsId
func NewDeleteBillingAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingAccountsIdRequest generates requests for GetBillingAccountsId
func NewGetBillingAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBillingAccountsIdRequest calls the generic PutBillingAccountsId builder with application/json body
func NewPutBillingAccountsIdRequest(server string, id string, body PutBillingAccountsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBillingAccountsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBillingAccountsIdRequestWithBody generates requests for PutBillingAccountsId with any type of body
func NewPutBillingAccountsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBillingAccountsIdBalanceAddForceRequest calls the generic PostBillingAccountsIdBalanceAddForce builder with application/json body
func NewPostBillingAccountsIdBalanceAddForceRequest(server string, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingAccountsIdBalanceAddForceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBillingAccountsIdBalanceAddForceRequestWithBody generates requests for PostBillingAccountsIdBalanceAddForce with any type of body
func NewPostBillingAccountsIdBalanceAddForceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s/balance_add_force", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBillingAccountsIdBalanceSubtractForceRequest calls the generic PostBillingAccountsIdBalanceSubtractForce builder with application/json body
func NewPostBillingAccountsIdBalanceSubtractForceRequest(server string, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody generates requests for PostBillingAccountsIdBalanceSubtractForce with any type of body
func NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s/balance_subtract_force", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBillingAccountsIdPaymentInfoRequest calls the generic PutBillingAccountsIdPaymentInfo builder with application/json body
func NewPutBillingAccountsIdPaymentInfoRequest(server string, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBillingAccountsIdPaymentInfoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBillingAccountsIdPaymentInfoRequestWithBody generates requests for PutBillingAccountsIdPaymentInfo with any type of body
func NewPutBillingAccountsIdPaymentInfoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s/payment_info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBillingsRequest generates requests for GetBillings
func NewGetBillingsRequest(server string, params *GetBillingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallsRequest generates requests for GetCalls
func NewGetCallsRequest(server string, params *GetCallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsRequest calls the generic PostCalls builder with application/json body
func NewPostCallsRequest(server string, body PostCallsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCallsRequestWithBody generates requests for PostCalls with any type of body
func NewPostCallsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCallsIdRequest generates requests for DeleteCallsId
func NewDeleteCallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallsIdRequest generates requests for GetCallsId
func NewGetCallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdHangupRequest generates requests for PostCallsIdHangup
func NewPostCallsIdHangupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/hangup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCallsIdHoldRequest generates requests for DeleteCallsIdHold
func NewDeleteCallsIdHoldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/hold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdHoldRequest generates requests for PostCallsIdHold
func NewPostCallsIdHoldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/hold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallsIdMediaStreamRequest generates requests for GetCallsIdMediaStream
func NewGetCallsIdMediaStreamRequest(server string, id string, params *GetCallsIdMediaStreamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/media_stream", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Encapsulation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "encapsulation", runtime.ParamLocationQuery, *params.Encapsulation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCallsIdMohRequest generates requests for DeleteCallsIdMoh
func NewDeleteCallsIdMohRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/moh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdMohRequest generates requests for PostCallsIdMoh
func NewPostCallsIdMohRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/moh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCallsIdMuteRequest calls the generic DeleteCallsIdMute builder with application/json body
func NewDeleteCallsIdMuteRequest(server string, id string, body DeleteCallsIdMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCallsIdMuteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteCallsIdMuteRequestWithBody generates requests for DeleteCallsIdMute with any type of body
func NewDeleteCallsIdMuteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCallsIdMuteRequest calls the generic PostCallsIdMute builder with application/json body
func NewPostCallsIdMuteRequest(server string, id string, body PostCallsIdMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallsIdMuteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCallsIdMuteRequestWithBody generates requests for PostCallsIdMute with any type of body
func NewPostCallsIdMuteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCallsIdSilenceRequest generates requests for DeleteCallsIdSilence
func NewDeleteCallsIdSilenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/silence", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdSilenceRequest generates requests for PostCallsIdSilence
func NewPostCallsIdSilenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/silence", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdTalkRequest calls the generic PostCallsIdTalk builder with application/json body
func NewPostCallsIdTalkRequest(server string, id string, body PostCallsIdTalkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallsIdTalkRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCallsIdTalkRequestWithBody generates requests for PostCallsIdTalk with any type of body
func NewPostCallsIdTalkRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/talk", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCampaigncallsRequest generates requests for GetCampaigncalls
func NewGetCampaigncallsRequest(server string, params *GetCampaigncallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigncalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCampaigncallsIdRequest generates requests for DeleteCampaigncallsId
func NewDeleteCampaigncallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigncalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCampaigncallsIdRequest generates requests for GetCampaigncallsId
func NewGetCampaigncallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigncalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCampaignsRequest generates requests for GetCampaigns
func NewGetCampaignsRequest(server string, params *GetCampaignsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCampaignsRequest calls the generic PostCampaigns builder with application/json body
func NewPostCampaignsRequest(server string, body PostCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCampaignsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCampaignsRequestWithBody generates requests for PostCampaigns with any type of body
func NewPostCampaignsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCampaignsIdRequest generates requests for DeleteCampaignsId
func NewDeleteCampaignsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCampaignsIdRequest generates requests for GetCampaignsId
func NewGetCampaignsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCampaignsIdRequest calls the generic PutCampaignsId builder with application/json body
func NewPutCampaignsIdRequest(server string, id string, body PutCampaignsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdRequestWithBody generates requests for PutCampaignsId with any type of body
func NewPutCampaignsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdActionsRequest calls the generic PutCampaignsIdActions builder with application/json body
func NewPutCampaignsIdActionsRequest(server string, id string, body PutCampaignsIdActionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdActionsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdActionsRequestWithBody generates requests for PutCampaignsIdActions with any type of body
func NewPutCampaignsIdActionsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCampaignsIdCampaigncallsRequest generates requests for GetCampaignsIdCampaigncalls
func NewGetCampaignsIdCampaigncallsRequest(server string, id string, params *GetCampaignsIdCampaigncallsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/campaigncalls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCampaignsIdNextCampaignIdRequest calls the generic PutCampaignsIdNextCampaignId builder with application/json body
func NewPutCampaignsIdNextCampaignIdRequest(server string, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdNextCampaignIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdNextCampaignIdRequestWithBody generates requests for PutCampaignsIdNextCampaignId with any type of body
func NewPutCampaignsIdNextCampaignIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/next_campaign_id", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdResourceInfoRequest calls the generic PutCampaignsIdResourceInfo builder with application/json body
func NewPutCampaignsIdResourceInfoRequest(server string, id string, body PutCampaignsIdResourceInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdResourceInfoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdResourceInfoRequestWithBody generates requests for PutCampaignsIdResourceInfo with any type of body
func NewPutCampaignsIdResourceInfoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/resource_info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdServiceLevelRequest calls the generic PutCampaignsIdServiceLevel builder with application/json body
func NewPutCampaignsIdServiceLevelRequest(server string, id string, body PutCampaignsIdServiceLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdServiceLevelRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdServiceLevelRequestWithBody generates requests for PutCampaignsIdServiceLevel with any type of body
func NewPutCampaignsIdServiceLevelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/service_level", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdStatusRequest calls the generic PutCampaignsIdStatus builder with application/json body
func NewPutCampaignsIdStatusRequest(server string, id string, body PutCampaignsIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdStatusRequestWithBody generates requests for PutCampaignsIdStatus with any type of body
func NewPutCampaignsIdStatusRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChatbotcallsRequest generates requests for GetChatbotcalls
func NewGetChatbotcallsRequest(server string, params *GetChatbotcallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbotcalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteChatbotcallsIdRequest generates requests for DeleteChatbotcallsId
func NewDeleteChatbotcallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbotcalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatbotcallsIdRequest generates requests for GetChatbotcallsId
func NewGetChatbotcallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbotcalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatbotsRequest generates requests for GetChatbots
func NewGetChatbotsRequest(server string, params *GetChatbotsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatbotsRequest calls the generic PostChatbots builder with application/json body
func NewPostChatbotsRequest(server string, body PostChatbotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatbotsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatbotsRequestWithBody generates requests for PostChatbots with any type of body
func NewPostChatbotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatbotsIdRequest generates requests for DeleteChatbotsId
func NewDeleteChatbotsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatbotsIdRequest generates requests for GetChatbotsId
func NewGetChatbotsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatbotsIdRequest calls the generic PutChatbotsId builder with application/json body
func NewPutChatbotsIdRequest(server string, id string, body PutChatbotsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatbotsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatbotsIdRequestWithBody generates requests for PutChatbotsId with any type of body
func NewPutChatbotsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChatmessagesRequest generates requests for GetChatmessages
func NewGetChatmessagesRequest(server string, params *GetChatmessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chat_id", runtime.ParamLocationQuery, params.ChatId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatmessagesRequest calls the generic PostChatmessages builder with application/json body
func NewPostChatmessagesRequest(server string, body PostChatmessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatmessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatmessagesRequestWithBody generates requests for PostChatmessages with any type of body
func NewPostChatmessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatmessagesIdRequest generates requests for DeleteChatmessagesId
func NewDeleteChatmessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatmessagesIdRequest generates requests for GetChatmessagesId
func NewGetChatmessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroommessagesRequest generates requests for GetChatroommessages
func NewGetChatroommessagesRequest(server string, params *GetChatroommessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chatroom_id", runtime.ParamLocationQuery, params.ChatroomId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatroommessagesRequest calls the generic PostChatroommessages builder with application/json body
func NewPostChatroommessagesRequest(server string, body PostChatroommessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatroommessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatroommessagesRequestWithBody generates requests for PostChatroommessages with any type of body
func NewPostChatroommessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatroommessagesIdRequest generates requests for DeleteChatroommessagesId
func NewDeleteChatroommessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroommessagesIdRequest generates requests for GetChatroommessagesId
func NewGetChatroommessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroomsRequest generates requests for GetChatrooms
func NewGetChatroomsRequest(server string, params *GetChatroomsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner_id", runtime.ParamLocationQuery, params.OwnerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatroomsRequest calls the generic PostChatrooms builder with application/json body
func NewPostChatroomsRequest(server string, body PostChatroomsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatroomsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatroomsRequestWithBody generates requests for PostChatrooms with any type of body
func NewPostChatroomsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatroomsIdRequest generates requests for DeleteChatroomsId
func NewDeleteChatroomsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroomsIdRequest generates requests for GetChatroomsId
func NewGetChatroomsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatroomsIdRequest calls the generic PutChatroomsId builder with application/json body
func NewPutChatroomsIdRequest(server string, id string, body PutChatroomsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatroomsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatroomsIdRequestWithBody generates requests for PutChatroomsId with any type of body
func NewPutChatroomsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChatsRequest generates requests for GetChats
func NewGetChatsRequest(server string, params *GetChatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatsRequest calls the generic PostChats builder with application/json body
func NewPostChatsRequest(server string, body PostChatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatsRequestWithBody generates requests for PostChats with any type of body
func NewPostChatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatsIdRequest generates requests for DeleteChatsId
func NewDeleteChatsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatsIdRequest generates requests for GetChatsId
func NewGetChatsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatsIdRequest calls the generic PutChatsId builder with application/json body
func NewPutChatsIdRequest(server string, id string, body PutChatsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatsIdRequestWithBody generates requests for PutChatsId with any type of body
func NewPutChatsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChatsIdParticipantIdsRequest calls the generic PostChatsIdParticipantIds builder with application/json body
func NewPostChatsIdParticipantIdsRequest(server string, id string, body PostChatsIdParticipantIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatsIdParticipantIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostChatsIdParticipantIdsRequestWithBody generates requests for PostChatsIdParticipantIds with any type of body
func NewPostChatsIdParticipantIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s/participant_ids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatsIdParticipantIdsParticipantIdRequest generates requests for DeleteChatsIdParticipantIdsParticipantId
func NewDeleteChatsIdParticipantIdsParticipantIdRequest(server string, id string, participantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "participant_id", runtime.ParamLocationPath, participantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s/participant_ids/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatsIdRoomOwnerIdRequest calls the generic PutChatsIdRoomOwnerId builder with application/json body
func NewPutChatsIdRoomOwnerIdRequest(server string, id string, body PutChatsIdRoomOwnerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatsIdRoomOwnerIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatsIdRoomOwnerIdRequestWithBody generates requests for PutChatsIdRoomOwnerId with any type of body
func NewPutChatsIdRoomOwnerIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s/room_owner_id", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConferencecallsRequest generates requests for GetConferencecalls
func NewGetConferencecallsRequest(server string, params *GetConferencecallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferencecalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConferencecallsIdRequest generates requests for DeleteConferencecallsId
func NewDeleteConferencecallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferencecalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConferencecallsIdRequest generates requests for GetConferencecallsId
func NewGetConferencecallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferencecalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConferencesRequest generates requests for GetConferences
func NewGetConferencesRequest(server string, params *GetConferencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesRequest calls the generic PostConferences builder with application/json body
func NewPostConferencesRequest(server string, body PostConferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConferencesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConferencesRequestWithBody generates requests for PostConferences with any type of body
func NewPostConferencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConferencesIdRequest generates requests for DeleteConferencesId
func NewDeleteConferencesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConferencesIdRequest generates requests for GetConferencesId
func NewGetConferencesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutConferencesIdRequest calls the generic PutConferencesId builder with application/json body
func NewPutConferencesIdRequest(server string, id string, body PutConferencesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConferencesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutConferencesIdRequestWithBody generates requests for PutConferencesId with any type of body
func NewPutConferencesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConferencesIdMediaStreamRequest generates requests for GetConferencesIdMediaStream
func NewGetConferencesIdMediaStreamRequest(server string, id string, params *GetConferencesIdMediaStreamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/media_stream", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "encapsulation", runtime.ParamLocationQuery, params.Encapsulation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesIdRecordingStartRequest generates requests for PostConferencesIdRecordingStart
func NewPostConferencesIdRecordingStartRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/recording_start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesIdRecordingStopRequest generates requests for PostConferencesIdRecordingStop
func NewPostConferencesIdRecordingStopRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/recording_stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesIdTranscribeStartRequest calls the generic PostConferencesIdTranscribeStart builder with application/json body
func NewPostConferencesIdTranscribeStartRequest(server string, id string, body PostConferencesIdTranscribeStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConferencesIdTranscribeStartRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostConferencesIdTranscribeStartRequestWithBody generates requests for PostConferencesIdTranscribeStart with any type of body
func NewPostConferencesIdTranscribeStartRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/transcribe_start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostConferencesIdTranscribeStopRequest generates requests for PostConferencesIdTranscribeStop
func NewPostConferencesIdTranscribeStopRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/transcribe_stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccesskeysWithResponse request
	GetAccesskeysWithResponse(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*GetAccesskeysResponse, error)

	// PostAccesskeysWithBodyWithResponse request with any body
	PostAccesskeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error)

	PostAccesskeysWithResponse(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error)

	// DeleteAccesskeysIdWithResponse request
	DeleteAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAccesskeysIdResponse, error)

	// GetAccesskeysIdWithResponse request
	GetAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAccesskeysIdResponse, error)

	// PutAccesskeysIdWithBodyWithResponse request with any body
	PutAccesskeysIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error)

	PutAccesskeysIdWithResponse(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error)

	// GetActiveflowsWithResponse request
	GetActiveflowsWithResponse(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*GetActiveflowsResponse, error)

	// PostActiveflowsWithBodyWithResponse request with any body
	PostActiveflowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error)

	PostActiveflowsWithResponse(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error)

	// DeleteActiveflowsIdWithResponse request
	DeleteActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteActiveflowsIdResponse, error)

	// GetActiveflowsIdWithResponse request
	GetActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetActiveflowsIdResponse, error)

	// PostActiveflowsIdStopWithResponse request
	PostActiveflowsIdStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostActiveflowsIdStopResponse, error)

	// GetAgentsWithResponse request
	GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error)

	// PostAgentsWithBodyWithResponse request with any body
	PostAgentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error)

	PostAgentsWithResponse(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error)

	// DeleteAgentsIdWithResponse request
	DeleteAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAgentsIdResponse, error)

	// GetAgentsIdWithResponse request
	GetAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAgentsIdResponse, error)

	// PutAgentsIdWithBodyWithResponse request with any body
	PutAgentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error)

	PutAgentsIdWithResponse(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error)

	// PutAgentsIdAddressesWithBodyWithResponse request with any body
	PutAgentsIdAddressesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error)

	PutAgentsIdAddressesWithResponse(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error)

	// PutAgentsIdPasswordWithBodyWithResponse request with any body
	PutAgentsIdPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error)

	PutAgentsIdPasswordWithResponse(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error)

	// PutAgentsIdPermissionWithBodyWithResponse request with any body
	PutAgentsIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error)

	PutAgentsIdPermissionWithResponse(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error)

	// PutAgentsIdStatusWithBodyWithResponse request with any body
	PutAgentsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error)

	PutAgentsIdStatusWithResponse(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error)

	// PutAgentsIdTagIdsWithBodyWithResponse request with any body
	PutAgentsIdTagIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error)

	PutAgentsIdTagIdsWithResponse(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error)

	// GetAvailableNumbersWithResponse request
	GetAvailableNumbersWithResponse(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*GetAvailableNumbersResponse, error)

	// GetBillingAccountsWithResponse request
	GetBillingAccountsWithResponse(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*GetBillingAccountsResponse, error)

	// PostBillingAccountsWithBodyWithResponse request with any body
	PostBillingAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error)

	PostBillingAccountsWithResponse(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error)

	// DeleteBillingAccountsIdWithResponse request
	DeleteBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBillingAccountsIdResponse, error)

	// GetBillingAccountsIdWithResponse request
	GetBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBillingAccountsIdResponse, error)

	// PutBillingAccountsIdWithBodyWithResponse request with any body
	PutBillingAccountsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error)

	PutBillingAccountsIdWithResponse(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error)

	// PostBillingAccountsIdBalanceAddForceWithBodyWithResponse request with any body
	PostBillingAccountsIdBalanceAddForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error)

	PostBillingAccountsIdBalanceAddForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error)

	// PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse request with any body
	PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error)

	PostBillingAccountsIdBalanceSubtractForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error)

	// PutBillingAccountsIdPaymentInfoWithBodyWithResponse request with any body
	PutBillingAccountsIdPaymentInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error)

	PutBillingAccountsIdPaymentInfoWithResponse(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error)

	// GetBillingsWithResponse request
	GetBillingsWithResponse(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*GetBillingsResponse, error)

	// GetCallsWithResponse request
	GetCallsWithResponse(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*GetCallsResponse, error)

	// PostCallsWithBodyWithResponse request with any body
	PostCallsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsResponse, error)

	PostCallsWithResponse(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsResponse, error)

	// DeleteCallsIdWithResponse request
	DeleteCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdResponse, error)

	// GetCallsIdWithResponse request
	GetCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCallsIdResponse, error)

	// PostCallsIdHangupWithResponse request
	PostCallsIdHangupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHangupResponse, error)

	// DeleteCallsIdHoldWithResponse request
	DeleteCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdHoldResponse, error)

	// PostCallsIdHoldWithResponse request
	PostCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHoldResponse, error)

	// GetCallsIdMediaStreamWithResponse request
	GetCallsIdMediaStreamWithResponse(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetCallsIdMediaStreamResponse, error)

	// DeleteCallsIdMohWithResponse request
	DeleteCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdMohResponse, error)

	// PostCallsIdMohWithResponse request
	PostCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdMohResponse, error)

	// DeleteCallsIdMuteWithBodyWithResponse request with any body
	DeleteCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error)

	DeleteCallsIdMuteWithResponse(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error)

	// PostCallsIdMuteWithBodyWithResponse request with any body
	PostCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error)

	PostCallsIdMuteWithResponse(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error)

	// DeleteCallsIdSilenceWithResponse request
	DeleteCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdSilenceResponse, error)

	// PostCallsIdSilenceWithResponse request
	PostCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdSilenceResponse, error)

	// PostCallsIdTalkWithBodyWithResponse request with any body
	PostCallsIdTalkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error)

	PostCallsIdTalkWithResponse(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error)

	// GetCampaigncallsWithResponse request
	GetCampaigncallsWithResponse(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaigncallsResponse, error)

	// DeleteCampaigncallsIdWithResponse request
	DeleteCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaigncallsIdResponse, error)

	// GetCampaigncallsIdWithResponse request
	GetCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaigncallsIdResponse, error)

	// GetCampaignsWithResponse request
	GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error)

	// PostCampaignsWithBodyWithResponse request with any body
	PostCampaignsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error)

	PostCampaignsWithResponse(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error)

	// DeleteCampaignsIdWithResponse request
	DeleteCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error)

	// GetCampaignsIdWithResponse request
	GetCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error)

	// PutCampaignsIdWithBodyWithResponse request with any body
	PutCampaignsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error)

	PutCampaignsIdWithResponse(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error)

	// PutCampaignsIdActionsWithBodyWithResponse request with any body
	PutCampaignsIdActionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error)

	PutCampaignsIdActionsWithResponse(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error)

	// GetCampaignsIdCampaigncallsWithResponse request
	GetCampaignsIdCampaigncallsWithResponse(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaignsIdCampaigncallsResponse, error)

	// PutCampaignsIdNextCampaignIdWithBodyWithResponse request with any body
	PutCampaignsIdNextCampaignIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error)

	PutCampaignsIdNextCampaignIdWithResponse(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error)

	// PutCampaignsIdResourceInfoWithBodyWithResponse request with any body
	PutCampaignsIdResourceInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error)

	PutCampaignsIdResourceInfoWithResponse(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error)

	// PutCampaignsIdServiceLevelWithBodyWithResponse request with any body
	PutCampaignsIdServiceLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error)

	PutCampaignsIdServiceLevelWithResponse(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error)

	// PutCampaignsIdStatusWithBodyWithResponse request with any body
	PutCampaignsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error)

	PutCampaignsIdStatusWithResponse(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error)

	// GetChatbotcallsWithResponse request
	GetChatbotcallsWithResponse(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*GetChatbotcallsResponse, error)

	// DeleteChatbotcallsIdWithResponse request
	DeleteChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotcallsIdResponse, error)

	// GetChatbotcallsIdWithResponse request
	GetChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotcallsIdResponse, error)

	// GetChatbotsWithResponse request
	GetChatbotsWithResponse(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*GetChatbotsResponse, error)

	// PostChatbotsWithBodyWithResponse request with any body
	PostChatbotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error)

	PostChatbotsWithResponse(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error)

	// DeleteChatbotsIdWithResponse request
	DeleteChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotsIdResponse, error)

	// GetChatbotsIdWithResponse request
	GetChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotsIdResponse, error)

	// PutChatbotsIdWithBodyWithResponse request with any body
	PutChatbotsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error)

	PutChatbotsIdWithResponse(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error)

	// GetChatmessagesWithResponse request
	GetChatmessagesWithResponse(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*GetChatmessagesResponse, error)

	// PostChatmessagesWithBodyWithResponse request with any body
	PostChatmessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error)

	PostChatmessagesWithResponse(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error)

	// DeleteChatmessagesIdWithResponse request
	DeleteChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatmessagesIdResponse, error)

	// GetChatmessagesIdWithResponse request
	GetChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatmessagesIdResponse, error)

	// GetChatroommessagesWithResponse request
	GetChatroommessagesWithResponse(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*GetChatroommessagesResponse, error)

	// PostChatroommessagesWithBodyWithResponse request with any body
	PostChatroommessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error)

	PostChatroommessagesWithResponse(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error)

	// DeleteChatroommessagesIdWithResponse request
	DeleteChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroommessagesIdResponse, error)

	// GetChatroommessagesIdWithResponse request
	GetChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroommessagesIdResponse, error)

	// GetChatroomsWithResponse request
	GetChatroomsWithResponse(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*GetChatroomsResponse, error)

	// PostChatroomsWithBodyWithResponse request with any body
	PostChatroomsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error)

	PostChatroomsWithResponse(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error)

	// DeleteChatroomsIdWithResponse request
	DeleteChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroomsIdResponse, error)

	// GetChatroomsIdWithResponse request
	GetChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroomsIdResponse, error)

	// PutChatroomsIdWithBodyWithResponse request with any body
	PutChatroomsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error)

	PutChatroomsIdWithResponse(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error)

	// GetChatsWithResponse request
	GetChatsWithResponse(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*GetChatsResponse, error)

	// PostChatsWithBodyWithResponse request with any body
	PostChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsResponse, error)

	PostChatsWithResponse(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsResponse, error)

	// DeleteChatsIdWithResponse request
	DeleteChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatsIdResponse, error)

	// GetChatsIdWithResponse request
	GetChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatsIdResponse, error)

	// PutChatsIdWithBodyWithResponse request with any body
	PutChatsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error)

	PutChatsIdWithResponse(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error)

	// PostChatsIdParticipantIdsWithBodyWithResponse request with any body
	PostChatsIdParticipantIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error)

	PostChatsIdParticipantIdsWithResponse(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error)

	// DeleteChatsIdParticipantIdsParticipantIdWithResponse request
	DeleteChatsIdParticipantIdsParticipantIdWithResponse(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*DeleteChatsIdParticipantIdsParticipantIdResponse, error)

	// PutChatsIdRoomOwnerIdWithBodyWithResponse request with any body
	PutChatsIdRoomOwnerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error)

	PutChatsIdRoomOwnerIdWithResponse(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error)

	// GetConferencecallsWithResponse request
	GetConferencecallsWithResponse(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*GetConferencecallsResponse, error)

	// DeleteConferencecallsIdWithResponse request
	DeleteConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencecallsIdResponse, error)

	// GetConferencecallsIdWithResponse request
	GetConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencecallsIdResponse, error)

	// GetConferencesWithResponse request
	GetConferencesWithResponse(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*GetConferencesResponse, error)

	// PostConferencesWithBodyWithResponse request with any body
	PostConferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error)

	PostConferencesWithResponse(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error)

	// DeleteConferencesIdWithResponse request
	DeleteConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencesIdResponse, error)

	// GetConferencesIdWithResponse request
	GetConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencesIdResponse, error)

	// PutConferencesIdWithBodyWithResponse request with any body
	PutConferencesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error)

	PutConferencesIdWithResponse(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error)

	// GetConferencesIdMediaStreamWithResponse request
	GetConferencesIdMediaStreamWithResponse(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetConferencesIdMediaStreamResponse, error)

	// PostConferencesIdRecordingStartWithResponse request
	PostConferencesIdRecordingStartWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStartResponse, error)

	// PostConferencesIdRecordingStopWithResponse request
	PostConferencesIdRecordingStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStopResponse, error)

	// PostConferencesIdTranscribeStartWithBodyWithResponse request with any body
	PostConferencesIdTranscribeStartWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error)

	PostConferencesIdTranscribeStartWithResponse(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error)

	// PostConferencesIdTranscribeStopWithResponse request
	PostConferencesIdTranscribeStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStopResponse, error)
}

type GetAccesskeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                     `json:"next_page_token,omitempty"`
		Result        *[]CustomerManagerAccesskey `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccesskeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccesskeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccesskeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CustomerManagerAccesskey
}

// Status returns HTTPResponse.Status
func (r PostAccesskeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccesskeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccesskeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccesskeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccesskeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccesskeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerAccesskey
}

// Status returns HTTPResponse.Status
func (r GetAccesskeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccesskeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccesskeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerAccesskey
}

// Status returns HTTPResponse.Status
func (r PutAccesskeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccesskeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]FlowManagerActiveflow `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetActiveflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActiveflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FlowManagerActiveflow
}

// Status returns HTTPResponse.Status
func (r PostActiveflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActiveflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActiveflowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteActiveflowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActiveflowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveflowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerActiveflow
}

// Status returns HTTPResponse.Status
func (r GetActiveflowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveflowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActiveflowsIdStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerActiveflow
}

// Status returns HTTPResponse.Status
func (r PostActiveflowsIdStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActiveflowsIdStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string              `json:"next_page_token,omitempty"`
		Result        *[]AgentManagerAgent `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PostAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r DeleteAgentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r GetAgentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdTagIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdTagIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdTagIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvailableNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *[]NumberManagerAvailableNumber `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAvailableNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailableNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]BillingManagerAccount `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBillingAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostBillingAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBillingAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r DeleteBillingAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBillingAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r GetBillingAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBillingAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PutBillingAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBillingAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingAccountsIdBalanceAddForceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostBillingAccountsIdBalanceAddForceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingAccountsIdBalanceAddForceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingAccountsIdBalanceSubtractForceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostBillingAccountsIdBalanceSubtractForceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingAccountsIdBalanceSubtractForceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBillingAccountsIdPaymentInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PutBillingAccountsIdPaymentInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBillingAccountsIdPaymentInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]BillingManagerBilling `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBillingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string            `json:"next_page_token,omitempty"`
		Result        *[]CallManagerCall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Calls      *[]CallManagerCall      `json:"calls,omitempty"`
		Groupcalls *[]CallManagerGroupcall `json:"groupcalls,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostCallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerCall
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerCall
}

// Status returns HTTPResponse.Status
func (r GetCallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdHangupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerCall
}

// Status returns HTTPResponse.Status
func (r PostCallsIdHangupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdHangupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdHoldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdHoldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdHoldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdHoldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdHoldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdHoldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallsIdMediaStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCallsIdMediaStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallsIdMediaStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdMohResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdMohResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdMohResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdMohResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdMohResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdMohResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdSilenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdSilenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdSilenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdSilenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdSilenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdSilenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdTalkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdTalkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdTalkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaigncallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCampaigncallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaigncallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCampaigncallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaigncall
}

// Status returns HTTPResponse.Status
func (r DeleteCampaigncallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCampaigncallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaigncallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaigncall
}

// Status returns HTTPResponse.Status
func (r GetCampaigncallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaigncallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                    `json:"next_page_token,omitempty"`
		Result        *[]CampaignManagerCampaign `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PostCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r DeleteCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r GetCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsIdCampaigncallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCampaignsIdCampaigncallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsIdCampaigncallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdNextCampaignIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdNextCampaignIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdNextCampaignIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdResourceInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdResourceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdResourceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdServiceLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdServiceLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdServiceLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotcallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                      `json:"next_page_token,omitempty"`
		Result        *[]ChatbotManagerChatbotcall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatbotcallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotcallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatbotcallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbotcall
}

// Status returns HTTPResponse.Status
func (r DeleteChatbotcallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatbotcallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotcallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbotcall
}

// Status returns HTTPResponse.Status
func (r GetChatbotcallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotcallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]ChatbotManagerChatbot `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatbotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatbotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r PostChatbotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatbotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatbotsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r DeleteChatbotsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatbotsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r GetChatbotsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatbotsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r PutChatbotsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatbotsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatmessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                   `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerMessagechat `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatmessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatmessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatmessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechat
}

// Status returns HTTPResponse.Status
func (r PostChatmessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatmessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatmessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechat
}

// Status returns HTTPResponse.Status
func (r DeleteChatmessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatmessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatmessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechat
}

// Status returns HTTPResponse.Status
func (r GetChatmessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatmessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroommessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                       `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerMessagechatroom `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatroommessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroommessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatroommessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r PostChatroommessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatroommessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatroommessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r DeleteChatroommessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatroommessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroommessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r GetChatroommessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroommessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerChatroom `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatroomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatroomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r PostChatroomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatroomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r DeleteChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r GetChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r PutChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string            `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerChat `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PostChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r DeleteChatsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r GetChatsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PutChatsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatsIdParticipantIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PostChatsIdParticipantIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatsIdParticipantIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatsIdParticipantIdsParticipantIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r DeleteChatsIdParticipantIdsParticipantIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatsIdParticipantIdsParticipantIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatsIdRoomOwnerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PutChatsIdRoomOwnerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatsIdRoomOwnerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencecallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                            `json:"next_page_token,omitempty"`
		Result        *[]ConferenceManagerConferencecall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConferencecallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencecallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConferencecallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConferencecall
}

// Status returns HTTPResponse.Status
func (r DeleteConferencecallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConferencecallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencecallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConferencecall
}

// Status returns HTTPResponse.Status
func (r GetConferencecallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencecallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]ConferenceManagerConference `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r PostConferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConferencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r DeleteConferencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConferencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r GetConferencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConferencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r PutConferencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConferencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencesIdMediaStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConferencesIdMediaStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencesIdMediaStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdRecordingStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdRecordingStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdRecordingStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdRecordingStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdRecordingStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdRecordingStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdTranscribeStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdTranscribeStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdTranscribeStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdTranscribeStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdTranscribeStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdTranscribeStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccesskeysWithResponse request returning *GetAccesskeysResponse
func (c *ClientWithResponses) GetAccesskeysWithResponse(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*GetAccesskeysResponse, error) {
	rsp, err := c.GetAccesskeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccesskeysResponse(rsp)
}

// PostAccesskeysWithBodyWithResponse request with arbitrary body returning *PostAccesskeysResponse
func (c *ClientWithResponses) PostAccesskeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error) {
	rsp, err := c.PostAccesskeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccesskeysResponse(rsp)
}

func (c *ClientWithResponses) PostAccesskeysWithResponse(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error) {
	rsp, err := c.PostAccesskeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccesskeysResponse(rsp)
}

// DeleteAccesskeysIdWithResponse request returning *DeleteAccesskeysIdResponse
func (c *ClientWithResponses) DeleteAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAccesskeysIdResponse, error) {
	rsp, err := c.DeleteAccesskeysId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccesskeysIdResponse(rsp)
}

// GetAccesskeysIdWithResponse request returning *GetAccesskeysIdResponse
func (c *ClientWithResponses) GetAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAccesskeysIdResponse, error) {
	rsp, err := c.GetAccesskeysId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccesskeysIdResponse(rsp)
}

// PutAccesskeysIdWithBodyWithResponse request with arbitrary body returning *PutAccesskeysIdResponse
func (c *ClientWithResponses) PutAccesskeysIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error) {
	rsp, err := c.PutAccesskeysIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccesskeysIdResponse(rsp)
}

func (c *ClientWithResponses) PutAccesskeysIdWithResponse(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error) {
	rsp, err := c.PutAccesskeysId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccesskeysIdResponse(rsp)
}

// GetActiveflowsWithResponse request returning *GetActiveflowsResponse
func (c *ClientWithResponses) GetActiveflowsWithResponse(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*GetActiveflowsResponse, error) {
	rsp, err := c.GetActiveflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveflowsResponse(rsp)
}

// PostActiveflowsWithBodyWithResponse request with arbitrary body returning *PostActiveflowsResponse
func (c *ClientWithResponses) PostActiveflowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error) {
	rsp, err := c.PostActiveflowsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActiveflowsResponse(rsp)
}

func (c *ClientWithResponses) PostActiveflowsWithResponse(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error) {
	rsp, err := c.PostActiveflows(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActiveflowsResponse(rsp)
}

// DeleteActiveflowsIdWithResponse request returning *DeleteActiveflowsIdResponse
func (c *ClientWithResponses) DeleteActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteActiveflowsIdResponse, error) {
	rsp, err := c.DeleteActiveflowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActiveflowsIdResponse(rsp)
}

// GetActiveflowsIdWithResponse request returning *GetActiveflowsIdResponse
func (c *ClientWithResponses) GetActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetActiveflowsIdResponse, error) {
	rsp, err := c.GetActiveflowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveflowsIdResponse(rsp)
}

// PostActiveflowsIdStopWithResponse request returning *PostActiveflowsIdStopResponse
func (c *ClientWithResponses) PostActiveflowsIdStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostActiveflowsIdStopResponse, error) {
	rsp, err := c.PostActiveflowsIdStop(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActiveflowsIdStopResponse(rsp)
}

// GetAgentsWithResponse request returning *GetAgentsResponse
func (c *ClientWithResponses) GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error) {
	rsp, err := c.GetAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsResponse(rsp)
}

// PostAgentsWithBodyWithResponse request with arbitrary body returning *PostAgentsResponse
func (c *ClientWithResponses) PostAgentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error) {
	rsp, err := c.PostAgentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAgentsResponse(rsp)
}

func (c *ClientWithResponses) PostAgentsWithResponse(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error) {
	rsp, err := c.PostAgents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAgentsResponse(rsp)
}

// DeleteAgentsIdWithResponse request returning *DeleteAgentsIdResponse
func (c *ClientWithResponses) DeleteAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAgentsIdResponse, error) {
	rsp, err := c.DeleteAgentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentsIdResponse(rsp)
}

// GetAgentsIdWithResponse request returning *GetAgentsIdResponse
func (c *ClientWithResponses) GetAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAgentsIdResponse, error) {
	rsp, err := c.GetAgentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsIdResponse(rsp)
}

// PutAgentsIdWithBodyWithResponse request with arbitrary body returning *PutAgentsIdResponse
func (c *ClientWithResponses) PutAgentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error) {
	rsp, err := c.PutAgentsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdWithResponse(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error) {
	rsp, err := c.PutAgentsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdResponse(rsp)
}

// PutAgentsIdAddressesWithBodyWithResponse request with arbitrary body returning *PutAgentsIdAddressesResponse
func (c *ClientWithResponses) PutAgentsIdAddressesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error) {
	rsp, err := c.PutAgentsIdAddressesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdAddressesResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdAddressesWithResponse(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error) {
	rsp, err := c.PutAgentsIdAddresses(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdAddressesResponse(rsp)
}

// PutAgentsIdPasswordWithBodyWithResponse request with arbitrary body returning *PutAgentsIdPasswordResponse
func (c *ClientWithResponses) PutAgentsIdPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error) {
	rsp, err := c.PutAgentsIdPasswordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdPasswordWithResponse(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error) {
	rsp, err := c.PutAgentsIdPassword(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPasswordResponse(rsp)
}

// PutAgentsIdPermissionWithBodyWithResponse request with arbitrary body returning *PutAgentsIdPermissionResponse
func (c *ClientWithResponses) PutAgentsIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error) {
	rsp, err := c.PutAgentsIdPermissionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPermissionResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdPermissionWithResponse(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error) {
	rsp, err := c.PutAgentsIdPermission(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPermissionResponse(rsp)
}

// PutAgentsIdStatusWithBodyWithResponse request with arbitrary body returning *PutAgentsIdStatusResponse
func (c *ClientWithResponses) PutAgentsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error) {
	rsp, err := c.PutAgentsIdStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdStatusWithResponse(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error) {
	rsp, err := c.PutAgentsIdStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdStatusResponse(rsp)
}

// PutAgentsIdTagIdsWithBodyWithResponse request with arbitrary body returning *PutAgentsIdTagIdsResponse
func (c *ClientWithResponses) PutAgentsIdTagIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error) {
	rsp, err := c.PutAgentsIdTagIdsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdTagIdsResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdTagIdsWithResponse(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error) {
	rsp, err := c.PutAgentsIdTagIds(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdTagIdsResponse(rsp)
}

// GetAvailableNumbersWithResponse request returning *GetAvailableNumbersResponse
func (c *ClientWithResponses) GetAvailableNumbersWithResponse(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*GetAvailableNumbersResponse, error) {
	rsp, err := c.GetAvailableNumbers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailableNumbersResponse(rsp)
}

// GetBillingAccountsWithResponse request returning *GetBillingAccountsResponse
func (c *ClientWithResponses) GetBillingAccountsWithResponse(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*GetBillingAccountsResponse, error) {
	rsp, err := c.GetBillingAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingAccountsResponse(rsp)
}

// PostBillingAccountsWithBodyWithResponse request with arbitrary body returning *PostBillingAccountsResponse
func (c *ClientWithResponses) PostBillingAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error) {
	rsp, err := c.PostBillingAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostBillingAccountsWithResponse(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error) {
	rsp, err := c.PostBillingAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsResponse(rsp)
}

// DeleteBillingAccountsIdWithResponse request returning *DeleteBillingAccountsIdResponse
func (c *ClientWithResponses) DeleteBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBillingAccountsIdResponse, error) {
	rsp, err := c.DeleteBillingAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBillingAccountsIdResponse(rsp)
}

// GetBillingAccountsIdWithResponse request returning *GetBillingAccountsIdResponse
func (c *ClientWithResponses) GetBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBillingAccountsIdResponse, error) {
	rsp, err := c.GetBillingAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingAccountsIdResponse(rsp)
}

// PutBillingAccountsIdWithBodyWithResponse request with arbitrary body returning *PutBillingAccountsIdResponse
func (c *ClientWithResponses) PutBillingAccountsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error) {
	rsp, err := c.PutBillingAccountsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdResponse(rsp)
}

func (c *ClientWithResponses) PutBillingAccountsIdWithResponse(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error) {
	rsp, err := c.PutBillingAccountsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdResponse(rsp)
}

// PostBillingAccountsIdBalanceAddForceWithBodyWithResponse request with arbitrary body returning *PostBillingAccountsIdBalanceAddForceResponse
func (c *ClientWithResponses) PostBillingAccountsIdBalanceAddForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceAddForceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceAddForceResponse(rsp)
}

func (c *ClientWithResponses) PostBillingAccountsIdBalanceAddForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceAddForce(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceAddForceResponse(rsp)
}

// PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse request with arbitrary body returning *PostBillingAccountsIdBalanceSubtractForceResponse
func (c *ClientWithResponses) PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceSubtractForceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceSubtractForceResponse(rsp)
}

func (c *ClientWithResponses) PostBillingAccountsIdBalanceSubtractForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceSubtractForce(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceSubtractForceResponse(rsp)
}

// PutBillingAccountsIdPaymentInfoWithBodyWithResponse request with arbitrary body returning *PutBillingAccountsIdPaymentInfoResponse
func (c *ClientWithResponses) PutBillingAccountsIdPaymentInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error) {
	rsp, err := c.PutBillingAccountsIdPaymentInfoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdPaymentInfoResponse(rsp)
}

func (c *ClientWithResponses) PutBillingAccountsIdPaymentInfoWithResponse(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error) {
	rsp, err := c.PutBillingAccountsIdPaymentInfo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdPaymentInfoResponse(rsp)
}

// GetBillingsWithResponse request returning *GetBillingsResponse
func (c *ClientWithResponses) GetBillingsWithResponse(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*GetBillingsResponse, error) {
	rsp, err := c.GetBillings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingsResponse(rsp)
}

// GetCallsWithResponse request returning *GetCallsResponse
func (c *ClientWithResponses) GetCallsWithResponse(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*GetCallsResponse, error) {
	rsp, err := c.GetCalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallsResponse(rsp)
}

// PostCallsWithBodyWithResponse request with arbitrary body returning *PostCallsResponse
func (c *ClientWithResponses) PostCallsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsResponse, error) {
	rsp, err := c.PostCallsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsResponse(rsp)
}

func (c *ClientWithResponses) PostCallsWithResponse(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsResponse, error) {
	rsp, err := c.PostCalls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsResponse(rsp)
}

// DeleteCallsIdWithResponse request returning *DeleteCallsIdResponse
func (c *ClientWithResponses) DeleteCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdResponse, error) {
	rsp, err := c.DeleteCallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdResponse(rsp)
}

// GetCallsIdWithResponse request returning *GetCallsIdResponse
func (c *ClientWithResponses) GetCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCallsIdResponse, error) {
	rsp, err := c.GetCallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallsIdResponse(rsp)
}

// PostCallsIdHangupWithResponse request returning *PostCallsIdHangupResponse
func (c *ClientWithResponses) PostCallsIdHangupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHangupResponse, error) {
	rsp, err := c.PostCallsIdHangup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdHangupResponse(rsp)
}

// DeleteCallsIdHoldWithResponse request returning *DeleteCallsIdHoldResponse
func (c *ClientWithResponses) DeleteCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdHoldResponse, error) {
	rsp, err := c.DeleteCallsIdHold(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdHoldResponse(rsp)
}

// PostCallsIdHoldWithResponse request returning *PostCallsIdHoldResponse
func (c *ClientWithResponses) PostCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHoldResponse, error) {
	rsp, err := c.PostCallsIdHold(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdHoldResponse(rsp)
}

// GetCallsIdMediaStreamWithResponse request returning *GetCallsIdMediaStreamResponse
func (c *ClientWithResponses) GetCallsIdMediaStreamWithResponse(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetCallsIdMediaStreamResponse, error) {
	rsp, err := c.GetCallsIdMediaStream(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallsIdMediaStreamResponse(rsp)
}

// DeleteCallsIdMohWithResponse request returning *DeleteCallsIdMohResponse
func (c *ClientWithResponses) DeleteCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdMohResponse, error) {
	rsp, err := c.DeleteCallsIdMoh(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdMohResponse(rsp)
}

// PostCallsIdMohWithResponse request returning *PostCallsIdMohResponse
func (c *ClientWithResponses) PostCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdMohResponse, error) {
	rsp, err := c.PostCallsIdMoh(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdMohResponse(rsp)
}

// DeleteCallsIdMuteWithBodyWithResponse request with arbitrary body returning *DeleteCallsIdMuteResponse
func (c *ClientWithResponses) DeleteCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error) {
	rsp, err := c.DeleteCallsIdMuteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdMuteResponse(rsp)
}

func (c *ClientWithResponses) DeleteCallsIdMuteWithResponse(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error) {
	rsp, err := c.DeleteCallsIdMute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdMuteResponse(rsp)
}

// PostCallsIdMuteWithBodyWithResponse request with arbitrary body returning *PostCallsIdMuteResponse
func (c *ClientWithResponses) PostCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error) {
	rsp, err := c.PostCallsIdMuteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdMuteResponse(rsp)
}

func (c *ClientWithResponses) PostCallsIdMuteWithResponse(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error) {
	rsp, err := c.PostCallsIdMute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdMuteResponse(rsp)
}

// DeleteCallsIdSilenceWithResponse request returning *DeleteCallsIdSilenceResponse
func (c *ClientWithResponses) DeleteCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdSilenceResponse, error) {
	rsp, err := c.DeleteCallsIdSilence(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdSilenceResponse(rsp)
}

// PostCallsIdSilenceWithResponse request returning *PostCallsIdSilenceResponse
func (c *ClientWithResponses) PostCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdSilenceResponse, error) {
	rsp, err := c.PostCallsIdSilence(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdSilenceResponse(rsp)
}

// PostCallsIdTalkWithBodyWithResponse request with arbitrary body returning *PostCallsIdTalkResponse
func (c *ClientWithResponses) PostCallsIdTalkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error) {
	rsp, err := c.PostCallsIdTalkWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdTalkResponse(rsp)
}

func (c *ClientWithResponses) PostCallsIdTalkWithResponse(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error) {
	rsp, err := c.PostCallsIdTalk(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdTalkResponse(rsp)
}

// GetCampaigncallsWithResponse request returning *GetCampaigncallsResponse
func (c *ClientWithResponses) GetCampaigncallsWithResponse(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaigncallsResponse, error) {
	rsp, err := c.GetCampaigncalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaigncallsResponse(rsp)
}

// DeleteCampaigncallsIdWithResponse request returning *DeleteCampaigncallsIdResponse
func (c *ClientWithResponses) DeleteCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaigncallsIdResponse, error) {
	rsp, err := c.DeleteCampaigncallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaigncallsIdResponse(rsp)
}

// GetCampaigncallsIdWithResponse request returning *GetCampaigncallsIdResponse
func (c *ClientWithResponses) GetCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaigncallsIdResponse, error) {
	rsp, err := c.GetCampaigncallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaigncallsIdResponse(rsp)
}

// GetCampaignsWithResponse request returning *GetCampaignsResponse
func (c *ClientWithResponses) GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error) {
	rsp, err := c.GetCampaigns(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsResponse(rsp)
}

// PostCampaignsWithBodyWithResponse request with arbitrary body returning *PostCampaignsResponse
func (c *ClientWithResponses) PostCampaignsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error) {
	rsp, err := c.PostCampaignsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsResponse(rsp)
}

func (c *ClientWithResponses) PostCampaignsWithResponse(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error) {
	rsp, err := c.PostCampaigns(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsResponse(rsp)
}

// DeleteCampaignsIdWithResponse request returning *DeleteCampaignsIdResponse
func (c *ClientWithResponses) DeleteCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error) {
	rsp, err := c.DeleteCampaignsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaignsIdResponse(rsp)
}

// GetCampaignsIdWithResponse request returning *GetCampaignsIdResponse
func (c *ClientWithResponses) GetCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error) {
	rsp, err := c.GetCampaignsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsIdResponse(rsp)
}

// PutCampaignsIdWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdResponse
func (c *ClientWithResponses) PutCampaignsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error) {
	rsp, err := c.PutCampaignsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdWithResponse(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error) {
	rsp, err := c.PutCampaignsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResponse(rsp)
}

// PutCampaignsIdActionsWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdActionsResponse
func (c *ClientWithResponses) PutCampaignsIdActionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error) {
	rsp, err := c.PutCampaignsIdActionsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdActionsResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdActionsWithResponse(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error) {
	rsp, err := c.PutCampaignsIdActions(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdActionsResponse(rsp)
}

// GetCampaignsIdCampaigncallsWithResponse request returning *GetCampaignsIdCampaigncallsResponse
func (c *ClientWithResponses) GetCampaignsIdCampaigncallsWithResponse(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaignsIdCampaigncallsResponse, error) {
	rsp, err := c.GetCampaignsIdCampaigncalls(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsIdCampaigncallsResponse(rsp)
}

// PutCampaignsIdNextCampaignIdWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdNextCampaignIdResponse
func (c *ClientWithResponses) PutCampaignsIdNextCampaignIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error) {
	rsp, err := c.PutCampaignsIdNextCampaignIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdNextCampaignIdResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdNextCampaignIdWithResponse(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error) {
	rsp, err := c.PutCampaignsIdNextCampaignId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdNextCampaignIdResponse(rsp)
}

// PutCampaignsIdResourceInfoWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdResourceInfoResponse
func (c *ClientWithResponses) PutCampaignsIdResourceInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error) {
	rsp, err := c.PutCampaignsIdResourceInfoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResourceInfoResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdResourceInfoWithResponse(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error) {
	rsp, err := c.PutCampaignsIdResourceInfo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResourceInfoResponse(rsp)
}

// PutCampaignsIdServiceLevelWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdServiceLevelResponse
func (c *ClientWithResponses) PutCampaignsIdServiceLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error) {
	rsp, err := c.PutCampaignsIdServiceLevelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdServiceLevelResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdServiceLevelWithResponse(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error) {
	rsp, err := c.PutCampaignsIdServiceLevel(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdServiceLevelResponse(rsp)
}

// PutCampaignsIdStatusWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdStatusResponse
func (c *ClientWithResponses) PutCampaignsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error) {
	rsp, err := c.PutCampaignsIdStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdStatusWithResponse(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error) {
	rsp, err := c.PutCampaignsIdStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdStatusResponse(rsp)
}

// GetChatbotcallsWithResponse request returning *GetChatbotcallsResponse
func (c *ClientWithResponses) GetChatbotcallsWithResponse(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*GetChatbotcallsResponse, error) {
	rsp, err := c.GetChatbotcalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotcallsResponse(rsp)
}

// DeleteChatbotcallsIdWithResponse request returning *DeleteChatbotcallsIdResponse
func (c *ClientWithResponses) DeleteChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotcallsIdResponse, error) {
	rsp, err := c.DeleteChatbotcallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatbotcallsIdResponse(rsp)
}

// GetChatbotcallsIdWithResponse request returning *GetChatbotcallsIdResponse
func (c *ClientWithResponses) GetChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotcallsIdResponse, error) {
	rsp, err := c.GetChatbotcallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotcallsIdResponse(rsp)
}

// GetChatbotsWithResponse request returning *GetChatbotsResponse
func (c *ClientWithResponses) GetChatbotsWithResponse(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*GetChatbotsResponse, error) {
	rsp, err := c.GetChatbots(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotsResponse(rsp)
}

// PostChatbotsWithBodyWithResponse request with arbitrary body returning *PostChatbotsResponse
func (c *ClientWithResponses) PostChatbotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error) {
	rsp, err := c.PostChatbotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatbotsResponse(rsp)
}

func (c *ClientWithResponses) PostChatbotsWithResponse(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error) {
	rsp, err := c.PostChatbots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatbotsResponse(rsp)
}

// DeleteChatbotsIdWithResponse request returning *DeleteChatbotsIdResponse
func (c *ClientWithResponses) DeleteChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotsIdResponse, error) {
	rsp, err := c.DeleteChatbotsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatbotsIdResponse(rsp)
}

// GetChatbotsIdWithResponse request returning *GetChatbotsIdResponse
func (c *ClientWithResponses) GetChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotsIdResponse, error) {
	rsp, err := c.GetChatbotsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotsIdResponse(rsp)
}

// PutChatbotsIdWithBodyWithResponse request with arbitrary body returning *PutChatbotsIdResponse
func (c *ClientWithResponses) PutChatbotsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error) {
	rsp, err := c.PutChatbotsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatbotsIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatbotsIdWithResponse(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error) {
	rsp, err := c.PutChatbotsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatbotsIdResponse(rsp)
}

// GetChatmessagesWithResponse request returning *GetChatmessagesResponse
func (c *ClientWithResponses) GetChatmessagesWithResponse(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*GetChatmessagesResponse, error) {
	rsp, err := c.GetChatmessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatmessagesResponse(rsp)
}

// PostChatmessagesWithBodyWithResponse request with arbitrary body returning *PostChatmessagesResponse
func (c *ClientWithResponses) PostChatmessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error) {
	rsp, err := c.PostChatmessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatmessagesResponse(rsp)
}

func (c *ClientWithResponses) PostChatmessagesWithResponse(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error) {
	rsp, err := c.PostChatmessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatmessagesResponse(rsp)
}

// DeleteChatmessagesIdWithResponse request returning *DeleteChatmessagesIdResponse
func (c *ClientWithResponses) DeleteChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatmessagesIdResponse, error) {
	rsp, err := c.DeleteChatmessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatmessagesIdResponse(rsp)
}

// GetChatmessagesIdWithResponse request returning *GetChatmessagesIdResponse
func (c *ClientWithResponses) GetChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatmessagesIdResponse, error) {
	rsp, err := c.GetChatmessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatmessagesIdResponse(rsp)
}

// GetChatroommessagesWithResponse request returning *GetChatroommessagesResponse
func (c *ClientWithResponses) GetChatroommessagesWithResponse(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*GetChatroommessagesResponse, error) {
	rsp, err := c.GetChatroommessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroommessagesResponse(rsp)
}

// PostChatroommessagesWithBodyWithResponse request with arbitrary body returning *PostChatroommessagesResponse
func (c *ClientWithResponses) PostChatroommessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error) {
	rsp, err := c.PostChatroommessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroommessagesResponse(rsp)
}

func (c *ClientWithResponses) PostChatroommessagesWithResponse(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error) {
	rsp, err := c.PostChatroommessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroommessagesResponse(rsp)
}

// DeleteChatroommessagesIdWithResponse request returning *DeleteChatroommessagesIdResponse
func (c *ClientWithResponses) DeleteChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroommessagesIdResponse, error) {
	rsp, err := c.DeleteChatroommessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatroommessagesIdResponse(rsp)
}

// GetChatroommessagesIdWithResponse request returning *GetChatroommessagesIdResponse
func (c *ClientWithResponses) GetChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroommessagesIdResponse, error) {
	rsp, err := c.GetChatroommessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroommessagesIdResponse(rsp)
}

// GetChatroomsWithResponse request returning *GetChatroomsResponse
func (c *ClientWithResponses) GetChatroomsWithResponse(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*GetChatroomsResponse, error) {
	rsp, err := c.GetChatrooms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroomsResponse(rsp)
}

// PostChatroomsWithBodyWithResponse request with arbitrary body returning *PostChatroomsResponse
func (c *ClientWithResponses) PostChatroomsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error) {
	rsp, err := c.PostChatroomsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroomsResponse(rsp)
}

func (c *ClientWithResponses) PostChatroomsWithResponse(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error) {
	rsp, err := c.PostChatrooms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroomsResponse(rsp)
}

// DeleteChatroomsIdWithResponse request returning *DeleteChatroomsIdResponse
func (c *ClientWithResponses) DeleteChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroomsIdResponse, error) {
	rsp, err := c.DeleteChatroomsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatroomsIdResponse(rsp)
}

// GetChatroomsIdWithResponse request returning *GetChatroomsIdResponse
func (c *ClientWithResponses) GetChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroomsIdResponse, error) {
	rsp, err := c.GetChatroomsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroomsIdResponse(rsp)
}

// PutChatroomsIdWithBodyWithResponse request with arbitrary body returning *PutChatroomsIdResponse
func (c *ClientWithResponses) PutChatroomsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error) {
	rsp, err := c.PutChatroomsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatroomsIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatroomsIdWithResponse(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error) {
	rsp, err := c.PutChatroomsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatroomsIdResponse(rsp)
}

// GetChatsWithResponse request returning *GetChatsResponse
func (c *ClientWithResponses) GetChatsWithResponse(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*GetChatsResponse, error) {
	rsp, err := c.GetChats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatsResponse(rsp)
}

// PostChatsWithBodyWithResponse request with arbitrary body returning *PostChatsResponse
func (c *ClientWithResponses) PostChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsResponse, error) {
	rsp, err := c.PostChatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsResponse(rsp)
}

func (c *ClientWithResponses) PostChatsWithResponse(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsResponse, error) {
	rsp, err := c.PostChats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsResponse(rsp)
}

// DeleteChatsIdWithResponse request returning *DeleteChatsIdResponse
func (c *ClientWithResponses) DeleteChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatsIdResponse, error) {
	rsp, err := c.DeleteChatsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatsIdResponse(rsp)
}

// GetChatsIdWithResponse request returning *GetChatsIdResponse
func (c *ClientWithResponses) GetChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatsIdResponse, error) {
	rsp, err := c.GetChatsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatsIdResponse(rsp)
}

// PutChatsIdWithBodyWithResponse request with arbitrary body returning *PutChatsIdResponse
func (c *ClientWithResponses) PutChatsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error) {
	rsp, err := c.PutChatsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatsIdWithResponse(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error) {
	rsp, err := c.PutChatsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdResponse(rsp)
}

// PostChatsIdParticipantIdsWithBodyWithResponse request with arbitrary body returning *PostChatsIdParticipantIdsResponse
func (c *ClientWithResponses) PostChatsIdParticipantIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error) {
	rsp, err := c.PostChatsIdParticipantIdsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsIdParticipantIdsResponse(rsp)
}

func (c *ClientWithResponses) PostChatsIdParticipantIdsWithResponse(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error) {
	rsp, err := c.PostChatsIdParticipantIds(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsIdParticipantIdsResponse(rsp)
}

// DeleteChatsIdParticipantIdsParticipantIdWithResponse request returning *DeleteChatsIdParticipantIdsParticipantIdResponse
func (c *ClientWithResponses) DeleteChatsIdParticipantIdsParticipantIdWithResponse(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*DeleteChatsIdParticipantIdsParticipantIdResponse, error) {
	rsp, err := c.DeleteChatsIdParticipantIdsParticipantId(ctx, id, participantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatsIdParticipantIdsParticipantIdResponse(rsp)
}

// PutChatsIdRoomOwnerIdWithBodyWithResponse request with arbitrary body returning *PutChatsIdRoomOwnerIdResponse
func (c *ClientWithResponses) PutChatsIdRoomOwnerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error) {
	rsp, err := c.PutChatsIdRoomOwnerIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdRoomOwnerIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatsIdRoomOwnerIdWithResponse(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error) {
	rsp, err := c.PutChatsIdRoomOwnerId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdRoomOwnerIdResponse(rsp)
}

// GetConferencecallsWithResponse request returning *GetConferencecallsResponse
func (c *ClientWithResponses) GetConferencecallsWithResponse(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*GetConferencecallsResponse, error) {
	rsp, err := c.GetConferencecalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencecallsResponse(rsp)
}

// DeleteConferencecallsIdWithResponse request returning *DeleteConferencecallsIdResponse
func (c *ClientWithResponses) DeleteConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencecallsIdResponse, error) {
	rsp, err := c.DeleteConferencecallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConferencecallsIdResponse(rsp)
}

// GetConferencecallsIdWithResponse request returning *GetConferencecallsIdResponse
func (c *ClientWithResponses) GetConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencecallsIdResponse, error) {
	rsp, err := c.GetConferencecallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencecallsIdResponse(rsp)
}

// GetConferencesWithResponse request returning *GetConferencesResponse
func (c *ClientWithResponses) GetConferencesWithResponse(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*GetConferencesResponse, error) {
	rsp, err := c.GetConferences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencesResponse(rsp)
}

// PostConferencesWithBodyWithResponse request with arbitrary body returning *PostConferencesResponse
func (c *ClientWithResponses) PostConferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error) {
	rsp, err := c.PostConferencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesResponse(rsp)
}

func (c *ClientWithResponses) PostConferencesWithResponse(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error) {
	rsp, err := c.PostConferences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesResponse(rsp)
}

// DeleteConferencesIdWithResponse request returning *DeleteConferencesIdResponse
func (c *ClientWithResponses) DeleteConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencesIdResponse, error) {
	rsp, err := c.DeleteConferencesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConferencesIdResponse(rsp)
}

// GetConferencesIdWithResponse request returning *GetConferencesIdResponse
func (c *ClientWithResponses) GetConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencesIdResponse, error) {
	rsp, err := c.GetConferencesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencesIdResponse(rsp)
}

// PutConferencesIdWithBodyWithResponse request with arbitrary body returning *PutConferencesIdResponse
func (c *ClientWithResponses) PutConferencesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error) {
	rsp, err := c.PutConferencesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConferencesIdResponse(rsp)
}

func (c *ClientWithResponses) PutConferencesIdWithResponse(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error) {
	rsp, err := c.PutConferencesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConferencesIdResponse(rsp)
}

// GetConferencesIdMediaStreamWithResponse request returning *GetConferencesIdMediaStreamResponse
func (c *ClientWithResponses) GetConferencesIdMediaStreamWithResponse(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetConferencesIdMediaStreamResponse, error) {
	rsp, err := c.GetConferencesIdMediaStream(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencesIdMediaStreamResponse(rsp)
}

// PostConferencesIdRecordingStartWithResponse request returning *PostConferencesIdRecordingStartResponse
func (c *ClientWithResponses) PostConferencesIdRecordingStartWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStartResponse, error) {
	rsp, err := c.PostConferencesIdRecordingStart(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdRecordingStartResponse(rsp)
}

// PostConferencesIdRecordingStopWithResponse request returning *PostConferencesIdRecordingStopResponse
func (c *ClientWithResponses) PostConferencesIdRecordingStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStopResponse, error) {
	rsp, err := c.PostConferencesIdRecordingStop(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdRecordingStopResponse(rsp)
}

// PostConferencesIdTranscribeStartWithBodyWithResponse request with arbitrary body returning *PostConferencesIdTranscribeStartResponse
func (c *ClientWithResponses) PostConferencesIdTranscribeStartWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error) {
	rsp, err := c.PostConferencesIdTranscribeStartWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdTranscribeStartResponse(rsp)
}

func (c *ClientWithResponses) PostConferencesIdTranscribeStartWithResponse(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error) {
	rsp, err := c.PostConferencesIdTranscribeStart(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdTranscribeStartResponse(rsp)
}

// PostConferencesIdTranscribeStopWithResponse request returning *PostConferencesIdTranscribeStopResponse
func (c *ClientWithResponses) PostConferencesIdTranscribeStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStopResponse, error) {
	rsp, err := c.PostConferencesIdTranscribeStop(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdTranscribeStopResponse(rsp)
}

// ParseGetAccesskeysResponse parses an HTTP response from a GetAccesskeysWithResponse call
func ParseGetAccesskeysResponse(rsp *http.Response) (*GetAccesskeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccesskeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                     `json:"next_page_token,omitempty"`
			Result        *[]CustomerManagerAccesskey `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccesskeysResponse parses an HTTP response from a PostAccesskeysWithResponse call
func ParsePostAccesskeysResponse(rsp *http.Response) (*PostAccesskeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccesskeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomerManagerAccesskey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAccesskeysIdResponse parses an HTTP response from a DeleteAccesskeysIdWithResponse call
func ParseDeleteAccesskeysIdResponse(rsp *http.Response) (*DeleteAccesskeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccesskeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccesskeysIdResponse parses an HTTP response from a GetAccesskeysIdWithResponse call
func ParseGetAccesskeysIdResponse(rsp *http.Response) (*GetAccesskeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccesskeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerAccesskey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAccesskeysIdResponse parses an HTTP response from a PutAccesskeysIdWithResponse call
func ParsePutAccesskeysIdResponse(rsp *http.Response) (*PutAccesskeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAccesskeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerAccesskey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActiveflowsResponse parses an HTTP response from a GetActiveflowsWithResponse call
func ParseGetActiveflowsResponse(rsp *http.Response) (*GetActiveflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]FlowManagerActiveflow `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActiveflowsResponse parses an HTTP response from a PostActiveflowsWithResponse call
func ParsePostActiveflowsResponse(rsp *http.Response) (*PostActiveflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActiveflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FlowManagerActiveflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteActiveflowsIdResponse parses an HTTP response from a DeleteActiveflowsIdWithResponse call
func ParseDeleteActiveflowsIdResponse(rsp *http.Response) (*DeleteActiveflowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActiveflowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActiveflowsIdResponse parses an HTTP response from a GetActiveflowsIdWithResponse call
func ParseGetActiveflowsIdResponse(rsp *http.Response) (*GetActiveflowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveflowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerActiveflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActiveflowsIdStopResponse parses an HTTP response from a PostActiveflowsIdStopWithResponse call
func ParsePostActiveflowsIdStopResponse(rsp *http.Response) (*PostActiveflowsIdStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActiveflowsIdStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerActiveflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsResponse parses an HTTP response from a GetAgentsWithResponse call
func ParseGetAgentsResponse(rsp *http.Response) (*GetAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string              `json:"next_page_token,omitempty"`
			Result        *[]AgentManagerAgent `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAgentsResponse parses an HTTP response from a PostAgentsWithResponse call
func ParsePostAgentsResponse(rsp *http.Response) (*PostAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAgentsIdResponse parses an HTTP response from a DeleteAgentsIdWithResponse call
func ParseDeleteAgentsIdResponse(rsp *http.Response) (*DeleteAgentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsIdResponse parses an HTTP response from a GetAgentsIdWithResponse call
func ParseGetAgentsIdResponse(rsp *http.Response) (*GetAgentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdResponse parses an HTTP response from a PutAgentsIdWithResponse call
func ParsePutAgentsIdResponse(rsp *http.Response) (*PutAgentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdAddressesResponse parses an HTTP response from a PutAgentsIdAddressesWithResponse call
func ParsePutAgentsIdAddressesResponse(rsp *http.Response) (*PutAgentsIdAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdPasswordResponse parses an HTTP response from a PutAgentsIdPasswordWithResponse call
func ParsePutAgentsIdPasswordResponse(rsp *http.Response) (*PutAgentsIdPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdPermissionResponse parses an HTTP response from a PutAgentsIdPermissionWithResponse call
func ParsePutAgentsIdPermissionResponse(rsp *http.Response) (*PutAgentsIdPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdStatusResponse parses an HTTP response from a PutAgentsIdStatusWithResponse call
func ParsePutAgentsIdStatusResponse(rsp *http.Response) (*PutAgentsIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdTagIdsResponse parses an HTTP response from a PutAgentsIdTagIdsWithResponse call
func ParsePutAgentsIdTagIdsResponse(rsp *http.Response) (*PutAgentsIdTagIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdTagIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAvailableNumbersResponse parses an HTTP response from a GetAvailableNumbersWithResponse call
func ParseGetAvailableNumbersResponse(rsp *http.Response) (*GetAvailableNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailableNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *[]NumberManagerAvailableNumber `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingAccountsResponse parses an HTTP response from a GetBillingAccountsWithResponse call
func ParseGetBillingAccountsResponse(rsp *http.Response) (*GetBillingAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]BillingManagerAccount `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingAccountsResponse parses an HTTP response from a PostBillingAccountsWithResponse call
func ParsePostBillingAccountsResponse(rsp *http.Response) (*PostBillingAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBillingAccountsIdResponse parses an HTTP response from a DeleteBillingAccountsIdWithResponse call
func ParseDeleteBillingAccountsIdResponse(rsp *http.Response) (*DeleteBillingAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBillingAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingAccountsIdResponse parses an HTTP response from a GetBillingAccountsIdWithResponse call
func ParseGetBillingAccountsIdResponse(rsp *http.Response) (*GetBillingAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBillingAccountsIdResponse parses an HTTP response from a PutBillingAccountsIdWithResponse call
func ParsePutBillingAccountsIdResponse(rsp *http.Response) (*PutBillingAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBillingAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingAccountsIdBalanceAddForceResponse parses an HTTP response from a PostBillingAccountsIdBalanceAddForceWithResponse call
func ParsePostBillingAccountsIdBalanceAddForceResponse(rsp *http.Response) (*PostBillingAccountsIdBalanceAddForceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingAccountsIdBalanceAddForceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingAccountsIdBalanceSubtractForceResponse parses an HTTP response from a PostBillingAccountsIdBalanceSubtractForceWithResponse call
func ParsePostBillingAccountsIdBalanceSubtractForceResponse(rsp *http.Response) (*PostBillingAccountsIdBalanceSubtractForceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingAccountsIdBalanceSubtractForceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBillingAccountsIdPaymentInfoResponse parses an HTTP response from a PutBillingAccountsIdPaymentInfoWithResponse call
func ParsePutBillingAccountsIdPaymentInfoResponse(rsp *http.Response) (*PutBillingAccountsIdPaymentInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBillingAccountsIdPaymentInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingsResponse parses an HTTP response from a GetBillingsWithResponse call
func ParseGetBillingsResponse(rsp *http.Response) (*GetBillingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]BillingManagerBilling `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallsResponse parses an HTTP response from a GetCallsWithResponse call
func ParseGetCallsResponse(rsp *http.Response) (*GetCallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string            `json:"next_page_token,omitempty"`
			Result        *[]CallManagerCall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCallsResponse parses an HTTP response from a PostCallsWithResponse call
func ParsePostCallsResponse(rsp *http.Response) (*PostCallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Calls      *[]CallManagerCall      `json:"calls,omitempty"`
			Groupcalls *[]CallManagerGroupcall `json:"groupcalls,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCallsIdResponse parses an HTTP response from a DeleteCallsIdWithResponse call
func ParseDeleteCallsIdResponse(rsp *http.Response) (*DeleteCallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallsIdResponse parses an HTTP response from a GetCallsIdWithResponse call
func ParseGetCallsIdResponse(rsp *http.Response) (*GetCallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCallsIdHangupResponse parses an HTTP response from a PostCallsIdHangupWithResponse call
func ParsePostCallsIdHangupResponse(rsp *http.Response) (*PostCallsIdHangupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdHangupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCallsIdHoldResponse parses an HTTP response from a DeleteCallsIdHoldWithResponse call
func ParseDeleteCallsIdHoldResponse(rsp *http.Response) (*DeleteCallsIdHoldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdHoldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdHoldResponse parses an HTTP response from a PostCallsIdHoldWithResponse call
func ParsePostCallsIdHoldResponse(rsp *http.Response) (*PostCallsIdHoldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdHoldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCallsIdMediaStreamResponse parses an HTTP response from a GetCallsIdMediaStreamWithResponse call
func ParseGetCallsIdMediaStreamResponse(rsp *http.Response) (*GetCallsIdMediaStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallsIdMediaStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCallsIdMohResponse parses an HTTP response from a DeleteCallsIdMohWithResponse call
func ParseDeleteCallsIdMohResponse(rsp *http.Response) (*DeleteCallsIdMohResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdMohResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdMohResponse parses an HTTP response from a PostCallsIdMohWithResponse call
func ParsePostCallsIdMohResponse(rsp *http.Response) (*PostCallsIdMohResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdMohResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCallsIdMuteResponse parses an HTTP response from a DeleteCallsIdMuteWithResponse call
func ParseDeleteCallsIdMuteResponse(rsp *http.Response) (*DeleteCallsIdMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdMuteResponse parses an HTTP response from a PostCallsIdMuteWithResponse call
func ParsePostCallsIdMuteResponse(rsp *http.Response) (*PostCallsIdMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCallsIdSilenceResponse parses an HTTP response from a DeleteCallsIdSilenceWithResponse call
func ParseDeleteCallsIdSilenceResponse(rsp *http.Response) (*DeleteCallsIdSilenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdSilenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdSilenceResponse parses an HTTP response from a PostCallsIdSilenceWithResponse call
func ParsePostCallsIdSilenceResponse(rsp *http.Response) (*PostCallsIdSilenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdSilenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdTalkResponse parses an HTTP response from a PostCallsIdTalkWithResponse call
func ParsePostCallsIdTalkResponse(rsp *http.Response) (*PostCallsIdTalkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdTalkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCampaigncallsResponse parses an HTTP response from a GetCampaigncallsWithResponse call
func ParseGetCampaigncallsResponse(rsp *http.Response) (*GetCampaigncallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaigncallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCampaigncallsIdResponse parses an HTTP response from a DeleteCampaigncallsIdWithResponse call
func ParseDeleteCampaigncallsIdResponse(rsp *http.Response) (*DeleteCampaigncallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCampaigncallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaigncall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaigncallsIdResponse parses an HTTP response from a GetCampaigncallsIdWithResponse call
func ParseGetCampaigncallsIdResponse(rsp *http.Response) (*GetCampaigncallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaigncallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaigncall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaignsResponse parses an HTTP response from a GetCampaignsWithResponse call
func ParseGetCampaignsResponse(rsp *http.Response) (*GetCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                    `json:"next_page_token,omitempty"`
			Result        *[]CampaignManagerCampaign `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCampaignsResponse parses an HTTP response from a PostCampaignsWithResponse call
func ParsePostCampaignsResponse(rsp *http.Response) (*PostCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCampaignsIdResponse parses an HTTP response from a DeleteCampaignsIdWithResponse call
func ParseDeleteCampaignsIdResponse(rsp *http.Response) (*DeleteCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaignsIdResponse parses an HTTP response from a GetCampaignsIdWithResponse call
func ParseGetCampaignsIdResponse(rsp *http.Response) (*GetCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdResponse parses an HTTP response from a PutCampaignsIdWithResponse call
func ParsePutCampaignsIdResponse(rsp *http.Response) (*PutCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdActionsResponse parses an HTTP response from a PutCampaignsIdActionsWithResponse call
func ParsePutCampaignsIdActionsResponse(rsp *http.Response) (*PutCampaignsIdActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaignsIdCampaigncallsResponse parses an HTTP response from a GetCampaignsIdCampaigncallsWithResponse call
func ParseGetCampaignsIdCampaigncallsResponse(rsp *http.Response) (*GetCampaignsIdCampaigncallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsIdCampaigncallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdNextCampaignIdResponse parses an HTTP response from a PutCampaignsIdNextCampaignIdWithResponse call
func ParsePutCampaignsIdNextCampaignIdResponse(rsp *http.Response) (*PutCampaignsIdNextCampaignIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdNextCampaignIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdResourceInfoResponse parses an HTTP response from a PutCampaignsIdResourceInfoWithResponse call
func ParsePutCampaignsIdResourceInfoResponse(rsp *http.Response) (*PutCampaignsIdResourceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdResourceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdServiceLevelResponse parses an HTTP response from a PutCampaignsIdServiceLevelWithResponse call
func ParsePutCampaignsIdServiceLevelResponse(rsp *http.Response) (*PutCampaignsIdServiceLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdServiceLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdStatusResponse parses an HTTP response from a PutCampaignsIdStatusWithResponse call
func ParsePutCampaignsIdStatusResponse(rsp *http.Response) (*PutCampaignsIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotcallsResponse parses an HTTP response from a GetChatbotcallsWithResponse call
func ParseGetChatbotcallsResponse(rsp *http.Response) (*GetChatbotcallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotcallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                      `json:"next_page_token,omitempty"`
			Result        *[]ChatbotManagerChatbotcall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatbotcallsIdResponse parses an HTTP response from a DeleteChatbotcallsIdWithResponse call
func ParseDeleteChatbotcallsIdResponse(rsp *http.Response) (*DeleteChatbotcallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatbotcallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbotcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotcallsIdResponse parses an HTTP response from a GetChatbotcallsIdWithResponse call
func ParseGetChatbotcallsIdResponse(rsp *http.Response) (*GetChatbotcallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotcallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbotcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotsResponse parses an HTTP response from a GetChatbotsWithResponse call
func ParseGetChatbotsResponse(rsp *http.Response) (*GetChatbotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]ChatbotManagerChatbot `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatbotsResponse parses an HTTP response from a PostChatbotsWithResponse call
func ParsePostChatbotsResponse(rsp *http.Response) (*PostChatbotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatbotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatbotsIdResponse parses an HTTP response from a DeleteChatbotsIdWithResponse call
func ParseDeleteChatbotsIdResponse(rsp *http.Response) (*DeleteChatbotsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatbotsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotsIdResponse parses an HTTP response from a GetChatbotsIdWithResponse call
func ParseGetChatbotsIdResponse(rsp *http.Response) (*GetChatbotsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatbotsIdResponse parses an HTTP response from a PutChatbotsIdWithResponse call
func ParsePutChatbotsIdResponse(rsp *http.Response) (*PutChatbotsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatbotsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatmessagesResponse parses an HTTP response from a GetChatmessagesWithResponse call
func ParseGetChatmessagesResponse(rsp *http.Response) (*GetChatmessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatmessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                   `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerMessagechat `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatmessagesResponse parses an HTTP response from a PostChatmessagesWithResponse call
func ParsePostChatmessagesResponse(rsp *http.Response) (*PostChatmessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatmessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatmessagesIdResponse parses an HTTP response from a DeleteChatmessagesIdWithResponse call
func ParseDeleteChatmessagesIdResponse(rsp *http.Response) (*DeleteChatmessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatmessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatmessagesIdResponse parses an HTTP response from a GetChatmessagesIdWithResponse call
func ParseGetChatmessagesIdResponse(rsp *http.Response) (*GetChatmessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatmessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroommessagesResponse parses an HTTP response from a GetChatroommessagesWithResponse call
func ParseGetChatroommessagesResponse(rsp *http.Response) (*GetChatroommessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroommessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                       `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerMessagechatroom `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatroommessagesResponse parses an HTTP response from a PostChatroommessagesWithResponse call
func ParsePostChatroommessagesResponse(rsp *http.Response) (*PostChatroommessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatroommessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatroommessagesIdResponse parses an HTTP response from a DeleteChatroommessagesIdWithResponse call
func ParseDeleteChatroommessagesIdResponse(rsp *http.Response) (*DeleteChatroommessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatroommessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroommessagesIdResponse parses an HTTP response from a GetChatroommessagesIdWithResponse call
func ParseGetChatroommessagesIdResponse(rsp *http.Response) (*GetChatroommessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroommessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroomsResponse parses an HTTP response from a GetChatroomsWithResponse call
func ParseGetChatroomsResponse(rsp *http.Response) (*GetChatroomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerChatroom `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatroomsResponse parses an HTTP response from a PostChatroomsWithResponse call
func ParsePostChatroomsResponse(rsp *http.Response) (*PostChatroomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatroomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatroomsIdResponse parses an HTTP response from a DeleteChatroomsIdWithResponse call
func ParseDeleteChatroomsIdResponse(rsp *http.Response) (*DeleteChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroomsIdResponse parses an HTTP response from a GetChatroomsIdWithResponse call
func ParseGetChatroomsIdResponse(rsp *http.Response) (*GetChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatroomsIdResponse parses an HTTP response from a PutChatroomsIdWithResponse call
func ParsePutChatroomsIdResponse(rsp *http.Response) (*PutChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatsResponse parses an HTTP response from a GetChatsWithResponse call
func ParseGetChatsResponse(rsp *http.Response) (*GetChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string            `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerChat `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatsResponse parses an HTTP response from a PostChatsWithResponse call
func ParsePostChatsResponse(rsp *http.Response) (*PostChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatsIdResponse parses an HTTP response from a DeleteChatsIdWithResponse call
func ParseDeleteChatsIdResponse(rsp *http.Response) (*DeleteChatsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatsIdResponse parses an HTTP response from a GetChatsIdWithResponse call
func ParseGetChatsIdResponse(rsp *http.Response) (*GetChatsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatsIdResponse parses an HTTP response from a PutChatsIdWithResponse call
func ParsePutChatsIdResponse(rsp *http.Response) (*PutChatsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatsIdParticipantIdsResponse parses an HTTP response from a PostChatsIdParticipantIdsWithResponse call
func ParsePostChatsIdParticipantIdsResponse(rsp *http.Response) (*PostChatsIdParticipantIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatsIdParticipantIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatsIdParticipantIdsParticipantIdResponse parses an HTTP response from a DeleteChatsIdParticipantIdsParticipantIdWithResponse call
func ParseDeleteChatsIdParticipantIdsParticipantIdResponse(rsp *http.Response) (*DeleteChatsIdParticipantIdsParticipantIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatsIdParticipantIdsParticipantIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatsIdRoomOwnerIdResponse parses an HTTP response from a PutChatsIdRoomOwnerIdWithResponse call
func ParsePutChatsIdRoomOwnerIdResponse(rsp *http.Response) (*PutChatsIdRoomOwnerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatsIdRoomOwnerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencecallsResponse parses an HTTP response from a GetConferencecallsWithResponse call
func ParseGetConferencecallsResponse(rsp *http.Response) (*GetConferencecallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencecallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                            `json:"next_page_token,omitempty"`
			Result        *[]ConferenceManagerConferencecall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConferencecallsIdResponse parses an HTTP response from a DeleteConferencecallsIdWithResponse call
func ParseDeleteConferencecallsIdResponse(rsp *http.Response) (*DeleteConferencecallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConferencecallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConferencecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencecallsIdResponse parses an HTTP response from a GetConferencecallsIdWithResponse call
func ParseGetConferencecallsIdResponse(rsp *http.Response) (*GetConferencecallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencecallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConferencecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencesResponse parses an HTTP response from a GetConferencesWithResponse call
func ParseGetConferencesResponse(rsp *http.Response) (*GetConferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]ConferenceManagerConference `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConferencesResponse parses an HTTP response from a PostConferencesWithResponse call
func ParsePostConferencesResponse(rsp *http.Response) (*PostConferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConferencesIdResponse parses an HTTP response from a DeleteConferencesIdWithResponse call
func ParseDeleteConferencesIdResponse(rsp *http.Response) (*DeleteConferencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConferencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencesIdResponse parses an HTTP response from a GetConferencesIdWithResponse call
func ParseGetConferencesIdResponse(rsp *http.Response) (*GetConferencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConferencesIdResponse parses an HTTP response from a PutConferencesIdWithResponse call
func ParsePutConferencesIdResponse(rsp *http.Response) (*PutConferencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConferencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencesIdMediaStreamResponse parses an HTTP response from a GetConferencesIdMediaStreamWithResponse call
func ParseGetConferencesIdMediaStreamResponse(rsp *http.Response) (*GetConferencesIdMediaStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencesIdMediaStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdRecordingStartResponse parses an HTTP response from a PostConferencesIdRecordingStartWithResponse call
func ParsePostConferencesIdRecordingStartResponse(rsp *http.Response) (*PostConferencesIdRecordingStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdRecordingStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdRecordingStopResponse parses an HTTP response from a PostConferencesIdRecordingStopWithResponse call
func ParsePostConferencesIdRecordingStopResponse(rsp *http.Response) (*PostConferencesIdRecordingStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdRecordingStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdTranscribeStartResponse parses an HTTP response from a PostConferencesIdTranscribeStartWithResponse call
func ParsePostConferencesIdTranscribeStartResponse(rsp *http.Response) (*PostConferencesIdTranscribeStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdTranscribeStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdTranscribeStopResponse parses an HTTP response from a PostConferencesIdTranscribeStopWithResponse call
func ParsePostConferencesIdTranscribeStopResponse(rsp *http.Response) (*PostConferencesIdTranscribeStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdTranscribeStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
