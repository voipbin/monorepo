// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package zmqpubhandler -destination ./mock_zmqpubhandler.go -source main.go -build_flags=-mod=mod
//

// Package zmqpubhandler is a generated GoMock package.
package zmqpubhandler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockZMQPubHandler is a mock of ZMQPubHandler interface.
type MockZMQPubHandler struct {
	ctrl     *gomock.Controller
	recorder *MockZMQPubHandlerMockRecorder
	isgomock struct{}
}

// MockZMQPubHandlerMockRecorder is the mock recorder for MockZMQPubHandler.
type MockZMQPubHandlerMockRecorder struct {
	mock *MockZMQPubHandler
}

// NewMockZMQPubHandler creates a new mock instance.
func NewMockZMQPubHandler(ctrl *gomock.Controller) *MockZMQPubHandler {
	mock := &MockZMQPubHandler{ctrl: ctrl}
	mock.recorder = &MockZMQPubHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZMQPubHandler) EXPECT() *MockZMQPubHandlerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m_2 *MockZMQPubHandler) Publish(topic, m string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Publish", topic, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockZMQPubHandlerMockRecorder) Publish(topic, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockZMQPubHandler)(nil).Publish), topic, m)
}
