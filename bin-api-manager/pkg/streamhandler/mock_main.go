// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package streamhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package streamhandler is a generated GoMock package.
package streamhandler

import (
	context "context"
	stream "monorepo/bin-api-manager/models/stream"
	externalmedia "monorepo/bin-call-manager/models/externalmedia"
	net "net"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	websocket "github.com/gorilla/websocket"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamHandler is a mock of StreamHandler interface.
type MockStreamHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStreamHandlerMockRecorder
	isgomock struct{}
}

// MockStreamHandlerMockRecorder is the mock recorder for MockStreamHandler.
type MockStreamHandlerMockRecorder struct {
	mock *MockStreamHandler
}

// NewMockStreamHandler creates a new mock instance.
func NewMockStreamHandler(ctrl *gomock.Controller) *MockStreamHandler {
	mock := &MockStreamHandler{ctrl: ctrl}
	mock.recorder = &MockStreamHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamHandler) EXPECT() *MockStreamHandlerMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockStreamHandler) Process(conn net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", conn)
}

// Process indicates an expected call of Process.
func (mr *MockStreamHandlerMockRecorder) Process(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockStreamHandler)(nil).Process), conn)
}

// Start mocks base method.
func (m *MockStreamHandler) Start(ctx context.Context, ws *websocket.Conn, referenceType externalmedia.ReferenceType, referenceID uuid.UUID, encapsulation stream.Encapsulation) (*stream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, ws, referenceType, referenceID, encapsulation)
	ret0, _ := ret[0].(*stream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockStreamHandlerMockRecorder) Start(ctx, ws, referenceType, referenceID, encapsulation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStreamHandler)(nil).Start), ctx, ws, referenceType, referenceID, encapsulation)
}
