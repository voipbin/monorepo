// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package zmqsubhandler is a generated GoMock package.
package zmqsubhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockZMQSubHandler is a mock of ZMQSubHandler interface.
type MockZMQSubHandler struct {
	ctrl     *gomock.Controller
	recorder *MockZMQSubHandlerMockRecorder
}

// MockZMQSubHandlerMockRecorder is the mock recorder for MockZMQSubHandler.
type MockZMQSubHandlerMockRecorder struct {
	mock *MockZMQSubHandler
}

// NewMockZMQSubHandler creates a new mock instance.
func NewMockZMQSubHandler(ctrl *gomock.Controller) *MockZMQSubHandler {
	mock := &MockZMQSubHandler{ctrl: ctrl}
	mock.recorder = &MockZMQSubHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZMQSubHandler) EXPECT() *MockZMQSubHandlerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockZMQSubHandler) Run(ctx context.Context, ws *websocket.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, ws)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockZMQSubHandlerMockRecorder) Run(ctx, ws interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockZMQSubHandler)(nil).Run), ctx, ws)
}

// Subscribe mocks base method.
func (m *MockZMQSubHandler) Subscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockZMQSubHandlerMockRecorder) Subscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockZMQSubHandler)(nil).Subscribe), topic)
}

// Terminate mocks base method.
func (m *MockZMQSubHandler) Terminate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate")
}

// Terminate indicates an expected call of Terminate.
func (mr *MockZMQSubHandlerMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockZMQSubHandler)(nil).Terminate))
}

// Unsubscribe mocks base method.
func (m *MockZMQSubHandler) Unsubscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockZMQSubHandlerMockRecorder) Unsubscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockZMQSubHandler)(nil).Unsubscribe), topic)
}
