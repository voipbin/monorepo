// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package servicehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package servicehandler is a generated GoMock package.
package servicehandler

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceHandler is a mock of ServiceHandler interface.
type MockServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceHandlerMockRecorder
	isgomock struct{}
}

// MockServiceHandlerMockRecorder is the mock recorder for MockServiceHandler.
type MockServiceHandlerMockRecorder struct {
	mock *MockServiceHandler
}

// NewMockServiceHandler creates a new mock instance.
func NewMockServiceHandler(ctrl *gomock.Controller) *MockServiceHandler {
	mock := &MockServiceHandler{ctrl: ctrl}
	mock.recorder = &MockServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceHandler) EXPECT() *MockServiceHandlerMockRecorder {
	return m.recorder
}

// RecordingFileMove mocks base method.
func (m *MockServiceHandler) RecordingFileMove(ctx context.Context, filenames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingFileMove", ctx, filenames)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingFileMove indicates an expected call of RecordingFileMove.
func (mr *MockServiceHandlerMockRecorder) RecordingFileMove(ctx, filenames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingFileMove", reflect.TypeOf((*MockServiceHandler)(nil).RecordingFileMove), ctx, filenames)
}
