// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package routehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package routehandler is a generated GoMock package.
package routehandler

import (
	context "context"
	route "monorepo/bin-route-manager/models/route"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRouteHandler is a mock of RouteHandler interface.
type MockRouteHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRouteHandlerMockRecorder
	isgomock struct{}
}

// MockRouteHandlerMockRecorder is the mock recorder for MockRouteHandler.
type MockRouteHandlerMockRecorder struct {
	mock *MockRouteHandler
}

// NewMockRouteHandler creates a new mock instance.
func NewMockRouteHandler(ctrl *gomock.Controller) *MockRouteHandler {
	mock := &MockRouteHandler{ctrl: ctrl}
	mock.recorder = &MockRouteHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteHandler) EXPECT() *MockRouteHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRouteHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, providerID uuid.UUID, priority int, target string) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, providerID, priority, target)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRouteHandlerMockRecorder) Create(ctx, customerID, name, detail, providerID, priority, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRouteHandler)(nil).Create), ctx, customerID, name, detail, providerID, priority, target)
}

// Delete mocks base method.
func (m *MockRouteHandler) Delete(ctx context.Context, id uuid.UUID) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteHandler)(nil).Delete), ctx, id)
}

// DialrouteGets mocks base method.
func (m *MockRouteHandler) DialrouteGets(ctx context.Context, customerID uuid.UUID, target string) ([]*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialrouteGets", ctx, customerID, target)
	ret0, _ := ret[0].([]*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialrouteGets indicates an expected call of DialrouteGets.
func (mr *MockRouteHandlerMockRecorder) DialrouteGets(ctx, customerID, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialrouteGets", reflect.TypeOf((*MockRouteHandler)(nil).DialrouteGets), ctx, customerID, target)
}

// Get mocks base method.
func (m *MockRouteHandler) Get(ctx context.Context, id uuid.UUID) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRouteHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteHandler)(nil).Get), ctx, id)
}

// GetsByCustomerID mocks base method.
func (m *MockRouteHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockRouteHandlerMockRecorder) GetsByCustomerID(ctx, customerID, token, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockRouteHandler)(nil).GetsByCustomerID), ctx, customerID, token, limit)
}

// GetsByTarget mocks base method.
func (m *MockRouteHandler) GetsByTarget(ctx context.Context, customerID uuid.UUID, target string) ([]*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByTarget", ctx, customerID, target)
	ret0, _ := ret[0].([]*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByTarget indicates an expected call of GetsByTarget.
func (mr *MockRouteHandlerMockRecorder) GetsByTarget(ctx, customerID, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByTarget", reflect.TypeOf((*MockRouteHandler)(nil).GetsByTarget), ctx, customerID, target)
}

// Update mocks base method.
func (m *MockRouteHandler) Update(ctx context.Context, id uuid.UUID, name, detail string, providerID uuid.UUID, priority int, target string) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail, providerID, priority, target)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteHandlerMockRecorder) Update(ctx, id, name, detail, providerID, priority, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteHandler)(nil).Update), ctx, id, name, detail, providerID, priority, target)
}
