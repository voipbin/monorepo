// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	provider "monorepo/bin-route-manager/models/provider"
	route "monorepo/bin-route-manager/models/route"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// ProviderCreate mocks base method.
func (m *MockDBHandler) ProviderCreate(ctx context.Context, c *provider.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProviderCreate indicates an expected call of ProviderCreate.
func (mr *MockDBHandlerMockRecorder) ProviderCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderCreate", reflect.TypeOf((*MockDBHandler)(nil).ProviderCreate), ctx, c)
}

// ProviderDelete mocks base method.
func (m *MockDBHandler) ProviderDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProviderDelete indicates an expected call of ProviderDelete.
func (mr *MockDBHandlerMockRecorder) ProviderDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderDelete", reflect.TypeOf((*MockDBHandler)(nil).ProviderDelete), ctx, id)
}

// ProviderGet mocks base method.
func (m *MockDBHandler) ProviderGet(ctx context.Context, id uuid.UUID) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderGet", ctx, id)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderGet indicates an expected call of ProviderGet.
func (mr *MockDBHandlerMockRecorder) ProviderGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderGet", reflect.TypeOf((*MockDBHandler)(nil).ProviderGet), ctx, id)
}

// ProviderGets mocks base method.
func (m *MockDBHandler) ProviderGets(ctx context.Context, token string, limit uint64) ([]*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderGets", ctx, token, limit)
	ret0, _ := ret[0].([]*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderGets indicates an expected call of ProviderGets.
func (mr *MockDBHandlerMockRecorder) ProviderGets(ctx, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderGets", reflect.TypeOf((*MockDBHandler)(nil).ProviderGets), ctx, token, limit)
}

// ProviderUpdate mocks base method.
func (m *MockDBHandler) ProviderUpdate(ctx context.Context, p *provider.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderUpdate", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProviderUpdate indicates an expected call of ProviderUpdate.
func (mr *MockDBHandlerMockRecorder) ProviderUpdate(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderUpdate", reflect.TypeOf((*MockDBHandler)(nil).ProviderUpdate), ctx, p)
}

// RouteCreate mocks base method.
func (m *MockDBHandler) RouteCreate(ctx context.Context, r *route.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteCreate", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteCreate indicates an expected call of RouteCreate.
func (mr *MockDBHandlerMockRecorder) RouteCreate(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteCreate", reflect.TypeOf((*MockDBHandler)(nil).RouteCreate), ctx, r)
}

// RouteDelete mocks base method.
func (m *MockDBHandler) RouteDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteDelete indicates an expected call of RouteDelete.
func (mr *MockDBHandlerMockRecorder) RouteDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteDelete", reflect.TypeOf((*MockDBHandler)(nil).RouteDelete), ctx, id)
}

// RouteGet mocks base method.
func (m *MockDBHandler) RouteGet(ctx context.Context, id uuid.UUID) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteGet", ctx, id)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGet indicates an expected call of RouteGet.
func (mr *MockDBHandlerMockRecorder) RouteGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGet", reflect.TypeOf((*MockDBHandler)(nil).RouteGet), ctx, id)
}

// RouteGets mocks base method.
func (m *MockDBHandler) RouteGets(ctx context.Context, token string, limit uint64) ([]*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteGets", ctx, token, limit)
	ret0, _ := ret[0].([]*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGets indicates an expected call of RouteGets.
func (mr *MockDBHandlerMockRecorder) RouteGets(ctx, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGets", reflect.TypeOf((*MockDBHandler)(nil).RouteGets), ctx, token, limit)
}

// RouteGetsByCustomerID mocks base method.
func (m *MockDBHandler) RouteGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGetsByCustomerID indicates an expected call of RouteGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) RouteGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).RouteGetsByCustomerID), ctx, customerID, token, limit)
}

// RouteGetsByCustomerIDWithTarget mocks base method.
func (m *MockDBHandler) RouteGetsByCustomerIDWithTarget(ctx context.Context, customerID uuid.UUID, target string) ([]*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteGetsByCustomerIDWithTarget", ctx, customerID, target)
	ret0, _ := ret[0].([]*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGetsByCustomerIDWithTarget indicates an expected call of RouteGetsByCustomerIDWithTarget.
func (mr *MockDBHandlerMockRecorder) RouteGetsByCustomerIDWithTarget(ctx, customerID, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGetsByCustomerIDWithTarget", reflect.TypeOf((*MockDBHandler)(nil).RouteGetsByCustomerIDWithTarget), ctx, customerID, target)
}

// RouteUpdate mocks base method.
func (m *MockDBHandler) RouteUpdate(ctx context.Context, id uuid.UUID, name, detail string, providerID uuid.UUID, priority int, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteUpdate", ctx, id, name, detail, providerID, priority, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteUpdate indicates an expected call of RouteUpdate.
func (mr *MockDBHandlerMockRecorder) RouteUpdate(ctx, id, name, detail, providerID, priority, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteUpdate", reflect.TypeOf((*MockDBHandler)(nil).RouteUpdate), ctx, id, name, detail, providerID, priority, target)
}
