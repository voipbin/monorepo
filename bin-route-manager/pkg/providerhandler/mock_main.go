// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package providerhandler is a generated GoMock package.
package providerhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	provider "gitlab.com/voipbin/bin-manager/route-manager.git/models/provider"
)

// MockProviderHandler is a mock of ProviderHandler interface.
type MockProviderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProviderHandlerMockRecorder
}

// MockProviderHandlerMockRecorder is the mock recorder for MockProviderHandler.
type MockProviderHandlerMockRecorder struct {
	mock *MockProviderHandler
}

// NewMockProviderHandler creates a new mock instance.
func NewMockProviderHandler(ctrl *gomock.Controller) *MockProviderHandler {
	mock := &MockProviderHandler{ctrl: ctrl}
	mock.recorder = &MockProviderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderHandler) EXPECT() *MockProviderHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProviderHandler) Create(ctx context.Context, providerType provider.Type, hostname, techPrefix, techPostfix string, techHeaders map[string]string, name, detail string) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProviderHandlerMockRecorder) Create(ctx, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProviderHandler)(nil).Create), ctx, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
}

// Delete mocks base method.
func (m *MockProviderHandler) Delete(ctx context.Context, id uuid.UUID) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProviderHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockProviderHandler) Get(ctx context.Context, id uuid.UUID) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProviderHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProviderHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockProviderHandler) Gets(ctx context.Context, token string, limit uint64) ([]*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, limit)
	ret0, _ := ret[0].([]*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockProviderHandlerMockRecorder) Gets(ctx, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockProviderHandler)(nil).Gets), ctx, token, limit)
}

// Update mocks base method.
func (m *MockProviderHandler) Update(ctx context.Context, id uuid.UUID, providerType provider.Type, hostname, techPrefix, techPostfix string, techHeaders map[string]string, name, detail string) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProviderHandlerMockRecorder) Update(ctx, id, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProviderHandler)(nil).Update), ctx, id, providerType, hostname, techPrefix, techPostfix, techHeaders, name, detail)
}
