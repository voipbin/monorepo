// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package cachehandler -destination ./mock_cachehandler.go -source main.go -build_flags=-mod=mod
//

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	provider "monorepo/bin-route-manager/models/provider"
	route "monorepo/bin-route-manager/models/route"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
	isgomock struct{}
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// ProviderGet mocks base method.
func (m *MockCacheHandler) ProviderGet(ctx context.Context, id uuid.UUID) (*provider.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderGet", ctx, id)
	ret0, _ := ret[0].(*provider.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderGet indicates an expected call of ProviderGet.
func (mr *MockCacheHandlerMockRecorder) ProviderGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderGet", reflect.TypeOf((*MockCacheHandler)(nil).ProviderGet), ctx, id)
}

// ProviderSet mocks base method.
func (m *MockCacheHandler) ProviderSet(ctx context.Context, data *provider.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProviderSet indicates an expected call of ProviderSet.
func (mr *MockCacheHandlerMockRecorder) ProviderSet(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderSet", reflect.TypeOf((*MockCacheHandler)(nil).ProviderSet), ctx, data)
}

// RouteDelete mocks base method.
func (m *MockCacheHandler) RouteDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteDelete indicates an expected call of RouteDelete.
func (mr *MockCacheHandlerMockRecorder) RouteDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteDelete", reflect.TypeOf((*MockCacheHandler)(nil).RouteDelete), ctx, id)
}

// RouteGet mocks base method.
func (m *MockCacheHandler) RouteGet(ctx context.Context, id uuid.UUID) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteGet", ctx, id)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGet indicates an expected call of RouteGet.
func (mr *MockCacheHandlerMockRecorder) RouteGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGet", reflect.TypeOf((*MockCacheHandler)(nil).RouteGet), ctx, id)
}

// RouteSet mocks base method.
func (m *MockCacheHandler) RouteSet(ctx context.Context, data *route.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteSet indicates an expected call of RouteSet.
func (mr *MockCacheHandlerMockRecorder) RouteSet(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteSet", reflect.TypeOf((*MockCacheHandler)(nil).RouteSet), ctx, data)
}
