// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package transcribehandler is a generated GoMock package.
package transcribehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	call "monorepo/bin-call-manager/models/call"
	confbridge "monorepo/bin-call-manager/models/confbridge"
	customer "monorepo/bin-customer-manager/models/customer"
	transcribe "monorepo/bin-transcribe-manager/models/transcribe"
)

// MockTranscribeHandler is a mock of TranscribeHandler interface.
type MockTranscribeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTranscribeHandlerMockRecorder
}

// MockTranscribeHandlerMockRecorder is the mock recorder for MockTranscribeHandler.
type MockTranscribeHandlerMockRecorder struct {
	mock *MockTranscribeHandler
}

// NewMockTranscribeHandler creates a new mock instance.
func NewMockTranscribeHandler(ctrl *gomock.Controller) *MockTranscribeHandler {
	mock := &MockTranscribeHandler{ctrl: ctrl}
	mock.recorder = &MockTranscribeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscribeHandler) EXPECT() *MockTranscribeHandlerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTranscribeHandler) Delete(ctx context.Context, id uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTranscribeHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTranscribeHandler)(nil).Delete), ctx, id)
}

// EventCMCallHangup mocks base method.
func (m *MockTranscribeHandler) EventCMCallHangup(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCMCallHangup", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCMCallHangup indicates an expected call of EventCMCallHangup.
func (mr *MockTranscribeHandlerMockRecorder) EventCMCallHangup(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCMCallHangup", reflect.TypeOf((*MockTranscribeHandler)(nil).EventCMCallHangup), ctx, c)
}

// EventCMConfbridgeTerminated mocks base method.
func (m *MockTranscribeHandler) EventCMConfbridgeTerminated(ctx context.Context, c *confbridge.Confbridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCMConfbridgeTerminated", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCMConfbridgeTerminated indicates an expected call of EventCMConfbridgeTerminated.
func (mr *MockTranscribeHandlerMockRecorder) EventCMConfbridgeTerminated(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCMConfbridgeTerminated", reflect.TypeOf((*MockTranscribeHandler)(nil).EventCMConfbridgeTerminated), ctx, c)
}

// EventCUCustomerDeleted mocks base method.
func (m *MockTranscribeHandler) EventCUCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCUCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCUCustomerDeleted indicates an expected call of EventCUCustomerDeleted.
func (mr *MockTranscribeHandlerMockRecorder) EventCUCustomerDeleted(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCUCustomerDeleted", reflect.TypeOf((*MockTranscribeHandler)(nil).EventCUCustomerDeleted), ctx, cu)
}

// Get mocks base method.
func (m *MockTranscribeHandler) Get(ctx context.Context, id uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTranscribeHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTranscribeHandler)(nil).Get), ctx, id)
}

// GetByReferenceIDAndLanguage mocks base method.
func (m *MockTranscribeHandler) GetByReferenceIDAndLanguage(ctx context.Context, referenceID uuid.UUID, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceIDAndLanguage", ctx, referenceID, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceIDAndLanguage indicates an expected call of GetByReferenceIDAndLanguage.
func (mr *MockTranscribeHandlerMockRecorder) GetByReferenceIDAndLanguage(ctx, referenceID, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceIDAndLanguage", reflect.TypeOf((*MockTranscribeHandler)(nil).GetByReferenceIDAndLanguage), ctx, referenceID, language)
}

// Gets mocks base method.
func (m *MockTranscribeHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockTranscribeHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockTranscribeHandler)(nil).Gets), ctx, size, token, filters)
}

// HealthCheck mocks base method.
func (m *MockTranscribeHandler) HealthCheck(ctx context.Context, id uuid.UUID, retryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", ctx, id, retryCount)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockTranscribeHandlerMockRecorder) HealthCheck(ctx, id, retryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockTranscribeHandler)(nil).HealthCheck), ctx, id, retryCount)
}

// Start mocks base method.
func (m *MockTranscribeHandler) Start(ctx context.Context, customerID uuid.UUID, referenceType transcribe.ReferenceType, referenceID uuid.UUID, language string, direction transcribe.Direction) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, customerID, referenceType, referenceID, language, direction)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTranscribeHandlerMockRecorder) Start(ctx, customerID, referenceType, referenceID, language, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTranscribeHandler)(nil).Start), ctx, customerID, referenceType, referenceID, language, direction)
}

// Stop mocks base method.
func (m *MockTranscribeHandler) Stop(ctx context.Context, id uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockTranscribeHandlerMockRecorder) Stop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTranscribeHandler)(nil).Stop), ctx, id)
}
