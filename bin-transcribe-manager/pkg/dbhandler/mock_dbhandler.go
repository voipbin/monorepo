// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	streaming "monorepo/bin-transcribe-manager/models/streaming"
	transcribe "monorepo/bin-transcribe-manager/models/transcribe"
	transcript "monorepo/bin-transcribe-manager/models/transcript"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// StreamingCreate mocks base method.
func (m *MockDBHandler) StreamingCreate(ctx context.Context, s *streaming.Streaming) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingCreate", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamingCreate indicates an expected call of StreamingCreate.
func (mr *MockDBHandlerMockRecorder) StreamingCreate(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingCreate", reflect.TypeOf((*MockDBHandler)(nil).StreamingCreate), ctx, s)
}

// StreamingGet mocks base method.
func (m *MockDBHandler) StreamingGet(ctx context.Context, id uuid.UUID) (*streaming.Streaming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingGet", ctx, id)
	ret0, _ := ret[0].(*streaming.Streaming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamingGet indicates an expected call of StreamingGet.
func (mr *MockDBHandlerMockRecorder) StreamingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingGet", reflect.TypeOf((*MockDBHandler)(nil).StreamingGet), ctx, id)
}

// TranscribeAddTranscript mocks base method.
func (m *MockDBHandler) TranscribeAddTranscript(ctx context.Context, id uuid.UUID, t *transcript.Transcript) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeAddTranscript", ctx, id, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeAddTranscript indicates an expected call of TranscribeAddTranscript.
func (mr *MockDBHandlerMockRecorder) TranscribeAddTranscript(ctx, id, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeAddTranscript", reflect.TypeOf((*MockDBHandler)(nil).TranscribeAddTranscript), ctx, id, t)
}

// TranscribeCreate mocks base method.
func (m *MockDBHandler) TranscribeCreate(ctx context.Context, t *transcribe.Transcribe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeCreate indicates an expected call of TranscribeCreate.
func (mr *MockDBHandlerMockRecorder) TranscribeCreate(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeCreate", reflect.TypeOf((*MockDBHandler)(nil).TranscribeCreate), ctx, t)
}

// TranscribeDelete mocks base method.
func (m *MockDBHandler) TranscribeDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeDelete indicates an expected call of TranscribeDelete.
func (mr *MockDBHandlerMockRecorder) TranscribeDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeDelete", reflect.TypeOf((*MockDBHandler)(nil).TranscribeDelete), ctx, id)
}

// TranscribeGet mocks base method.
func (m *MockDBHandler) TranscribeGet(ctx context.Context, id uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeGet", ctx, id)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeGet indicates an expected call of TranscribeGet.
func (mr *MockDBHandlerMockRecorder) TranscribeGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeGet", reflect.TypeOf((*MockDBHandler)(nil).TranscribeGet), ctx, id)
}

// TranscribeGetByReferenceIDAndLanguage mocks base method.
func (m *MockDBHandler) TranscribeGetByReferenceIDAndLanguage(ctx context.Context, referenceID uuid.UUID, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeGetByReferenceIDAndLanguage", ctx, referenceID, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeGetByReferenceIDAndLanguage indicates an expected call of TranscribeGetByReferenceIDAndLanguage.
func (mr *MockDBHandlerMockRecorder) TranscribeGetByReferenceIDAndLanguage(ctx, referenceID, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeGetByReferenceIDAndLanguage", reflect.TypeOf((*MockDBHandler)(nil).TranscribeGetByReferenceIDAndLanguage), ctx, referenceID, language)
}

// TranscribeGets mocks base method.
func (m *MockDBHandler) TranscribeGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeGets indicates an expected call of TranscribeGets.
func (mr *MockDBHandlerMockRecorder) TranscribeGets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeGets", reflect.TypeOf((*MockDBHandler)(nil).TranscribeGets), ctx, size, token, filters)
}

// TranscribeSetStatus mocks base method.
func (m *MockDBHandler) TranscribeSetStatus(ctx context.Context, id uuid.UUID, status transcribe.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeSetStatus indicates an expected call of TranscribeSetStatus.
func (mr *MockDBHandlerMockRecorder) TranscribeSetStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeSetStatus", reflect.TypeOf((*MockDBHandler)(nil).TranscribeSetStatus), ctx, id, status)
}

// TranscriptCreate mocks base method.
func (m *MockDBHandler) TranscriptCreate(ctx context.Context, t *transcript.Transcript) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscriptCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscriptCreate indicates an expected call of TranscriptCreate.
func (mr *MockDBHandlerMockRecorder) TranscriptCreate(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscriptCreate", reflect.TypeOf((*MockDBHandler)(nil).TranscriptCreate), ctx, t)
}

// TranscriptDelete mocks base method.
func (m *MockDBHandler) TranscriptDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscriptDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscriptDelete indicates an expected call of TranscriptDelete.
func (mr *MockDBHandlerMockRecorder) TranscriptDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscriptDelete", reflect.TypeOf((*MockDBHandler)(nil).TranscriptDelete), ctx, id)
}

// TranscriptGet mocks base method.
func (m *MockDBHandler) TranscriptGet(ctx context.Context, id uuid.UUID) (*transcript.Transcript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscriptGet", ctx, id)
	ret0, _ := ret[0].(*transcript.Transcript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscriptGet indicates an expected call of TranscriptGet.
func (mr *MockDBHandlerMockRecorder) TranscriptGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscriptGet", reflect.TypeOf((*MockDBHandler)(nil).TranscriptGet), ctx, id)
}

// TranscriptGets mocks base method.
func (m *MockDBHandler) TranscriptGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*transcript.Transcript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscriptGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*transcript.Transcript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscriptGets indicates an expected call of TranscriptGets.
func (mr *MockDBHandlerMockRecorder) TranscriptGets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscriptGets", reflect.TypeOf((*MockDBHandler)(nil).TranscriptGets), ctx, size, token, filters)
}
