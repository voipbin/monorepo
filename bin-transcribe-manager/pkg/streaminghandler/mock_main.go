// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package streaminghandler is a generated GoMock package.
package streaminghandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	streaming "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/streaming"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
	transcript "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcript"
)

// MockStreamingHandler is a mock of StreamingHandler interface.
type MockStreamingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingHandlerMockRecorder
}

// MockStreamingHandlerMockRecorder is the mock recorder for MockStreamingHandler.
type MockStreamingHandlerMockRecorder struct {
	mock *MockStreamingHandler
}

// NewMockStreamingHandler creates a new mock instance.
func NewMockStreamingHandler(ctrl *gomock.Controller) *MockStreamingHandler {
	mock := &MockStreamingHandler{ctrl: ctrl}
	mock.recorder = &MockStreamingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingHandler) EXPECT() *MockStreamingHandlerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockStreamingHandler) Start(ctx context.Context, customerID, transcribeID uuid.UUID, referenceType transcribe.ReferenceType, referenceID uuid.UUID, language string, direction transcript.Direction) (*streaming.Streaming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, customerID, transcribeID, referenceType, referenceID, language, direction)
	ret0, _ := ret[0].(*streaming.Streaming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockStreamingHandlerMockRecorder) Start(ctx, customerID, transcribeID, referenceType, referenceID, language, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStreamingHandler)(nil).Start), ctx, customerID, transcribeID, referenceType, referenceID, language, direction)
}

// Stop mocks base method.
func (m *MockStreamingHandler) Stop(ctx context.Context, id uuid.UUID) (*streaming.Streaming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(*streaming.Streaming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockStreamingHandlerMockRecorder) Stop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStreamingHandler)(nil).Stop), ctx, id)
}
