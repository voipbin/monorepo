version: 2.1

context_production: &context_production
  context: 
    - production

parameters:
  source-directory:
    type: string
    default: ""

  run-bin-agent-manager:
    type: boolean
    default: false

  run-bin-api-manager:
    type: boolean
    default: false

  run-bin-billing-manager:
    type: boolean
    default: false

  run-bin-call-manager:
    type: boolean
    default: false

  run-bin-campaign-manager:
    type: boolean
    default: false

  run-bin-chatbot-manager:
    type: boolean
    default: false

  run-bin-chat-manager:
    type: boolean
    default: false

  run-bin-common-handler:
    type: boolean
    default: false

  run-bin-conference-manager:
    type: boolean
    default: false

  run-bin-conversation-manager:
    type: boolean
    default: false

  run-bin-customer-manager:
    type: boolean
    default: false

  run-bin-dbscheme-bin-manager:
    type: boolean
    default: false

  run-bin-flow-manager:
    type: boolean
    default: false

  run-bin-hook-manager:
    type: boolean
    default: false

  run-bin-message-manager:
    type: boolean
    default: false

  run-bin-number-manager:
    type: boolean
    default: false

  run-bin-outdial-manager:
    type: boolean
    default: false

  run-bin-queue-manager:
    type: boolean
    default: false

  run-bin-registrar-manager:
    type: boolean
    default: false

  run-bin-route-manager:
    type: boolean
    default: false

  run-bin-storage-manager:
    type: boolean
    default: false

  run-bin-tag-manager:
    type: boolean
    default: false

  run-bin-transcribe-manager:
    type: boolean
    default: false

  run-bin-transfer-manager:
    type: boolean
    default: false

  run-bin-tts-manager:
    type: boolean
    default: false

  run-bin-webhook-manager:
    type: boolean
    default: false

workflows:
  bin-agent-manager:
    when: << pipeline.parameters.run-bin-call-manager >>
    jobs:
      - checkout-bin-agent-manager
      - ensure:
          <<: *context_production
          requires:
            - checkout-bin-agent-manager
      - test:
          <<: *context_production
          requires:
            - ensure

jobs:
  checkout-bin-agent-manager:
    docker:
      - image: cimg/go:1.22
    steps:
      - checkout
      - run:
        command: |
          ls -tlr
          cd bin-agent-manager
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - ./*
            - ./.*

  ensure:
    docker:
      - image: cimg/go:1.22
    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: Install dependencies and vendor
          command: |
            ls -tlr
            go mod download
            go mod vendor
            pwd
            ls -tlr

      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - ./*
            - ./.*

  test:
    docker:
      - image: cimg/go:1.22
    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: Install extra dependencies
          command: |
            sudo apt-get update && sudo apt install -y pkg-config libzmq5 libzmq3-dev libczmq4 libczmq-dev

      - run:
          name: Linting and vet
          command: |
            golangci-lint run -v --timeout 5m
            go vet $(go list ./...)

      - run:
          name: Testing
          command: |
            go test -coverprofile cp.out -v $(go list ./...)
            go tool cover -html=cp.out -o cp.html
            go tool cover -func=cp.out

      - run:
          name: Run gotestsum
          command: |
            gotestsum --junitfile test-results.xml

      - store_test_results:
          path: test-results.xml

  # build:
  #   docker:
  #       - image: cimg/gcp:2024.03
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - attach_workspace:
  #         at: /home/circleci/project

  #     - run:
  #         name: Config service account
  #         command: |
  #             echo $CC_CGP_SERVICE_ACCOUNT > ./google_service_account.json
  #             gcloud auth activate-service-account --key-file=./google_service_account.json
  #             gcloud config set project $CC_GCP_PROJECT_ID
  #             gcloud container clusters get-credentials $CC_GCP_CLUSTER_NAME --zone $CC_GCP_CLUSTER_ZONE --project $CC_GCP_PROJECT_ID

  #     - run:
  #         name: Config registry
  #         command: |
  #             cat google_service_account.json | docker login -u _json_key_base64 --password-stdin pkg.dev
  #             gcloud auth activate-service-account --key-file=google_service_account.json
  #             gcloud auth configure-docker $CC_REGISTRY_LOCATION

  #     - run:
  #         name: Building Docker image and push
  #         command: |
  #           docker build --tag $CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:$CIRCLE_SHA1 --tag $CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:latest .
  #           docker push $CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:$CIRCLE_SHA1

  # release:
  #   docker:
  #     - image: google/cloud-sdk:debian_component_based
  #   steps:
  #     - checkout
  #     - run:
  #         name: Config service account
  #         command: |
  #             echo $CC_CGP_SERVICE_ACCOUNT > ./google_service_account.json
  #             gcloud auth activate-service-account --key-file=./google_service_account.json
  #             gcloud config set project $CC_GCP_PROJECT_ID
  #             gcloud container clusters get-credentials $CC_GCP_CLUSTER_NAME --zone $CC_GCP_CLUSTER_ZONE --project $CC_GCP_PROJECT_ID

  #     - run:
  #         name: Config registry
  #         command: |
  #             cat google_service_account.json | docker login -u _json_key_base64 --password-stdin pkg.dev
  #             gcloud auth activate-service-account --key-file=google_service_account.json
  #             gcloud auth configure-docker $CC_REGISTRY_LOCATION

  #     - run:
  #         name: Release
  #         command: |
  #           cd k8s
  #           kustomize edit set image api-manager-image=$CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:$CIRCLE_SHA1
  #           kubectl apply -k ./ -v6
