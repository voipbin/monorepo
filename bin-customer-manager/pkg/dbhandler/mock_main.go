// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	customer "gitlab.com/voipbin/bin-manager/customer-manager.git/models/customer"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// CustomerCreate mocks base method.
func (m *MockDBHandler) CustomerCreate(ctx context.Context, b *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerCreate indicates an expected call of CustomerCreate.
func (mr *MockDBHandlerMockRecorder) CustomerCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerCreate", reflect.TypeOf((*MockDBHandler)(nil).CustomerCreate), ctx, b)
}

// CustomerDelete mocks base method.
func (m *MockDBHandler) CustomerDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerDelete indicates an expected call of CustomerDelete.
func (mr *MockDBHandlerMockRecorder) CustomerDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerDelete", reflect.TypeOf((*MockDBHandler)(nil).CustomerDelete), ctx, id)
}

// CustomerGet mocks base method.
func (m *MockDBHandler) CustomerGet(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGet", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGet indicates an expected call of CustomerGet.
func (mr *MockDBHandlerMockRecorder) CustomerGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGet", reflect.TypeOf((*MockDBHandler)(nil).CustomerGet), ctx, id)
}

// CustomerGets mocks base method.
func (m *MockDBHandler) CustomerGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGets indicates an expected call of CustomerGets.
func (mr *MockDBHandlerMockRecorder) CustomerGets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGets", reflect.TypeOf((*MockDBHandler)(nil).CustomerGets), ctx, size, token, filters)
}

// CustomerSetBasicInfo mocks base method.
func (m *MockDBHandler) CustomerSetBasicInfo(ctx context.Context, id uuid.UUID, name, detail, email, phoneNumber, address string, webhookMethod customer.WebhookMethod, webhookURI string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerSetBasicInfo", ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerSetBasicInfo indicates an expected call of CustomerSetBasicInfo.
func (mr *MockDBHandlerMockRecorder) CustomerSetBasicInfo(ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerSetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).CustomerSetBasicInfo), ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
}

// CustomerSetBillingAccountID mocks base method.
func (m *MockDBHandler) CustomerSetBillingAccountID(ctx context.Context, id, billingAccountID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerSetBillingAccountID", ctx, id, billingAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerSetBillingAccountID indicates an expected call of CustomerSetBillingAccountID.
func (mr *MockDBHandlerMockRecorder) CustomerSetBillingAccountID(ctx, id, billingAccountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerSetBillingAccountID", reflect.TypeOf((*MockDBHandler)(nil).CustomerSetBillingAccountID), ctx, id, billingAccountID)
}
