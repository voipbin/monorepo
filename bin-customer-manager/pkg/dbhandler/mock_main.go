// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	accesskey "monorepo/bin-customer-manager/models/accesskey"
	customer "monorepo/bin-customer-manager/models/customer"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AccesskeyCreate mocks base method.
func (m *MockDBHandler) AccesskeyCreate(ctx context.Context, c *accesskey.Accesskey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccesskeyCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccesskeyCreate indicates an expected call of AccesskeyCreate.
func (mr *MockDBHandlerMockRecorder) AccesskeyCreate(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccesskeyCreate", reflect.TypeOf((*MockDBHandler)(nil).AccesskeyCreate), ctx, c)
}

// AccesskeyDelete mocks base method.
func (m *MockDBHandler) AccesskeyDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccesskeyDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccesskeyDelete indicates an expected call of AccesskeyDelete.
func (mr *MockDBHandlerMockRecorder) AccesskeyDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccesskeyDelete", reflect.TypeOf((*MockDBHandler)(nil).AccesskeyDelete), ctx, id)
}

// AccesskeyGet mocks base method.
func (m *MockDBHandler) AccesskeyGet(ctx context.Context, id uuid.UUID) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccesskeyGet", ctx, id)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccesskeyGet indicates an expected call of AccesskeyGet.
func (mr *MockDBHandlerMockRecorder) AccesskeyGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccesskeyGet", reflect.TypeOf((*MockDBHandler)(nil).AccesskeyGet), ctx, id)
}

// AccesskeyGets mocks base method.
func (m *MockDBHandler) AccesskeyGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccesskeyGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccesskeyGets indicates an expected call of AccesskeyGets.
func (mr *MockDBHandlerMockRecorder) AccesskeyGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccesskeyGets", reflect.TypeOf((*MockDBHandler)(nil).AccesskeyGets), ctx, size, token, filters)
}

// AccesskeySetBasicInfo mocks base method.
func (m *MockDBHandler) AccesskeySetBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccesskeySetBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccesskeySetBasicInfo indicates an expected call of AccesskeySetBasicInfo.
func (mr *MockDBHandlerMockRecorder) AccesskeySetBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccesskeySetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).AccesskeySetBasicInfo), ctx, id, name, detail)
}

// CustomerCreate mocks base method.
func (m *MockDBHandler) CustomerCreate(ctx context.Context, b *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerCreate indicates an expected call of CustomerCreate.
func (mr *MockDBHandlerMockRecorder) CustomerCreate(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerCreate", reflect.TypeOf((*MockDBHandler)(nil).CustomerCreate), ctx, b)
}

// CustomerDelete mocks base method.
func (m *MockDBHandler) CustomerDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerDelete indicates an expected call of CustomerDelete.
func (mr *MockDBHandlerMockRecorder) CustomerDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerDelete", reflect.TypeOf((*MockDBHandler)(nil).CustomerDelete), ctx, id)
}

// CustomerGet mocks base method.
func (m *MockDBHandler) CustomerGet(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGet", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGet indicates an expected call of CustomerGet.
func (mr *MockDBHandlerMockRecorder) CustomerGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGet", reflect.TypeOf((*MockDBHandler)(nil).CustomerGet), ctx, id)
}

// CustomerGets mocks base method.
func (m *MockDBHandler) CustomerGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGets indicates an expected call of CustomerGets.
func (mr *MockDBHandlerMockRecorder) CustomerGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGets", reflect.TypeOf((*MockDBHandler)(nil).CustomerGets), ctx, size, token, filters)
}

// CustomerSetBasicInfo mocks base method.
func (m *MockDBHandler) CustomerSetBasicInfo(ctx context.Context, id uuid.UUID, name, detail, email, phoneNumber, address string, webhookMethod customer.WebhookMethod, webhookURI string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerSetBasicInfo", ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerSetBasicInfo indicates an expected call of CustomerSetBasicInfo.
func (mr *MockDBHandlerMockRecorder) CustomerSetBasicInfo(ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerSetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).CustomerSetBasicInfo), ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
}

// CustomerSetBillingAccountID mocks base method.
func (m *MockDBHandler) CustomerSetBillingAccountID(ctx context.Context, id, billingAccountID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerSetBillingAccountID", ctx, id, billingAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerSetBillingAccountID indicates an expected call of CustomerSetBillingAccountID.
func (mr *MockDBHandlerMockRecorder) CustomerSetBillingAccountID(ctx, id, billingAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerSetBillingAccountID", reflect.TypeOf((*MockDBHandler)(nil).CustomerSetBillingAccountID), ctx, id, billingAccountID)
}
