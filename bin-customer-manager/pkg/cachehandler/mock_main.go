// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package cachehandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	accesskey "monorepo/bin-customer-manager/models/accesskey"
	customer "monorepo/bin-customer-manager/models/customer"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
	isgomock struct{}
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// AccesskeyGet mocks base method.
func (m *MockCacheHandler) AccesskeyGet(ctx context.Context, id uuid.UUID) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccesskeyGet", ctx, id)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccesskeyGet indicates an expected call of AccesskeyGet.
func (mr *MockCacheHandlerMockRecorder) AccesskeyGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccesskeyGet", reflect.TypeOf((*MockCacheHandler)(nil).AccesskeyGet), ctx, id)
}

// AccesskeySet mocks base method.
func (m *MockCacheHandler) AccesskeySet(ctx context.Context, a *accesskey.Accesskey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccesskeySet", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccesskeySet indicates an expected call of AccesskeySet.
func (mr *MockCacheHandlerMockRecorder) AccesskeySet(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccesskeySet", reflect.TypeOf((*MockCacheHandler)(nil).AccesskeySet), ctx, a)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// CustomerGet mocks base method.
func (m *MockCacheHandler) CustomerGet(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGet", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGet indicates an expected call of CustomerGet.
func (mr *MockCacheHandlerMockRecorder) CustomerGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGet", reflect.TypeOf((*MockCacheHandler)(nil).CustomerGet), ctx, id)
}

// CustomerSet mocks base method.
func (m *MockCacheHandler) CustomerSet(ctx context.Context, c *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerSet", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerSet indicates an expected call of CustomerSet.
func (mr *MockCacheHandlerMockRecorder) CustomerSet(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerSet", reflect.TypeOf((*MockCacheHandler)(nil).CustomerSet), ctx, c)
}
