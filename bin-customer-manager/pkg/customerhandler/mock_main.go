// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package customerhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package customerhandler is a generated GoMock package.
package customerhandler

import (
	context "context"
	billing "monorepo/bin-billing-manager/models/billing"
	customer "monorepo/bin-customer-manager/models/customer"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerHandler is a mock of CustomerHandler interface.
type MockCustomerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerHandlerMockRecorder
	isgomock struct{}
}

// MockCustomerHandlerMockRecorder is the mock recorder for MockCustomerHandler.
type MockCustomerHandlerMockRecorder struct {
	mock *MockCustomerHandler
}

// NewMockCustomerHandler creates a new mock instance.
func NewMockCustomerHandler(ctrl *gomock.Controller) *MockCustomerHandler {
	mock := &MockCustomerHandler{ctrl: ctrl}
	mock.recorder = &MockCustomerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerHandler) EXPECT() *MockCustomerHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerHandler) Create(ctx context.Context, name, detail, email, phoneNumber, address string, webhookMethod customer.WebhookMethod, webhookURI string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerHandlerMockRecorder) Create(ctx, name, detail, email, phoneNumber, address, webhookMethod, webhookURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerHandler)(nil).Create), ctx, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
}

// Delete mocks base method.
func (m *MockCustomerHandler) Delete(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCustomerHandler) Get(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockCustomerHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockCustomerHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockCustomerHandler)(nil).Gets), ctx, size, token, filters)
}

// IsValidBalance mocks base method.
func (m *MockCustomerHandler) IsValidBalance(ctx context.Context, customerID uuid.UUID, billingType billing.ReferenceType, country string, count int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidBalance", ctx, customerID, billingType, country, count)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidBalance indicates an expected call of IsValidBalance.
func (mr *MockCustomerHandlerMockRecorder) IsValidBalance(ctx, customerID, billingType, country, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidBalance", reflect.TypeOf((*MockCustomerHandler)(nil).IsValidBalance), ctx, customerID, billingType, country, count)
}

// UpdateBasicInfo mocks base method.
func (m *MockCustomerHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail, email, phoneNumber, address string, webhookMethod customer.WebhookMethod, webhookURI string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockCustomerHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockCustomerHandler)(nil).UpdateBasicInfo), ctx, id, name, detail, email, phoneNumber, address, webhookMethod, webhookURI)
}

// UpdateBillingAccountID mocks base method.
func (m *MockCustomerHandler) UpdateBillingAccountID(ctx context.Context, id, billingAccountID uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingAccountID", ctx, id, billingAccountID)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillingAccountID indicates an expected call of UpdateBillingAccountID.
func (mr *MockCustomerHandlerMockRecorder) UpdateBillingAccountID(ctx, id, billingAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingAccountID", reflect.TypeOf((*MockCustomerHandler)(nil).UpdateBillingAccountID), ctx, id, billingAccountID)
}
