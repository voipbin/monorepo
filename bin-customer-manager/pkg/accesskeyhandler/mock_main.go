// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package accesskeyhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package accesskeyhandler is a generated GoMock package.
package accesskeyhandler

import (
	context "context"
	accesskey "monorepo/bin-customer-manager/models/accesskey"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAccesskeyHandler is a mock of AccesskeyHandler interface.
type MockAccesskeyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccesskeyHandlerMockRecorder
	isgomock struct{}
}

// MockAccesskeyHandlerMockRecorder is the mock recorder for MockAccesskeyHandler.
type MockAccesskeyHandlerMockRecorder struct {
	mock *MockAccesskeyHandler
}

// NewMockAccesskeyHandler creates a new mock instance.
func NewMockAccesskeyHandler(ctrl *gomock.Controller) *MockAccesskeyHandler {
	mock := &MockAccesskeyHandler{ctrl: ctrl}
	mock.recorder = &MockAccesskeyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccesskeyHandler) EXPECT() *MockAccesskeyHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccesskeyHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, expire time.Duration) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, expire)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccesskeyHandlerMockRecorder) Create(ctx, customerID, name, detail, expire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccesskeyHandler)(nil).Create), ctx, customerID, name, detail, expire)
}

// Delete mocks base method.
func (m *MockAccesskeyHandler) Delete(ctx context.Context, id uuid.UUID) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccesskeyHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccesskeyHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockAccesskeyHandler) Get(ctx context.Context, id uuid.UUID) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccesskeyHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccesskeyHandler)(nil).Get), ctx, id)
}

// GetByToken mocks base method.
func (m *MockAccesskeyHandler) GetByToken(ctx context.Context, token string) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", ctx, token)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken.
func (mr *MockAccesskeyHandlerMockRecorder) GetByToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockAccesskeyHandler)(nil).GetByToken), ctx, token)
}

// Gets mocks base method.
func (m *MockAccesskeyHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockAccesskeyHandlerMockRecorder) Gets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockAccesskeyHandler)(nil).Gets), ctx, size, token, filters)
}

// GetsByCustomerID mocks base method.
func (m *MockAccesskeyHandler) GetsByCustomerID(ctx context.Context, size uint64, token string, customerID uuid.UUID) ([]*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, size, token, customerID)
	ret0, _ := ret[0].([]*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockAccesskeyHandlerMockRecorder) GetsByCustomerID(ctx, size, token, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockAccesskeyHandler)(nil).GetsByCustomerID), ctx, size, token, customerID)
}

// UpdateBasicInfo mocks base method.
func (m *MockAccesskeyHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*accesskey.Accesskey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*accesskey.Accesskey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockAccesskeyHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockAccesskeyHandler)(nil).UpdateBasicInfo), ctx, id, name, detail)
}
