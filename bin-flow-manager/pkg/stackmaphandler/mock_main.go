// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package stackmaphandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package stackmaphandler is a generated GoMock package.
package stackmaphandler

import (
	action "monorepo/bin-flow-manager/models/action"
	stack "monorepo/bin-flow-manager/models/stack"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStackmapHandler is a mock of StackmapHandler interface.
type MockStackmapHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStackmapHandlerMockRecorder
	isgomock struct{}
}

// MockStackmapHandlerMockRecorder is the mock recorder for MockStackmapHandler.
type MockStackmapHandlerMockRecorder struct {
	mock *MockStackmapHandler
}

// NewMockStackmapHandler creates a new mock instance.
func NewMockStackmapHandler(ctrl *gomock.Controller) *MockStackmapHandler {
	mock := &MockStackmapHandler{ctrl: ctrl}
	mock.recorder = &MockStackmapHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackmapHandler) EXPECT() *MockStackmapHandlerMockRecorder {
	return m.recorder
}

// AddActions mocks base method.
func (m *MockStackmapHandler) AddActions(stackMap map[uuid.UUID]*stack.Stack, targetStackID, targetActionID uuid.UUID, actions []action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActions", stackMap, targetStackID, targetActionID, actions)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActions indicates an expected call of AddActions.
func (mr *MockStackmapHandlerMockRecorder) AddActions(stackMap, targetStackID, targetActionID, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActions", reflect.TypeOf((*MockStackmapHandler)(nil).AddActions), stackMap, targetStackID, targetActionID, actions)
}

// Create mocks base method.
func (m *MockStackmapHandler) Create(actions []action.Action) map[uuid.UUID]*stack.Stack {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", actions)
	ret0, _ := ret[0].(map[uuid.UUID]*stack.Stack)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStackmapHandlerMockRecorder) Create(actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStackmapHandler)(nil).Create), actions)
}

// GetAction mocks base method.
func (m *MockStackmapHandler) GetAction(stackMap map[uuid.UUID]*stack.Stack, startStackID, actionID uuid.UUID, releaseStack bool) (uuid.UUID, *action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", stackMap, startStackID, actionID, releaseStack)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*action.Action)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAction indicates an expected call of GetAction.
func (mr *MockStackmapHandlerMockRecorder) GetAction(stackMap, startStackID, actionID, releaseStack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockStackmapHandler)(nil).GetAction), stackMap, startStackID, actionID, releaseStack)
}

// GetNextAction mocks base method.
func (m *MockStackmapHandler) GetNextAction(stackMap map[uuid.UUID]*stack.Stack, currentStackID uuid.UUID, currentAction *action.Action, relaseStack bool) (uuid.UUID, *action.Action) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextAction", stackMap, currentStackID, currentAction, relaseStack)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*action.Action)
	return ret0, ret1
}

// GetNextAction indicates an expected call of GetNextAction.
func (mr *MockStackmapHandlerMockRecorder) GetNextAction(stackMap, currentStackID, currentAction, relaseStack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextAction", reflect.TypeOf((*MockStackmapHandler)(nil).GetNextAction), stackMap, currentStackID, currentAction, relaseStack)
}

// PopStack mocks base method.
func (m *MockStackmapHandler) PopStack(stackMap map[uuid.UUID]*stack.Stack, stackID uuid.UUID) (*stack.Stack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopStack", stackMap, stackID)
	ret0, _ := ret[0].(*stack.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopStack indicates an expected call of PopStack.
func (mr *MockStackmapHandlerMockRecorder) PopStack(stackMap, stackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopStack", reflect.TypeOf((*MockStackmapHandler)(nil).PopStack), stackMap, stackID)
}

// PushStackByActions mocks base method.
func (m *MockStackmapHandler) PushStackByActions(stackMap map[uuid.UUID]*stack.Stack, stackID uuid.UUID, actions []action.Action, currentStackID, currentActionID uuid.UUID) (*stack.Stack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushStackByActions", stackMap, stackID, actions, currentStackID, currentActionID)
	ret0, _ := ret[0].(*stack.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushStackByActions indicates an expected call of PushStackByActions.
func (mr *MockStackmapHandlerMockRecorder) PushStackByActions(stackMap, stackID, actions, currentStackID, currentActionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushStackByActions", reflect.TypeOf((*MockStackmapHandler)(nil).PushStackByActions), stackMap, stackID, actions, currentStackID, currentActionID)
}
