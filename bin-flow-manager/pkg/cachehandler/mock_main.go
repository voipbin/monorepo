// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	activeflow "monorepo/bin-flow-manager/models/activeflow"
	flow "monorepo/bin-flow-manager/models/flow"
	variable "monorepo/bin-flow-manager/models/variable"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// ActiveflowGet mocks base method.
func (m *MockCacheHandler) ActiveflowGet(ctx context.Context, id uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveflowGet", ctx, id)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveflowGet indicates an expected call of ActiveflowGet.
func (mr *MockCacheHandlerMockRecorder) ActiveflowGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveflowGet", reflect.TypeOf((*MockCacheHandler)(nil).ActiveflowGet), ctx, id)
}

// ActiveflowGetWithLock mocks base method.
func (m *MockCacheHandler) ActiveflowGetWithLock(ctx context.Context, id uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveflowGetWithLock", ctx, id)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveflowGetWithLock indicates an expected call of ActiveflowGetWithLock.
func (mr *MockCacheHandlerMockRecorder) ActiveflowGetWithLock(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveflowGetWithLock", reflect.TypeOf((*MockCacheHandler)(nil).ActiveflowGetWithLock), ctx, id)
}

// ActiveflowReleaseLock mocks base method.
func (m *MockCacheHandler) ActiveflowReleaseLock(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveflowReleaseLock", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveflowReleaseLock indicates an expected call of ActiveflowReleaseLock.
func (mr *MockCacheHandlerMockRecorder) ActiveflowReleaseLock(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveflowReleaseLock", reflect.TypeOf((*MockCacheHandler)(nil).ActiveflowReleaseLock), ctx, id)
}

// ActiveflowSet mocks base method.
func (m *MockCacheHandler) ActiveflowSet(ctx context.Context, cf *activeflow.Activeflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveflowSet", ctx, cf)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveflowSet indicates an expected call of ActiveflowSet.
func (mr *MockCacheHandlerMockRecorder) ActiveflowSet(ctx, cf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveflowSet", reflect.TypeOf((*MockCacheHandler)(nil).ActiveflowSet), ctx, cf)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// FlowDel mocks base method.
func (m *MockCacheHandler) FlowDel(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowDel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowDel indicates an expected call of FlowDel.
func (mr *MockCacheHandlerMockRecorder) FlowDel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowDel", reflect.TypeOf((*MockCacheHandler)(nil).FlowDel), ctx, id)
}

// FlowGet mocks base method.
func (m *MockCacheHandler) FlowGet(ctx context.Context, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", ctx, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet.
func (mr *MockCacheHandlerMockRecorder) FlowGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockCacheHandler)(nil).FlowGet), ctx, id)
}

// FlowSet mocks base method.
func (m *MockCacheHandler) FlowSet(ctx context.Context, flow *flow.Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowSet", ctx, flow)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowSet indicates an expected call of FlowSet.
func (mr *MockCacheHandlerMockRecorder) FlowSet(ctx, flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowSet", reflect.TypeOf((*MockCacheHandler)(nil).FlowSet), ctx, flow)
}

// VariableGet mocks base method.
func (m *MockCacheHandler) VariableGet(ctx context.Context, id uuid.UUID) (*variable.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableGet", ctx, id)
	ret0, _ := ret[0].(*variable.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableGet indicates an expected call of VariableGet.
func (mr *MockCacheHandlerMockRecorder) VariableGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableGet", reflect.TypeOf((*MockCacheHandler)(nil).VariableGet), ctx, id)
}

// VariableSet mocks base method.
func (m *MockCacheHandler) VariableSet(ctx context.Context, t *variable.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableSet", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// VariableSet indicates an expected call of VariableSet.
func (mr *MockCacheHandlerMockRecorder) VariableSet(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableSet", reflect.TypeOf((*MockCacheHandler)(nil).VariableSet), ctx, t)
}
