// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package flowhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package flowhandler is a generated GoMock package.
package flowhandler

import (
	context "context"
	customer "monorepo/bin-customer-manager/models/customer"
	action "monorepo/bin-flow-manager/models/action"
	flow "monorepo/bin-flow-manager/models/flow"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockFlowHandler is a mock of FlowHandler interface.
type MockFlowHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFlowHandlerMockRecorder
	isgomock struct{}
}

// MockFlowHandlerMockRecorder is the mock recorder for MockFlowHandler.
type MockFlowHandlerMockRecorder struct {
	mock *MockFlowHandler
}

// NewMockFlowHandler creates a new mock instance.
func NewMockFlowHandler(ctrl *gomock.Controller) *MockFlowHandler {
	mock := &MockFlowHandler{ctrl: ctrl}
	mock.recorder = &MockFlowHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowHandler) EXPECT() *MockFlowHandlerMockRecorder {
	return m.recorder
}

// ActionGet mocks base method.
func (m *MockFlowHandler) ActionGet(ctx context.Context, flowID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionGet", ctx, flowID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionGet indicates an expected call of ActionGet.
func (mr *MockFlowHandlerMockRecorder) ActionGet(ctx, flowID, actionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGet", reflect.TypeOf((*MockFlowHandler)(nil).ActionGet), ctx, flowID, actionID)
}

// Create mocks base method.
func (m *MockFlowHandler) Create(ctx context.Context, customerID uuid.UUID, flowType flow.Type, name, detail string, persist bool, actions []action.Action) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, flowType, name, detail, persist, actions)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlowHandlerMockRecorder) Create(ctx, customerID, flowType, name, detail, persist, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlowHandler)(nil).Create), ctx, customerID, flowType, name, detail, persist, actions)
}

// Delete mocks base method.
func (m *MockFlowHandler) Delete(ctx context.Context, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFlowHandlerMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlowHandler)(nil).Delete), ctx, id)
}

// EventCustomerDeleted mocks base method.
func (m *MockFlowHandler) EventCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCustomerDeleted indicates an expected call of EventCustomerDeleted.
func (mr *MockFlowHandlerMockRecorder) EventCustomerDeleted(ctx, cu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCustomerDeleted", reflect.TypeOf((*MockFlowHandler)(nil).EventCustomerDeleted), ctx, cu)
}

// Get mocks base method.
func (m *MockFlowHandler) Get(ctx context.Context, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFlowHandlerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlowHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockFlowHandler) Gets(ctx context.Context, token string, size uint64, filters map[flow.Field]any) ([]*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockFlowHandlerMockRecorder) Gets(ctx, token, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockFlowHandler)(nil).Gets), ctx, token, size, filters)
}

// Update mocks base method.
func (m *MockFlowHandler) Update(ctx context.Context, id uuid.UUID, name, detail string, actions []action.Action) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail, actions)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFlowHandlerMockRecorder) Update(ctx, id, name, detail, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlowHandler)(nil).Update), ctx, id, name, detail, actions)
}

// UpdateActions mocks base method.
func (m *MockFlowHandler) UpdateActions(ctx context.Context, id uuid.UUID, actions []action.Action) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActions", ctx, id, actions)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActions indicates an expected call of UpdateActions.
func (mr *MockFlowHandlerMockRecorder) UpdateActions(ctx, id, actions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActions", reflect.TypeOf((*MockFlowHandler)(nil).UpdateActions), ctx, id, actions)
}
