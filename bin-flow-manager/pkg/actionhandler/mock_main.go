// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package actionhandler is a generated GoMock package.
package actionhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
)

// MockActionHandler is a mock of ActionHandler interface.
type MockActionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockActionHandlerMockRecorder
}

// MockActionHandlerMockRecorder is the mock recorder for MockActionHandler.
type MockActionHandlerMockRecorder struct {
	mock *MockActionHandler
}

// NewMockActionHandler creates a new mock instance.
func NewMockActionHandler(ctrl *gomock.Controller) *MockActionHandler {
	mock := &MockActionHandler{ctrl: ctrl}
	mock.recorder = &MockActionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionHandler) EXPECT() *MockActionHandlerMockRecorder {
	return m.recorder
}

// ActionFetchGet mocks base method.
func (m *MockActionHandler) ActionFetchGet(act *action.Action, activeflowID, referenceID uuid.UUID) ([]action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionFetchGet", act, activeflowID, referenceID)
	ret0, _ := ret[0].([]action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionFetchGet indicates an expected call of ActionFetchGet.
func (mr *MockActionHandlerMockRecorder) ActionFetchGet(act, activeflowID, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionFetchGet", reflect.TypeOf((*MockActionHandler)(nil).ActionFetchGet), act, activeflowID, referenceID)
}

// GenerateFlowActions mocks base method.
func (m *MockActionHandler) GenerateFlowActions(ctx context.Context, actions []action.Action) ([]action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFlowActions", ctx, actions)
	ret0, _ := ret[0].([]action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFlowActions indicates an expected call of GenerateFlowActions.
func (mr *MockActionHandlerMockRecorder) GenerateFlowActions(ctx, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFlowActions", reflect.TypeOf((*MockActionHandler)(nil).GenerateFlowActions), ctx, actions)
}

// ValidateActions mocks base method.
func (m *MockActionHandler) ValidateActions(actions []action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateActions", actions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateActions indicates an expected call of ValidateActions.
func (mr *MockActionHandlerMockRecorder) ValidateActions(actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateActions", reflect.TypeOf((*MockActionHandler)(nil).ValidateActions), actions)
}
