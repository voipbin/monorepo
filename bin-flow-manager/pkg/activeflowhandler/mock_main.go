// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package activeflowhandler is a generated GoMock package.
package activeflowhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	call "monorepo/bin-call-manager/models/call"
	customer "monorepo/bin-customer-manager/models/customer"
	action "monorepo/bin-flow-manager/models/action"
	activeflow "monorepo/bin-flow-manager/models/activeflow"
)

// MockActiveflowHandler is a mock of ActiveflowHandler interface.
type MockActiveflowHandler struct {
	ctrl     *gomock.Controller
	recorder *MockActiveflowHandlerMockRecorder
}

// MockActiveflowHandlerMockRecorder is the mock recorder for MockActiveflowHandler.
type MockActiveflowHandlerMockRecorder struct {
	mock *MockActiveflowHandler
}

// NewMockActiveflowHandler creates a new mock instance.
func NewMockActiveflowHandler(ctrl *gomock.Controller) *MockActiveflowHandler {
	mock := &MockActiveflowHandler{ctrl: ctrl}
	mock.recorder = &MockActiveflowHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveflowHandler) EXPECT() *MockActiveflowHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActiveflowHandler) Create(ctx context.Context, id uuid.UUID, referenceType activeflow.ReferenceType, referenceID, flowID uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, referenceType, referenceID, flowID)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockActiveflowHandlerMockRecorder) Create(ctx, id, referenceType, referenceID, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActiveflowHandler)(nil).Create), ctx, id, referenceType, referenceID, flowID)
}

// Delete mocks base method.
func (m *MockActiveflowHandler) Delete(ctx context.Context, id uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockActiveflowHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActiveflowHandler)(nil).Delete), ctx, id)
}

// EventCallHangup mocks base method.
func (m *MockActiveflowHandler) EventCallHangup(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCallHangup", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCallHangup indicates an expected call of EventCallHangup.
func (mr *MockActiveflowHandlerMockRecorder) EventCallHangup(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCallHangup", reflect.TypeOf((*MockActiveflowHandler)(nil).EventCallHangup), ctx, c)
}

// EventCustomerDeleted mocks base method.
func (m *MockActiveflowHandler) EventCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCustomerDeleted indicates an expected call of EventCustomerDeleted.
func (mr *MockActiveflowHandlerMockRecorder) EventCustomerDeleted(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCustomerDeleted", reflect.TypeOf((*MockActiveflowHandler)(nil).EventCustomerDeleted), ctx, cu)
}

// Execute mocks base method.
func (m *MockActiveflowHandler) Execute(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockActiveflowHandlerMockRecorder) Execute(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockActiveflowHandler)(nil).Execute), ctx, id)
}

// ExecuteNextAction mocks base method.
func (m *MockActiveflowHandler) ExecuteNextAction(ctx context.Context, callID, caID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteNextAction", ctx, callID, caID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteNextAction indicates an expected call of ExecuteNextAction.
func (mr *MockActiveflowHandlerMockRecorder) ExecuteNextAction(ctx, callID, caID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteNextAction", reflect.TypeOf((*MockActiveflowHandler)(nil).ExecuteNextAction), ctx, callID, caID)
}

// Get mocks base method.
func (m *MockActiveflowHandler) Get(ctx context.Context, id uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockActiveflowHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActiveflowHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockActiveflowHandler) Gets(ctx context.Context, token string, size uint64, filters map[string]string) ([]*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, token, size, filters)
	ret0, _ := ret[0].([]*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockActiveflowHandlerMockRecorder) Gets(ctx, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockActiveflowHandler)(nil).Gets), ctx, token, size, filters)
}

// PushActions mocks base method.
func (m *MockActiveflowHandler) PushActions(ctx context.Context, id uuid.UUID, actions []action.Action) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushActions", ctx, id, actions)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushActions indicates an expected call of PushActions.
func (mr *MockActiveflowHandlerMockRecorder) PushActions(ctx, id, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushActions", reflect.TypeOf((*MockActiveflowHandler)(nil).PushActions), ctx, id, actions)
}

// SetForwardActionID mocks base method.
func (m *MockActiveflowHandler) SetForwardActionID(ctx context.Context, callID, actionID uuid.UUID, forwardNow bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetForwardActionID", ctx, callID, actionID, forwardNow)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetForwardActionID indicates an expected call of SetForwardActionID.
func (mr *MockActiveflowHandlerMockRecorder) SetForwardActionID(ctx, callID, actionID, forwardNow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetForwardActionID", reflect.TypeOf((*MockActiveflowHandler)(nil).SetForwardActionID), ctx, callID, actionID, forwardNow)
}

// Stop mocks base method.
func (m *MockActiveflowHandler) Stop(ctx context.Context, id uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockActiveflowHandlerMockRecorder) Stop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockActiveflowHandler)(nil).Stop), ctx, id)
}
