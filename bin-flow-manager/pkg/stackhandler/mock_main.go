// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package stackhandler is a generated GoMock package.
package stackhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "monorepo/bin-flow-manager/models/action"
	stack "monorepo/bin-flow-manager/models/stack"
)

// MockStackHandler is a mock of StackHandler interface.
type MockStackHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStackHandlerMockRecorder
}

// MockStackHandlerMockRecorder is the mock recorder for MockStackHandler.
type MockStackHandlerMockRecorder struct {
	mock *MockStackHandler
}

// NewMockStackHandler creates a new mock instance.
func NewMockStackHandler(ctrl *gomock.Controller) *MockStackHandler {
	mock := &MockStackHandler{ctrl: ctrl}
	mock.recorder = &MockStackHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackHandler) EXPECT() *MockStackHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStackHandler) Get(ctx context.Context, stackMap map[uuid.UUID]*stack.Stack, stackID uuid.UUID) (*stack.Stack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, stackMap, stackID)
	ret0, _ := ret[0].(*stack.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStackHandlerMockRecorder) Get(ctx, stackMap, stackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStackHandler)(nil).Get), ctx, stackMap, stackID)
}

// GetAction mocks base method.
func (m *MockStackHandler) GetAction(ctx context.Context, stackMap map[uuid.UUID]*stack.Stack, currentStackID, targetActionID uuid.UUID, releaseStack bool) (uuid.UUID, *action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", ctx, stackMap, currentStackID, targetActionID, releaseStack)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*action.Action)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAction indicates an expected call of GetAction.
func (mr *MockStackHandlerMockRecorder) GetAction(ctx, stackMap, currentStackID, targetActionID, releaseStack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockStackHandler)(nil).GetAction), ctx, stackMap, currentStackID, targetActionID, releaseStack)
}

// GetNextAction mocks base method.
func (m *MockStackHandler) GetNextAction(ctx context.Context, stackMap map[uuid.UUID]*stack.Stack, currentStackID uuid.UUID, currentAction *action.Action, relaseStack bool) (uuid.UUID, *action.Action) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextAction", ctx, stackMap, currentStackID, currentAction, relaseStack)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*action.Action)
	return ret0, ret1
}

// GetNextAction indicates an expected call of GetNextAction.
func (mr *MockStackHandlerMockRecorder) GetNextAction(ctx, stackMap, currentStackID, currentAction, relaseStack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextAction", reflect.TypeOf((*MockStackHandler)(nil).GetNextAction), ctx, stackMap, currentStackID, currentAction, relaseStack)
}

// Push mocks base method.
func (m *MockStackHandler) Push(ctx context.Context, stackMap map[uuid.UUID]*stack.Stack, actions []action.Action, currentStackID, currentActionID uuid.UUID) (uuid.UUID, *action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, stackMap, actions, currentStackID, currentActionID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*action.Action)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Push indicates an expected call of Push.
func (mr *MockStackHandlerMockRecorder) Push(ctx, stackMap, actions, currentStackID, currentActionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockStackHandler)(nil).Push), ctx, stackMap, actions, currentStackID, currentActionID)
}

// SearchAction mocks base method.
func (m *MockStackHandler) SearchAction(ctx context.Context, stackMap map[uuid.UUID]*stack.Stack, stackID, actionID uuid.UUID) (uuid.UUID, *action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAction", ctx, stackMap, stackID, actionID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*action.Action)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchAction indicates an expected call of SearchAction.
func (mr *MockStackHandlerMockRecorder) SearchAction(ctx, stackMap, stackID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAction", reflect.TypeOf((*MockStackHandler)(nil).SearchAction), ctx, stackMap, stackID, actionID)
}
