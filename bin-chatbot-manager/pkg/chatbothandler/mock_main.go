// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package chatbothandler is a generated GoMock package.
package chatbothandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	chatbot "gitlab.com/voipbin/bin-manager/chatbot-manager.git/models/chatbot"
)

// MockChatbotHandler is a mock of ChatbotHandler interface.
type MockChatbotHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotHandlerMockRecorder
}

// MockChatbotHandlerMockRecorder is the mock recorder for MockChatbotHandler.
type MockChatbotHandlerMockRecorder struct {
	mock *MockChatbotHandler
}

// NewMockChatbotHandler creates a new mock instance.
func NewMockChatbotHandler(ctrl *gomock.Controller) *MockChatbotHandler {
	mock := &MockChatbotHandler{ctrl: ctrl}
	mock.recorder = &MockChatbotHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatbotHandler) EXPECT() *MockChatbotHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatbotHandler) Create(ctx context.Context, customerID uuid.UUID, name, detail string, engineType chatbot.EngineType, initPrompt string) (*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, name, detail, engineType, initPrompt)
	ret0, _ := ret[0].(*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChatbotHandlerMockRecorder) Create(ctx, customerID, name, detail, engineType, initPrompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatbotHandler)(nil).Create), ctx, customerID, name, detail, engineType, initPrompt)
}

// Delete mocks base method.
func (m *MockChatbotHandler) Delete(ctx context.Context, id uuid.UUID) (*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockChatbotHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatbotHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockChatbotHandler) Get(ctx context.Context, id uuid.UUID) (*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChatbotHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChatbotHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockChatbotHandler) Gets(ctx context.Context, customerID uuid.UUID, size uint64, token string, filters map[string]string) ([]*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, size, token, filters)
	ret0, _ := ret[0].([]*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockChatbotHandlerMockRecorder) Gets(ctx, customerID, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockChatbotHandler)(nil).Gets), ctx, customerID, size, token, filters)
}

// Update mocks base method.
func (m *MockChatbotHandler) Update(ctx context.Context, id uuid.UUID, name, detail string, engineType chatbot.EngineType, initPrompt string) (*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail, engineType, initPrompt)
	ret0, _ := ret[0].(*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockChatbotHandlerMockRecorder) Update(ctx, id, name, detail, engineType, initPrompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChatbotHandler)(nil).Update), ctx, id, name, detail, engineType, initPrompt)
}
