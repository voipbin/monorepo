// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	chatbot "monorepo/bin-chatbot-manager/models/chatbot"
	chatbotcall "monorepo/bin-chatbot-manager/models/chatbotcall"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// ChatbotCreate mocks base method.
func (m *MockDBHandler) ChatbotCreate(ctx context.Context, c *chatbot.Chatbot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotCreate indicates an expected call of ChatbotCreate.
func (mr *MockDBHandlerMockRecorder) ChatbotCreate(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotCreate", reflect.TypeOf((*MockDBHandler)(nil).ChatbotCreate), ctx, c)
}

// ChatbotDelete mocks base method.
func (m *MockDBHandler) ChatbotDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotDelete indicates an expected call of ChatbotDelete.
func (mr *MockDBHandlerMockRecorder) ChatbotDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotDelete", reflect.TypeOf((*MockDBHandler)(nil).ChatbotDelete), ctx, id)
}

// ChatbotGet mocks base method.
func (m *MockDBHandler) ChatbotGet(ctx context.Context, id uuid.UUID) (*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotGet", ctx, id)
	ret0, _ := ret[0].(*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotGet indicates an expected call of ChatbotGet.
func (mr *MockDBHandlerMockRecorder) ChatbotGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotGet", reflect.TypeOf((*MockDBHandler)(nil).ChatbotGet), ctx, id)
}

// ChatbotGets mocks base method.
func (m *MockDBHandler) ChatbotGets(ctx context.Context, customerID uuid.UUID, size uint64, token string, filters map[string]string) ([]*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotGets", ctx, customerID, size, token, filters)
	ret0, _ := ret[0].([]*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotGets indicates an expected call of ChatbotGets.
func (mr *MockDBHandlerMockRecorder) ChatbotGets(ctx, customerID, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotGets", reflect.TypeOf((*MockDBHandler)(nil).ChatbotGets), ctx, customerID, size, token, filters)
}

// ChatbotSetInfo mocks base method.
func (m *MockDBHandler) ChatbotSetInfo(ctx context.Context, id uuid.UUID, name, detail string, engineType chatbot.EngineType, initPrompt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotSetInfo", ctx, id, name, detail, engineType, initPrompt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotSetInfo indicates an expected call of ChatbotSetInfo.
func (mr *MockDBHandlerMockRecorder) ChatbotSetInfo(ctx, id, name, detail, engineType, initPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotSetInfo", reflect.TypeOf((*MockDBHandler)(nil).ChatbotSetInfo), ctx, id, name, detail, engineType, initPrompt)
}

// ChatbotcallCreate mocks base method.
func (m *MockDBHandler) ChatbotcallCreate(ctx context.Context, cb *chatbotcall.Chatbotcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallCreate", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotcallCreate indicates an expected call of ChatbotcallCreate.
func (mr *MockDBHandlerMockRecorder) ChatbotcallCreate(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallCreate", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallCreate), ctx, cb)
}

// ChatbotcallDelete mocks base method.
func (m *MockDBHandler) ChatbotcallDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotcallDelete indicates an expected call of ChatbotcallDelete.
func (mr *MockDBHandlerMockRecorder) ChatbotcallDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallDelete", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallDelete), ctx, id)
}

// ChatbotcallGet mocks base method.
func (m *MockDBHandler) ChatbotcallGet(ctx context.Context, id uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallGet", ctx, id)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotcallGet indicates an expected call of ChatbotcallGet.
func (mr *MockDBHandlerMockRecorder) ChatbotcallGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallGet", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallGet), ctx, id)
}

// ChatbotcallGetByReferenceID mocks base method.
func (m *MockDBHandler) ChatbotcallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotcallGetByReferenceID indicates an expected call of ChatbotcallGetByReferenceID.
func (mr *MockDBHandlerMockRecorder) ChatbotcallGetByReferenceID(ctx, referenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallGetByReferenceID", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallGetByReferenceID), ctx, referenceID)
}

// ChatbotcallGetByTranscribeID mocks base method.
func (m *MockDBHandler) ChatbotcallGetByTranscribeID(ctx context.Context, transcribeID uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallGetByTranscribeID", ctx, transcribeID)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotcallGetByTranscribeID indicates an expected call of ChatbotcallGetByTranscribeID.
func (mr *MockDBHandlerMockRecorder) ChatbotcallGetByTranscribeID(ctx, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallGetByTranscribeID", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallGetByTranscribeID), ctx, transcribeID)
}

// ChatbotcallGets mocks base method.
func (m *MockDBHandler) ChatbotcallGets(ctx context.Context, customerID uuid.UUID, size uint64, token string, filters map[string]string) ([]*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallGets", ctx, customerID, size, token, filters)
	ret0, _ := ret[0].([]*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotcallGets indicates an expected call of ChatbotcallGets.
func (mr *MockDBHandlerMockRecorder) ChatbotcallGets(ctx, customerID, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallGets", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallGets), ctx, customerID, size, token, filters)
}

// ChatbotcallSetMessages mocks base method.
func (m *MockDBHandler) ChatbotcallSetMessages(ctx context.Context, id uuid.UUID, messages []chatbotcall.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallSetMessages", ctx, id, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotcallSetMessages indicates an expected call of ChatbotcallSetMessages.
func (mr *MockDBHandlerMockRecorder) ChatbotcallSetMessages(ctx, id, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallSetMessages", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallSetMessages), ctx, id, messages)
}

// ChatbotcallUpdateStatusEnd mocks base method.
func (m *MockDBHandler) ChatbotcallUpdateStatusEnd(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallUpdateStatusEnd", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotcallUpdateStatusEnd indicates an expected call of ChatbotcallUpdateStatusEnd.
func (mr *MockDBHandlerMockRecorder) ChatbotcallUpdateStatusEnd(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallUpdateStatusEnd", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallUpdateStatusEnd), ctx, id)
}

// ChatbotcallUpdateStatusProgressing mocks base method.
func (m *MockDBHandler) ChatbotcallUpdateStatusProgressing(ctx context.Context, id, transcribeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallUpdateStatusProgressing", ctx, id, transcribeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotcallUpdateStatusProgressing indicates an expected call of ChatbotcallUpdateStatusProgressing.
func (mr *MockDBHandlerMockRecorder) ChatbotcallUpdateStatusProgressing(ctx, id, transcribeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallUpdateStatusProgressing", reflect.TypeOf((*MockDBHandler)(nil).ChatbotcallUpdateStatusProgressing), ctx, id, transcribeID)
}
