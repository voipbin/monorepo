// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	chatbot "monorepo/bin-chatbot-manager/models/chatbot"
	chatbotcall "monorepo/bin-chatbot-manager/models/chatbotcall"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// ChatbotGet mocks base method.
func (m *MockCacheHandler) ChatbotGet(ctx context.Context, id uuid.UUID) (*chatbot.Chatbot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotGet", ctx, id)
	ret0, _ := ret[0].(*chatbot.Chatbot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotGet indicates an expected call of ChatbotGet.
func (mr *MockCacheHandlerMockRecorder) ChatbotGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotGet", reflect.TypeOf((*MockCacheHandler)(nil).ChatbotGet), ctx, id)
}

// ChatbotSet mocks base method.
func (m *MockCacheHandler) ChatbotSet(ctx context.Context, data *chatbot.Chatbot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotSet indicates an expected call of ChatbotSet.
func (mr *MockCacheHandlerMockRecorder) ChatbotSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotSet", reflect.TypeOf((*MockCacheHandler)(nil).ChatbotSet), ctx, data)
}

// ChatbotcallGet mocks base method.
func (m *MockCacheHandler) ChatbotcallGet(ctx context.Context, id uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallGet", ctx, id)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotcallGet indicates an expected call of ChatbotcallGet.
func (mr *MockCacheHandlerMockRecorder) ChatbotcallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallGet", reflect.TypeOf((*MockCacheHandler)(nil).ChatbotcallGet), ctx, id)
}

// ChatbotcallGetByReferenceID mocks base method.
func (m *MockCacheHandler) ChatbotcallGetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallGetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotcallGetByReferenceID indicates an expected call of ChatbotcallGetByReferenceID.
func (mr *MockCacheHandlerMockRecorder) ChatbotcallGetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallGetByReferenceID", reflect.TypeOf((*MockCacheHandler)(nil).ChatbotcallGetByReferenceID), ctx, referenceID)
}

// ChatbotcallGetByTranscribeID mocks base method.
func (m *MockCacheHandler) ChatbotcallGetByTranscribeID(ctx context.Context, transcribeID uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallGetByTranscribeID", ctx, transcribeID)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatbotcallGetByTranscribeID indicates an expected call of ChatbotcallGetByTranscribeID.
func (mr *MockCacheHandlerMockRecorder) ChatbotcallGetByTranscribeID(ctx, transcribeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallGetByTranscribeID", reflect.TypeOf((*MockCacheHandler)(nil).ChatbotcallGetByTranscribeID), ctx, transcribeID)
}

// ChatbotcallSet mocks base method.
func (m *MockCacheHandler) ChatbotcallSet(ctx context.Context, data *chatbotcall.Chatbotcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatbotcallSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatbotcallSet indicates an expected call of ChatbotcallSet.
func (mr *MockCacheHandlerMockRecorder) ChatbotcallSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatbotcallSet", reflect.TypeOf((*MockCacheHandler)(nil).ChatbotcallSet), ctx, data)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}
