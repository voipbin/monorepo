// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package openai_handler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package openai_handler is a generated GoMock package.
package openai_handler

import (
	context "context"
	chatbotcall "monorepo/bin-chatbot-manager/models/chatbotcall"
	message "monorepo/bin-chatbot-manager/models/message"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenaiHandler is a mock of OpenaiHandler interface.
type MockOpenaiHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOpenaiHandlerMockRecorder
	isgomock struct{}
}

// MockOpenaiHandlerMockRecorder is the mock recorder for MockOpenaiHandler.
type MockOpenaiHandlerMockRecorder struct {
	mock *MockOpenaiHandler
}

// NewMockOpenaiHandler creates a new mock instance.
func NewMockOpenaiHandler(ctrl *gomock.Controller) *MockOpenaiHandler {
	mock := &MockOpenaiHandler{ctrl: ctrl}
	mock.recorder = &MockOpenaiHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenaiHandler) EXPECT() *MockOpenaiHandlerMockRecorder {
	return m.recorder
}

// MessageSend mocks base method.
func (m *MockOpenaiHandler) MessageSend(ctx context.Context, cc *chatbotcall.Chatbotcall, messages []*message.Message) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSend", ctx, cc, messages)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSend indicates an expected call of MessageSend.
func (mr *MockOpenaiHandlerMockRecorder) MessageSend(ctx, cc, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSend", reflect.TypeOf((*MockOpenaiHandler)(nil).MessageSend), ctx, cc, messages)
}
