// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package listenhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package listenhandler is a generated GoMock package.
package listenhandler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockListenHandler is a mock of ListenHandler interface.
type MockListenHandler struct {
	ctrl     *gomock.Controller
	recorder *MockListenHandlerMockRecorder
	isgomock struct{}
}

// MockListenHandlerMockRecorder is the mock recorder for MockListenHandler.
type MockListenHandlerMockRecorder struct {
	mock *MockListenHandler
}

// NewMockListenHandler creates a new mock instance.
func NewMockListenHandler(ctrl *gomock.Controller) *MockListenHandler {
	mock := &MockListenHandler{ctrl: ctrl}
	mock.recorder = &MockListenHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenHandler) EXPECT() *MockListenHandlerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockListenHandler) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockListenHandlerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockListenHandler)(nil).Run))
}
