// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package chatgpthandler is a generated GoMock package.
package chatgpthandler

import (
	context "context"
	chatbotcall "monorepo/bin-chatbot-manager/models/chatbotcall"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatgptHandler is a mock of ChatgptHandler interface.
type MockChatgptHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChatgptHandlerMockRecorder
}

// MockChatgptHandlerMockRecorder is the mock recorder for MockChatgptHandler.
type MockChatgptHandlerMockRecorder struct {
	mock *MockChatgptHandler
}

// NewMockChatgptHandler creates a new mock instance.
func NewMockChatgptHandler(ctrl *gomock.Controller) *MockChatgptHandler {
	mock := &MockChatgptHandler{ctrl: ctrl}
	mock.recorder = &MockChatgptHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatgptHandler) EXPECT() *MockChatgptHandlerMockRecorder {
	return m.recorder
}

// ChatMessage mocks base method.
func (m *MockChatgptHandler) ChatMessage(ctx context.Context, messages []chatbotcall.Message, text string) ([]chatbotcall.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMessage", ctx, messages, text)
	ret0, _ := ret[0].([]chatbotcall.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatMessage indicates an expected call of ChatMessage.
func (mr *MockChatgptHandlerMockRecorder) ChatMessage(ctx, messages, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMessage", reflect.TypeOf((*MockChatgptHandler)(nil).ChatMessage), ctx, messages, text)
}

// ChatNew mocks base method.
func (m *MockChatgptHandler) ChatNew(ctx context.Context, initPrompt string) ([]chatbotcall.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatNew", ctx, initPrompt)
	ret0, _ := ret[0].([]chatbotcall.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatNew indicates an expected call of ChatNew.
func (mr *MockChatgptHandlerMockRecorder) ChatNew(ctx, initPrompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatNew", reflect.TypeOf((*MockChatgptHandler)(nil).ChatNew), ctx, initPrompt)
}

// MessageSend mocks base method.
func (m *MockChatgptHandler) MessageSend(ctx context.Context, messages []chatbotcall.Message, role, text string) ([]chatbotcall.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSend", ctx, messages, role, text)
	ret0, _ := ret[0].([]chatbotcall.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageSend indicates an expected call of MessageSend.
func (mr *MockChatgptHandlerMockRecorder) MessageSend(ctx, messages, role, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSend", reflect.TypeOf((*MockChatgptHandler)(nil).MessageSend), ctx, messages, role, text)
}
