// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package chatbotcallhandler is a generated GoMock package.
package chatbotcallhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	chatbotcall "gitlab.com/voipbin/bin-manager/chatbot-manager.git/models/chatbotcall"
	service "gitlab.com/voipbin/bin-manager/chatbot-manager.git/models/service"
)

// MockChatbotcallHandler is a mock of ChatbotcallHandler interface.
type MockChatbotcallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotcallHandlerMockRecorder
}

// MockChatbotcallHandlerMockRecorder is the mock recorder for MockChatbotcallHandler.
type MockChatbotcallHandlerMockRecorder struct {
	mock *MockChatbotcallHandler
}

// NewMockChatbotcallHandler creates a new mock instance.
func NewMockChatbotcallHandler(ctrl *gomock.Controller) *MockChatbotcallHandler {
	mock := &MockChatbotcallHandler{ctrl: ctrl}
	mock.recorder = &MockChatbotcallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatbotcallHandler) EXPECT() *MockChatbotcallHandlerMockRecorder {
	return m.recorder
}

// ChatMessage mocks base method.
func (m *MockChatbotcallHandler) ChatMessage(ctx context.Context, cb *chatbotcall.Chatbotcall, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMessage", ctx, cb, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatMessage indicates an expected call of ChatMessage.
func (mr *MockChatbotcallHandlerMockRecorder) ChatMessage(ctx, cb, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMessage", reflect.TypeOf((*MockChatbotcallHandler)(nil).ChatMessage), ctx, cb, message)
}

// Delete mocks base method.
func (m *MockChatbotcallHandler) Delete(ctx context.Context, id uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockChatbotcallHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatbotcallHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockChatbotcallHandler) Get(ctx context.Context, id uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChatbotcallHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChatbotcallHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockChatbotcallHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockChatbotcallHandlerMockRecorder) GetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockChatbotcallHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// GetByTranscribeID mocks base method.
func (m *MockChatbotcallHandler) GetByTranscribeID(ctx context.Context, transcribeID uuid.UUID) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTranscribeID", ctx, transcribeID)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTranscribeID indicates an expected call of GetByTranscribeID.
func (mr *MockChatbotcallHandlerMockRecorder) GetByTranscribeID(ctx, transcribeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTranscribeID", reflect.TypeOf((*MockChatbotcallHandler)(nil).GetByTranscribeID), ctx, transcribeID)
}

// Gets mocks base method.
func (m *MockChatbotcallHandler) Gets(ctx context.Context, customerID uuid.UUID, size uint64, token string, filters map[string]string) ([]*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, size, token, filters)
	ret0, _ := ret[0].([]*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockChatbotcallHandlerMockRecorder) Gets(ctx, customerID, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockChatbotcallHandler)(nil).Gets), ctx, customerID, size, token, filters)
}

// ProcessEnd mocks base method.
func (m *MockChatbotcallHandler) ProcessEnd(ctx context.Context, cb *chatbotcall.Chatbotcall) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEnd", ctx, cb)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEnd indicates an expected call of ProcessEnd.
func (mr *MockChatbotcallHandlerMockRecorder) ProcessEnd(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEnd", reflect.TypeOf((*MockChatbotcallHandler)(nil).ProcessEnd), ctx, cb)
}

// ProcessStart mocks base method.
func (m *MockChatbotcallHandler) ProcessStart(ctx context.Context, cb *chatbotcall.Chatbotcall) (*chatbotcall.Chatbotcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStart", ctx, cb)
	ret0, _ := ret[0].(*chatbotcall.Chatbotcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessStart indicates an expected call of ProcessStart.
func (mr *MockChatbotcallHandlerMockRecorder) ProcessStart(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStart", reflect.TypeOf((*MockChatbotcallHandler)(nil).ProcessStart), ctx, cb)
}

// ServiceStart mocks base method.
func (m *MockChatbotcallHandler) ServiceStart(ctx context.Context, customerID, chatbotID, activeflowID uuid.UUID, referenceType chatbotcall.ReferenceType, referenceID uuid.UUID, gender chatbotcall.Gender, language string) (*service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStart", ctx, customerID, chatbotID, activeflowID, referenceType, referenceID, gender, language)
	ret0, _ := ret[0].(*service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStart indicates an expected call of ServiceStart.
func (mr *MockChatbotcallHandlerMockRecorder) ServiceStart(ctx, customerID, chatbotID, activeflowID, referenceType, referenceID, gender, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStart", reflect.TypeOf((*MockChatbotcallHandler)(nil).ServiceStart), ctx, customerID, chatbotID, activeflowID, referenceType, referenceID, gender, language)
}
