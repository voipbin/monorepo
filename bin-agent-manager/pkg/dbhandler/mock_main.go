// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -package dbhandler -destination ./mock_main.go -source main.go -build_flags=-mod=mod
//

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	agent "monorepo/bin-agent-manager/models/agent"
	address "monorepo/bin-common-handler/models/address"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
	isgomock struct{}
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AgentCreate mocks base method.
func (m *MockDBHandler) AgentCreate(ctx context.Context, a *agent.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentCreate indicates an expected call of AgentCreate.
func (mr *MockDBHandlerMockRecorder) AgentCreate(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCreate", reflect.TypeOf((*MockDBHandler)(nil).AgentCreate), ctx, a)
}

// AgentDelete mocks base method.
func (m *MockDBHandler) AgentDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentDelete indicates an expected call of AgentDelete.
func (mr *MockDBHandlerMockRecorder) AgentDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDelete", reflect.TypeOf((*MockDBHandler)(nil).AgentDelete), ctx, id)
}

// AgentGet mocks base method.
func (m *MockDBHandler) AgentGet(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGet", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGet indicates an expected call of AgentGet.
func (mr *MockDBHandlerMockRecorder) AgentGet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGet", reflect.TypeOf((*MockDBHandler)(nil).AgentGet), ctx, id)
}

// AgentGetByCustomerIDAndAddress mocks base method.
func (m *MockDBHandler) AgentGetByCustomerIDAndAddress(ctx context.Context, customerID uuid.UUID, address *address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGetByCustomerIDAndAddress", ctx, customerID, address)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGetByCustomerIDAndAddress indicates an expected call of AgentGetByCustomerIDAndAddress.
func (mr *MockDBHandlerMockRecorder) AgentGetByCustomerIDAndAddress(ctx, customerID, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGetByCustomerIDAndAddress", reflect.TypeOf((*MockDBHandler)(nil).AgentGetByCustomerIDAndAddress), ctx, customerID, address)
}

// AgentGetByUsername mocks base method.
func (m *MockDBHandler) AgentGetByUsername(ctx context.Context, username string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGetByUsername", ctx, username)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGetByUsername indicates an expected call of AgentGetByUsername.
func (mr *MockDBHandlerMockRecorder) AgentGetByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGetByUsername", reflect.TypeOf((*MockDBHandler)(nil).AgentGetByUsername), ctx, username)
}

// AgentGets mocks base method.
func (m *MockDBHandler) AgentGets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGets indicates an expected call of AgentGets.
func (mr *MockDBHandlerMockRecorder) AgentGets(ctx, size, token, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGets", reflect.TypeOf((*MockDBHandler)(nil).AgentGets), ctx, size, token, filters)
}

// AgentSetAddresses mocks base method.
func (m *MockDBHandler) AgentSetAddresses(ctx context.Context, id uuid.UUID, addresses []address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetAddresses", ctx, id, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetAddresses indicates an expected call of AgentSetAddresses.
func (mr *MockDBHandlerMockRecorder) AgentSetAddresses(ctx, id, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetAddresses", reflect.TypeOf((*MockDBHandler)(nil).AgentSetAddresses), ctx, id, addresses)
}

// AgentSetBasicInfo mocks base method.
func (m *MockDBHandler) AgentSetBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, ringMethod agent.RingMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetBasicInfo", ctx, id, name, detail, ringMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetBasicInfo indicates an expected call of AgentSetBasicInfo.
func (mr *MockDBHandlerMockRecorder) AgentSetBasicInfo(ctx, id, name, detail, ringMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).AgentSetBasicInfo), ctx, id, name, detail, ringMethod)
}

// AgentSetPasswordHash mocks base method.
func (m *MockDBHandler) AgentSetPasswordHash(ctx context.Context, id uuid.UUID, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetPasswordHash", ctx, id, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetPasswordHash indicates an expected call of AgentSetPasswordHash.
func (mr *MockDBHandlerMockRecorder) AgentSetPasswordHash(ctx, id, passwordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetPasswordHash", reflect.TypeOf((*MockDBHandler)(nil).AgentSetPasswordHash), ctx, id, passwordHash)
}

// AgentSetPermission mocks base method.
func (m *MockDBHandler) AgentSetPermission(ctx context.Context, id uuid.UUID, permission agent.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetPermission", ctx, id, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetPermission indicates an expected call of AgentSetPermission.
func (mr *MockDBHandlerMockRecorder) AgentSetPermission(ctx, id, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetPermission", reflect.TypeOf((*MockDBHandler)(nil).AgentSetPermission), ctx, id, permission)
}

// AgentSetStatus mocks base method.
func (m *MockDBHandler) AgentSetStatus(ctx context.Context, id uuid.UUID, status agent.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetStatus indicates an expected call of AgentSetStatus.
func (mr *MockDBHandlerMockRecorder) AgentSetStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetStatus", reflect.TypeOf((*MockDBHandler)(nil).AgentSetStatus), ctx, id, status)
}

// AgentSetTagIDs mocks base method.
func (m *MockDBHandler) AgentSetTagIDs(ctx context.Context, id uuid.UUID, tags []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetTagIDs", ctx, id, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetTagIDs indicates an expected call of AgentSetTagIDs.
func (mr *MockDBHandlerMockRecorder) AgentSetTagIDs(ctx, id, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetTagIDs", reflect.TypeOf((*MockDBHandler)(nil).AgentSetTagIDs), ctx, id, tags)
}
