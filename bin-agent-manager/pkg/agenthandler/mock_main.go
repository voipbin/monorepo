// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package agenthandler is a generated GoMock package.
package agenthandler

import (
	context "context"
	agent "monorepo/bin-agent-manager/models/agent"
	groupcall "monorepo/bin-call-manager/models/groupcall"
	address "monorepo/bin-common-handler/models/address"
	customer "monorepo/bin-customer-manager/models/customer"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockAgentHandler is a mock of AgentHandler interface.
type MockAgentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAgentHandlerMockRecorder
}

// MockAgentHandlerMockRecorder is the mock recorder for MockAgentHandler.
type MockAgentHandlerMockRecorder struct {
	mock *MockAgentHandler
}

// NewMockAgentHandler creates a new mock instance.
func NewMockAgentHandler(ctrl *gomock.Controller) *MockAgentHandler {
	mock := &MockAgentHandler{ctrl: ctrl}
	mock.recorder = &MockAgentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentHandler) EXPECT() *MockAgentHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgentHandler) Create(ctx context.Context, customerID uuid.UUID, username, password, name, detail string, ringMethod agent.RingMethod, permission agent.Permission, tagIDs []uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAgentHandlerMockRecorder) Create(ctx, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentHandler)(nil).Create), ctx, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
}

// Delete mocks base method.
func (m *MockAgentHandler) Delete(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentHandler)(nil).Delete), ctx, id)
}

// EventCustomerDeleted mocks base method.
func (m *MockAgentHandler) EventCustomerDeleted(ctx context.Context, cu *customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCustomerDeleted", ctx, cu)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCustomerDeleted indicates an expected call of EventCustomerDeleted.
func (mr *MockAgentHandlerMockRecorder) EventCustomerDeleted(ctx, cu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCustomerDeleted", reflect.TypeOf((*MockAgentHandler)(nil).EventCustomerDeleted), ctx, cu)
}

// EventGroupcallCreated mocks base method.
func (m *MockAgentHandler) EventGroupcallCreated(ctx context.Context, groupcall *groupcall.Groupcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventGroupcallCreated", ctx, groupcall)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventGroupcallCreated indicates an expected call of EventGroupcallCreated.
func (mr *MockAgentHandlerMockRecorder) EventGroupcallCreated(ctx, groupcall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventGroupcallCreated", reflect.TypeOf((*MockAgentHandler)(nil).EventGroupcallCreated), ctx, groupcall)
}

// EventGroupcallProgressing mocks base method.
func (m *MockAgentHandler) EventGroupcallProgressing(ctx context.Context, groupcall *groupcall.Groupcall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventGroupcallProgressing", ctx, groupcall)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventGroupcallProgressing indicates an expected call of EventGroupcallProgressing.
func (mr *MockAgentHandlerMockRecorder) EventGroupcallProgressing(ctx, groupcall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventGroupcallProgressing", reflect.TypeOf((*MockAgentHandler)(nil).EventGroupcallProgressing), ctx, groupcall)
}

// Get mocks base method.
func (m *MockAgentHandler) Get(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAgentHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAgentHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockAgentHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockAgentHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockAgentHandler)(nil).Gets), ctx, size, token, filters)
}

// GetsByCustomerIDAndAddress mocks base method.
func (m *MockAgentHandler) GetsByCustomerIDAndAddress(ctx context.Context, customerID uuid.UUID, addr address.Address) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerIDAndAddress", ctx, customerID, addr)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerIDAndAddress indicates an expected call of GetsByCustomerIDAndAddress.
func (mr *MockAgentHandlerMockRecorder) GetsByCustomerIDAndAddress(ctx, customerID, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerIDAndAddress", reflect.TypeOf((*MockAgentHandler)(nil).GetsByCustomerIDAndAddress), ctx, customerID, addr)
}

// Login mocks base method.
func (m *MockAgentHandler) Login(ctx context.Context, username, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAgentHandlerMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAgentHandler)(nil).Login), ctx, username, password)
}

// UpdateAddresses mocks base method.
func (m *MockAgentHandler) UpdateAddresses(ctx context.Context, id uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddresses", ctx, id, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddresses indicates an expected call of UpdateAddresses.
func (mr *MockAgentHandlerMockRecorder) UpdateAddresses(ctx, id, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddresses", reflect.TypeOf((*MockAgentHandler)(nil).UpdateAddresses), ctx, id, addresses)
}

// UpdateBasicInfo mocks base method.
func (m *MockAgentHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, ringMethod agent.RingMethod) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail, ringMethod)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockAgentHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail, ringMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockAgentHandler)(nil).UpdateBasicInfo), ctx, id, name, detail, ringMethod)
}

// UpdatePassword mocks base method.
func (m *MockAgentHandler) UpdatePassword(ctx context.Context, id uuid.UUID, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, id, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockAgentHandlerMockRecorder) UpdatePassword(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockAgentHandler)(nil).UpdatePassword), ctx, id, password)
}

// UpdatePermission mocks base method.
func (m *MockAgentHandler) UpdatePermission(ctx context.Context, id uuid.UUID, permission agent.Permission) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", ctx, id, permission)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockAgentHandlerMockRecorder) UpdatePermission(ctx, id, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockAgentHandler)(nil).UpdatePermission), ctx, id, permission)
}

// UpdateStatus mocks base method.
func (m *MockAgentHandler) UpdateStatus(ctx context.Context, id uuid.UUID, status agent.Status) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAgentHandlerMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAgentHandler)(nil).UpdateStatus), ctx, id, status)
}

// UpdateTagIDs mocks base method.
func (m *MockAgentHandler) UpdateTagIDs(ctx context.Context, id uuid.UUID, tags []uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagIDs", ctx, id, tags)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTagIDs indicates an expected call of UpdateTagIDs.
func (mr *MockAgentHandlerMockRecorder) UpdateTagIDs(ctx, id, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagIDs", reflect.TypeOf((*MockAgentHandler)(nil).UpdateTagIDs), ctx, id, tags)
}
