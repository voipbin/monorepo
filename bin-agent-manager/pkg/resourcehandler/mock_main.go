// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package resourcehandler is a generated GoMock package.
package resourcehandler

import (
	context "context"
	resource "monorepo/bin-agent-manager/models/resource"
	call "monorepo/bin-call-manager/models/call"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockResourceHandler is a mock of ResourceHandler interface.
type MockResourceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockResourceHandlerMockRecorder
}

// MockResourceHandlerMockRecorder is the mock recorder for MockResourceHandler.
type MockResourceHandlerMockRecorder struct {
	mock *MockResourceHandler
}

// NewMockResourceHandler creates a new mock instance.
func NewMockResourceHandler(ctrl *gomock.Controller) *MockResourceHandler {
	mock := &MockResourceHandler{ctrl: ctrl}
	mock.recorder = &MockResourceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceHandler) EXPECT() *MockResourceHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResourceHandler) Create(ctx context.Context, customerID, ownerID uuid.UUID, referenceType resource.ReferenceType, referenceID uuid.UUID, data interface{}) (*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, ownerID, referenceType, referenceID, data)
	ret0, _ := ret[0].(*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResourceHandlerMockRecorder) Create(ctx, customerID, ownerID, referenceType, referenceID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceHandler)(nil).Create), ctx, customerID, ownerID, referenceType, referenceID, data)
}

// Delete mocks base method.
func (m *MockResourceHandler) Delete(ctx context.Context, id uuid.UUID) (*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockResourceHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceHandler)(nil).Delete), ctx, id)
}

// EventCallDeleted mocks base method.
func (m *MockResourceHandler) EventCallDeleted(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCallDeleted", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCallDeleted indicates an expected call of EventCallDeleted.
func (mr *MockResourceHandlerMockRecorder) EventCallDeleted(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCallDeleted", reflect.TypeOf((*MockResourceHandler)(nil).EventCallDeleted), ctx, c)
}

// EventCallUpdated mocks base method.
func (m *MockResourceHandler) EventCallUpdated(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventCallUpdated", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventCallUpdated indicates an expected call of EventCallUpdated.
func (mr *MockResourceHandlerMockRecorder) EventCallUpdated(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventCallUpdated", reflect.TypeOf((*MockResourceHandler)(nil).EventCallUpdated), ctx, c)
}

// Get mocks base method.
func (m *MockResourceHandler) Get(ctx context.Context, id uuid.UUID) (*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockResourceHandler) Gets(ctx context.Context, size uint64, token string, filters map[string]string) ([]*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, size, token, filters)
	ret0, _ := ret[0].([]*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockResourceHandlerMockRecorder) Gets(ctx, size, token, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockResourceHandler)(nil).Gets), ctx, size, token, filters)
}

// UpdateData mocks base method.
func (m *MockResourceHandler) UpdateData(ctx context.Context, id uuid.UUID, data interface{}) (*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, id, data)
	ret0, _ := ret[0].(*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockResourceHandlerMockRecorder) UpdateData(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockResourceHandler)(nil).UpdateData), ctx, id, data)
}
