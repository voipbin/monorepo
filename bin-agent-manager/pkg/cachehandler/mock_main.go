// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	agent "monorepo/bin-agent-manager/models/agent"
	resource "monorepo/bin-agent-manager/models/resource"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// AgentGet mocks base method.
func (m *MockCacheHandler) AgentGet(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGet", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGet indicates an expected call of AgentGet.
func (mr *MockCacheHandlerMockRecorder) AgentGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGet", reflect.TypeOf((*MockCacheHandler)(nil).AgentGet), ctx, id)
}

// AgentSet mocks base method.
func (m *MockCacheHandler) AgentSet(ctx context.Context, u *agent.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSet", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSet indicates an expected call of AgentSet.
func (mr *MockCacheHandlerMockRecorder) AgentSet(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSet", reflect.TypeOf((*MockCacheHandler)(nil).AgentSet), ctx, u)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// ResourceGet mocks base method.
func (m *MockCacheHandler) ResourceGet(ctx context.Context, id uuid.UUID) (*resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceGet", ctx, id)
	ret0, _ := ret[0].(*resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceGet indicates an expected call of ResourceGet.
func (mr *MockCacheHandlerMockRecorder) ResourceGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceGet", reflect.TypeOf((*MockCacheHandler)(nil).ResourceGet), ctx, id)
}

// ResourceSet mocks base method.
func (m *MockCacheHandler) ResourceSet(ctx context.Context, u *resource.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSet", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResourceSet indicates an expected call of ResourceSet.
func (mr *MockCacheHandlerMockRecorder) ResourceSet(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSet", reflect.TypeOf((*MockCacheHandler)(nil).ResourceSet), ctx, u)
}
