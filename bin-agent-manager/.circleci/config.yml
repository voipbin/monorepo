version: 2.1

gitlab_context: &gitlab_context
  context: 
    - gitlab

jobs:
  ensure:
    docker:
      - image: cimg/go:1.22
    steps:
      - checkout
      - run:
          name: config the gitconfig
          command: |
            echo "" > ~/.gitconfig
            git config --global url."https://$CC_GITLAB_USERNAME:$CC_GITLAB_TOKEN@gitlab.com".insteadOf "https://gitlab.com"

      - run:
          name: Install dependencies and vendor
          command: |
            go mod download
            go mod vendor
            pwd
            ls -tlr

      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - ./*
            - ./.*

  test:
    docker:
      - image: cimg/go:1.22
    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: Install extra dependencies
          command: |
            sudo apt-get update && sudo apt install -y pkg-config libzmq5 libzmq3-dev libczmq4 libczmq-dev

      - run:
          name: Linting and vet
          command: |
            golangci-lint run -v --timeout 5m
            go vet $(go list ./...)

      - run:
          name: Testing
          command: |
            go test -coverprofile cp.out -v $(go list ./...)
            go tool cover -html=cp.out -o cp.html
            go tool cover -func=cp.out

      - run:
          name: Run gotestsum
          command: |
            gotestsum --junitfile test-results.xml

      - store_test_results:
          path: test-results.xml

  build:
    docker:
        - image: cimg/gcp:2024.03
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: Config service account
          command: |
              echo $CC_CGP_SERVICE_ACCOUNT > ./google_service_account.json
              gcloud auth activate-service-account --key-file=./google_service_account.json
              gcloud config set project $CC_GCP_PROJECT_ID
              gcloud container clusters get-credentials $CC_GCP_CLUSTER_NAME --zone $CC_GCP_CLUSTER_ZONE --project $CC_GCP_PROJECT_ID

      - run:
          name: Config registry
          command: |
              cat google_service_account.json | docker login -u _json_key_base64 --password-stdin pkg.dev
              gcloud auth activate-service-account --key-file=google_service_account.json
              gcloud auth configure-docker $CC_REGISTRY_LOCATION

      - run:
          name: Building Docker image and push
          command: |
            sed -i -e "s/GL_DEPLOY_USER/$CC_GITLAB_USERNAME/g" Dockerfile
            sed -i -e "s/GL_DEPLOY_TOKEN/$CC_GITLAB_TOKEN/g" Dockerfile
            docker build --tag $CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:$CIRCLE_SHA1 --tag $CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:latest .
            docker push $CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:$CIRCLE_SHA1

  release:
    docker:
      - image: google/cloud-sdk:debian_component_based
    steps:
      - checkout
      - run:
          name: Config service account
          command: |
              echo $CC_CGP_SERVICE_ACCOUNT > ./google_service_account.json
              gcloud auth activate-service-account --key-file=./google_service_account.json
              gcloud config set project $CC_GCP_PROJECT_ID
              gcloud container clusters get-credentials $CC_GCP_CLUSTER_NAME --zone $CC_GCP_CLUSTER_ZONE --project $CC_GCP_PROJECT_ID

      - run:
          name: Config registry
          command: |
              cat google_service_account.json | docker login -u _json_key_base64 --password-stdin pkg.dev
              gcloud auth activate-service-account --key-file=google_service_account.json
              gcloud auth configure-docker $CC_REGISTRY_LOCATION

      - run:
          name: Release
          command: |
            cd k8s
            kustomize edit set image api-manager-image=$CC_REGISTRY_LOCATION/$CC_GCP_PROJECT_ID/bin-manager/api-manager:$CIRCLE_SHA1
            kubectl apply -k ./ -v6

workflows:
  build_and_release:
    jobs:
      - ensure:
          <<: *gitlab_context
      - test:
          <<: *gitlab_context
          requires:
            - ensure
      - build:
          <<: *gitlab_context
          requires:
            - test
      - release-approval:
          type: approval
          requires:
            - build
      - release:
          <<: *gitlab_context
          requires:
            - build
            - release-approval
          # filters:
          #   branches:
          #     only: master
