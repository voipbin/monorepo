// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package servicehandler is a generated GoMock package.
package servicehandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceHandler is a mock of ServiceHandler interface.
type MockServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceHandlerMockRecorder
}

// MockServiceHandlerMockRecorder is the mock recorder for MockServiceHandler.
type MockServiceHandlerMockRecorder struct {
	mock *MockServiceHandler
}

// NewMockServiceHandler creates a new mock instance.
func NewMockServiceHandler(ctrl *gomock.Controller) *MockServiceHandler {
	mock := &MockServiceHandler{ctrl: ctrl}
	mock.recorder = &MockServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceHandler) EXPECT() *MockServiceHandlerMockRecorder {
	return m.recorder
}

// Conversation mocks base method.
func (m_2 *MockServiceHandler) Conversation(ctx context.Context, uri string, m []byte) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Conversation", ctx, uri, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Conversation indicates an expected call of Conversation.
func (mr *MockServiceHandlerMockRecorder) Conversation(ctx, uri, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conversation", reflect.TypeOf((*MockServiceHandler)(nil).Conversation), ctx, uri, m)
}

// Message mocks base method.
func (m_2 *MockServiceHandler) Message(ctx context.Context, uri string, m []byte) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Message", ctx, uri, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockServiceHandlerMockRecorder) Message(ctx, uri, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockServiceHandler)(nil).Message), ctx, uri, m)
}
